-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clefia_dec_clefia_dec_Pipeline_ClefiaGfn4Inv_label5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fin_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    fin_ce0 : OUT STD_LOGIC;
    fin_we0 : OUT STD_LOGIC;
    fin_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    fin_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    fin_ce1 : OUT STD_LOGIC;
    fin_we1 : OUT STD_LOGIC;
    fin_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    fin_load_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_load_out_ap_vld : OUT STD_LOGIC;
    fin_load_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_load_1_out_ap_vld : OUT STD_LOGIC;
    fin_load_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_load_2_out_ap_vld : OUT STD_LOGIC;
    fin_load_3_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_load_3_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_8_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_8_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_9_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_9_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_10_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_10_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_11_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_11_out_ap_vld : OUT STD_LOGIC;
    fin_load_8_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_load_8_out_ap_vld : OUT STD_LOGIC;
    fin_load_9_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_load_9_out_ap_vld : OUT STD_LOGIC;
    fin_load_10_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_load_10_out_ap_vld : OUT STD_LOGIC;
    fin_load_11_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_load_11_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_16_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_16_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_17_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_17_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_18_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_18_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_19_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_19_out_ap_vld : OUT STD_LOGIC;
    rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce0 : OUT STD_LOGIC;
    rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of clefia_dec_clefia_dec_Pipeline_ClefiaGfn4Inv_label5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv8_91 : STD_LOGIC_VECTOR (7 downto 0) := "10010001";
    constant ap_const_lv8_92 : STD_LOGIC_VECTOR (7 downto 0) := "10010010";
    constant ap_const_lv8_93 : STD_LOGIC_VECTOR (7 downto 0) := "10010011";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv8_94 : STD_LOGIC_VECTOR (7 downto 0) := "10010100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_95 : STD_LOGIC_VECTOR (7 downto 0) := "10010101";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv8_97 : STD_LOGIC_VECTOR (7 downto 0) := "10010111";
    constant ap_const_lv9_1F8 : STD_LOGIC_VECTOR (8 downto 0) := "111111000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal icmp_ln215_reg_2039 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage12 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal clefia_s0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_ce0 : STD_LOGIC;
    signal clefia_s0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_ce0 : STD_LOGIC;
    signal clefia_s1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_544 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal reg_548 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal reg_552 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal reg_556 : STD_LOGIC_VECTOR (7 downto 0);
    signal idx104_i_load_reg_1819 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal empty_fu_573_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_1836 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_addr_12_reg_1852 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal fin_addr_13_reg_1857 : STD_LOGIC_VECTOR (3 downto 0);
    signal fin_load_reg_1862 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_fu_588_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_reg_1868 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_load_1_reg_1878 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_addr_6_reg_1885 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal fin_addr_7_reg_1890 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln124_1_fu_604_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_1_reg_1895 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_load_2_reg_1905 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_load_3_reg_1912 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_addr_4_reg_1924 : STD_LOGIC_VECTOR (3 downto 0);
    signal fin_addr_5_reg_1929 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln124_2_fu_623_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_2_reg_1934 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_2_fu_676_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_2_reg_1949 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_6_fu_706_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_6_reg_1955 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_reg_1960 : STD_LOGIC_VECTOR (0 downto 0);
    signal fin_load_8_reg_1965 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_load_9_reg_1972 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_assign_load_reg_1979 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln124_3_fu_721_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_3_reg_1994 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_s_fu_764_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_s_reg_2004 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_7_fu_794_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_7_reg_2010 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_reg_2015 : STD_LOGIC_VECTOR (0 downto 0);
    signal fin_load_10_reg_2025 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_load_11_reg_2032 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln215_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_2_reg_2053 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_6_fu_860_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_6_reg_2063 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_2_fu_890_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_2_reg_2069 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_reg_2074 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln124_12_fu_902_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_12_reg_2079 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal xor_ln124_8_fu_1042_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_8_reg_2099 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_9_fu_1070_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_9_reg_2105 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_10_fu_1098_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_10_reg_2111 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_11_fu_1126_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_11_reg_2117 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_13_fu_1132_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_13_reg_2123 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_14_fu_1151_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_14_reg_2148 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_9_fu_1204_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_9_reg_2163 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_17_fu_1276_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_17_reg_2168 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_35_reg_2173 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln124_15_fu_1288_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_15_reg_2178 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_10_fu_1403_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_10_reg_2188 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_reg_2193 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln180_fu_1415_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln180_reg_2198 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_load_14_reg_2204 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_load_15_reg_2209 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_6_reg_2214 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal x_assign_5_fu_1458_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_5_reg_2224 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_19_fu_1530_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_19_reg_2230 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_39_reg_2235 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_7_fu_1576_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_7_reg_2240 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal trunc_ln134_14_fu_1648_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_14_reg_2245 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_29_reg_2250 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln124_17_fu_1695_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_17_reg_2255 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_19_fu_1717_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_19_reg_2261 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_16_fu_1758_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_16_reg_2266 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal xor_ln124_18_fu_1780_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_18_reg_2271 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln214_fu_1786_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln214_reg_2277 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln121_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_1_fu_599_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_2_fu_614_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_3_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln151_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_4_fu_811_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln153_fu_822_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_5_fu_912_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_6_fu_1142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_fu_1147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_7_fu_1161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_fu_1166_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_fu_1293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_fu_1420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idx104_i_fu_128 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_idx104_i_load : STD_LOGIC_VECTOR (8 downto 0);
    signal r_assign_fu_132 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln211_fu_1791_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln121_fu_577_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_1_fu_594_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_2_fu_609_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_3_fu_628_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_642_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_5_fu_650_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_5_fu_656_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_5_fu_664_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_fu_668_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_684_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_6_fu_692_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_6_fu_698_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_730_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_fu_738_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_fu_744_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_fu_752_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_756_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_772_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_7_fu_780_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_7_fu_786_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_4_fu_806_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_826_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_1_fu_834_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_1_fu_840_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_1_fu_848_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_852_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_868_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_2_fu_876_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_2_fu_882_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_5_fu_907_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_923_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_3_fu_931_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_3_fu_937_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_3_fu_945_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_949_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_1_fu_957_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_965_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_4_fu_973_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_4_fu_979_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_4_fu_987_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_991_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln124_4_fu_1019_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_2_fu_917_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_6_fu_1031_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_4_fu_999_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_7_fu_1036_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_5_fu_1025_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_20_fu_1048_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_22_fu_1060_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_23_fu_1064_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_21_fu_1054_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln1_fu_1013_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_24_fu_1076_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_6_fu_1007_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_26_fu_1087_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_27_fu_1092_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_25_fu_1082_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_28_fu_1104_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_30_fu_1116_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_31_fu_1121_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_29_fu_1110_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_6_fu_1137_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_7_fu_1156_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_1170_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_15_fu_1178_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_15_fu_1184_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_15_fu_1192_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_31_fu_1196_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_1212_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_16_fu_1220_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_16_fu_1226_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_16_fu_1234_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_33_fu_1238_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_10_fu_1246_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_fu_1254_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_17_fu_1262_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_17_fu_1268_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_1297_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_8_fu_1305_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_8_fu_1311_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_8_fu_1319_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_fu_1323_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_3_fu_1331_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_1339_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_9_fu_1347_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_9_fu_1353_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_9_fu_1361_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_fu_1365_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_4_fu_1373_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_1381_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_10_fu_1389_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_10_fu_1395_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_1424_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_11_fu_1432_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_11_fu_1438_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_11_fu_1446_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_1450_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_1466_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_18_fu_1474_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_18_fu_1480_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_18_fu_1488_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_37_fu_1492_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_11_fu_1500_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_fu_1508_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_19_fu_1516_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_19_fu_1522_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_1542_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_12_fu_1550_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_12_fu_1556_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_12_fu_1564_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_25_fu_1568_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1584_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_13_fu_1592_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_13_fu_1598_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_13_fu_1606_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_27_fu_1610_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_8_fu_1618_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_1626_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_14_fu_1634_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_14_fu_1640_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_36_fu_1672_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_1_fu_1660_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_38_fu_1684_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_3_fu_1666_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_39_fu_1689_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_37_fu_1678_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_44_fu_1706_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_45_fu_1711_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_43_fu_1701_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_32_fu_1736_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_9_fu_1724_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_34_fu_1747_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_s_fu_1730_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_35_fu_1752_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_33_fu_1741_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_41_fu_1769_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_42_fu_1774_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_40_fu_1765_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clefia_dec_clefia_dec_Pipeline_ClefiaGfn4Inv_label5_clefia_s0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_dec_clefia_dec_Pipeline_ClefiaGfn4Inv_label5_clefia_s1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_dec_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    clefia_s0_U : component clefia_dec_clefia_dec_Pipeline_ClefiaGfn4Inv_label5_clefia_s0_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s0_address0,
        ce0 => clefia_s0_ce0,
        q0 => clefia_s0_q0);

    clefia_s1_U : component clefia_dec_clefia_dec_Pipeline_ClefiaGfn4Inv_label5_clefia_s1_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s1_address0,
        ce0 => clefia_s1_ce0,
        q0 => clefia_s1_q0);

    flow_control_loop_pipe_sequential_init_U : component clefia_dec_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage12,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    idx104_i_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                idx104_i_fu_128 <= ap_const_lv9_0;
            elsif (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                idx104_i_fu_128 <= add_ln214_reg_2277;
            end if; 
        end if;
    end process;

    r_assign_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                r_assign_fu_132 <= ap_const_lv5_11;
            elsif (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                r_assign_fu_132 <= add_ln211_fu_1791_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln214_reg_2277 <= add_ln214_fu_1786_p2;
                xor_ln124_16_reg_2266 <= xor_ln124_16_fu_1758_p2;
                xor_ln124_18_reg_2271 <= xor_ln124_18_fu_1780_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                empty_reg_1836 <= empty_fu_573_p1;
                idx104_i_load_reg_1819 <= ap_sig_allocacmp_idx104_i_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                fin_load_10_reg_2025 <= fin_q1;
                fin_load_11_reg_2032 <= fin_q0;
                icmp_ln215_reg_2039 <= icmp_ln215_fu_816_p2;
                r_assign_load_reg_1979 <= r_assign_fu_132;
                tmp_15_reg_2015 <= select_ln131_7_fu_786_p3(7 downto 7);
                trunc_ln134_7_reg_2010 <= trunc_ln134_7_fu_794_p1;
                x_assign_s_reg_2004 <= x_assign_s_fu_764_p3;
                xor_ln124_3_reg_1994 <= xor_ln124_3_fu_721_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                fin_load_14_reg_2204 <= fin_q1;
                fin_load_15_reg_2209 <= fin_q0;
                tmp_21_reg_2193 <= select_ln131_10_fu_1395_p3(7 downto 7);
                trunc_ln134_10_reg_2188 <= trunc_ln134_10_fu_1403_p1;
                xor_ln124_15_reg_2178 <= xor_ln124_15_fu_1288_p2;
                xor_ln180_reg_2198 <= xor_ln180_fu_1415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                fin_load_1_reg_1878 <= fin_q0;
                fin_load_reg_1862 <= fin_q1;
                xor_ln124_reg_1868 <= xor_ln124_fu_588_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                fin_load_2_reg_1905 <= fin_q1;
                fin_load_3_reg_1912 <= fin_q0;
                xor_ln124_1_reg_1895 <= xor_ln124_1_fu_604_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                fin_load_8_reg_1965 <= fin_q1;
                fin_load_9_reg_1972 <= fin_q0;
                tmp_13_reg_1960 <= select_ln131_6_fu_698_p3(7 downto 7);
                trunc_ln134_6_reg_1955 <= trunc_ln134_6_fu_706_p1;
                x_assign_2_reg_1949 <= x_assign_2_fu_676_p3;
                xor_ln124_2_reg_1934 <= xor_ln124_2_fu_623_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_544 <= clefia_s0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_548 <= clefia_s1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_552 <= fin_q1;
                reg_556 <= fin_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_29_reg_2250 <= select_ln131_14_fu_1640_p3(7 downto 7);
                trunc_ln134_14_reg_2245 <= trunc_ln134_14_fu_1648_p1;
                x_assign_7_reg_2240 <= x_assign_7_fu_1576_p3;
                xor_ln124_17_reg_2255 <= xor_ln124_17_fu_1695_p2;
                xor_ln124_19_reg_2261 <= xor_ln124_19_fu_1717_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_35_reg_2173 <= select_ln131_17_fu_1268_p3(7 downto 7);
                trunc_ln134_17_reg_2168 <= trunc_ln134_17_fu_1276_p1;
                x_assign_9_reg_2163 <= x_assign_9_fu_1204_p3;
                xor_ln124_14_reg_2148 <= xor_ln124_14_fu_1151_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_39_reg_2235 <= select_ln131_19_fu_1522_p3(7 downto 7);
                trunc_ln134_19_reg_2230 <= trunc_ln134_19_fu_1530_p1;
                x_assign_5_reg_2224 <= x_assign_5_fu_1458_p3;
                z_6_reg_2214 <= clefia_s1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_5_reg_2074 <= select_ln131_2_fu_882_p3(7 downto 7);
                trunc_ln134_2_reg_2069 <= trunc_ln134_2_fu_890_p1;
                x_assign_6_reg_2063 <= x_assign_6_fu_860_p3;
                xor_ln124_12_reg_2079 <= xor_ln124_12_fu_902_p2;
                z_2_reg_2053 <= clefia_s0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                xor_ln124_10_reg_2111 <= xor_ln124_10_fu_1098_p2;
                xor_ln124_11_reg_2117 <= xor_ln124_11_fu_1126_p2;
                xor_ln124_13_reg_2123 <= xor_ln124_13_fu_1132_p2;
                xor_ln124_8_reg_2099 <= xor_ln124_8_fu_1042_p2;
                xor_ln124_9_reg_2105 <= xor_ln124_9_fu_1070_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state13, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln121_1_fu_594_p2 <= std_logic_vector(unsigned(empty_reg_1836) + unsigned(ap_const_lv8_91));
    add_ln121_2_fu_609_p2 <= std_logic_vector(unsigned(empty_reg_1836) + unsigned(ap_const_lv8_92));
    add_ln121_3_fu_628_p2 <= std_logic_vector(unsigned(empty_reg_1836) + unsigned(ap_const_lv8_93));
    add_ln121_4_fu_806_p2 <= std_logic_vector(unsigned(empty_reg_1836) + unsigned(ap_const_lv8_94));
    add_ln121_5_fu_907_p2 <= std_logic_vector(unsigned(empty_reg_1836) + unsigned(ap_const_lv8_95));
    add_ln121_6_fu_1137_p2 <= std_logic_vector(unsigned(empty_reg_1836) + unsigned(ap_const_lv8_96));
    add_ln121_7_fu_1156_p2 <= std_logic_vector(unsigned(empty_reg_1836) + unsigned(ap_const_lv8_97));
    add_ln121_fu_577_p2 <= std_logic_vector(unsigned(empty_fu_573_p1) + unsigned(ap_const_lv8_90));
    add_ln211_fu_1791_p2 <= std_logic_vector(unsigned(r_assign_load_reg_1979) + unsigned(ap_const_lv5_1F));
    add_ln214_fu_1786_p2 <= std_logic_vector(unsigned(idx104_i_load_reg_1819) + unsigned(ap_const_lv9_1F8));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage12_assign_proc : process(ap_CS_fsm_state13, icmp_ln215_reg_2039)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_condition_exit_pp0_iter0_stage12 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state13, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage12;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_idx104_i_load_assign_proc : process(ap_CS_fsm_state1, idx104_i_fu_128, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_idx104_i_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_idx104_i_load <= idx104_i_fu_128;
        end if; 
    end process;


    clefia_s0_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state10, zext_ln150_fu_619_p1, zext_ln152_fu_726_p1, zext_ln174_fu_1166_p1, zext_ln176_fu_1420_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            clefia_s0_address0 <= zext_ln176_fu_1420_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            clefia_s0_address0 <= zext_ln174_fu_1166_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            clefia_s0_address0 <= zext_ln152_fu_726_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            clefia_s0_address0 <= zext_ln150_fu_619_p1(8 - 1 downto 0);
        else 
            clefia_s0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s0_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            clefia_s0_ce0 <= ap_const_logic_1;
        else 
            clefia_s0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s1_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln151_fu_638_p1, zext_ln153_fu_822_p1, zext_ln173_fu_1147_p1, zext_ln175_fu_1293_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            clefia_s1_address0 <= zext_ln175_fu_1293_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            clefia_s1_address0 <= zext_ln173_fu_1147_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            clefia_s1_address0 <= zext_ln153_fu_822_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            clefia_s1_address0 <= zext_ln151_fu_638_p1(8 - 1 downto 0);
        else 
            clefia_s1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s1_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            clefia_s1_ce0 <= ap_const_logic_1;
        else 
            clefia_s1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_573_p1 <= ap_sig_allocacmp_idx104_i_load(8 - 1 downto 0);
    fin_addr_12_reg_1852 <= ap_const_lv64_3(4 - 1 downto 0);
    fin_addr_13_reg_1857 <= ap_const_lv64_2(4 - 1 downto 0);
    fin_addr_4_reg_1924 <= ap_const_lv64_B(4 - 1 downto 0);
    fin_addr_5_reg_1929 <= ap_const_lv64_A(4 - 1 downto 0);
    fin_addr_6_reg_1885 <= ap_const_lv64_9(4 - 1 downto 0);
    fin_addr_7_reg_1890 <= ap_const_lv64_8(4 - 1 downto 0);

    fin_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln215_reg_2039, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, fin_addr_12_reg_1852, ap_CS_fsm_state2, fin_addr_6_reg_1885, ap_CS_fsm_state3, fin_addr_4_reg_1924, icmp_ln215_fu_816_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            fin_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            fin_address0 <= fin_addr_12_reg_1852;
        elsif (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            fin_address0 <= fin_addr_4_reg_1924;
        elsif (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            fin_address0 <= fin_addr_6_reg_1885;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            fin_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            fin_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            fin_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln215_fu_816_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            fin_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fin_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fin_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fin_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            fin_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            fin_address0 <= "XXXX";
        end if; 
    end process;


    fin_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, icmp_ln215_reg_2039, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state2, fin_addr_13_reg_1857, ap_CS_fsm_state3, fin_addr_7_reg_1890, fin_addr_5_reg_1929, icmp_ln215_fu_816_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_address1 <= fin_addr_13_reg_1857;
        elsif (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            fin_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            fin_address1 <= fin_addr_5_reg_1929;
        elsif (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            fin_address1 <= fin_addr_7_reg_1890;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            fin_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            fin_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            fin_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln215_fu_816_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            fin_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fin_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fin_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fin_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            fin_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            fin_address1 <= "XXXX";
        end if; 
    end process;


    fin_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln215_reg_2039, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln215_fu_816_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln215_fu_816_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            fin_ce0 <= ap_const_logic_1;
        else 
            fin_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fin_ce1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, icmp_ln215_reg_2039, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln215_fu_816_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln215_fu_816_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            fin_ce1 <= ap_const_logic_1;
        else 
            fin_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    fin_d0_assign_proc : process(icmp_ln215_reg_2039, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, fin_load_1_reg_1878, fin_load_3_reg_1912, fin_load_9_reg_1972, fin_load_11_reg_2032, icmp_ln215_fu_816_p2, ap_CS_fsm_state7, xor_ln124_9_reg_2105, xor_ln124_11_reg_2117, ap_CS_fsm_state10, ap_CS_fsm_state11, xor_ln124_19_fu_1717_p2, xor_ln124_16_fu_1758_p2, ap_CS_fsm_state12)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            fin_d0 <= xor_ln124_16_fu_1758_p2;
        elsif (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            fin_d0 <= xor_ln124_19_fu_1717_p2;
        elsif (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            fin_d0 <= xor_ln124_11_reg_2117;
        elsif (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            fin_d0 <= xor_ln124_9_reg_2105;
        elsif (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            fin_d0 <= fin_load_11_reg_2032;
        elsif (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            fin_d0 <= fin_load_9_reg_1972;
        elsif (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            fin_d0 <= fin_load_3_reg_1912;
        elsif (((icmp_ln215_fu_816_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            fin_d0 <= fin_load_1_reg_1878;
        else 
            fin_d0 <= "XXXXXXXX";
        end if; 
    end process;


    fin_d1_assign_proc : process(ap_CS_fsm_state13, icmp_ln215_reg_2039, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, fin_load_reg_1862, fin_load_2_reg_1905, fin_load_8_reg_1965, fin_load_10_reg_2025, icmp_ln215_fu_816_p2, ap_CS_fsm_state7, xor_ln124_8_reg_2099, xor_ln124_10_reg_2111, ap_CS_fsm_state10, xor_ln124_17_reg_2255, ap_CS_fsm_state12, xor_ln124_18_reg_2271)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_d1 <= xor_ln124_18_reg_2271;
        elsif (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            fin_d1 <= xor_ln124_17_reg_2255;
        elsif (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            fin_d1 <= xor_ln124_10_reg_2111;
        elsif (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            fin_d1 <= xor_ln124_8_reg_2099;
        elsif (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            fin_d1 <= fin_load_10_reg_2025;
        elsif (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            fin_d1 <= fin_load_8_reg_1965;
        elsif (((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            fin_d1 <= fin_load_2_reg_1905;
        elsif (((icmp_ln215_fu_816_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            fin_d1 <= fin_load_reg_1862;
        else 
            fin_d1 <= "XXXXXXXX";
        end if; 
    end process;

    fin_load_10_out <= fin_load_10_reg_2025;

    fin_load_10_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln215_reg_2039)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_load_10_out_ap_vld <= ap_const_logic_1;
        else 
            fin_load_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_load_11_out <= fin_load_11_reg_2032;

    fin_load_11_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln215_reg_2039)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_load_11_out_ap_vld <= ap_const_logic_1;
        else 
            fin_load_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_load_1_out <= fin_load_1_reg_1878;

    fin_load_1_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln215_reg_2039)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_load_1_out_ap_vld <= ap_const_logic_1;
        else 
            fin_load_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_load_2_out <= fin_load_2_reg_1905;

    fin_load_2_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln215_reg_2039)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_load_2_out_ap_vld <= ap_const_logic_1;
        else 
            fin_load_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_load_3_out <= fin_load_3_reg_1912;

    fin_load_3_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln215_reg_2039)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_load_3_out_ap_vld <= ap_const_logic_1;
        else 
            fin_load_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_load_8_out <= fin_load_8_reg_1965;

    fin_load_8_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln215_reg_2039)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_load_8_out_ap_vld <= ap_const_logic_1;
        else 
            fin_load_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_load_9_out <= fin_load_9_reg_1972;

    fin_load_9_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln215_reg_2039)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_load_9_out_ap_vld <= ap_const_logic_1;
        else 
            fin_load_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_load_out <= fin_load_reg_1862;

    fin_load_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln215_reg_2039)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_load_out_ap_vld <= ap_const_logic_1;
        else 
            fin_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    fin_we0_assign_proc : process(icmp_ln215_reg_2039, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, icmp_ln215_fu_816_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((((icmp_ln215_fu_816_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            fin_we0 <= ap_const_logic_1;
        else 
            fin_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fin_we1_assign_proc : process(ap_CS_fsm_state13, icmp_ln215_reg_2039, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, icmp_ln215_fu_816_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((((icmp_ln215_fu_816_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln215_reg_2039 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            fin_we1 <= ap_const_logic_1;
        else 
            fin_we1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln215_fu_816_p2 <= "1" when (r_assign_fu_132 = ap_const_lv5_0) else "0";
    or_ln134_1_fu_1660_p3 <= (trunc_ln134_17_reg_2168 & tmp_35_reg_2173);
    or_ln134_2_fu_917_p3 <= (trunc_ln134_2_reg_2069 & tmp_5_reg_2074);
    or_ln134_3_fu_1666_p3 <= (trunc_ln134_19_reg_2230 & tmp_39_reg_2235);
    or_ln134_4_fu_999_p3 <= (trunc_ln134_4_fu_987_p1 & tmp_9_fu_991_p3);
    or_ln134_6_fu_1007_p3 <= (trunc_ln134_6_reg_1955 & tmp_13_reg_1960);
    or_ln134_9_fu_1724_p3 <= (trunc_ln134_10_reg_2188 & tmp_21_reg_2193);
    or_ln134_s_fu_1730_p3 <= (trunc_ln134_14_reg_2245 & tmp_29_reg_2250);
    or_ln1_fu_1013_p3 <= (trunc_ln134_7_reg_2010 & tmp_15_reg_2015);

    rk_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state7, zext_ln121_fu_583_p1, zext_ln121_1_fu_599_p1, zext_ln121_2_fu_614_p1, zext_ln121_3_fu_633_p1, zext_ln121_4_fu_811_p1, zext_ln121_5_fu_912_p1, zext_ln121_6_fu_1142_p1, zext_ln121_7_fu_1161_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            rk_address0 <= zext_ln121_7_fu_1161_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rk_address0 <= zext_ln121_6_fu_1142_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rk_address0 <= zext_ln121_5_fu_912_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rk_address0 <= zext_ln121_4_fu_811_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rk_address0 <= zext_ln121_3_fu_633_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rk_address0 <= zext_ln121_2_fu_614_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rk_address0 <= zext_ln121_1_fu_599_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            rk_address0 <= zext_ln121_fu_583_p1(8 - 1 downto 0);
        else 
            rk_address0 <= "XXXXXXXX";
        end if; 
    end process;


    rk_ce0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            rk_ce0 <= ap_const_logic_1;
        else 
            rk_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln131_10_fu_1395_p3 <= 
        xor_ln132_10_fu_1389_p2 when (tmp_20_fu_1381_p3(0) = '1') else 
        x_assign_4_fu_1373_p3;
    select_ln131_11_fu_1438_p3 <= 
        xor_ln132_11_fu_1432_p2 when (tmp_22_fu_1424_p3(0) = '1') else 
        clefia_s1_q0;
    select_ln131_12_fu_1556_p3 <= 
        xor_ln132_12_fu_1550_p2 when (tmp_24_fu_1542_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_13_fu_1598_p3 <= 
        xor_ln132_13_fu_1592_p2 when (tmp_26_fu_1584_p3(0) = '1') else 
        x_assign_7_fu_1576_p3;
    select_ln131_14_fu_1640_p3 <= 
        xor_ln132_14_fu_1634_p2 when (tmp_28_fu_1626_p3(0) = '1') else 
        x_assign_8_fu_1618_p3;
    select_ln131_15_fu_1184_p3 <= 
        xor_ln132_15_fu_1178_p2 when (tmp_30_fu_1170_p3(0) = '1') else 
        clefia_s1_q0;
    select_ln131_16_fu_1226_p3 <= 
        xor_ln132_16_fu_1220_p2 when (tmp_32_fu_1212_p3(0) = '1') else 
        x_assign_9_fu_1204_p3;
    select_ln131_17_fu_1268_p3 <= 
        xor_ln132_17_fu_1262_p2 when (tmp_34_fu_1254_p3(0) = '1') else 
        x_assign_10_fu_1246_p3;
    select_ln131_18_fu_1480_p3 <= 
        xor_ln132_18_fu_1474_p2 when (tmp_36_fu_1466_p3(0) = '1') else 
        x_assign_5_fu_1458_p3;
    select_ln131_19_fu_1522_p3 <= 
        xor_ln132_19_fu_1516_p2 when (tmp_38_fu_1508_p3(0) = '1') else 
        x_assign_11_fu_1500_p3;
    select_ln131_1_fu_840_p3 <= 
        xor_ln132_1_fu_834_p2 when (tmp_2_fu_826_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_2_fu_882_p3 <= 
        xor_ln132_2_fu_876_p2 when (tmp_4_fu_868_p3(0) = '1') else 
        x_assign_6_fu_860_p3;
    select_ln131_3_fu_937_p3 <= 
        xor_ln132_3_fu_931_p2 when (tmp_6_fu_923_p3(0) = '1') else 
        clefia_s1_q0;
    select_ln131_4_fu_979_p3 <= 
        xor_ln132_4_fu_973_p2 when (tmp_8_fu_965_p3(0) = '1') else 
        x_assign_1_fu_957_p3;
    select_ln131_5_fu_656_p3 <= 
        xor_ln132_5_fu_650_p2 when (tmp_10_fu_642_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_6_fu_698_p3 <= 
        xor_ln132_6_fu_692_p2 when (tmp_12_fu_684_p3(0) = '1') else 
        x_assign_2_fu_676_p3;
    select_ln131_7_fu_786_p3 <= 
        xor_ln132_7_fu_780_p2 when (tmp_14_fu_772_p3(0) = '1') else 
        x_assign_s_fu_764_p3;
    select_ln131_8_fu_1311_p3 <= 
        xor_ln132_8_fu_1305_p2 when (tmp_16_fu_1297_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_9_fu_1353_p3 <= 
        xor_ln132_9_fu_1347_p2 when (tmp_18_fu_1339_p3(0) = '1') else 
        x_assign_3_fu_1331_p3;
    select_ln131_fu_744_p3 <= 
        xor_ln132_fu_738_p2 when (tmp_fu_730_p3(0) = '1') else 
        clefia_s1_q0;
    tmp_10_fu_642_p3 <= clefia_s0_q0(7 downto 7);
    tmp_11_fu_668_p3 <= select_ln131_5_fu_656_p3(7 downto 7);
    tmp_12_fu_684_p3 <= select_ln131_5_fu_656_p3(6 downto 6);
    tmp_14_fu_772_p3 <= select_ln131_fu_744_p3(6 downto 6);
    tmp_16_fu_1297_p3 <= clefia_s0_q0(7 downto 7);
    tmp_17_fu_1323_p3 <= select_ln131_8_fu_1311_p3(7 downto 7);
    tmp_18_fu_1339_p3 <= select_ln131_8_fu_1311_p3(6 downto 6);
    tmp_19_fu_1365_p3 <= select_ln131_9_fu_1353_p3(7 downto 7);
    tmp_1_fu_756_p3 <= select_ln131_fu_744_p3(7 downto 7);
    tmp_20_fu_1381_p3 <= select_ln131_9_fu_1353_p3(6 downto 6);
    tmp_22_fu_1424_p3 <= clefia_s1_q0(7 downto 7);
    tmp_23_fu_1450_p3 <= select_ln131_11_fu_1438_p3(7 downto 7);
    tmp_24_fu_1542_p3 <= clefia_s0_q0(7 downto 7);
    tmp_25_fu_1568_p3 <= select_ln131_12_fu_1556_p3(7 downto 7);
    tmp_26_fu_1584_p3 <= select_ln131_12_fu_1556_p3(6 downto 6);
    tmp_27_fu_1610_p3 <= select_ln131_13_fu_1598_p3(7 downto 7);
    tmp_28_fu_1626_p3 <= select_ln131_13_fu_1598_p3(6 downto 6);
    tmp_2_fu_826_p3 <= clefia_s0_q0(7 downto 7);
    tmp_30_fu_1170_p3 <= clefia_s1_q0(7 downto 7);
    tmp_31_fu_1196_p3 <= select_ln131_15_fu_1184_p3(7 downto 7);
    tmp_32_fu_1212_p3 <= select_ln131_15_fu_1184_p3(6 downto 6);
    tmp_33_fu_1238_p3 <= select_ln131_16_fu_1226_p3(7 downto 7);
    tmp_34_fu_1254_p3 <= select_ln131_16_fu_1226_p3(6 downto 6);
    tmp_36_fu_1466_p3 <= select_ln131_11_fu_1438_p3(6 downto 6);
    tmp_37_fu_1492_p3 <= select_ln131_18_fu_1480_p3(7 downto 7);
    tmp_38_fu_1508_p3 <= select_ln131_18_fu_1480_p3(6 downto 6);
    tmp_3_fu_852_p3 <= select_ln131_1_fu_840_p3(7 downto 7);
    tmp_4_fu_868_p3 <= select_ln131_1_fu_840_p3(6 downto 6);
    tmp_6_fu_923_p3 <= clefia_s1_q0(7 downto 7);
    tmp_7_fu_949_p3 <= select_ln131_3_fu_937_p3(7 downto 7);
    tmp_8_fu_965_p3 <= select_ln131_3_fu_937_p3(6 downto 6);
    tmp_9_fu_991_p3 <= select_ln131_4_fu_979_p3(7 downto 7);
    tmp_fu_730_p3 <= clefia_s1_q0(7 downto 7);
    trunc_ln134_10_fu_1403_p1 <= select_ln131_10_fu_1395_p3(7 - 1 downto 0);
    trunc_ln134_11_fu_1446_p1 <= select_ln131_11_fu_1438_p3(7 - 1 downto 0);
    trunc_ln134_12_fu_1564_p1 <= select_ln131_12_fu_1556_p3(7 - 1 downto 0);
    trunc_ln134_13_fu_1606_p1 <= select_ln131_13_fu_1598_p3(7 - 1 downto 0);
    trunc_ln134_14_fu_1648_p1 <= select_ln131_14_fu_1640_p3(7 - 1 downto 0);
    trunc_ln134_15_fu_1192_p1 <= select_ln131_15_fu_1184_p3(7 - 1 downto 0);
    trunc_ln134_16_fu_1234_p1 <= select_ln131_16_fu_1226_p3(7 - 1 downto 0);
    trunc_ln134_17_fu_1276_p1 <= select_ln131_17_fu_1268_p3(7 - 1 downto 0);
    trunc_ln134_18_fu_1488_p1 <= select_ln131_18_fu_1480_p3(7 - 1 downto 0);
    trunc_ln134_19_fu_1530_p1 <= select_ln131_19_fu_1522_p3(7 - 1 downto 0);
    trunc_ln134_1_fu_848_p1 <= select_ln131_1_fu_840_p3(7 - 1 downto 0);
    trunc_ln134_2_fu_890_p1 <= select_ln131_2_fu_882_p3(7 - 1 downto 0);
    trunc_ln134_3_fu_945_p1 <= select_ln131_3_fu_937_p3(7 - 1 downto 0);
    trunc_ln134_4_fu_987_p1 <= select_ln131_4_fu_979_p3(7 - 1 downto 0);
    trunc_ln134_5_fu_664_p1 <= select_ln131_5_fu_656_p3(7 - 1 downto 0);
    trunc_ln134_6_fu_706_p1 <= select_ln131_6_fu_698_p3(7 - 1 downto 0);
    trunc_ln134_7_fu_794_p1 <= select_ln131_7_fu_786_p3(7 - 1 downto 0);
    trunc_ln134_8_fu_1319_p1 <= select_ln131_8_fu_1311_p3(7 - 1 downto 0);
    trunc_ln134_9_fu_1361_p1 <= select_ln131_9_fu_1353_p3(7 - 1 downto 0);
    trunc_ln134_fu_752_p1 <= select_ln131_fu_744_p3(7 - 1 downto 0);
    x_assign_10_fu_1246_p3 <= (trunc_ln134_16_fu_1234_p1 & tmp_33_fu_1238_p3);
    x_assign_11_fu_1500_p3 <= (trunc_ln134_18_fu_1488_p1 & tmp_37_fu_1492_p3);
    x_assign_1_fu_957_p3 <= (trunc_ln134_3_fu_945_p1 & tmp_7_fu_949_p3);
    x_assign_2_fu_676_p3 <= (trunc_ln134_5_fu_664_p1 & tmp_11_fu_668_p3);
    x_assign_3_fu_1331_p3 <= (trunc_ln134_8_fu_1319_p1 & tmp_17_fu_1323_p3);
    x_assign_4_fu_1373_p3 <= (trunc_ln134_9_fu_1361_p1 & tmp_19_fu_1365_p3);
    x_assign_5_fu_1458_p3 <= (trunc_ln134_11_fu_1446_p1 & tmp_23_fu_1450_p3);
    x_assign_6_fu_860_p3 <= (trunc_ln134_1_fu_848_p1 & tmp_3_fu_852_p3);
    x_assign_7_fu_1576_p3 <= (trunc_ln134_12_fu_1564_p1 & tmp_25_fu_1568_p3);
    x_assign_8_fu_1618_p3 <= (trunc_ln134_13_fu_1606_p1 & tmp_27_fu_1610_p3);
    x_assign_9_fu_1204_p3 <= (trunc_ln134_15_fu_1192_p1 & tmp_31_fu_1196_p3);
    x_assign_s_fu_764_p3 <= (trunc_ln134_fu_752_p1 & tmp_1_fu_756_p3);
    xor_ln124_10_fu_1098_p2 <= (xor_ln124_27_fu_1092_p2 xor xor_ln124_25_fu_1082_p2);
    xor_ln124_10_out <= xor_ln124_10_reg_2111;

    xor_ln124_10_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln215_reg_2039)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_10_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_11_fu_1126_p2 <= (xor_ln124_31_fu_1121_p2 xor xor_ln124_29_fu_1110_p2);
    xor_ln124_11_out <= xor_ln124_11_reg_2117;

    xor_ln124_11_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln215_reg_2039)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_11_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_12_fu_902_p2 <= (rk_q0 xor fin_load_8_reg_1965);
    xor_ln124_13_fu_1132_p2 <= (rk_q0 xor fin_load_9_reg_1972);
    xor_ln124_14_fu_1151_p2 <= (rk_q0 xor fin_load_10_reg_2025);
    xor_ln124_15_fu_1288_p2 <= (rk_q0 xor fin_load_11_reg_2032);
    xor_ln124_16_fu_1758_p2 <= (xor_ln124_35_fu_1752_p2 xor xor_ln124_33_fu_1741_p2);
    xor_ln124_16_out <= xor_ln124_16_reg_2266;

    xor_ln124_16_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln215_reg_2039)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_16_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_16_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_17_fu_1695_p2 <= (xor_ln124_39_fu_1689_p2 xor xor_ln124_37_fu_1678_p2);
    xor_ln124_17_out <= xor_ln124_17_reg_2255;

    xor_ln124_17_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln215_reg_2039)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_17_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_17_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_18_fu_1780_p2 <= (xor_ln124_42_fu_1774_p2 xor xor_ln124_40_fu_1765_p2);
    xor_ln124_18_out <= xor_ln124_18_reg_2271;

    xor_ln124_18_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln215_reg_2039)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_18_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_18_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_19_fu_1717_p2 <= (xor_ln124_45_fu_1711_p2 xor xor_ln124_43_fu_1701_p2);
    xor_ln124_19_out <= xor_ln124_19_reg_2261;

    xor_ln124_19_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln215_reg_2039)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_19_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_19_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_1_fu_604_p2 <= (rk_q0 xor fin_load_1_reg_1878);
    xor_ln124_20_fu_1048_p2 <= (reg_556 xor or_ln134_2_fu_917_p3);
    xor_ln124_21_fu_1054_p2 <= (xor_ln124_20_fu_1048_p2 xor reg_548);
    xor_ln124_22_fu_1060_p2 <= (x_assign_6_reg_2063 xor x_assign_2_reg_1949);
    xor_ln124_23_fu_1064_p2 <= (xor_ln124_22_fu_1060_p2 xor or_ln134_4_fu_999_p3);
    xor_ln124_24_fu_1076_p2 <= (or_ln1_fu_1013_p3 xor fin_q1);
    xor_ln124_25_fu_1082_p2 <= (z_2_reg_2053 xor xor_ln124_24_fu_1076_p2);
    xor_ln124_26_fu_1087_p2 <= (x_assign_s_reg_2004 xor or_ln134_6_fu_1007_p3);
    xor_ln124_27_fu_1092_p2 <= (xor_ln124_26_fu_1087_p2 xor x_assign_1_fu_957_p3);
    xor_ln124_28_fu_1104_p2 <= (or_ln1_fu_1013_p3 xor fin_q0);
    xor_ln124_29_fu_1110_p2 <= (xor_ln124_28_fu_1104_p2 xor clefia_s1_q0);
    xor_ln124_2_fu_623_p2 <= (rk_q0 xor fin_load_2_reg_1905);
    xor_ln124_30_fu_1116_p2 <= (x_assign_2_reg_1949 xor or_ln134_6_fu_1007_p3);
    xor_ln124_31_fu_1121_p2 <= (xor_ln124_30_fu_1116_p2 xor x_assign_6_reg_2063);
    xor_ln124_32_fu_1736_p2 <= (x_assign_7_reg_2240 xor reg_552);
    xor_ln124_33_fu_1741_p2 <= (xor_ln124_32_fu_1736_p2 xor reg_548);
    xor_ln124_34_fu_1747_p2 <= (x_assign_5_reg_2224 xor or_ln134_9_fu_1724_p3);
    xor_ln124_35_fu_1752_p2 <= (xor_ln124_34_fu_1747_p2 xor or_ln134_s_fu_1730_p3);
    xor_ln124_36_fu_1672_p2 <= (x_assign_7_fu_1576_p3 xor reg_556);
    xor_ln124_37_fu_1678_p2 <= (xor_ln124_36_fu_1672_p2 xor reg_544);
    xor_ln124_38_fu_1684_p2 <= (x_assign_5_reg_2224 xor or_ln134_1_fu_1660_p3);
    xor_ln124_39_fu_1689_p2 <= (xor_ln124_38_fu_1684_p2 xor or_ln134_3_fu_1666_p3);
    xor_ln124_3_fu_721_p2 <= (rk_q0 xor fin_load_3_reg_1912);
    xor_ln124_40_fu_1765_p2 <= (z_6_reg_2214 xor fin_load_14_reg_2204);
    xor_ln124_41_fu_1769_p2 <= (xor_ln180_reg_2198 xor or_ln134_s_fu_1730_p3);
    xor_ln124_42_fu_1774_p2 <= (xor_ln124_41_fu_1769_p2 xor or_ln134_9_fu_1724_p3);
    xor_ln124_43_fu_1701_p2 <= (fin_load_15_reg_2209 xor clefia_s0_q0);
    xor_ln124_44_fu_1706_p2 <= (xor_ln180_reg_2198 xor or_ln134_3_fu_1666_p3);
    xor_ln124_45_fu_1711_p2 <= (xor_ln124_44_fu_1706_p2 xor or_ln134_1_fu_1660_p3);
    xor_ln124_4_fu_1019_p2 <= (x_assign_1_fu_957_p3 xor reg_552);
    xor_ln124_5_fu_1025_p2 <= (xor_ln124_4_fu_1019_p2 xor reg_544);
    xor_ln124_6_fu_1031_p2 <= (x_assign_s_reg_2004 xor or_ln134_2_fu_917_p3);
    xor_ln124_7_fu_1036_p2 <= (xor_ln124_6_fu_1031_p2 xor or_ln134_4_fu_999_p3);
    xor_ln124_8_fu_1042_p2 <= (xor_ln124_7_fu_1036_p2 xor xor_ln124_5_fu_1025_p2);
    xor_ln124_8_out <= xor_ln124_8_reg_2099;

    xor_ln124_8_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln215_reg_2039)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_8_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_9_fu_1070_p2 <= (xor_ln124_23_fu_1064_p2 xor xor_ln124_21_fu_1054_p2);
    xor_ln124_9_out <= xor_ln124_9_reg_2105;

    xor_ln124_9_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln215_reg_2039)
    begin
        if (((icmp_ln215_reg_2039 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_9_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_fu_588_p2 <= (rk_q0 xor fin_q1);
    xor_ln132_10_fu_1389_p2 <= (x_assign_4_fu_1373_p3 xor ap_const_lv8_E);
    xor_ln132_11_fu_1432_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln132_12_fu_1550_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_13_fu_1592_p2 <= (x_assign_7_fu_1576_p3 xor ap_const_lv8_E);
    xor_ln132_14_fu_1634_p2 <= (x_assign_8_fu_1618_p3 xor ap_const_lv8_E);
    xor_ln132_15_fu_1178_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln132_16_fu_1220_p2 <= (x_assign_9_fu_1204_p3 xor ap_const_lv8_E);
    xor_ln132_17_fu_1262_p2 <= (x_assign_10_fu_1246_p3 xor ap_const_lv8_E);
    xor_ln132_18_fu_1474_p2 <= (x_assign_5_fu_1458_p3 xor ap_const_lv8_E);
    xor_ln132_19_fu_1516_p2 <= (x_assign_11_fu_1500_p3 xor ap_const_lv8_E);
    xor_ln132_1_fu_834_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_2_fu_876_p2 <= (x_assign_6_fu_860_p3 xor ap_const_lv8_E);
    xor_ln132_3_fu_931_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln132_4_fu_973_p2 <= (x_assign_1_fu_957_p3 xor ap_const_lv8_E);
    xor_ln132_5_fu_650_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_6_fu_692_p2 <= (x_assign_2_fu_676_p3 xor ap_const_lv8_E);
    xor_ln132_7_fu_780_p2 <= (x_assign_s_fu_764_p3 xor ap_const_lv8_E);
    xor_ln132_8_fu_1305_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_9_fu_1347_p2 <= (x_assign_3_fu_1331_p3 xor ap_const_lv8_E);
    xor_ln132_fu_738_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln180_fu_1415_p2 <= (x_assign_9_reg_2163 xor x_assign_3_fu_1331_p3);
    zext_ln121_1_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_1_fu_594_p2),64));
    zext_ln121_2_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_2_fu_609_p2),64));
    zext_ln121_3_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_3_fu_628_p2),64));
    zext_ln121_4_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_4_fu_806_p2),64));
    zext_ln121_5_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_5_fu_907_p2),64));
    zext_ln121_6_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_6_fu_1137_p2),64));
    zext_ln121_7_fu_1161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_7_fu_1156_p2),64));
    zext_ln121_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_fu_577_p2),64));
    zext_ln150_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_reg_1868),64));
    zext_ln151_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_1_reg_1895),64));
    zext_ln152_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_2_reg_1934),64));
    zext_ln153_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_3_reg_1994),64));
    zext_ln173_fu_1147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_12_reg_2079),64));
    zext_ln174_fu_1166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_13_reg_2123),64));
    zext_ln175_fu_1293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_14_reg_2148),64));
    zext_ln176_fu_1420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_15_reg_2178),64));
end behav;
