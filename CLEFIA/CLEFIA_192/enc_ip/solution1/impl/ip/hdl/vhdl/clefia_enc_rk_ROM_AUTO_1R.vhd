-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Tool Version Limit: 2022.04
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity clefia_enc_rk_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 8; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 192
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of clefia_enc_rk_ROM_AUTO_1R is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00001111", 1 => "00001110", 2 => "00001101", 3 => "00001100", 
    4 => "00001011", 5 => "00001010", 6 => "00001001", 7 => "00001000", 
    8 => "01001101", 9 => "00111011", 10 => "11111101", 11 => "00011011", 
    12 => "01111010", 13 => "00011111", 14 => "01011101", 15 => "11111010", 
    16 => "00001111", 17 => "10101110", 18 => "01101110", 19 => "01111100", 
    20 => "11001000", 21 => "10111111", 22 => "00110010", 23 => "00110111", 
    24 => "01110011", 25 => "11000010", 26 => "11101110", 27 => "10111000", 
    28 => "11011101", 29 => "01000010", 30 => "10011110", 31 => "11000101", 
    32 => "11100010", 33 => "00100000", 34 => "10110011", 35 => "10101111", 
    36 => "11001001", 37 => "00010011", 38 => "01011110", 39 => "01110011", 
    40 => "00111000", 41 => "11000100", 42 => "01101010", 43 => "00000111", 
    44 => "11111100", 45 => "00101100", 46 => "11100100", 47 => "10111010", 
    48 => "00110111", 49 => "00001010", 50 => "10111111", 51 => "00101101", 
    52 => "10110000", 53 => "01011110", 54 => "01100010", 55 => "01111011", 
    56 => "00111000", 57 => "00110101", 58 => "00011011", 59 => "00101111", 
    60 => "01110100", 61 => "10111101", 62 => "01101110", 63 => "00011110", 
    64 => "00011011", 65 => "01111100", 66 => "01111101", 67 => "11001110", 
    68 => "10010010", 69 => "11001111", 70 => "11001001", 71 => "10001110", 
    72 => "01010000", 73 => "10011011", 74 => "00110001", 75 => "10100110", 
    76 => "01001100", 77 => "01011010", 78 => "11010101", 79 => "00111100", 
    80 => "01101111", 81 => "11000010", 82 => "10111010", 83 => "00110011", 
    84 => "11100001", 85 => "11100101", 86 => "11001000", 87 => "01111000", 
    88 => "01000001", 89 => "10011010", 90 => "01110100", 91 => "10111001", 
    92 => "00011101", 93 => "11010111", 94 => "10011110", 95 => "00001110", 
    96 => "00100100", 97 => "00001010", 98 => "00110011", 99 => "11010010", 
    100 => "10011101", 101 => "10101011", 102 => "11111101", 103 => "00001001", 
    104 => "01101110", 105 => "00111111", 106 => "11111000", 107 => "00101010", 
    108 => "01110100", 109 => "10101100", 110 => "00111111", 111 => "11111101", 
    112 => "10111001", 113 => "01101001", 114 => "01101110", 115 => "00101110", 
    116 => "11001100", 117 => "00001011", 118 => "00111010", 119 => "00111000", 
    120 => "11101101", 121 => "01111000", 122 => "01011100", 123 => "10111101", 
    124 => "10011100", 125 => "00000111", 126 => "01111100", 127 => "00010011", 
    128 => "00000100", 129 => "10010111", 130 => "10001101", 131 => "10000011", 
    132 => "00101110", 133 => "11000000", 134 => "01011000", 135 => "10111010", 
    136 => "01001011", 137 => "10111101", 138 => "01011111", 139 => "01101010", 
    140 => "00110001", 141 => "11111110", 142 => "10001101", 143 => "11101000", 
    144 => "10110111", 145 => "01101101", 146 => "10100101", 147 => "01110100", 
    148 => "00111010", 149 => "01101111", 150 => "10101000", 151 => "11100111", 
    152 => "01010010", 153 => "00010010", 154 => "00010011", 155 => "11001110", 
    156 => "01001111", 157 => "00011111", 158 => "01011001", 159 => "11011000", 
    160 => "11000001", 161 => "00110110", 162 => "00100100", 163 => "11110110", 
    164 => "11101110", 165 => "10010001", 166 => "11110110", 167 => "10100100", 
    168 => "00010111", 169 => "11110110", 170 => "10001111", 171 => "11011110", 
    172 => "11110110", 173 => "11000011", 174 => "01100000", 175 => "10101001", 
    176 => "01100010", 177 => "10001000", 178 => "10111100", 179 => "01110010", 
    180 => "11000000", 181 => "10101101", 182 => "10000101", 183 => "01101011", 
    184 to 191=> "01110111" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

