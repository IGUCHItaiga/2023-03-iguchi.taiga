-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clefia_ClefiaF1Xor is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dst_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_ce1 : OUT STD_LOGIC;
    dst_we1 : OUT STD_LOGIC;
    dst_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    src_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    src_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    src_ce1 : OUT STD_LOGIC;
    src_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce0 : OUT STD_LOGIC;
    rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_offset : IN STD_LOGIC_VECTOR (6 downto 0) );
end;


architecture behav of clefia_ClefiaF1Xor is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal clefia_s1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_ce0 : STD_LOGIC;
    signal clefia_s1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_ce0 : STD_LOGIC;
    signal clefia_s0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_297 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_302_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_308 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal rk_offset_read_reg_979 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal rk_offset_cast_fu_317_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_offset_cast_reg_999 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_fu_320_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_reg_1005 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_load_24_reg_1030 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_reg_1045 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_17_fu_400_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_17_reg_1055 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_42_fu_472_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_42_reg_1060 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_95_reg_1065 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln124_3_fu_484_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_3_reg_1070 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_10_reg_1075 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_35_fu_600_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_35_reg_1085 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_81_reg_1090 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln180_fu_612_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln180_reg_1095 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_11_reg_1101 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_14_fu_655_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_14_reg_1111 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_44_fu_727_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_44_reg_1117 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_99_reg_1122 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_12_reg_1127 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_15_fu_773_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_15_reg_1132 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_39_fu_845_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_39_reg_1138 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_89_reg_1143 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_857_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_reg_1158 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_4_fu_863_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_4_reg_1163 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_7_fu_869_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_7_reg_1168 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_9_fu_875_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_9_reg_1173 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal rk_offset_cast1_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln121_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln121_87_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln173_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_88_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln174_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_fu_617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln124_47_fu_902_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_48_fu_930_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_49_fu_951_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_50_fu_972_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_fu_326_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_52_fu_337_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_53_fu_351_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_90_fu_366_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_40_fu_374_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_40_fu_380_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_40_fu_388_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_91_fu_392_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_92_fu_408_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_41_fu_416_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_41_fu_422_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_41_fu_430_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_93_fu_434_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_18_fu_442_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_94_fu_450_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_42_fu_458_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_42_fu_464_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_494_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_fu_502_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_fu_508_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_fu_516_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_77_fu_520_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_s_fu_528_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_78_fu_536_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_34_fu_544_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_34_fu_550_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_34_fu_558_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_79_fu_562_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_13_fu_570_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_80_fu_578_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_35_fu_586_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_35_fu_592_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_82_fu_621_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_36_fu_629_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_36_fu_635_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_36_fu_643_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_83_fu_647_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_96_fu_663_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_43_fu_671_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_43_fu_677_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_43_fu_685_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_97_fu_689_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_19_fu_697_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_98_fu_705_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_44_fu_713_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_44_fu_719_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_84_fu_739_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_37_fu_747_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_37_fu_753_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_37_fu_761_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_85_fu_765_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_fu_781_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_38_fu_789_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_38_fu_795_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_38_fu_803_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_87_fu_807_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_16_fu_815_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_88_fu_823_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_39_fu_831_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_39_fu_837_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_78_fu_881_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_80_fu_891_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_81_fu_896_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_79_fu_886_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_82_fu_909_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_84_fu_920_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_85_fu_925_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_83_fu_915_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_87_fu_942_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_88_fu_946_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_86_fu_937_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_90_fu_963_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_91_fu_967_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_89_fu_958_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    clefia_s1_U : component clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s1_address0,
        ce0 => clefia_s1_ce0,
        q0 => clefia_s1_q0);

    clefia_s0_U : component clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s0_address0,
        ce0 => clefia_s0_ce0,
        q0 => clefia_s0_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    reg_297 <= src_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    reg_297 <= src_q0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                or_ln134_4_reg_1163 <= or_ln134_4_fu_863_p3;
                or_ln134_7_reg_1168 <= or_ln134_7_fu_869_p3;
                or_ln134_9_reg_1173 <= or_ln134_9_fu_875_p3;
                or_ln_reg_1158 <= or_ln_fu_857_p3;
                tmp_95_reg_1065 <= select_ln131_42_fu_464_p3(7 downto 7);
                trunc_ln134_42_reg_1060 <= trunc_ln134_42_fu_472_p1;
                x_assign_17_reg_1055 <= x_assign_17_fu_400_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then
                reg_308 <= grp_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    rk_offset_cast_reg_999(6 downto 0) <= rk_offset_cast_fu_317_p1(6 downto 0);
                tmp_99_reg_1122 <= select_ln131_44_fu_719_p3(7 downto 7);
                trunc_ln134_44_reg_1117 <= trunc_ln134_44_fu_727_p1;
                x_assign_14_reg_1111 <= x_assign_14_fu_655_p3;
                xor_ln124_reg_1005 <= xor_ln124_fu_320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                rk_offset_read_reg_979 <= rk_offset;
                tmp_81_reg_1090 <= select_ln131_35_fu_592_p3(7 downto 7);
                trunc_ln134_35_reg_1085 <= trunc_ln134_35_fu_600_p1;
                xor_ln124_3_reg_1070 <= xor_ln124_3_fu_484_p2;
                xor_ln180_reg_1095 <= xor_ln180_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                src_load_24_reg_1030 <= src_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_89_reg_1143 <= select_ln131_39_fu_837_p3(7 downto 7);
                trunc_ln134_39_reg_1138 <= trunc_ln134_39_fu_845_p1;
                x_assign_15_reg_1132 <= x_assign_15_fu_773_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                z_10_reg_1075 <= clefia_s0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                z_11_reg_1101 <= clefia_s1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                z_12_reg_1127 <= clefia_s0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                z_reg_1045 <= clefia_s1_q0;
            end if;
        end if;
    end process;
    rk_offset_cast_reg_999(7) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln121_52_fu_337_p2 <= std_logic_vector(unsigned(rk_offset_cast_reg_999) + unsigned(ap_const_lv8_2));
    add_ln121_53_fu_351_p2 <= std_logic_vector(unsigned(rk_offset_cast_reg_999) + unsigned(ap_const_lv8_3));
    add_ln121_fu_326_p2 <= std_logic_vector(unsigned(rk_offset_cast_fu_317_p1) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s0_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage3, zext_ln174_fu_361_p1, zext_ln176_fu_617_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            clefia_s0_address0 <= zext_ln176_fu_617_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            clefia_s0_address0 <= zext_ln174_fu_361_p1(8 - 1 downto 0);
        else 
            clefia_s0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            clefia_s0_ce0 <= ap_const_logic_1;
        else 
            clefia_s0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, zext_ln173_fu_347_p1, zext_ln175_fu_489_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            clefia_s1_address0 <= zext_ln175_fu_489_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            clefia_s1_address0 <= zext_ln173_fu_347_p1(8 - 1 downto 0);
        else 
            clefia_s1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            clefia_s1_ce0 <= ap_const_logic_1;
        else 
            clefia_s1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dst_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dst_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        else 
            dst_address0 <= "XXXX";
        end if; 
    end process;


    dst_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dst_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dst_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        else 
            dst_address1 <= "XXXX";
        end if; 
    end process;


    dst_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_ce1 <= ap_const_logic_1;
        else 
            dst_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dst_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, src_q0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, xor_ln124_48_fu_930_p2, xor_ln124_50_fu_972_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_d0 <= xor_ln124_50_fu_972_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_d0 <= xor_ln124_48_fu_930_p2;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_d0 <= src_q0;
        else 
            dst_d0 <= "XXXXXXXX";
        end if; 
    end process;


    dst_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, src_q1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, xor_ln124_47_fu_902_p2, xor_ln124_49_fu_951_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_d1 <= xor_ln124_49_fu_951_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_d1 <= xor_ln124_47_fu_902_p2;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_d1 <= src_q1;
        else 
            dst_d1 <= "XXXXXXXX";
        end if; 
    end process;


    dst_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_we1 <= ap_const_logic_1;
        else 
            dst_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_302_p2 <= (rk_q0 xor reg_297);
    or_ln134_4_fu_863_p3 <= (trunc_ln134_39_reg_1138 & tmp_89_reg_1143);
    or_ln134_7_fu_869_p3 <= (trunc_ln134_42_reg_1060 & tmp_95_reg_1065);
    or_ln134_9_fu_875_p3 <= (trunc_ln134_44_reg_1117 & tmp_99_reg_1122);
    or_ln_fu_857_p3 <= (trunc_ln134_35_reg_1085 & tmp_81_reg_1090);

    rk_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, rk_offset_cast1_fu_312_p1, ap_block_pp0_stage0, zext_ln121_fu_332_p1, ap_block_pp0_stage1, zext_ln121_87_fu_342_p1, ap_block_pp0_stage2, zext_ln121_88_fu_356_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                rk_address0 <= zext_ln121_88_fu_356_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                rk_address0 <= zext_ln121_87_fu_342_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                rk_address0 <= zext_ln121_fu_332_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                rk_address0 <= rk_offset_cast1_fu_312_p1(8 - 1 downto 0);
            else 
                rk_address0 <= "XXXXXXXX";
            end if;
        else 
            rk_address0 <= "XXXXXXXX";
        end if; 
    end process;


    rk_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            rk_ce0 <= ap_const_logic_1;
        else 
            rk_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rk_offset_cast1_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rk_offset),64));
    rk_offset_cast_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rk_offset_read_reg_979),8));
    select_ln131_34_fu_550_p3 <= 
        xor_ln132_34_fu_544_p2 when (tmp_78_fu_536_p3(0) = '1') else 
        x_assign_s_fu_528_p3;
    select_ln131_35_fu_592_p3 <= 
        xor_ln132_35_fu_586_p2 when (tmp_80_fu_578_p3(0) = '1') else 
        x_assign_13_fu_570_p3;
    select_ln131_36_fu_635_p3 <= 
        xor_ln132_36_fu_629_p2 when (tmp_82_fu_621_p3(0) = '1') else 
        clefia_s1_q0;
    select_ln131_37_fu_753_p3 <= 
        xor_ln132_37_fu_747_p2 when (tmp_84_fu_739_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_38_fu_795_p3 <= 
        xor_ln132_38_fu_789_p2 when (tmp_86_fu_781_p3(0) = '1') else 
        x_assign_15_fu_773_p3;
    select_ln131_39_fu_837_p3 <= 
        xor_ln132_39_fu_831_p2 when (tmp_88_fu_823_p3(0) = '1') else 
        x_assign_16_fu_815_p3;
    select_ln131_40_fu_380_p3 <= 
        xor_ln132_40_fu_374_p2 when (tmp_90_fu_366_p3(0) = '1') else 
        clefia_s1_q0;
    select_ln131_41_fu_422_p3 <= 
        xor_ln132_41_fu_416_p2 when (tmp_92_fu_408_p3(0) = '1') else 
        x_assign_17_fu_400_p3;
    select_ln131_42_fu_464_p3 <= 
        xor_ln132_42_fu_458_p2 when (tmp_94_fu_450_p3(0) = '1') else 
        x_assign_18_fu_442_p3;
    select_ln131_43_fu_677_p3 <= 
        xor_ln132_43_fu_671_p2 when (tmp_96_fu_663_p3(0) = '1') else 
        x_assign_14_fu_655_p3;
    select_ln131_44_fu_719_p3 <= 
        xor_ln132_44_fu_713_p2 when (tmp_98_fu_705_p3(0) = '1') else 
        x_assign_19_fu_697_p3;
    select_ln131_fu_508_p3 <= 
        xor_ln132_fu_502_p2 when (tmp_fu_494_p3(0) = '1') else 
        clefia_s0_q0;

    src_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            src_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            src_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            src_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        else 
            src_address0 <= "XXXX";
        end if; 
    end process;


    src_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            src_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            src_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            src_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        else 
            src_address1 <= "XXXX";
        end if; 
    end process;


    src_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            src_ce1 <= ap_const_logic_1;
        else 
            src_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_77_fu_520_p3 <= select_ln131_fu_508_p3(7 downto 7);
    tmp_78_fu_536_p3 <= select_ln131_fu_508_p3(6 downto 6);
    tmp_79_fu_562_p3 <= select_ln131_34_fu_550_p3(7 downto 7);
    tmp_80_fu_578_p3 <= select_ln131_34_fu_550_p3(6 downto 6);
    tmp_82_fu_621_p3 <= clefia_s1_q0(7 downto 7);
    tmp_83_fu_647_p3 <= select_ln131_36_fu_635_p3(7 downto 7);
    tmp_84_fu_739_p3 <= clefia_s0_q0(7 downto 7);
    tmp_85_fu_765_p3 <= select_ln131_37_fu_753_p3(7 downto 7);
    tmp_86_fu_781_p3 <= select_ln131_37_fu_753_p3(6 downto 6);
    tmp_87_fu_807_p3 <= select_ln131_38_fu_795_p3(7 downto 7);
    tmp_88_fu_823_p3 <= select_ln131_38_fu_795_p3(6 downto 6);
    tmp_90_fu_366_p3 <= clefia_s1_q0(7 downto 7);
    tmp_91_fu_392_p3 <= select_ln131_40_fu_380_p3(7 downto 7);
    tmp_92_fu_408_p3 <= select_ln131_40_fu_380_p3(6 downto 6);
    tmp_93_fu_434_p3 <= select_ln131_41_fu_422_p3(7 downto 7);
    tmp_94_fu_450_p3 <= select_ln131_41_fu_422_p3(6 downto 6);
    tmp_96_fu_663_p3 <= select_ln131_36_fu_635_p3(6 downto 6);
    tmp_97_fu_689_p3 <= select_ln131_43_fu_677_p3(7 downto 7);
    tmp_98_fu_705_p3 <= select_ln131_43_fu_677_p3(6 downto 6);
    tmp_fu_494_p3 <= clefia_s0_q0(7 downto 7);
    trunc_ln134_34_fu_558_p1 <= select_ln131_34_fu_550_p3(7 - 1 downto 0);
    trunc_ln134_35_fu_600_p1 <= select_ln131_35_fu_592_p3(7 - 1 downto 0);
    trunc_ln134_36_fu_643_p1 <= select_ln131_36_fu_635_p3(7 - 1 downto 0);
    trunc_ln134_37_fu_761_p1 <= select_ln131_37_fu_753_p3(7 - 1 downto 0);
    trunc_ln134_38_fu_803_p1 <= select_ln131_38_fu_795_p3(7 - 1 downto 0);
    trunc_ln134_39_fu_845_p1 <= select_ln131_39_fu_837_p3(7 - 1 downto 0);
    trunc_ln134_40_fu_388_p1 <= select_ln131_40_fu_380_p3(7 - 1 downto 0);
    trunc_ln134_41_fu_430_p1 <= select_ln131_41_fu_422_p3(7 - 1 downto 0);
    trunc_ln134_42_fu_472_p1 <= select_ln131_42_fu_464_p3(7 - 1 downto 0);
    trunc_ln134_43_fu_685_p1 <= select_ln131_43_fu_677_p3(7 - 1 downto 0);
    trunc_ln134_44_fu_727_p1 <= select_ln131_44_fu_719_p3(7 - 1 downto 0);
    trunc_ln134_fu_516_p1 <= select_ln131_fu_508_p3(7 - 1 downto 0);
    x_assign_13_fu_570_p3 <= (trunc_ln134_34_fu_558_p1 & tmp_79_fu_562_p3);
    x_assign_14_fu_655_p3 <= (trunc_ln134_36_fu_643_p1 & tmp_83_fu_647_p3);
    x_assign_15_fu_773_p3 <= (trunc_ln134_37_fu_761_p1 & tmp_85_fu_765_p3);
    x_assign_16_fu_815_p3 <= (trunc_ln134_38_fu_803_p1 & tmp_87_fu_807_p3);
    x_assign_17_fu_400_p3 <= (trunc_ln134_40_fu_388_p1 & tmp_91_fu_392_p3);
    x_assign_18_fu_442_p3 <= (trunc_ln134_41_fu_430_p1 & tmp_93_fu_434_p3);
    x_assign_19_fu_697_p3 <= (trunc_ln134_43_fu_685_p1 & tmp_97_fu_689_p3);
    x_assign_s_fu_528_p3 <= (trunc_ln134_fu_516_p1 & tmp_77_fu_520_p3);
    xor_ln124_3_fu_484_p2 <= (src_load_24_reg_1030 xor rk_q0);
    xor_ln124_47_fu_902_p2 <= (xor_ln124_81_fu_896_p2 xor xor_ln124_79_fu_886_p2);
    xor_ln124_48_fu_930_p2 <= (xor_ln124_85_fu_925_p2 xor xor_ln124_83_fu_915_p2);
    xor_ln124_49_fu_951_p2 <= (xor_ln124_88_fu_946_p2 xor xor_ln124_86_fu_937_p2);
    xor_ln124_50_fu_972_p2 <= (xor_ln124_91_fu_967_p2 xor xor_ln124_89_fu_958_p2);
    xor_ln124_78_fu_881_p2 <= (x_assign_14_reg_1111 xor src_q1);
    xor_ln124_79_fu_886_p2 <= (z_reg_1045 xor xor_ln124_78_fu_881_p2);
    xor_ln124_80_fu_891_p2 <= (x_assign_15_reg_1132 xor or_ln134_4_fu_863_p3);
    xor_ln124_81_fu_896_p2 <= (xor_ln124_80_fu_891_p2 xor or_ln_fu_857_p3);
    xor_ln124_82_fu_909_p2 <= (src_q0 xor or_ln134_7_fu_869_p3);
    xor_ln124_83_fu_915_p2 <= (z_10_reg_1075 xor xor_ln124_82_fu_909_p2);
    xor_ln124_84_fu_920_p2 <= (x_assign_15_reg_1132 xor or_ln134_9_fu_875_p3);
    xor_ln124_85_fu_925_p2 <= (xor_ln124_84_fu_920_p2 xor x_assign_14_reg_1111);
    xor_ln124_86_fu_937_p2 <= (z_11_reg_1101 xor src_q1);
    xor_ln124_87_fu_942_p2 <= (or_ln_reg_1158 xor or_ln134_4_reg_1163);
    xor_ln124_88_fu_946_p2 <= (xor_ln180_reg_1095 xor xor_ln124_87_fu_942_p2);
    xor_ln124_89_fu_958_p2 <= (z_12_reg_1127 xor src_q0);
    xor_ln124_90_fu_963_p2 <= (or_ln134_9_reg_1173 xor or_ln134_7_reg_1168);
    xor_ln124_91_fu_967_p2 <= (xor_ln180_reg_1095 xor xor_ln124_90_fu_963_p2);
    xor_ln124_fu_320_p2 <= (src_q1 xor rk_q0);
    xor_ln132_34_fu_544_p2 <= (x_assign_s_fu_528_p3 xor ap_const_lv8_E);
    xor_ln132_35_fu_586_p2 <= (x_assign_13_fu_570_p3 xor ap_const_lv8_E);
    xor_ln132_36_fu_629_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln132_37_fu_747_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_38_fu_789_p2 <= (x_assign_15_fu_773_p3 xor ap_const_lv8_E);
    xor_ln132_39_fu_831_p2 <= (x_assign_16_fu_815_p3 xor ap_const_lv8_E);
    xor_ln132_40_fu_374_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln132_41_fu_416_p2 <= (x_assign_17_fu_400_p3 xor ap_const_lv8_E);
    xor_ln132_42_fu_458_p2 <= (x_assign_18_fu_442_p3 xor ap_const_lv8_E);
    xor_ln132_43_fu_671_p2 <= (x_assign_14_fu_655_p3 xor ap_const_lv8_E);
    xor_ln132_44_fu_713_p2 <= (x_assign_19_fu_697_p3 xor ap_const_lv8_E);
    xor_ln132_fu_502_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln180_fu_612_p2 <= (x_assign_s_fu_528_p3 xor x_assign_17_reg_1055);
    zext_ln121_87_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_52_fu_337_p2),64));
    zext_ln121_88_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_53_fu_351_p2),64));
    zext_ln121_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_fu_326_p2),64));
    zext_ln173_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_reg_1005),64));
    zext_ln174_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_308),64));
    zext_ln175_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_308),64));
    zext_ln176_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_3_reg_1070),64));
end behav;
