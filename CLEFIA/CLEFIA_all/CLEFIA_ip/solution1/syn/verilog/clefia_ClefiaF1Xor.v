// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clefia_ClefiaF1Xor (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0,
        dst_address1,
        dst_ce1,
        dst_we1,
        dst_d1,
        src_address0,
        src_ce0,
        src_q0,
        src_address1,
        src_ce1,
        src_q1,
        rk_address0,
        rk_ce0,
        rk_q0,
        rk_offset
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [7:0] dst_d0;
output  [3:0] dst_address1;
output   dst_ce1;
output   dst_we1;
output  [7:0] dst_d1;
output  [3:0] src_address0;
output   src_ce0;
input  [7:0] src_q0;
output  [3:0] src_address1;
output   src_ce1;
input  [7:0] src_q1;
output  [7:0] rk_address0;
output   rk_ce0;
input  [7:0] rk_q0;
input  [6:0] rk_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] dst_address0;
reg dst_ce0;
reg dst_we0;
reg[7:0] dst_d0;
reg[3:0] dst_address1;
reg dst_ce1;
reg dst_we1;
reg[7:0] dst_d1;
reg[3:0] src_address0;
reg src_ce0;
reg[3:0] src_address1;
reg src_ce1;
reg[7:0] rk_address0;
reg rk_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state8_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
reg   [7:0] clefia_s1_address0;
reg    clefia_s1_ce0;
wire   [7:0] clefia_s1_q0;
reg   [7:0] clefia_s0_address0;
reg    clefia_s0_ce0;
wire   [7:0] clefia_s0_q0;
reg   [7:0] reg_297;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [7:0] grp_fu_302_p2;
reg   [7:0] reg_308;
wire    ap_block_pp0_stage3_11001;
reg   [6:0] rk_offset_read_reg_979;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] rk_offset_cast_fu_317_p1;
reg   [7:0] rk_offset_cast_reg_999;
wire   [7:0] xor_ln124_fu_320_p2;
reg   [7:0] xor_ln124_reg_1005;
reg   [7:0] src_load_24_reg_1030;
reg   [7:0] z_reg_1045;
wire   [7:0] x_assign_17_fu_400_p3;
reg   [7:0] x_assign_17_reg_1055;
wire   [6:0] trunc_ln134_42_fu_472_p1;
reg   [6:0] trunc_ln134_42_reg_1060;
reg   [0:0] tmp_95_reg_1065;
wire   [7:0] xor_ln124_3_fu_484_p2;
reg   [7:0] xor_ln124_3_reg_1070;
reg   [7:0] z_10_reg_1075;
wire   [6:0] trunc_ln134_35_fu_600_p1;
reg   [6:0] trunc_ln134_35_reg_1085;
reg   [0:0] tmp_81_reg_1090;
wire   [7:0] xor_ln180_fu_612_p2;
reg   [7:0] xor_ln180_reg_1095;
reg   [7:0] z_11_reg_1101;
wire   [7:0] x_assign_14_fu_655_p3;
reg   [7:0] x_assign_14_reg_1111;
wire   [6:0] trunc_ln134_44_fu_727_p1;
reg   [6:0] trunc_ln134_44_reg_1117;
reg   [0:0] tmp_99_reg_1122;
reg   [7:0] z_12_reg_1127;
wire   [7:0] x_assign_15_fu_773_p3;
reg   [7:0] x_assign_15_reg_1132;
wire   [6:0] trunc_ln134_39_fu_845_p1;
reg   [6:0] trunc_ln134_39_reg_1138;
reg   [0:0] tmp_89_reg_1143;
wire   [7:0] or_ln_fu_857_p3;
reg   [7:0] or_ln_reg_1158;
wire   [7:0] or_ln134_4_fu_863_p3;
reg   [7:0] or_ln134_4_reg_1163;
wire   [7:0] or_ln134_7_fu_869_p3;
reg   [7:0] or_ln134_7_reg_1168;
wire   [7:0] or_ln134_9_fu_875_p3;
reg   [7:0] or_ln134_9_reg_1173;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] rk_offset_cast1_fu_312_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln121_fu_332_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln121_87_fu_342_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln173_fu_347_p1;
wire   [63:0] zext_ln121_88_fu_356_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln174_fu_361_p1;
wire   [63:0] zext_ln175_fu_489_p1;
wire   [63:0] zext_ln176_fu_617_p1;
wire   [7:0] xor_ln124_47_fu_902_p2;
wire   [7:0] xor_ln124_48_fu_930_p2;
wire   [7:0] xor_ln124_49_fu_951_p2;
wire   [7:0] xor_ln124_50_fu_972_p2;
wire   [7:0] add_ln121_fu_326_p2;
wire   [7:0] add_ln121_52_fu_337_p2;
wire   [7:0] add_ln121_53_fu_351_p2;
wire   [0:0] tmp_90_fu_366_p3;
wire   [7:0] xor_ln132_40_fu_374_p2;
wire   [7:0] select_ln131_40_fu_380_p3;
wire   [6:0] trunc_ln134_40_fu_388_p1;
wire   [0:0] tmp_91_fu_392_p3;
wire   [0:0] tmp_92_fu_408_p3;
wire   [7:0] xor_ln132_41_fu_416_p2;
wire   [7:0] select_ln131_41_fu_422_p3;
wire   [6:0] trunc_ln134_41_fu_430_p1;
wire   [0:0] tmp_93_fu_434_p3;
wire   [7:0] x_assign_18_fu_442_p3;
wire   [0:0] tmp_94_fu_450_p3;
wire   [7:0] xor_ln132_42_fu_458_p2;
wire   [7:0] select_ln131_42_fu_464_p3;
wire   [0:0] tmp_fu_494_p3;
wire   [7:0] xor_ln132_fu_502_p2;
wire   [7:0] select_ln131_fu_508_p3;
wire   [6:0] trunc_ln134_fu_516_p1;
wire   [0:0] tmp_77_fu_520_p3;
wire   [7:0] x_assign_s_fu_528_p3;
wire   [0:0] tmp_78_fu_536_p3;
wire   [7:0] xor_ln132_34_fu_544_p2;
wire   [7:0] select_ln131_34_fu_550_p3;
wire   [6:0] trunc_ln134_34_fu_558_p1;
wire   [0:0] tmp_79_fu_562_p3;
wire   [7:0] x_assign_13_fu_570_p3;
wire   [0:0] tmp_80_fu_578_p3;
wire   [7:0] xor_ln132_35_fu_586_p2;
wire   [7:0] select_ln131_35_fu_592_p3;
wire   [0:0] tmp_82_fu_621_p3;
wire   [7:0] xor_ln132_36_fu_629_p2;
wire   [7:0] select_ln131_36_fu_635_p3;
wire   [6:0] trunc_ln134_36_fu_643_p1;
wire   [0:0] tmp_83_fu_647_p3;
wire   [0:0] tmp_96_fu_663_p3;
wire   [7:0] xor_ln132_43_fu_671_p2;
wire   [7:0] select_ln131_43_fu_677_p3;
wire   [6:0] trunc_ln134_43_fu_685_p1;
wire   [0:0] tmp_97_fu_689_p3;
wire   [7:0] x_assign_19_fu_697_p3;
wire   [0:0] tmp_98_fu_705_p3;
wire   [7:0] xor_ln132_44_fu_713_p2;
wire   [7:0] select_ln131_44_fu_719_p3;
wire   [0:0] tmp_84_fu_739_p3;
wire   [7:0] xor_ln132_37_fu_747_p2;
wire   [7:0] select_ln131_37_fu_753_p3;
wire   [6:0] trunc_ln134_37_fu_761_p1;
wire   [0:0] tmp_85_fu_765_p3;
wire   [0:0] tmp_86_fu_781_p3;
wire   [7:0] xor_ln132_38_fu_789_p2;
wire   [7:0] select_ln131_38_fu_795_p3;
wire   [6:0] trunc_ln134_38_fu_803_p1;
wire   [0:0] tmp_87_fu_807_p3;
wire   [7:0] x_assign_16_fu_815_p3;
wire   [0:0] tmp_88_fu_823_p3;
wire   [7:0] xor_ln132_39_fu_831_p2;
wire   [7:0] select_ln131_39_fu_837_p3;
wire   [7:0] xor_ln124_78_fu_881_p2;
wire   [7:0] xor_ln124_80_fu_891_p2;
wire   [7:0] xor_ln124_81_fu_896_p2;
wire   [7:0] xor_ln124_79_fu_886_p2;
wire   [7:0] xor_ln124_82_fu_909_p2;
wire   [7:0] xor_ln124_84_fu_920_p2;
wire   [7:0] xor_ln124_85_fu_925_p2;
wire   [7:0] xor_ln124_83_fu_915_p2;
wire   [7:0] xor_ln124_87_fu_942_p2;
wire   [7:0] xor_ln124_88_fu_946_p2;
wire   [7:0] xor_ln124_86_fu_937_p2;
wire   [7:0] xor_ln124_90_fu_963_p2;
wire   [7:0] xor_ln124_91_fu_967_p2;
wire   [7:0] xor_ln124_89_fu_958_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s1_address0),
    .ce0(clefia_s1_ce0),
    .q0(clefia_s1_q0)
);

clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s0_address0),
    .ce0(clefia_s0_ce0),
    .q0(clefia_s0_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            reg_297 <= src_q1;
        end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            reg_297 <= src_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        or_ln134_4_reg_1163 <= or_ln134_4_fu_863_p3;
        or_ln134_7_reg_1168 <= or_ln134_7_fu_869_p3;
        or_ln134_9_reg_1173 <= or_ln134_9_fu_875_p3;
        or_ln_reg_1158 <= or_ln_fu_857_p3;
        tmp_95_reg_1065 <= select_ln131_42_fu_464_p3[32'd7];
        trunc_ln134_42_reg_1060 <= trunc_ln134_42_fu_472_p1;
        x_assign_17_reg_1055 <= x_assign_17_fu_400_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_308 <= grp_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        rk_offset_cast_reg_999[6 : 0] <= rk_offset_cast_fu_317_p1[6 : 0];
        tmp_99_reg_1122 <= select_ln131_44_fu_719_p3[32'd7];
        trunc_ln134_44_reg_1117 <= trunc_ln134_44_fu_727_p1;
        x_assign_14_reg_1111 <= x_assign_14_fu_655_p3;
        xor_ln124_reg_1005 <= xor_ln124_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rk_offset_read_reg_979 <= rk_offset;
        tmp_81_reg_1090 <= select_ln131_35_fu_592_p3[32'd7];
        trunc_ln134_35_reg_1085 <= trunc_ln134_35_fu_600_p1;
        xor_ln124_3_reg_1070 <= xor_ln124_3_fu_484_p2;
        xor_ln180_reg_1095 <= xor_ln180_fu_612_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        src_load_24_reg_1030 <= src_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_89_reg_1143 <= select_ln131_39_fu_837_p3[32'd7];
        trunc_ln134_39_reg_1138 <= trunc_ln134_39_fu_845_p1;
        x_assign_15_reg_1132 <= x_assign_15_fu_773_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_10_reg_1075 <= clefia_s0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        z_11_reg_1101 <= clefia_s1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        z_12_reg_1127 <= clefia_s0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        z_reg_1045 <= clefia_s1_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        clefia_s0_address0 = zext_ln176_fu_617_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        clefia_s0_address0 = zext_ln174_fu_361_p1;
    end else begin
        clefia_s0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        clefia_s0_ce0 = 1'b1;
    end else begin
        clefia_s0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        clefia_s1_address0 = zext_ln175_fu_489_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        clefia_s1_address0 = zext_ln173_fu_347_p1;
    end else begin
        clefia_s1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        clefia_s1_ce0 = 1'b1;
    end else begin
        clefia_s1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_address0 = 64'd15;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_address0 = 64'd13;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        dst_address0 = 64'd11;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dst_address0 = 64'd9;
    end else begin
        dst_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_address1 = 64'd14;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_address1 = 64'd12;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        dst_address1 = 64'd10;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dst_address1 = 64'd8;
    end else begin
        dst_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_ce0 = 1'b1;
    end else begin
        dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_ce1 = 1'b1;
    end else begin
        dst_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_d0 = xor_ln124_50_fu_972_p2;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_d0 = xor_ln124_48_fu_930_p2;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_d0 = src_q0;
    end else begin
        dst_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_d1 = xor_ln124_49_fu_951_p2;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_d1 = xor_ln124_47_fu_902_p2;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_d1 = src_q1;
    end else begin
        dst_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_we0 = 1'b1;
    end else begin
        dst_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_we1 = 1'b1;
    end else begin
        dst_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            rk_address0 = zext_ln121_88_fu_356_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            rk_address0 = zext_ln121_87_fu_342_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            rk_address0 = zext_ln121_fu_332_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            rk_address0 = rk_offset_cast1_fu_312_p1;
        end else begin
            rk_address0 = 'bx;
        end
    end else begin
        rk_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        rk_ce0 = 1'b1;
    end else begin
        rk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        src_address0 = 64'd15;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        src_address0 = 64'd13;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        src_address0 = 64'd11;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_address0 = 64'd9;
    end else begin
        src_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        src_address1 = 64'd14;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        src_address1 = 64'd12;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        src_address1 = 64'd10;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_address1 = 64'd8;
    end else begin
        src_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        src_ce0 = 1'b1;
    end else begin
        src_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        src_ce1 = 1'b1;
    end else begin
        src_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln121_52_fu_337_p2 = (rk_offset_cast_reg_999 + 8'd2);

assign add_ln121_53_fu_351_p2 = (rk_offset_cast_reg_999 + 8'd3);

assign add_ln121_fu_326_p2 = (rk_offset_cast_fu_317_p1 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_302_p2 = (rk_q0 ^ reg_297);

assign or_ln134_4_fu_863_p3 = {{trunc_ln134_39_reg_1138}, {tmp_89_reg_1143}};

assign or_ln134_7_fu_869_p3 = {{trunc_ln134_42_reg_1060}, {tmp_95_reg_1065}};

assign or_ln134_9_fu_875_p3 = {{trunc_ln134_44_reg_1117}, {tmp_99_reg_1122}};

assign or_ln_fu_857_p3 = {{trunc_ln134_35_reg_1085}, {tmp_81_reg_1090}};

assign rk_offset_cast1_fu_312_p1 = rk_offset;

assign rk_offset_cast_fu_317_p1 = rk_offset_read_reg_979;

assign select_ln131_34_fu_550_p3 = ((tmp_78_fu_536_p3[0:0] == 1'b1) ? xor_ln132_34_fu_544_p2 : x_assign_s_fu_528_p3);

assign select_ln131_35_fu_592_p3 = ((tmp_80_fu_578_p3[0:0] == 1'b1) ? xor_ln132_35_fu_586_p2 : x_assign_13_fu_570_p3);

assign select_ln131_36_fu_635_p3 = ((tmp_82_fu_621_p3[0:0] == 1'b1) ? xor_ln132_36_fu_629_p2 : clefia_s1_q0);

assign select_ln131_37_fu_753_p3 = ((tmp_84_fu_739_p3[0:0] == 1'b1) ? xor_ln132_37_fu_747_p2 : clefia_s0_q0);

assign select_ln131_38_fu_795_p3 = ((tmp_86_fu_781_p3[0:0] == 1'b1) ? xor_ln132_38_fu_789_p2 : x_assign_15_fu_773_p3);

assign select_ln131_39_fu_837_p3 = ((tmp_88_fu_823_p3[0:0] == 1'b1) ? xor_ln132_39_fu_831_p2 : x_assign_16_fu_815_p3);

assign select_ln131_40_fu_380_p3 = ((tmp_90_fu_366_p3[0:0] == 1'b1) ? xor_ln132_40_fu_374_p2 : clefia_s1_q0);

assign select_ln131_41_fu_422_p3 = ((tmp_92_fu_408_p3[0:0] == 1'b1) ? xor_ln132_41_fu_416_p2 : x_assign_17_fu_400_p3);

assign select_ln131_42_fu_464_p3 = ((tmp_94_fu_450_p3[0:0] == 1'b1) ? xor_ln132_42_fu_458_p2 : x_assign_18_fu_442_p3);

assign select_ln131_43_fu_677_p3 = ((tmp_96_fu_663_p3[0:0] == 1'b1) ? xor_ln132_43_fu_671_p2 : x_assign_14_fu_655_p3);

assign select_ln131_44_fu_719_p3 = ((tmp_98_fu_705_p3[0:0] == 1'b1) ? xor_ln132_44_fu_713_p2 : x_assign_19_fu_697_p3);

assign select_ln131_fu_508_p3 = ((tmp_fu_494_p3[0:0] == 1'b1) ? xor_ln132_fu_502_p2 : clefia_s0_q0);

assign tmp_77_fu_520_p3 = select_ln131_fu_508_p3[32'd7];

assign tmp_78_fu_536_p3 = select_ln131_fu_508_p3[32'd6];

assign tmp_79_fu_562_p3 = select_ln131_34_fu_550_p3[32'd7];

assign tmp_80_fu_578_p3 = select_ln131_34_fu_550_p3[32'd6];

assign tmp_82_fu_621_p3 = clefia_s1_q0[32'd7];

assign tmp_83_fu_647_p3 = select_ln131_36_fu_635_p3[32'd7];

assign tmp_84_fu_739_p3 = clefia_s0_q0[32'd7];

assign tmp_85_fu_765_p3 = select_ln131_37_fu_753_p3[32'd7];

assign tmp_86_fu_781_p3 = select_ln131_37_fu_753_p3[32'd6];

assign tmp_87_fu_807_p3 = select_ln131_38_fu_795_p3[32'd7];

assign tmp_88_fu_823_p3 = select_ln131_38_fu_795_p3[32'd6];

assign tmp_90_fu_366_p3 = clefia_s1_q0[32'd7];

assign tmp_91_fu_392_p3 = select_ln131_40_fu_380_p3[32'd7];

assign tmp_92_fu_408_p3 = select_ln131_40_fu_380_p3[32'd6];

assign tmp_93_fu_434_p3 = select_ln131_41_fu_422_p3[32'd7];

assign tmp_94_fu_450_p3 = select_ln131_41_fu_422_p3[32'd6];

assign tmp_96_fu_663_p3 = select_ln131_36_fu_635_p3[32'd6];

assign tmp_97_fu_689_p3 = select_ln131_43_fu_677_p3[32'd7];

assign tmp_98_fu_705_p3 = select_ln131_43_fu_677_p3[32'd6];

assign tmp_fu_494_p3 = clefia_s0_q0[32'd7];

assign trunc_ln134_34_fu_558_p1 = select_ln131_34_fu_550_p3[6:0];

assign trunc_ln134_35_fu_600_p1 = select_ln131_35_fu_592_p3[6:0];

assign trunc_ln134_36_fu_643_p1 = select_ln131_36_fu_635_p3[6:0];

assign trunc_ln134_37_fu_761_p1 = select_ln131_37_fu_753_p3[6:0];

assign trunc_ln134_38_fu_803_p1 = select_ln131_38_fu_795_p3[6:0];

assign trunc_ln134_39_fu_845_p1 = select_ln131_39_fu_837_p3[6:0];

assign trunc_ln134_40_fu_388_p1 = select_ln131_40_fu_380_p3[6:0];

assign trunc_ln134_41_fu_430_p1 = select_ln131_41_fu_422_p3[6:0];

assign trunc_ln134_42_fu_472_p1 = select_ln131_42_fu_464_p3[6:0];

assign trunc_ln134_43_fu_685_p1 = select_ln131_43_fu_677_p3[6:0];

assign trunc_ln134_44_fu_727_p1 = select_ln131_44_fu_719_p3[6:0];

assign trunc_ln134_fu_516_p1 = select_ln131_fu_508_p3[6:0];

assign x_assign_13_fu_570_p3 = {{trunc_ln134_34_fu_558_p1}, {tmp_79_fu_562_p3}};

assign x_assign_14_fu_655_p3 = {{trunc_ln134_36_fu_643_p1}, {tmp_83_fu_647_p3}};

assign x_assign_15_fu_773_p3 = {{trunc_ln134_37_fu_761_p1}, {tmp_85_fu_765_p3}};

assign x_assign_16_fu_815_p3 = {{trunc_ln134_38_fu_803_p1}, {tmp_87_fu_807_p3}};

assign x_assign_17_fu_400_p3 = {{trunc_ln134_40_fu_388_p1}, {tmp_91_fu_392_p3}};

assign x_assign_18_fu_442_p3 = {{trunc_ln134_41_fu_430_p1}, {tmp_93_fu_434_p3}};

assign x_assign_19_fu_697_p3 = {{trunc_ln134_43_fu_685_p1}, {tmp_97_fu_689_p3}};

assign x_assign_s_fu_528_p3 = {{trunc_ln134_fu_516_p1}, {tmp_77_fu_520_p3}};

assign xor_ln124_3_fu_484_p2 = (src_load_24_reg_1030 ^ rk_q0);

assign xor_ln124_47_fu_902_p2 = (xor_ln124_81_fu_896_p2 ^ xor_ln124_79_fu_886_p2);

assign xor_ln124_48_fu_930_p2 = (xor_ln124_85_fu_925_p2 ^ xor_ln124_83_fu_915_p2);

assign xor_ln124_49_fu_951_p2 = (xor_ln124_88_fu_946_p2 ^ xor_ln124_86_fu_937_p2);

assign xor_ln124_50_fu_972_p2 = (xor_ln124_91_fu_967_p2 ^ xor_ln124_89_fu_958_p2);

assign xor_ln124_78_fu_881_p2 = (x_assign_14_reg_1111 ^ src_q1);

assign xor_ln124_79_fu_886_p2 = (z_reg_1045 ^ xor_ln124_78_fu_881_p2);

assign xor_ln124_80_fu_891_p2 = (x_assign_15_reg_1132 ^ or_ln134_4_fu_863_p3);

assign xor_ln124_81_fu_896_p2 = (xor_ln124_80_fu_891_p2 ^ or_ln_fu_857_p3);

assign xor_ln124_82_fu_909_p2 = (src_q0 ^ or_ln134_7_fu_869_p3);

assign xor_ln124_83_fu_915_p2 = (z_10_reg_1075 ^ xor_ln124_82_fu_909_p2);

assign xor_ln124_84_fu_920_p2 = (x_assign_15_reg_1132 ^ or_ln134_9_fu_875_p3);

assign xor_ln124_85_fu_925_p2 = (xor_ln124_84_fu_920_p2 ^ x_assign_14_reg_1111);

assign xor_ln124_86_fu_937_p2 = (z_11_reg_1101 ^ src_q1);

assign xor_ln124_87_fu_942_p2 = (or_ln_reg_1158 ^ or_ln134_4_reg_1163);

assign xor_ln124_88_fu_946_p2 = (xor_ln180_reg_1095 ^ xor_ln124_87_fu_942_p2);

assign xor_ln124_89_fu_958_p2 = (z_12_reg_1127 ^ src_q0);

assign xor_ln124_90_fu_963_p2 = (or_ln134_9_reg_1173 ^ or_ln134_7_reg_1168);

assign xor_ln124_91_fu_967_p2 = (xor_ln180_reg_1095 ^ xor_ln124_90_fu_963_p2);

assign xor_ln124_fu_320_p2 = (src_q1 ^ rk_q0);

assign xor_ln132_34_fu_544_p2 = (x_assign_s_fu_528_p3 ^ 8'd14);

assign xor_ln132_35_fu_586_p2 = (x_assign_13_fu_570_p3 ^ 8'd14);

assign xor_ln132_36_fu_629_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_37_fu_747_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_38_fu_789_p2 = (x_assign_15_fu_773_p3 ^ 8'd14);

assign xor_ln132_39_fu_831_p2 = (x_assign_16_fu_815_p3 ^ 8'd14);

assign xor_ln132_40_fu_374_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_41_fu_416_p2 = (x_assign_17_fu_400_p3 ^ 8'd14);

assign xor_ln132_42_fu_458_p2 = (x_assign_18_fu_442_p3 ^ 8'd14);

assign xor_ln132_43_fu_671_p2 = (x_assign_14_fu_655_p3 ^ 8'd14);

assign xor_ln132_44_fu_713_p2 = (x_assign_19_fu_697_p3 ^ 8'd14);

assign xor_ln132_fu_502_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln180_fu_612_p2 = (x_assign_s_fu_528_p3 ^ x_assign_17_reg_1055);

assign zext_ln121_87_fu_342_p1 = add_ln121_52_fu_337_p2;

assign zext_ln121_88_fu_356_p1 = add_ln121_53_fu_351_p2;

assign zext_ln121_fu_332_p1 = add_ln121_fu_326_p2;

assign zext_ln173_fu_347_p1 = xor_ln124_reg_1005;

assign zext_ln174_fu_361_p1 = reg_308;

assign zext_ln175_fu_489_p1 = reg_308;

assign zext_ln176_fu_617_p1 = xor_ln124_3_reg_1070;

always @ (posedge ap_clk) begin
    rk_offset_cast_reg_999[7] <= 1'b0;
end

endmodule //clefia_ClefiaF1Xor
