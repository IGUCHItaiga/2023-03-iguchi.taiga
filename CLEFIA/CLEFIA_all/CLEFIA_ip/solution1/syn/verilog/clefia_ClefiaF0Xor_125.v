// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clefia_ClefiaF0Xor_125 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0,
        dst_address1,
        dst_ce1,
        dst_we1,
        dst_d1,
        src_address0,
        src_ce0,
        src_q0,
        src_address1,
        src_ce1,
        src_q1,
        rk_address0,
        rk_ce0,
        rk_q0,
        rk_offset
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [7:0] dst_d0;
output  [3:0] dst_address1;
output   dst_ce1;
output   dst_we1;
output  [7:0] dst_d1;
output  [3:0] src_address0;
output   src_ce0;
input  [7:0] src_q0;
output  [3:0] src_address1;
output   src_ce1;
input  [7:0] src_q1;
output  [7:0] rk_address0;
output   rk_ce0;
input  [7:0] rk_q0;
input  [6:0] rk_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] dst_address0;
reg dst_ce0;
reg dst_we0;
reg[7:0] dst_d0;
reg[3:0] dst_address1;
reg dst_ce1;
reg dst_we1;
reg[7:0] dst_d1;
reg[3:0] src_address0;
reg src_ce0;
reg[3:0] src_address1;
reg src_ce1;
reg[7:0] rk_address0;
reg rk_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state8_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
reg   [7:0] clefia_s0_address0;
reg    clefia_s0_ce0;
wire   [7:0] clefia_s0_q0;
reg   [7:0] clefia_s1_address0;
reg    clefia_s1_ce0;
wire   [7:0] clefia_s1_q0;
reg   [7:0] reg_295;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [7:0] grp_fu_300_p2;
reg   [7:0] reg_306;
wire    ap_block_pp0_stage3_11001;
reg   [6:0] rk_offset_read_reg_814;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] xor_ln124_fu_315_p2;
reg   [7:0] xor_ln124_reg_836;
reg   [7:0] src_load_38_reg_861;
reg   [7:0] z_reg_876;
wire   [7:0] x_assign_25_fu_394_p3;
reg   [7:0] x_assign_25_reg_886;
reg   [7:0] x_assign_25_reg_886_pp0_iter1_reg;
wire   [6:0] trunc_ln134_57_fu_424_p1;
reg   [6:0] trunc_ln134_57_reg_892;
reg   [6:0] trunc_ln134_57_reg_892_pp0_iter1_reg;
reg   [0:0] tmp_127_reg_897;
reg   [0:0] tmp_127_reg_897_pp0_iter1_reg;
wire   [7:0] xor_ln124_34_fu_436_p2;
reg   [7:0] xor_ln124_34_reg_902;
reg   [7:0] z_16_reg_907;
wire   [7:0] x_assign_s_fu_480_p3;
reg   [7:0] x_assign_s_reg_917;
wire   [6:0] trunc_ln134_58_fu_510_p1;
reg   [6:0] trunc_ln134_58_reg_923;
reg   [0:0] tmp_129_reg_928;
reg   [7:0] z_17_reg_933;
wire   [7:0] x_assign_23_fu_560_p3;
reg   [7:0] x_assign_23_reg_943;
wire   [6:0] trunc_ln134_53_fu_590_p1;
reg   [6:0] trunc_ln134_53_reg_949;
reg   [0:0] tmp_119_reg_954;
reg   [7:0] z_18_reg_959;
wire   [7:0] x_assign_24_fu_636_p3;
reg   [7:0] x_assign_24_reg_964;
wire   [6:0] trunc_ln134_55_fu_666_p1;
reg   [6:0] trunc_ln134_55_reg_970;
reg   [0:0] tmp_123_reg_975;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] rk_offset_cast_fu_310_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln121_fu_326_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln121_102_fu_336_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln150_fu_341_p1;
wire   [63:0] zext_ln121_103_fu_350_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln151_fu_355_p1;
wire   [63:0] zext_ln152_fu_441_p1;
wire   [63:0] zext_ln153_fu_522_p1;
wire   [7:0] xor_ln124_56_fu_711_p2;
wire   [7:0] xor_ln124_57_fu_739_p2;
wire   [7:0] xor_ln124_58_fu_779_p2;
wire   [7:0] xor_ln124_59_fu_807_p2;
wire   [6:0] add_ln121_fu_321_p2;
wire   [6:0] add_ln121_67_fu_331_p2;
wire   [6:0] add_ln121_68_fu_345_p2;
wire   [0:0] tmp_124_fu_360_p3;
wire   [7:0] xor_ln132_56_fu_368_p2;
wire   [7:0] select_ln131_56_fu_374_p3;
wire   [6:0] trunc_ln134_56_fu_382_p1;
wire   [0:0] tmp_125_fu_386_p3;
wire   [0:0] tmp_126_fu_402_p3;
wire   [7:0] xor_ln132_57_fu_410_p2;
wire   [7:0] select_ln131_57_fu_416_p3;
wire   [0:0] tmp_fu_446_p3;
wire   [7:0] xor_ln132_fu_454_p2;
wire   [7:0] select_ln131_fu_460_p3;
wire   [6:0] trunc_ln134_fu_468_p1;
wire   [0:0] tmp_115_fu_472_p3;
wire   [0:0] tmp_128_fu_488_p3;
wire   [7:0] xor_ln132_58_fu_496_p2;
wire   [7:0] select_ln131_58_fu_502_p3;
wire   [0:0] tmp_116_fu_526_p3;
wire   [7:0] xor_ln132_52_fu_534_p2;
wire   [7:0] select_ln131_52_fu_540_p3;
wire   [6:0] trunc_ln134_52_fu_548_p1;
wire   [0:0] tmp_117_fu_552_p3;
wire   [0:0] tmp_118_fu_568_p3;
wire   [7:0] xor_ln132_53_fu_576_p2;
wire   [7:0] select_ln131_53_fu_582_p3;
wire   [0:0] tmp_120_fu_602_p3;
wire   [7:0] xor_ln132_54_fu_610_p2;
wire   [7:0] select_ln131_54_fu_616_p3;
wire   [6:0] trunc_ln134_54_fu_624_p1;
wire   [0:0] tmp_121_fu_628_p3;
wire   [0:0] tmp_122_fu_644_p3;
wire   [7:0] xor_ln132_55_fu_652_p2;
wire   [7:0] select_ln131_55_fu_658_p3;
wire   [7:0] xor_ln124_108_fu_690_p2;
wire   [7:0] or_ln134_3_fu_684_p3;
wire   [7:0] xor_ln124_110_fu_700_p2;
wire   [7:0] or_ln134_s_fu_678_p3;
wire   [7:0] xor_ln124_111_fu_705_p2;
wire   [7:0] xor_ln124_109_fu_695_p2;
wire   [7:0] xor_ln124_112_fu_718_p2;
wire   [7:0] xor_ln124_114_fu_728_p2;
wire   [7:0] xor_ln124_115_fu_734_p2;
wire   [7:0] xor_ln124_113_fu_723_p2;
wire   [7:0] xor_ln124_116_fu_758_p2;
wire   [7:0] or_ln_fu_752_p3;
wire   [7:0] xor_ln124_118_fu_768_p2;
wire   [7:0] or_ln134_4_fu_746_p3;
wire   [7:0] xor_ln124_119_fu_773_p2;
wire   [7:0] xor_ln124_117_fu_763_p2;
wire   [7:0] xor_ln124_120_fu_786_p2;
wire   [7:0] xor_ln124_122_fu_797_p2;
wire   [7:0] xor_ln124_123_fu_802_p2;
wire   [7:0] xor_ln124_121_fu_792_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s0_address0),
    .ce0(clefia_s0_ce0),
    .q0(clefia_s0_q0)
);

clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s1_address0),
    .ce0(clefia_s1_ce0),
    .q0(clefia_s1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            reg_295 <= src_q1;
        end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            reg_295 <= src_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_306 <= grp_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rk_offset_read_reg_814 <= rk_offset;
        tmp_129_reg_928 <= select_ln131_58_fu_502_p3[32'd7];
        trunc_ln134_58_reg_923 <= trunc_ln134_58_fu_510_p1;
        x_assign_s_reg_917 <= x_assign_s_fu_480_p3;
        xor_ln124_34_reg_902 <= xor_ln124_34_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        src_load_38_reg_861 <= src_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_119_reg_954 <= select_ln131_53_fu_582_p3[32'd7];
        trunc_ln134_53_reg_949 <= trunc_ln134_53_fu_590_p1;
        x_assign_23_reg_943 <= x_assign_23_fu_560_p3;
        xor_ln124_reg_836 <= xor_ln124_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_123_reg_975 <= select_ln131_55_fu_658_p3[32'd7];
        trunc_ln134_55_reg_970 <= trunc_ln134_55_fu_666_p1;
        x_assign_24_reg_964 <= x_assign_24_fu_636_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_127_reg_897 <= select_ln131_57_fu_416_p3[32'd7];
        tmp_127_reg_897_pp0_iter1_reg <= tmp_127_reg_897;
        trunc_ln134_57_reg_892 <= trunc_ln134_57_fu_424_p1;
        trunc_ln134_57_reg_892_pp0_iter1_reg <= trunc_ln134_57_reg_892;
        x_assign_25_reg_886 <= x_assign_25_fu_394_p3;
        x_assign_25_reg_886_pp0_iter1_reg <= x_assign_25_reg_886;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_16_reg_907 <= clefia_s1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        z_17_reg_933 <= clefia_s0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        z_18_reg_959 <= clefia_s1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        z_reg_876 <= clefia_s0_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        clefia_s0_address0 = zext_ln152_fu_441_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        clefia_s0_address0 = zext_ln150_fu_341_p1;
    end else begin
        clefia_s0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        clefia_s0_ce0 = 1'b1;
    end else begin
        clefia_s0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        clefia_s1_address0 = zext_ln153_fu_522_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        clefia_s1_address0 = zext_ln151_fu_355_p1;
    end else begin
        clefia_s1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        clefia_s1_ce0 = 1'b1;
    end else begin
        clefia_s1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_address0 = 64'd7;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_address0 = 64'd5;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        dst_address0 = 64'd3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dst_address0 = 64'd1;
    end else begin
        dst_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_address1 = 64'd6;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_address1 = 64'd4;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        dst_address1 = 64'd2;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dst_address1 = 64'd0;
    end else begin
        dst_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_ce0 = 1'b1;
    end else begin
        dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_ce1 = 1'b1;
    end else begin
        dst_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_d0 = xor_ln124_59_fu_807_p2;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_d0 = xor_ln124_57_fu_739_p2;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_d0 = src_q0;
    end else begin
        dst_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_d1 = xor_ln124_58_fu_779_p2;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_d1 = xor_ln124_56_fu_711_p2;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_d1 = src_q1;
    end else begin
        dst_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_we0 = 1'b1;
    end else begin
        dst_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_we1 = 1'b1;
    end else begin
        dst_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            rk_address0 = zext_ln121_103_fu_350_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            rk_address0 = zext_ln121_102_fu_336_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            rk_address0 = zext_ln121_fu_326_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            rk_address0 = rk_offset_cast_fu_310_p1;
        end else begin
            rk_address0 = 'bx;
        end
    end else begin
        rk_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        rk_ce0 = 1'b1;
    end else begin
        rk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        src_address0 = 64'd7;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        src_address0 = 64'd5;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        src_address0 = 64'd3;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_address0 = 64'd1;
    end else begin
        src_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        src_address1 = 64'd6;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        src_address1 = 64'd4;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        src_address1 = 64'd2;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_address1 = 64'd0;
    end else begin
        src_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        src_ce0 = 1'b1;
    end else begin
        src_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        src_ce1 = 1'b1;
    end else begin
        src_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln121_67_fu_331_p2 = (rk_offset_read_reg_814 + 7'd2);

assign add_ln121_68_fu_345_p2 = (rk_offset_read_reg_814 + 7'd3);

assign add_ln121_fu_321_p2 = (rk_offset_read_reg_814 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_300_p2 = (rk_q0 ^ reg_295);

assign or_ln134_3_fu_684_p3 = {{trunc_ln134_55_reg_970}, {tmp_123_reg_975}};

assign or_ln134_4_fu_746_p3 = {{trunc_ln134_57_reg_892_pp0_iter1_reg}, {tmp_127_reg_897_pp0_iter1_reg}};

assign or_ln134_s_fu_678_p3 = {{trunc_ln134_53_reg_949}, {tmp_119_reg_954}};

assign or_ln_fu_752_p3 = {{trunc_ln134_58_reg_923}, {tmp_129_reg_928}};

assign rk_offset_cast_fu_310_p1 = rk_offset;

assign select_ln131_52_fu_540_p3 = ((tmp_116_fu_526_p3[0:0] == 1'b1) ? xor_ln132_52_fu_534_p2 : clefia_s0_q0);

assign select_ln131_53_fu_582_p3 = ((tmp_118_fu_568_p3[0:0] == 1'b1) ? xor_ln132_53_fu_576_p2 : x_assign_23_fu_560_p3);

assign select_ln131_54_fu_616_p3 = ((tmp_120_fu_602_p3[0:0] == 1'b1) ? xor_ln132_54_fu_610_p2 : clefia_s1_q0);

assign select_ln131_55_fu_658_p3 = ((tmp_122_fu_644_p3[0:0] == 1'b1) ? xor_ln132_55_fu_652_p2 : x_assign_24_fu_636_p3);

assign select_ln131_56_fu_374_p3 = ((tmp_124_fu_360_p3[0:0] == 1'b1) ? xor_ln132_56_fu_368_p2 : clefia_s0_q0);

assign select_ln131_57_fu_416_p3 = ((tmp_126_fu_402_p3[0:0] == 1'b1) ? xor_ln132_57_fu_410_p2 : x_assign_25_fu_394_p3);

assign select_ln131_58_fu_502_p3 = ((tmp_128_fu_488_p3[0:0] == 1'b1) ? xor_ln132_58_fu_496_p2 : x_assign_s_fu_480_p3);

assign select_ln131_fu_460_p3 = ((tmp_fu_446_p3[0:0] == 1'b1) ? xor_ln132_fu_454_p2 : clefia_s1_q0);

assign tmp_115_fu_472_p3 = select_ln131_fu_460_p3[32'd7];

assign tmp_116_fu_526_p3 = clefia_s0_q0[32'd7];

assign tmp_117_fu_552_p3 = select_ln131_52_fu_540_p3[32'd7];

assign tmp_118_fu_568_p3 = select_ln131_52_fu_540_p3[32'd6];

assign tmp_120_fu_602_p3 = clefia_s1_q0[32'd7];

assign tmp_121_fu_628_p3 = select_ln131_54_fu_616_p3[32'd7];

assign tmp_122_fu_644_p3 = select_ln131_54_fu_616_p3[32'd6];

assign tmp_124_fu_360_p3 = clefia_s0_q0[32'd7];

assign tmp_125_fu_386_p3 = select_ln131_56_fu_374_p3[32'd7];

assign tmp_126_fu_402_p3 = select_ln131_56_fu_374_p3[32'd6];

assign tmp_128_fu_488_p3 = select_ln131_fu_460_p3[32'd6];

assign tmp_fu_446_p3 = clefia_s1_q0[32'd7];

assign trunc_ln134_52_fu_548_p1 = select_ln131_52_fu_540_p3[6:0];

assign trunc_ln134_53_fu_590_p1 = select_ln131_53_fu_582_p3[6:0];

assign trunc_ln134_54_fu_624_p1 = select_ln131_54_fu_616_p3[6:0];

assign trunc_ln134_55_fu_666_p1 = select_ln131_55_fu_658_p3[6:0];

assign trunc_ln134_56_fu_382_p1 = select_ln131_56_fu_374_p3[6:0];

assign trunc_ln134_57_fu_424_p1 = select_ln131_57_fu_416_p3[6:0];

assign trunc_ln134_58_fu_510_p1 = select_ln131_58_fu_502_p3[6:0];

assign trunc_ln134_fu_468_p1 = select_ln131_fu_460_p3[6:0];

assign x_assign_23_fu_560_p3 = {{trunc_ln134_52_fu_548_p1}, {tmp_117_fu_552_p3}};

assign x_assign_24_fu_636_p3 = {{trunc_ln134_54_fu_624_p1}, {tmp_121_fu_628_p3}};

assign x_assign_25_fu_394_p3 = {{trunc_ln134_56_fu_382_p1}, {tmp_125_fu_386_p3}};

assign x_assign_s_fu_480_p3 = {{trunc_ln134_fu_468_p1}, {tmp_115_fu_472_p3}};

assign xor_ln124_108_fu_690_p2 = (x_assign_s_reg_917 ^ src_q1);

assign xor_ln124_109_fu_695_p2 = (z_reg_876 ^ xor_ln124_108_fu_690_p2);

assign xor_ln124_110_fu_700_p2 = (x_assign_24_reg_964 ^ or_ln134_3_fu_684_p3);

assign xor_ln124_111_fu_705_p2 = (xor_ln124_110_fu_700_p2 ^ or_ln134_s_fu_678_p3);

assign xor_ln124_112_fu_718_p2 = (x_assign_25_reg_886 ^ src_q0);

assign xor_ln124_113_fu_723_p2 = (z_16_reg_907 ^ xor_ln124_112_fu_718_p2);

assign xor_ln124_114_fu_728_p2 = (or_ln134_s_fu_678_p3 ^ or_ln134_3_fu_684_p3);

assign xor_ln124_115_fu_734_p2 = (xor_ln124_114_fu_728_p2 ^ x_assign_23_reg_943);

assign xor_ln124_116_fu_758_p2 = (x_assign_s_reg_917 ^ src_q1);

assign xor_ln124_117_fu_763_p2 = (z_17_reg_933 ^ xor_ln124_116_fu_758_p2);

assign xor_ln124_118_fu_768_p2 = (x_assign_24_reg_964 ^ or_ln_fu_752_p3);

assign xor_ln124_119_fu_773_p2 = (xor_ln124_118_fu_768_p2 ^ or_ln134_4_fu_746_p3);

assign xor_ln124_120_fu_786_p2 = (src_q0 ^ or_ln134_4_fu_746_p3);

assign xor_ln124_121_fu_792_p2 = (z_18_reg_959 ^ xor_ln124_120_fu_786_p2);

assign xor_ln124_122_fu_797_p2 = (x_assign_23_reg_943 ^ or_ln_fu_752_p3);

assign xor_ln124_123_fu_802_p2 = (xor_ln124_122_fu_797_p2 ^ x_assign_25_reg_886_pp0_iter1_reg);

assign xor_ln124_34_fu_436_p2 = (src_load_38_reg_861 ^ rk_q0);

assign xor_ln124_56_fu_711_p2 = (xor_ln124_111_fu_705_p2 ^ xor_ln124_109_fu_695_p2);

assign xor_ln124_57_fu_739_p2 = (xor_ln124_115_fu_734_p2 ^ xor_ln124_113_fu_723_p2);

assign xor_ln124_58_fu_779_p2 = (xor_ln124_119_fu_773_p2 ^ xor_ln124_117_fu_763_p2);

assign xor_ln124_59_fu_807_p2 = (xor_ln124_123_fu_802_p2 ^ xor_ln124_121_fu_792_p2);

assign xor_ln124_fu_315_p2 = (src_q1 ^ rk_q0);

assign xor_ln132_52_fu_534_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_53_fu_576_p2 = (x_assign_23_fu_560_p3 ^ 8'd14);

assign xor_ln132_54_fu_610_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_55_fu_652_p2 = (x_assign_24_fu_636_p3 ^ 8'd14);

assign xor_ln132_56_fu_368_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_57_fu_410_p2 = (x_assign_25_fu_394_p3 ^ 8'd14);

assign xor_ln132_58_fu_496_p2 = (x_assign_s_fu_480_p3 ^ 8'd14);

assign xor_ln132_fu_454_p2 = (clefia_s1_q0 ^ 8'd14);

assign zext_ln121_102_fu_336_p1 = add_ln121_67_fu_331_p2;

assign zext_ln121_103_fu_350_p1 = add_ln121_68_fu_345_p2;

assign zext_ln121_fu_326_p1 = add_ln121_fu_321_p2;

assign zext_ln150_fu_341_p1 = xor_ln124_reg_836;

assign zext_ln151_fu_355_p1 = reg_306;

assign zext_ln152_fu_441_p1 = reg_306;

assign zext_ln153_fu_522_p1 = xor_ln124_34_reg_902;

endmodule //clefia_ClefiaF0Xor_125
