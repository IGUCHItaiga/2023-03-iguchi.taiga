// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clefia_ClefiaF0Xor (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0,
        dst_address1,
        dst_ce1,
        dst_we1,
        dst_d1,
        src_address0,
        src_ce0,
        src_q0,
        src_address1,
        src_ce1,
        src_q1,
        rk_address0,
        rk_ce0,
        rk_q0,
        rk_address1,
        rk_ce1,
        rk_q1,
        rk_offset
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [7:0] dst_d0;
output  [3:0] dst_address1;
output   dst_ce1;
output   dst_we1;
output  [7:0] dst_d1;
output  [3:0] src_address0;
output   src_ce0;
input  [7:0] src_q0;
output  [3:0] src_address1;
output   src_ce1;
input  [7:0] src_q1;
output  [7:0] rk_address0;
output   rk_ce0;
input  [7:0] rk_q0;
output  [7:0] rk_address1;
output   rk_ce1;
input  [7:0] rk_q1;
input  [7:0] rk_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] dst_address0;
reg dst_ce0;
reg dst_we0;
reg[7:0] dst_d0;
reg[3:0] dst_address1;
reg dst_ce1;
reg dst_we1;
reg[7:0] dst_d1;
reg[3:0] src_address0;
reg src_ce0;
reg[3:0] src_address1;
reg src_ce1;
reg[7:0] rk_address0;
reg rk_ce0;
reg[7:0] rk_address1;
reg rk_ce1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state8_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
reg   [7:0] clefia_s0_address0;
reg    clefia_s0_ce0;
wire   [7:0] clefia_s0_q0;
reg   [7:0] clefia_s1_address0;
reg    clefia_s1_ce0;
wire   [7:0] clefia_s1_q0;
wire   [7:0] grp_fu_299_p2;
reg   [7:0] reg_311;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [7:0] grp_fu_305_p2;
reg   [7:0] reg_315;
reg   [7:0] rk_offset_read_reg_815;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] z_reg_871;
wire    ap_block_pp0_stage3_11001;
reg   [7:0] z_22_reg_876;
wire   [7:0] x_assign_s_fu_409_p3;
reg   [7:0] x_assign_s_reg_891;
reg   [7:0] x_assign_s_reg_891_pp0_iter1_reg;
wire   [7:0] x_assign_31_fu_451_p3;
reg   [7:0] x_assign_31_reg_897;
reg   [7:0] x_assign_31_reg_897_pp0_iter1_reg;
wire   [6:0] trunc_ln134_71_fu_481_p1;
reg   [6:0] trunc_ln134_71_reg_903;
reg   [6:0] trunc_ln134_71_reg_903_pp0_iter1_reg;
reg   [0:0] tmp_157_reg_908;
reg   [0:0] tmp_157_reg_908_pp0_iter1_reg;
wire   [6:0] trunc_ln134_72_fu_515_p1;
reg   [6:0] trunc_ln134_72_reg_913;
reg   [6:0] trunc_ln134_72_reg_913_pp0_iter1_reg;
reg   [0:0] tmp_159_reg_918;
reg   [0:0] tmp_159_reg_918_pp0_iter1_reg;
reg   [7:0] z_23_reg_923;
reg   [7:0] z_24_reg_928;
wire   [7:0] x_assign_29_fu_561_p3;
reg   [7:0] x_assign_29_reg_933;
wire   [6:0] trunc_ln134_67_fu_591_p1;
reg   [6:0] trunc_ln134_67_reg_939;
reg   [0:0] tmp_149_reg_944;
wire   [7:0] x_assign_30_fu_637_p3;
reg   [7:0] x_assign_30_reg_949;
wire   [6:0] trunc_ln134_69_fu_667_p1;
reg   [6:0] trunc_ln134_69_reg_955;
reg   [0:0] tmp_153_reg_960;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] rk_offset_cast_fu_319_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln121_fu_330_p1;
wire   [63:0] zext_ln121_117_fu_340_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln121_118_fu_350_p1;
wire   [63:0] zext_ln150_fu_355_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln151_fu_360_p1;
wire   [63:0] zext_ln152_fu_365_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln153_fu_370_p1;
wire   [7:0] xor_ln124_65_fu_712_p2;
wire   [7:0] xor_ln124_66_fu_740_p2;
wire   [7:0] xor_ln124_67_fu_780_p2;
wire   [7:0] xor_ln124_68_fu_808_p2;
wire   [7:0] add_ln121_fu_324_p2;
wire   [7:0] add_ln121_82_fu_335_p2;
wire   [7:0] add_ln121_83_fu_345_p2;
wire   [0:0] tmp_fu_375_p3;
wire   [7:0] xor_ln132_fu_383_p2;
wire   [7:0] select_ln131_fu_389_p3;
wire   [6:0] trunc_ln134_fu_397_p1;
wire   [0:0] tmp_145_fu_401_p3;
wire   [0:0] tmp_154_fu_417_p3;
wire   [7:0] xor_ln132_70_fu_425_p2;
wire   [7:0] select_ln131_70_fu_431_p3;
wire   [6:0] trunc_ln134_70_fu_439_p1;
wire   [0:0] tmp_155_fu_443_p3;
wire   [0:0] tmp_156_fu_459_p3;
wire   [7:0] xor_ln132_71_fu_467_p2;
wire   [7:0] select_ln131_71_fu_473_p3;
wire   [0:0] tmp_158_fu_493_p3;
wire   [7:0] xor_ln132_72_fu_501_p2;
wire   [7:0] select_ln131_72_fu_507_p3;
wire   [0:0] tmp_146_fu_527_p3;
wire   [7:0] xor_ln132_66_fu_535_p2;
wire   [7:0] select_ln131_66_fu_541_p3;
wire   [6:0] trunc_ln134_66_fu_549_p1;
wire   [0:0] tmp_147_fu_553_p3;
wire   [0:0] tmp_148_fu_569_p3;
wire   [7:0] xor_ln132_67_fu_577_p2;
wire   [7:0] select_ln131_67_fu_583_p3;
wire   [0:0] tmp_150_fu_603_p3;
wire   [7:0] xor_ln132_68_fu_611_p2;
wire   [7:0] select_ln131_68_fu_617_p3;
wire   [6:0] trunc_ln134_68_fu_625_p1;
wire   [0:0] tmp_151_fu_629_p3;
wire   [0:0] tmp_152_fu_645_p3;
wire   [7:0] xor_ln132_69_fu_653_p2;
wire   [7:0] select_ln131_69_fu_659_p3;
wire   [7:0] xor_ln124_140_fu_691_p2;
wire   [7:0] or_ln134_7_fu_685_p3;
wire   [7:0] xor_ln124_142_fu_701_p2;
wire   [7:0] or_ln134_s_fu_679_p3;
wire   [7:0] xor_ln124_143_fu_706_p2;
wire   [7:0] xor_ln124_141_fu_696_p2;
wire   [7:0] xor_ln124_144_fu_719_p2;
wire   [7:0] xor_ln124_146_fu_729_p2;
wire   [7:0] xor_ln124_147_fu_735_p2;
wire   [7:0] xor_ln124_145_fu_724_p2;
wire   [7:0] xor_ln124_148_fu_759_p2;
wire   [7:0] or_ln_fu_753_p3;
wire   [7:0] xor_ln124_150_fu_769_p2;
wire   [7:0] or_ln134_8_fu_747_p3;
wire   [7:0] xor_ln124_151_fu_774_p2;
wire   [7:0] xor_ln124_149_fu_764_p2;
wire   [7:0] xor_ln124_152_fu_787_p2;
wire   [7:0] xor_ln124_154_fu_798_p2;
wire   [7:0] xor_ln124_155_fu_803_p2;
wire   [7:0] xor_ln124_153_fu_793_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s0_address0),
    .ce0(clefia_s0_ce0),
    .q0(clefia_s0_q0)
);

clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s1_address0),
    .ce0(clefia_s1_ce0),
    .q0(clefia_s1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_311 <= grp_fu_299_p2;
        reg_315 <= grp_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rk_offset_read_reg_815 <= rk_offset;
        tmp_149_reg_944 <= select_ln131_67_fu_583_p3[32'd7];
        tmp_153_reg_960 <= select_ln131_69_fu_659_p3[32'd7];
        trunc_ln134_67_reg_939 <= trunc_ln134_67_fu_591_p1;
        trunc_ln134_69_reg_955 <= trunc_ln134_69_fu_667_p1;
        x_assign_29_reg_933 <= x_assign_29_fu_561_p3;
        x_assign_30_reg_949 <= x_assign_30_fu_637_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_157_reg_908 <= select_ln131_71_fu_473_p3[32'd7];
        tmp_157_reg_908_pp0_iter1_reg <= tmp_157_reg_908;
        tmp_159_reg_918 <= select_ln131_72_fu_507_p3[32'd7];
        tmp_159_reg_918_pp0_iter1_reg <= tmp_159_reg_918;
        trunc_ln134_71_reg_903 <= trunc_ln134_71_fu_481_p1;
        trunc_ln134_71_reg_903_pp0_iter1_reg <= trunc_ln134_71_reg_903;
        trunc_ln134_72_reg_913 <= trunc_ln134_72_fu_515_p1;
        trunc_ln134_72_reg_913_pp0_iter1_reg <= trunc_ln134_72_reg_913;
        x_assign_31_reg_897 <= x_assign_31_fu_451_p3;
        x_assign_31_reg_897_pp0_iter1_reg <= x_assign_31_reg_897;
        x_assign_s_reg_891 <= x_assign_s_fu_409_p3;
        x_assign_s_reg_891_pp0_iter1_reg <= x_assign_s_reg_891;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        z_22_reg_876 <= clefia_s1_q0;
        z_reg_871 <= clefia_s0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_23_reg_923 <= clefia_s0_q0;
        z_24_reg_928 <= clefia_s1_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            clefia_s0_address0 = zext_ln152_fu_365_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            clefia_s0_address0 = zext_ln150_fu_355_p1;
        end else begin
            clefia_s0_address0 = 'bx;
        end
    end else begin
        clefia_s0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        clefia_s0_ce0 = 1'b1;
    end else begin
        clefia_s0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            clefia_s1_address0 = zext_ln153_fu_370_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            clefia_s1_address0 = zext_ln151_fu_360_p1;
        end else begin
            clefia_s1_address0 = 'bx;
        end
    end else begin
        clefia_s1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        clefia_s1_ce0 = 1'b1;
    end else begin
        clefia_s1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_address0 = 64'd7;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_address0 = 64'd5;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        dst_address0 = 64'd3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dst_address0 = 64'd1;
    end else begin
        dst_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_address1 = 64'd6;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_address1 = 64'd4;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        dst_address1 = 64'd2;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dst_address1 = 64'd0;
    end else begin
        dst_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_ce0 = 1'b1;
    end else begin
        dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_ce1 = 1'b1;
    end else begin
        dst_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_d0 = xor_ln124_68_fu_808_p2;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_d0 = xor_ln124_66_fu_740_p2;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_d0 = src_q0;
    end else begin
        dst_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_d1 = xor_ln124_67_fu_780_p2;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_d1 = xor_ln124_65_fu_712_p2;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_d1 = src_q1;
    end else begin
        dst_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_we0 = 1'b1;
    end else begin
        dst_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_we1 = 1'b1;
    end else begin
        dst_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            rk_address0 = zext_ln121_118_fu_350_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            rk_address0 = zext_ln121_fu_330_p1;
        end else begin
            rk_address0 = 'bx;
        end
    end else begin
        rk_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            rk_address1 = zext_ln121_117_fu_340_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            rk_address1 = rk_offset_cast_fu_319_p1;
        end else begin
            rk_address1 = 'bx;
        end
    end else begin
        rk_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        rk_ce0 = 1'b1;
    end else begin
        rk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        rk_ce1 = 1'b1;
    end else begin
        rk_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        src_address0 = 64'd7;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        src_address0 = 64'd5;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        src_address0 = 64'd3;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_address0 = 64'd1;
    end else begin
        src_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        src_address1 = 64'd6;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        src_address1 = 64'd4;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        src_address1 = 64'd2;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_address1 = 64'd0;
    end else begin
        src_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        src_ce0 = 1'b1;
    end else begin
        src_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        src_ce1 = 1'b1;
    end else begin
        src_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln121_82_fu_335_p2 = (rk_offset_read_reg_815 + 8'd2);

assign add_ln121_83_fu_345_p2 = (rk_offset_read_reg_815 + 8'd3);

assign add_ln121_fu_324_p2 = (rk_offset + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_299_p2 = (src_q1 ^ rk_q1);

assign grp_fu_305_p2 = (src_q0 ^ rk_q0);

assign or_ln134_7_fu_685_p3 = {{trunc_ln134_69_reg_955}, {tmp_153_reg_960}};

assign or_ln134_8_fu_747_p3 = {{trunc_ln134_71_reg_903_pp0_iter1_reg}, {tmp_157_reg_908_pp0_iter1_reg}};

assign or_ln134_s_fu_679_p3 = {{trunc_ln134_67_reg_939}, {tmp_149_reg_944}};

assign or_ln_fu_753_p3 = {{trunc_ln134_72_reg_913_pp0_iter1_reg}, {tmp_159_reg_918_pp0_iter1_reg}};

assign rk_offset_cast_fu_319_p1 = rk_offset;

assign select_ln131_66_fu_541_p3 = ((tmp_146_fu_527_p3[0:0] == 1'b1) ? xor_ln132_66_fu_535_p2 : clefia_s0_q0);

assign select_ln131_67_fu_583_p3 = ((tmp_148_fu_569_p3[0:0] == 1'b1) ? xor_ln132_67_fu_577_p2 : x_assign_29_fu_561_p3);

assign select_ln131_68_fu_617_p3 = ((tmp_150_fu_603_p3[0:0] == 1'b1) ? xor_ln132_68_fu_611_p2 : clefia_s1_q0);

assign select_ln131_69_fu_659_p3 = ((tmp_152_fu_645_p3[0:0] == 1'b1) ? xor_ln132_69_fu_653_p2 : x_assign_30_fu_637_p3);

assign select_ln131_70_fu_431_p3 = ((tmp_154_fu_417_p3[0:0] == 1'b1) ? xor_ln132_70_fu_425_p2 : clefia_s0_q0);

assign select_ln131_71_fu_473_p3 = ((tmp_156_fu_459_p3[0:0] == 1'b1) ? xor_ln132_71_fu_467_p2 : x_assign_31_fu_451_p3);

assign select_ln131_72_fu_507_p3 = ((tmp_158_fu_493_p3[0:0] == 1'b1) ? xor_ln132_72_fu_501_p2 : x_assign_s_fu_409_p3);

assign select_ln131_fu_389_p3 = ((tmp_fu_375_p3[0:0] == 1'b1) ? xor_ln132_fu_383_p2 : clefia_s1_q0);

assign tmp_145_fu_401_p3 = select_ln131_fu_389_p3[32'd7];

assign tmp_146_fu_527_p3 = clefia_s0_q0[32'd7];

assign tmp_147_fu_553_p3 = select_ln131_66_fu_541_p3[32'd7];

assign tmp_148_fu_569_p3 = select_ln131_66_fu_541_p3[32'd6];

assign tmp_150_fu_603_p3 = clefia_s1_q0[32'd7];

assign tmp_151_fu_629_p3 = select_ln131_68_fu_617_p3[32'd7];

assign tmp_152_fu_645_p3 = select_ln131_68_fu_617_p3[32'd6];

assign tmp_154_fu_417_p3 = clefia_s0_q0[32'd7];

assign tmp_155_fu_443_p3 = select_ln131_70_fu_431_p3[32'd7];

assign tmp_156_fu_459_p3 = select_ln131_70_fu_431_p3[32'd6];

assign tmp_158_fu_493_p3 = select_ln131_fu_389_p3[32'd6];

assign tmp_fu_375_p3 = clefia_s1_q0[32'd7];

assign trunc_ln134_66_fu_549_p1 = select_ln131_66_fu_541_p3[6:0];

assign trunc_ln134_67_fu_591_p1 = select_ln131_67_fu_583_p3[6:0];

assign trunc_ln134_68_fu_625_p1 = select_ln131_68_fu_617_p3[6:0];

assign trunc_ln134_69_fu_667_p1 = select_ln131_69_fu_659_p3[6:0];

assign trunc_ln134_70_fu_439_p1 = select_ln131_70_fu_431_p3[6:0];

assign trunc_ln134_71_fu_481_p1 = select_ln131_71_fu_473_p3[6:0];

assign trunc_ln134_72_fu_515_p1 = select_ln131_72_fu_507_p3[6:0];

assign trunc_ln134_fu_397_p1 = select_ln131_fu_389_p3[6:0];

assign x_assign_29_fu_561_p3 = {{trunc_ln134_66_fu_549_p1}, {tmp_147_fu_553_p3}};

assign x_assign_30_fu_637_p3 = {{trunc_ln134_68_fu_625_p1}, {tmp_151_fu_629_p3}};

assign x_assign_31_fu_451_p3 = {{trunc_ln134_70_fu_439_p1}, {tmp_155_fu_443_p3}};

assign x_assign_s_fu_409_p3 = {{trunc_ln134_fu_397_p1}, {tmp_145_fu_401_p3}};

assign xor_ln124_140_fu_691_p2 = (x_assign_s_reg_891 ^ src_q1);

assign xor_ln124_141_fu_696_p2 = (z_reg_871 ^ xor_ln124_140_fu_691_p2);

assign xor_ln124_142_fu_701_p2 = (x_assign_30_reg_949 ^ or_ln134_7_fu_685_p3);

assign xor_ln124_143_fu_706_p2 = (xor_ln124_142_fu_701_p2 ^ or_ln134_s_fu_679_p3);

assign xor_ln124_144_fu_719_p2 = (x_assign_31_reg_897 ^ src_q0);

assign xor_ln124_145_fu_724_p2 = (z_22_reg_876 ^ xor_ln124_144_fu_719_p2);

assign xor_ln124_146_fu_729_p2 = (or_ln134_s_fu_679_p3 ^ or_ln134_7_fu_685_p3);

assign xor_ln124_147_fu_735_p2 = (xor_ln124_146_fu_729_p2 ^ x_assign_29_reg_933);

assign xor_ln124_148_fu_759_p2 = (x_assign_s_reg_891_pp0_iter1_reg ^ src_q1);

assign xor_ln124_149_fu_764_p2 = (z_23_reg_923 ^ xor_ln124_148_fu_759_p2);

assign xor_ln124_150_fu_769_p2 = (x_assign_30_reg_949 ^ or_ln_fu_753_p3);

assign xor_ln124_151_fu_774_p2 = (xor_ln124_150_fu_769_p2 ^ or_ln134_8_fu_747_p3);

assign xor_ln124_152_fu_787_p2 = (src_q0 ^ or_ln134_8_fu_747_p3);

assign xor_ln124_153_fu_793_p2 = (z_24_reg_928 ^ xor_ln124_152_fu_787_p2);

assign xor_ln124_154_fu_798_p2 = (x_assign_29_reg_933 ^ or_ln_fu_753_p3);

assign xor_ln124_155_fu_803_p2 = (xor_ln124_154_fu_798_p2 ^ x_assign_31_reg_897_pp0_iter1_reg);

assign xor_ln124_65_fu_712_p2 = (xor_ln124_143_fu_706_p2 ^ xor_ln124_141_fu_696_p2);

assign xor_ln124_66_fu_740_p2 = (xor_ln124_147_fu_735_p2 ^ xor_ln124_145_fu_724_p2);

assign xor_ln124_67_fu_780_p2 = (xor_ln124_151_fu_774_p2 ^ xor_ln124_149_fu_764_p2);

assign xor_ln124_68_fu_808_p2 = (xor_ln124_155_fu_803_p2 ^ xor_ln124_153_fu_793_p2);

assign xor_ln132_66_fu_535_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_67_fu_577_p2 = (x_assign_29_fu_561_p3 ^ 8'd14);

assign xor_ln132_68_fu_611_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_69_fu_653_p2 = (x_assign_30_fu_637_p3 ^ 8'd14);

assign xor_ln132_70_fu_425_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_71_fu_467_p2 = (x_assign_31_fu_451_p3 ^ 8'd14);

assign xor_ln132_72_fu_501_p2 = (x_assign_s_fu_409_p3 ^ 8'd14);

assign xor_ln132_fu_383_p2 = (clefia_s1_q0 ^ 8'd14);

assign zext_ln121_117_fu_340_p1 = add_ln121_82_fu_335_p2;

assign zext_ln121_118_fu_350_p1 = add_ln121_83_fu_345_p2;

assign zext_ln121_fu_330_p1 = add_ln121_fu_324_p2;

assign zext_ln150_fu_355_p1 = reg_311;

assign zext_ln151_fu_360_p1 = reg_315;

assign zext_ln152_fu_365_p1 = reg_311;

assign zext_ln153_fu_370_p1 = reg_315;

endmodule //clefia_ClefiaF0Xor
