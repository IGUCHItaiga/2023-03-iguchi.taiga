// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clefia_ClefiaF1Xor_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0,
        dst_address1,
        dst_ce1,
        dst_we1,
        dst_d1,
        src_address0,
        src_ce0,
        src_q0,
        src_address1,
        src_ce1,
        src_q1,
        rk_address0,
        rk_ce0,
        rk_q0,
        rk_address1,
        rk_ce1,
        rk_q1,
        rk_offset
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [7:0] dst_d0;
output  [3:0] dst_address1;
output   dst_ce1;
output   dst_we1;
output  [7:0] dst_d1;
output  [3:0] src_address0;
output   src_ce0;
input  [7:0] src_q0;
output  [3:0] src_address1;
output   src_ce1;
input  [7:0] src_q1;
output  [7:0] rk_address0;
output   rk_ce0;
input  [7:0] rk_q0;
output  [7:0] rk_address1;
output   rk_ce1;
input  [7:0] rk_q1;
input  [7:0] rk_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] dst_address0;
reg dst_ce0;
reg dst_we0;
reg[7:0] dst_d0;
reg[3:0] dst_address1;
reg dst_ce1;
reg dst_we1;
reg[7:0] dst_d1;
reg[3:0] src_address0;
reg src_ce0;
reg[3:0] src_address1;
reg src_ce1;
reg[7:0] rk_address0;
reg rk_ce0;
reg[7:0] rk_address1;
reg rk_ce1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state8_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
reg   [7:0] clefia_s1_address0;
reg    clefia_s1_ce0;
wire   [7:0] clefia_s1_q0;
reg   [7:0] clefia_s0_address0;
reg    clefia_s0_ce0;
wire   [7:0] clefia_s0_q0;
wire   [7:0] grp_fu_301_p2;
reg   [7:0] reg_313;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [7:0] grp_fu_307_p2;
reg   [7:0] reg_317;
reg   [7:0] rk_offset_read_reg_977;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] z_reg_1033;
wire    ap_block_pp0_stage3_11001;
reg   [7:0] z_1_reg_1038;
wire   [6:0] trunc_ln134_2_fu_483_p1;
reg   [6:0] trunc_ln134_2_reg_1053;
reg   [0:0] tmp_12_reg_1058;
wire   [6:0] trunc_ln134_9_fu_601_p1;
reg   [6:0] trunc_ln134_9_reg_1063;
reg   [0:0] tmp_26_reg_1068;
wire   [7:0] xor_ln180_fu_613_p2;
reg   [7:0] xor_ln180_reg_1073;
reg   [7:0] xor_ln180_reg_1073_pp0_iter1_reg;
reg   [7:0] z_2_reg_1079;
reg   [7:0] z_3_reg_1084;
wire   [7:0] x_assign_s_fu_653_p3;
reg   [7:0] x_assign_s_reg_1089;
wire   [7:0] x_assign_1_fu_695_p3;
reg   [7:0] x_assign_1_reg_1095;
wire   [6:0] trunc_ln134_6_fu_767_p1;
reg   [6:0] trunc_ln134_6_reg_1101;
reg   [0:0] tmp_20_reg_1106;
wire   [6:0] trunc_ln134_11_fu_843_p1;
reg   [6:0] trunc_ln134_11_reg_1111;
reg   [0:0] tmp_30_reg_1116;
wire   [7:0] or_ln_fu_855_p3;
reg   [7:0] or_ln_reg_1131;
wire   [7:0] or_ln134_4_fu_861_p3;
reg   [7:0] or_ln134_4_reg_1136;
wire   [7:0] or_ln134_7_fu_867_p3;
reg   [7:0] or_ln134_7_reg_1141;
wire   [7:0] or_ln134_9_fu_873_p3;
reg   [7:0] or_ln134_9_reg_1146;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln165_fu_321_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln121_fu_332_p1;
wire   [63:0] zext_ln121_59_fu_342_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln121_60_fu_352_p1;
wire   [63:0] zext_ln173_fu_357_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln174_fu_362_p1;
wire   [63:0] zext_ln175_fu_367_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln176_fu_372_p1;
wire   [7:0] xor_ln124_32_fu_900_p2;
wire   [7:0] xor_ln124_33_fu_928_p2;
wire   [7:0] xor_ln124_34_fu_949_p2;
wire   [7:0] xor_ln124_35_fu_970_p2;
wire   [7:0] add_ln121_fu_326_p2;
wire   [7:0] add_ln121_24_fu_337_p2;
wire   [7:0] add_ln121_25_fu_347_p2;
wire   [0:0] tmp_fu_377_p3;
wire   [7:0] xor_ln132_fu_385_p2;
wire   [7:0] select_ln131_fu_391_p3;
wire   [6:0] trunc_ln134_fu_399_p1;
wire   [0:0] tmp_8_fu_403_p3;
wire   [7:0] x_assign_3_fu_411_p3;
wire   [0:0] tmp_9_fu_419_p3;
wire   [7:0] xor_ln132_1_fu_427_p2;
wire   [7:0] select_ln131_1_fu_433_p3;
wire   [6:0] trunc_ln134_1_fu_441_p1;
wire   [0:0] tmp_10_fu_445_p3;
wire   [7:0] x_assign_6_fu_453_p3;
wire   [0:0] tmp_11_fu_461_p3;
wire   [7:0] xor_ln132_2_fu_469_p2;
wire   [7:0] select_ln131_2_fu_475_p3;
wire   [0:0] tmp_21_fu_495_p3;
wire   [7:0] xor_ln132_7_fu_503_p2;
wire   [7:0] select_ln131_7_fu_509_p3;
wire   [6:0] trunc_ln134_7_fu_517_p1;
wire   [0:0] tmp_22_fu_521_p3;
wire   [7:0] x_assign_4_fu_529_p3;
wire   [0:0] tmp_23_fu_537_p3;
wire   [7:0] xor_ln132_8_fu_545_p2;
wire   [7:0] select_ln131_8_fu_551_p3;
wire   [6:0] trunc_ln134_8_fu_559_p1;
wire   [0:0] tmp_24_fu_563_p3;
wire   [7:0] x_assign_5_fu_571_p3;
wire   [0:0] tmp_25_fu_579_p3;
wire   [7:0] xor_ln132_9_fu_587_p2;
wire   [7:0] select_ln131_9_fu_593_p3;
wire   [0:0] tmp_13_fu_619_p3;
wire   [7:0] xor_ln132_3_fu_627_p2;
wire   [7:0] select_ln131_3_fu_633_p3;
wire   [6:0] trunc_ln134_3_fu_641_p1;
wire   [0:0] tmp_14_fu_645_p3;
wire   [0:0] tmp_15_fu_661_p3;
wire   [7:0] xor_ln132_4_fu_669_p2;
wire   [7:0] select_ln131_4_fu_675_p3;
wire   [6:0] trunc_ln134_4_fu_683_p1;
wire   [0:0] tmp_16_fu_687_p3;
wire   [0:0] tmp_17_fu_703_p3;
wire   [7:0] xor_ln132_5_fu_711_p2;
wire   [7:0] select_ln131_5_fu_717_p3;
wire   [6:0] trunc_ln134_5_fu_725_p1;
wire   [0:0] tmp_18_fu_729_p3;
wire   [7:0] x_assign_2_fu_737_p3;
wire   [0:0] tmp_19_fu_745_p3;
wire   [7:0] xor_ln132_6_fu_753_p2;
wire   [7:0] select_ln131_6_fu_759_p3;
wire   [0:0] tmp_27_fu_779_p3;
wire   [7:0] xor_ln132_10_fu_787_p2;
wire   [7:0] select_ln131_10_fu_793_p3;
wire   [6:0] trunc_ln134_10_fu_801_p1;
wire   [0:0] tmp_28_fu_805_p3;
wire   [7:0] x_assign_7_fu_813_p3;
wire   [0:0] tmp_29_fu_821_p3;
wire   [7:0] xor_ln132_11_fu_829_p2;
wire   [7:0] select_ln131_11_fu_835_p3;
wire   [7:0] xor_ln124_36_fu_879_p2;
wire   [7:0] xor_ln124_38_fu_889_p2;
wire   [7:0] xor_ln124_39_fu_894_p2;
wire   [7:0] xor_ln124_37_fu_884_p2;
wire   [7:0] xor_ln124_40_fu_907_p2;
wire   [7:0] xor_ln124_42_fu_918_p2;
wire   [7:0] xor_ln124_43_fu_923_p2;
wire   [7:0] xor_ln124_41_fu_913_p2;
wire   [7:0] xor_ln124_45_fu_940_p2;
wire   [7:0] xor_ln124_46_fu_944_p2;
wire   [7:0] xor_ln124_44_fu_935_p2;
wire   [7:0] xor_ln124_48_fu_961_p2;
wire   [7:0] xor_ln124_49_fu_965_p2;
wire   [7:0] xor_ln124_47_fu_956_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s1_address0),
    .ce0(clefia_s1_ce0),
    .q0(clefia_s1_q0)
);

clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s0_address0),
    .ce0(clefia_s0_ce0),
    .q0(clefia_s0_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        or_ln134_4_reg_1136 <= or_ln134_4_fu_861_p3;
        or_ln134_7_reg_1141 <= or_ln134_7_fu_867_p3;
        or_ln134_9_reg_1146 <= or_ln134_9_fu_873_p3;
        or_ln_reg_1131 <= or_ln_fu_855_p3;
        tmp_12_reg_1058 <= select_ln131_2_fu_475_p3[32'd7];
        tmp_26_reg_1068 <= select_ln131_9_fu_593_p3[32'd7];
        trunc_ln134_2_reg_1053 <= trunc_ln134_2_fu_483_p1;
        trunc_ln134_9_reg_1063 <= trunc_ln134_9_fu_601_p1;
        xor_ln180_reg_1073 <= xor_ln180_fu_613_p2;
        xor_ln180_reg_1073_pp0_iter1_reg <= xor_ln180_reg_1073;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_313 <= grp_fu_301_p2;
        reg_317 <= grp_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rk_offset_read_reg_977 <= rk_offset;
        tmp_20_reg_1106 <= select_ln131_6_fu_759_p3[32'd7];
        tmp_30_reg_1116 <= select_ln131_11_fu_835_p3[32'd7];
        trunc_ln134_11_reg_1111 <= trunc_ln134_11_fu_843_p1;
        trunc_ln134_6_reg_1101 <= trunc_ln134_6_fu_767_p1;
        x_assign_1_reg_1095 <= x_assign_1_fu_695_p3;
        x_assign_s_reg_1089 <= x_assign_s_fu_653_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        z_1_reg_1038 <= clefia_s0_q0;
        z_reg_1033 <= clefia_s1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_2_reg_1079 <= clefia_s1_q0;
        z_3_reg_1084 <= clefia_s0_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            clefia_s0_address0 = zext_ln176_fu_372_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            clefia_s0_address0 = zext_ln174_fu_362_p1;
        end else begin
            clefia_s0_address0 = 'bx;
        end
    end else begin
        clefia_s0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        clefia_s0_ce0 = 1'b1;
    end else begin
        clefia_s0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            clefia_s1_address0 = zext_ln175_fu_367_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            clefia_s1_address0 = zext_ln173_fu_357_p1;
        end else begin
            clefia_s1_address0 = 'bx;
        end
    end else begin
        clefia_s1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        clefia_s1_ce0 = 1'b1;
    end else begin
        clefia_s1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_address0 = 64'd15;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_address0 = 64'd13;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        dst_address0 = 64'd11;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dst_address0 = 64'd9;
    end else begin
        dst_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_address1 = 64'd14;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_address1 = 64'd12;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        dst_address1 = 64'd10;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dst_address1 = 64'd8;
    end else begin
        dst_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_ce0 = 1'b1;
    end else begin
        dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_ce1 = 1'b1;
    end else begin
        dst_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_d0 = xor_ln124_35_fu_970_p2;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_d0 = xor_ln124_33_fu_928_p2;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_d0 = src_q0;
    end else begin
        dst_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_d1 = xor_ln124_34_fu_949_p2;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_d1 = xor_ln124_32_fu_900_p2;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_d1 = src_q1;
    end else begin
        dst_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_we0 = 1'b1;
    end else begin
        dst_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_we1 = 1'b1;
    end else begin
        dst_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            rk_address0 = zext_ln121_60_fu_352_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            rk_address0 = zext_ln121_fu_332_p1;
        end else begin
            rk_address0 = 'bx;
        end
    end else begin
        rk_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            rk_address1 = zext_ln121_59_fu_342_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            rk_address1 = zext_ln165_fu_321_p1;
        end else begin
            rk_address1 = 'bx;
        end
    end else begin
        rk_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        rk_ce0 = 1'b1;
    end else begin
        rk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        rk_ce1 = 1'b1;
    end else begin
        rk_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        src_address0 = 64'd15;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        src_address0 = 64'd13;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        src_address0 = 64'd11;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_address0 = 64'd9;
    end else begin
        src_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        src_address1 = 64'd14;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        src_address1 = 64'd12;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        src_address1 = 64'd10;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_address1 = 64'd8;
    end else begin
        src_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        src_ce0 = 1'b1;
    end else begin
        src_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        src_ce1 = 1'b1;
    end else begin
        src_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln121_24_fu_337_p2 = (rk_offset_read_reg_977 + 8'd2);

assign add_ln121_25_fu_347_p2 = (rk_offset_read_reg_977 + 8'd3);

assign add_ln121_fu_326_p2 = (rk_offset + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_301_p2 = (src_q1 ^ rk_q1);

assign grp_fu_307_p2 = (src_q0 ^ rk_q0);

assign or_ln134_4_fu_861_p3 = {{trunc_ln134_6_reg_1101}, {tmp_20_reg_1106}};

assign or_ln134_7_fu_867_p3 = {{trunc_ln134_9_reg_1063}, {tmp_26_reg_1068}};

assign or_ln134_9_fu_873_p3 = {{trunc_ln134_11_reg_1111}, {tmp_30_reg_1116}};

assign or_ln_fu_855_p3 = {{trunc_ln134_2_reg_1053}, {tmp_12_reg_1058}};

assign select_ln131_10_fu_793_p3 = ((tmp_27_fu_779_p3[0:0] == 1'b1) ? xor_ln132_10_fu_787_p2 : x_assign_s_fu_653_p3);

assign select_ln131_11_fu_835_p3 = ((tmp_29_fu_821_p3[0:0] == 1'b1) ? xor_ln132_11_fu_829_p2 : x_assign_7_fu_813_p3);

assign select_ln131_1_fu_433_p3 = ((tmp_9_fu_419_p3[0:0] == 1'b1) ? xor_ln132_1_fu_427_p2 : x_assign_3_fu_411_p3);

assign select_ln131_2_fu_475_p3 = ((tmp_11_fu_461_p3[0:0] == 1'b1) ? xor_ln132_2_fu_469_p2 : x_assign_6_fu_453_p3);

assign select_ln131_3_fu_633_p3 = ((tmp_13_fu_619_p3[0:0] == 1'b1) ? xor_ln132_3_fu_627_p2 : clefia_s1_q0);

assign select_ln131_4_fu_675_p3 = ((tmp_15_fu_661_p3[0:0] == 1'b1) ? xor_ln132_4_fu_669_p2 : clefia_s0_q0);

assign select_ln131_5_fu_717_p3 = ((tmp_17_fu_703_p3[0:0] == 1'b1) ? xor_ln132_5_fu_711_p2 : x_assign_1_fu_695_p3);

assign select_ln131_6_fu_759_p3 = ((tmp_19_fu_745_p3[0:0] == 1'b1) ? xor_ln132_6_fu_753_p2 : x_assign_2_fu_737_p3);

assign select_ln131_7_fu_509_p3 = ((tmp_21_fu_495_p3[0:0] == 1'b1) ? xor_ln132_7_fu_503_p2 : clefia_s1_q0);

assign select_ln131_8_fu_551_p3 = ((tmp_23_fu_537_p3[0:0] == 1'b1) ? xor_ln132_8_fu_545_p2 : x_assign_4_fu_529_p3);

assign select_ln131_9_fu_593_p3 = ((tmp_25_fu_579_p3[0:0] == 1'b1) ? xor_ln132_9_fu_587_p2 : x_assign_5_fu_571_p3);

assign select_ln131_fu_391_p3 = ((tmp_fu_377_p3[0:0] == 1'b1) ? xor_ln132_fu_385_p2 : clefia_s0_q0);

assign tmp_10_fu_445_p3 = select_ln131_1_fu_433_p3[32'd7];

assign tmp_11_fu_461_p3 = select_ln131_1_fu_433_p3[32'd6];

assign tmp_13_fu_619_p3 = clefia_s1_q0[32'd7];

assign tmp_14_fu_645_p3 = select_ln131_3_fu_633_p3[32'd7];

assign tmp_15_fu_661_p3 = clefia_s0_q0[32'd7];

assign tmp_16_fu_687_p3 = select_ln131_4_fu_675_p3[32'd7];

assign tmp_17_fu_703_p3 = select_ln131_4_fu_675_p3[32'd6];

assign tmp_18_fu_729_p3 = select_ln131_5_fu_717_p3[32'd7];

assign tmp_19_fu_745_p3 = select_ln131_5_fu_717_p3[32'd6];

assign tmp_21_fu_495_p3 = clefia_s1_q0[32'd7];

assign tmp_22_fu_521_p3 = select_ln131_7_fu_509_p3[32'd7];

assign tmp_23_fu_537_p3 = select_ln131_7_fu_509_p3[32'd6];

assign tmp_24_fu_563_p3 = select_ln131_8_fu_551_p3[32'd7];

assign tmp_25_fu_579_p3 = select_ln131_8_fu_551_p3[32'd6];

assign tmp_27_fu_779_p3 = select_ln131_3_fu_633_p3[32'd6];

assign tmp_28_fu_805_p3 = select_ln131_10_fu_793_p3[32'd7];

assign tmp_29_fu_821_p3 = select_ln131_10_fu_793_p3[32'd6];

assign tmp_8_fu_403_p3 = select_ln131_fu_391_p3[32'd7];

assign tmp_9_fu_419_p3 = select_ln131_fu_391_p3[32'd6];

assign tmp_fu_377_p3 = clefia_s0_q0[32'd7];

assign trunc_ln134_10_fu_801_p1 = select_ln131_10_fu_793_p3[6:0];

assign trunc_ln134_11_fu_843_p1 = select_ln131_11_fu_835_p3[6:0];

assign trunc_ln134_1_fu_441_p1 = select_ln131_1_fu_433_p3[6:0];

assign trunc_ln134_2_fu_483_p1 = select_ln131_2_fu_475_p3[6:0];

assign trunc_ln134_3_fu_641_p1 = select_ln131_3_fu_633_p3[6:0];

assign trunc_ln134_4_fu_683_p1 = select_ln131_4_fu_675_p3[6:0];

assign trunc_ln134_5_fu_725_p1 = select_ln131_5_fu_717_p3[6:0];

assign trunc_ln134_6_fu_767_p1 = select_ln131_6_fu_759_p3[6:0];

assign trunc_ln134_7_fu_517_p1 = select_ln131_7_fu_509_p3[6:0];

assign trunc_ln134_8_fu_559_p1 = select_ln131_8_fu_551_p3[6:0];

assign trunc_ln134_9_fu_601_p1 = select_ln131_9_fu_593_p3[6:0];

assign trunc_ln134_fu_399_p1 = select_ln131_fu_391_p3[6:0];

assign x_assign_1_fu_695_p3 = {{trunc_ln134_4_fu_683_p1}, {tmp_16_fu_687_p3}};

assign x_assign_2_fu_737_p3 = {{trunc_ln134_5_fu_725_p1}, {tmp_18_fu_729_p3}};

assign x_assign_3_fu_411_p3 = {{trunc_ln134_fu_399_p1}, {tmp_8_fu_403_p3}};

assign x_assign_4_fu_529_p3 = {{trunc_ln134_7_fu_517_p1}, {tmp_22_fu_521_p3}};

assign x_assign_5_fu_571_p3 = {{trunc_ln134_8_fu_559_p1}, {tmp_24_fu_563_p3}};

assign x_assign_6_fu_453_p3 = {{trunc_ln134_1_fu_441_p1}, {tmp_10_fu_445_p3}};

assign x_assign_7_fu_813_p3 = {{trunc_ln134_10_fu_801_p1}, {tmp_28_fu_805_p3}};

assign x_assign_s_fu_653_p3 = {{trunc_ln134_3_fu_641_p1}, {tmp_14_fu_645_p3}};

assign xor_ln124_32_fu_900_p2 = (xor_ln124_39_fu_894_p2 ^ xor_ln124_37_fu_884_p2);

assign xor_ln124_33_fu_928_p2 = (xor_ln124_43_fu_923_p2 ^ xor_ln124_41_fu_913_p2);

assign xor_ln124_34_fu_949_p2 = (xor_ln124_46_fu_944_p2 ^ xor_ln124_44_fu_935_p2);

assign xor_ln124_35_fu_970_p2 = (xor_ln124_49_fu_965_p2 ^ xor_ln124_47_fu_956_p2);

assign xor_ln124_36_fu_879_p2 = (x_assign_s_reg_1089 ^ src_q1);

assign xor_ln124_37_fu_884_p2 = (z_reg_1033 ^ xor_ln124_36_fu_879_p2);

assign xor_ln124_38_fu_889_p2 = (x_assign_1_reg_1095 ^ or_ln134_4_fu_861_p3);

assign xor_ln124_39_fu_894_p2 = (xor_ln124_38_fu_889_p2 ^ or_ln_fu_855_p3);

assign xor_ln124_40_fu_907_p2 = (src_q0 ^ or_ln134_7_fu_867_p3);

assign xor_ln124_41_fu_913_p2 = (z_1_reg_1038 ^ xor_ln124_40_fu_907_p2);

assign xor_ln124_42_fu_918_p2 = (x_assign_1_reg_1095 ^ or_ln134_9_fu_873_p3);

assign xor_ln124_43_fu_923_p2 = (xor_ln124_42_fu_918_p2 ^ x_assign_s_reg_1089);

assign xor_ln124_44_fu_935_p2 = (z_2_reg_1079 ^ src_q1);

assign xor_ln124_45_fu_940_p2 = (or_ln_reg_1131 ^ or_ln134_4_reg_1136);

assign xor_ln124_46_fu_944_p2 = (xor_ln180_reg_1073_pp0_iter1_reg ^ xor_ln124_45_fu_940_p2);

assign xor_ln124_47_fu_956_p2 = (z_3_reg_1084 ^ src_q0);

assign xor_ln124_48_fu_961_p2 = (or_ln134_9_reg_1146 ^ or_ln134_7_reg_1141);

assign xor_ln124_49_fu_965_p2 = (xor_ln180_reg_1073_pp0_iter1_reg ^ xor_ln124_48_fu_961_p2);

assign xor_ln132_10_fu_787_p2 = (x_assign_s_fu_653_p3 ^ 8'd14);

assign xor_ln132_11_fu_829_p2 = (x_assign_7_fu_813_p3 ^ 8'd14);

assign xor_ln132_1_fu_427_p2 = (x_assign_3_fu_411_p3 ^ 8'd14);

assign xor_ln132_2_fu_469_p2 = (x_assign_6_fu_453_p3 ^ 8'd14);

assign xor_ln132_3_fu_627_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_4_fu_669_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_5_fu_711_p2 = (x_assign_1_fu_695_p3 ^ 8'd14);

assign xor_ln132_6_fu_753_p2 = (x_assign_2_fu_737_p3 ^ 8'd14);

assign xor_ln132_7_fu_503_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_8_fu_545_p2 = (x_assign_4_fu_529_p3 ^ 8'd14);

assign xor_ln132_9_fu_587_p2 = (x_assign_5_fu_571_p3 ^ 8'd14);

assign xor_ln132_fu_385_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln180_fu_613_p2 = (x_assign_4_fu_529_p3 ^ x_assign_3_fu_411_p3);

assign zext_ln121_59_fu_342_p1 = add_ln121_24_fu_337_p2;

assign zext_ln121_60_fu_352_p1 = add_ln121_25_fu_347_p2;

assign zext_ln121_fu_332_p1 = add_ln121_fu_326_p2;

assign zext_ln165_fu_321_p1 = rk_offset;

assign zext_ln173_fu_357_p1 = reg_313;

assign zext_ln174_fu_362_p1 = reg_317;

assign zext_ln175_fu_367_p1 = reg_313;

assign zext_ln176_fu_372_p1 = reg_317;

endmodule //clefia_ClefiaF1Xor_3
