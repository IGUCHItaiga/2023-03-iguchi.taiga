-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clefia_ClefiaF0Xor is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dst_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_ce1 : OUT STD_LOGIC;
    dst_we1 : OUT STD_LOGIC;
    dst_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    src_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    src_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    src_ce1 : OUT STD_LOGIC;
    src_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce0 : OUT STD_LOGIC;
    rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce1 : OUT STD_LOGIC;
    rk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_offset : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of clefia_ClefiaF0Xor is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal clefia_s0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_ce0 : STD_LOGIC;
    signal clefia_s0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_ce0 : STD_LOGIC;
    signal clefia_s1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_299_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_311 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_305_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_315 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_offset_read_reg_815 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal z_reg_871 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal z_22_reg_876 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_s_fu_409_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_s_reg_891 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_s_reg_891_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_31_fu_451_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_31_reg_897 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_31_reg_897_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_71_fu_481_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_71_reg_903 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_71_reg_903_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_157_reg_908 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_157_reg_908_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln134_72_fu_515_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_72_reg_913 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_72_reg_913_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_159_reg_918 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_159_reg_918_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal z_23_reg_923 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_24_reg_928 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_29_fu_561_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_29_reg_933 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_67_fu_591_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_67_reg_939 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_149_reg_944 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_30_fu_637_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_30_reg_949 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_69_fu_667_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_69_reg_955 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_153_reg_960 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal rk_offset_cast_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln121_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_117_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln121_118_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln151_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln153_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln124_65_fu_712_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_66_fu_740_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_67_fu_780_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_68_fu_808_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_fu_324_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_82_fu_335_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_83_fu_345_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_375_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_fu_383_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_fu_389_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_fu_397_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_145_fu_401_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_154_fu_417_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_70_fu_425_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_70_fu_431_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_70_fu_439_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_155_fu_443_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_156_fu_459_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_71_fu_467_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_71_fu_473_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_158_fu_493_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_72_fu_501_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_72_fu_507_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_146_fu_527_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_66_fu_535_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_66_fu_541_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_66_fu_549_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_147_fu_553_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_148_fu_569_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_67_fu_577_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_67_fu_583_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_150_fu_603_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_68_fu_611_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_68_fu_617_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_68_fu_625_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_151_fu_629_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_152_fu_645_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_69_fu_653_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_69_fu_659_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_140_fu_691_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_7_fu_685_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_142_fu_701_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_s_fu_679_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_143_fu_706_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_141_fu_696_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_144_fu_719_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_146_fu_729_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_147_fu_735_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_145_fu_724_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_148_fu_759_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_fu_753_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_150_fu_769_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_8_fu_747_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_151_fu_774_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_149_fu_764_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_152_fu_787_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_154_fu_798_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_155_fu_803_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_153_fu_793_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    clefia_s0_U : component clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s0_address0,
        ce0 => clefia_s0_ce0,
        q0 => clefia_s0_q0);

    clefia_s1_U : component clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s1_address0,
        ce0 => clefia_s1_ce0,
        q0 => clefia_s1_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_311 <= grp_fu_299_p2;
                reg_315 <= grp_fu_305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                rk_offset_read_reg_815 <= rk_offset;
                tmp_149_reg_944 <= select_ln131_67_fu_583_p3(7 downto 7);
                tmp_153_reg_960 <= select_ln131_69_fu_659_p3(7 downto 7);
                trunc_ln134_67_reg_939 <= trunc_ln134_67_fu_591_p1;
                trunc_ln134_69_reg_955 <= trunc_ln134_69_fu_667_p1;
                x_assign_29_reg_933 <= x_assign_29_fu_561_p3;
                x_assign_30_reg_949 <= x_assign_30_fu_637_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp_157_reg_908 <= select_ln131_71_fu_473_p3(7 downto 7);
                tmp_157_reg_908_pp0_iter1_reg <= tmp_157_reg_908;
                tmp_159_reg_918 <= select_ln131_72_fu_507_p3(7 downto 7);
                tmp_159_reg_918_pp0_iter1_reg <= tmp_159_reg_918;
                trunc_ln134_71_reg_903 <= trunc_ln134_71_fu_481_p1;
                trunc_ln134_71_reg_903_pp0_iter1_reg <= trunc_ln134_71_reg_903;
                trunc_ln134_72_reg_913 <= trunc_ln134_72_fu_515_p1;
                trunc_ln134_72_reg_913_pp0_iter1_reg <= trunc_ln134_72_reg_913;
                x_assign_31_reg_897 <= x_assign_31_fu_451_p3;
                x_assign_31_reg_897_pp0_iter1_reg <= x_assign_31_reg_897;
                x_assign_s_reg_891 <= x_assign_s_fu_409_p3;
                x_assign_s_reg_891_pp0_iter1_reg <= x_assign_s_reg_891;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                z_22_reg_876 <= clefia_s1_q0;
                z_reg_871 <= clefia_s0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                z_23_reg_923 <= clefia_s0_q0;
                z_24_reg_928 <= clefia_s1_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln121_82_fu_335_p2 <= std_logic_vector(unsigned(rk_offset_read_reg_815) + unsigned(ap_const_lv8_2));
    add_ln121_83_fu_345_p2 <= std_logic_vector(unsigned(rk_offset_read_reg_815) + unsigned(ap_const_lv8_3));
    add_ln121_fu_324_p2 <= std_logic_vector(unsigned(rk_offset) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s0_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, zext_ln150_fu_355_p1, ap_block_pp0_stage2, zext_ln152_fu_365_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                clefia_s0_address0 <= zext_ln152_fu_365_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                clefia_s0_address0 <= zext_ln150_fu_355_p1(8 - 1 downto 0);
            else 
                clefia_s0_address0 <= "XXXXXXXX";
            end if;
        else 
            clefia_s0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            clefia_s0_ce0 <= ap_const_logic_1;
        else 
            clefia_s0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s1_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, zext_ln151_fu_360_p1, ap_block_pp0_stage3, zext_ln153_fu_370_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                clefia_s1_address0 <= zext_ln153_fu_370_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                clefia_s1_address0 <= zext_ln151_fu_360_p1(8 - 1 downto 0);
            else 
                clefia_s1_address0 <= "XXXXXXXX";
            end if;
        else 
            clefia_s1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            clefia_s1_ce0 <= ap_const_logic_1;
        else 
            clefia_s1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dst_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dst_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            dst_address0 <= "XXXX";
        end if; 
    end process;


    dst_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dst_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dst_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            dst_address1 <= "XXXX";
        end if; 
    end process;


    dst_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_ce1 <= ap_const_logic_1;
        else 
            dst_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dst_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, src_q0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, xor_ln124_66_fu_740_p2, xor_ln124_68_fu_808_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_d0 <= xor_ln124_68_fu_808_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_d0 <= xor_ln124_66_fu_740_p2;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_d0 <= src_q0;
        else 
            dst_d0 <= "XXXXXXXX";
        end if; 
    end process;


    dst_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, src_q1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, xor_ln124_65_fu_712_p2, xor_ln124_67_fu_780_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_d1 <= xor_ln124_67_fu_780_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_d1 <= xor_ln124_65_fu_712_p2;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_d1 <= src_q1;
        else 
            dst_d1 <= "XXXXXXXX";
        end if; 
    end process;


    dst_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_we1 <= ap_const_logic_1;
        else 
            dst_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_299_p2 <= (src_q1 xor rk_q1);
    grp_fu_305_p2 <= (src_q0 xor rk_q0);
    or_ln134_7_fu_685_p3 <= (trunc_ln134_69_reg_955 & tmp_153_reg_960);
    or_ln134_8_fu_747_p3 <= (trunc_ln134_71_reg_903_pp0_iter1_reg & tmp_157_reg_908_pp0_iter1_reg);
    or_ln134_s_fu_679_p3 <= (trunc_ln134_67_reg_939 & tmp_149_reg_944);
    or_ln_fu_753_p3 <= (trunc_ln134_72_reg_913_pp0_iter1_reg & tmp_159_reg_918_pp0_iter1_reg);

    rk_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln121_fu_330_p1, ap_block_pp0_stage1, zext_ln121_118_fu_350_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                rk_address0 <= zext_ln121_118_fu_350_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                rk_address0 <= zext_ln121_fu_330_p1(8 - 1 downto 0);
            else 
                rk_address0 <= "XXXXXXXX";
            end if;
        else 
            rk_address0 <= "XXXXXXXX";
        end if; 
    end process;


    rk_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, rk_offset_cast_fu_319_p1, ap_block_pp0_stage0, zext_ln121_117_fu_340_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                rk_address1 <= zext_ln121_117_fu_340_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                rk_address1 <= rk_offset_cast_fu_319_p1(8 - 1 downto 0);
            else 
                rk_address1 <= "XXXXXXXX";
            end if;
        else 
            rk_address1 <= "XXXXXXXX";
        end if; 
    end process;


    rk_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            rk_ce0 <= ap_const_logic_1;
        else 
            rk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rk_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            rk_ce1 <= ap_const_logic_1;
        else 
            rk_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    rk_offset_cast_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rk_offset),64));
    select_ln131_66_fu_541_p3 <= 
        xor_ln132_66_fu_535_p2 when (tmp_146_fu_527_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_67_fu_583_p3 <= 
        xor_ln132_67_fu_577_p2 when (tmp_148_fu_569_p3(0) = '1') else 
        x_assign_29_fu_561_p3;
    select_ln131_68_fu_617_p3 <= 
        xor_ln132_68_fu_611_p2 when (tmp_150_fu_603_p3(0) = '1') else 
        clefia_s1_q0;
    select_ln131_69_fu_659_p3 <= 
        xor_ln132_69_fu_653_p2 when (tmp_152_fu_645_p3(0) = '1') else 
        x_assign_30_fu_637_p3;
    select_ln131_70_fu_431_p3 <= 
        xor_ln132_70_fu_425_p2 when (tmp_154_fu_417_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_71_fu_473_p3 <= 
        xor_ln132_71_fu_467_p2 when (tmp_156_fu_459_p3(0) = '1') else 
        x_assign_31_fu_451_p3;
    select_ln131_72_fu_507_p3 <= 
        xor_ln132_72_fu_501_p2 when (tmp_158_fu_493_p3(0) = '1') else 
        x_assign_s_fu_409_p3;
    select_ln131_fu_389_p3 <= 
        xor_ln132_fu_383_p2 when (tmp_fu_375_p3(0) = '1') else 
        clefia_s1_q0;

    src_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            src_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            src_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            src_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            src_address0 <= "XXXX";
        end if; 
    end process;


    src_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            src_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            src_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            src_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            src_address1 <= "XXXX";
        end if; 
    end process;


    src_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            src_ce1 <= ap_const_logic_1;
        else 
            src_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_145_fu_401_p3 <= select_ln131_fu_389_p3(7 downto 7);
    tmp_146_fu_527_p3 <= clefia_s0_q0(7 downto 7);
    tmp_147_fu_553_p3 <= select_ln131_66_fu_541_p3(7 downto 7);
    tmp_148_fu_569_p3 <= select_ln131_66_fu_541_p3(6 downto 6);
    tmp_150_fu_603_p3 <= clefia_s1_q0(7 downto 7);
    tmp_151_fu_629_p3 <= select_ln131_68_fu_617_p3(7 downto 7);
    tmp_152_fu_645_p3 <= select_ln131_68_fu_617_p3(6 downto 6);
    tmp_154_fu_417_p3 <= clefia_s0_q0(7 downto 7);
    tmp_155_fu_443_p3 <= select_ln131_70_fu_431_p3(7 downto 7);
    tmp_156_fu_459_p3 <= select_ln131_70_fu_431_p3(6 downto 6);
    tmp_158_fu_493_p3 <= select_ln131_fu_389_p3(6 downto 6);
    tmp_fu_375_p3 <= clefia_s1_q0(7 downto 7);
    trunc_ln134_66_fu_549_p1 <= select_ln131_66_fu_541_p3(7 - 1 downto 0);
    trunc_ln134_67_fu_591_p1 <= select_ln131_67_fu_583_p3(7 - 1 downto 0);
    trunc_ln134_68_fu_625_p1 <= select_ln131_68_fu_617_p3(7 - 1 downto 0);
    trunc_ln134_69_fu_667_p1 <= select_ln131_69_fu_659_p3(7 - 1 downto 0);
    trunc_ln134_70_fu_439_p1 <= select_ln131_70_fu_431_p3(7 - 1 downto 0);
    trunc_ln134_71_fu_481_p1 <= select_ln131_71_fu_473_p3(7 - 1 downto 0);
    trunc_ln134_72_fu_515_p1 <= select_ln131_72_fu_507_p3(7 - 1 downto 0);
    trunc_ln134_fu_397_p1 <= select_ln131_fu_389_p3(7 - 1 downto 0);
    x_assign_29_fu_561_p3 <= (trunc_ln134_66_fu_549_p1 & tmp_147_fu_553_p3);
    x_assign_30_fu_637_p3 <= (trunc_ln134_68_fu_625_p1 & tmp_151_fu_629_p3);
    x_assign_31_fu_451_p3 <= (trunc_ln134_70_fu_439_p1 & tmp_155_fu_443_p3);
    x_assign_s_fu_409_p3 <= (trunc_ln134_fu_397_p1 & tmp_145_fu_401_p3);
    xor_ln124_140_fu_691_p2 <= (x_assign_s_reg_891 xor src_q1);
    xor_ln124_141_fu_696_p2 <= (z_reg_871 xor xor_ln124_140_fu_691_p2);
    xor_ln124_142_fu_701_p2 <= (x_assign_30_reg_949 xor or_ln134_7_fu_685_p3);
    xor_ln124_143_fu_706_p2 <= (xor_ln124_142_fu_701_p2 xor or_ln134_s_fu_679_p3);
    xor_ln124_144_fu_719_p2 <= (x_assign_31_reg_897 xor src_q0);
    xor_ln124_145_fu_724_p2 <= (z_22_reg_876 xor xor_ln124_144_fu_719_p2);
    xor_ln124_146_fu_729_p2 <= (or_ln134_s_fu_679_p3 xor or_ln134_7_fu_685_p3);
    xor_ln124_147_fu_735_p2 <= (xor_ln124_146_fu_729_p2 xor x_assign_29_reg_933);
    xor_ln124_148_fu_759_p2 <= (x_assign_s_reg_891_pp0_iter1_reg xor src_q1);
    xor_ln124_149_fu_764_p2 <= (z_23_reg_923 xor xor_ln124_148_fu_759_p2);
    xor_ln124_150_fu_769_p2 <= (x_assign_30_reg_949 xor or_ln_fu_753_p3);
    xor_ln124_151_fu_774_p2 <= (xor_ln124_150_fu_769_p2 xor or_ln134_8_fu_747_p3);
    xor_ln124_152_fu_787_p2 <= (src_q0 xor or_ln134_8_fu_747_p3);
    xor_ln124_153_fu_793_p2 <= (z_24_reg_928 xor xor_ln124_152_fu_787_p2);
    xor_ln124_154_fu_798_p2 <= (x_assign_29_reg_933 xor or_ln_fu_753_p3);
    xor_ln124_155_fu_803_p2 <= (xor_ln124_154_fu_798_p2 xor x_assign_31_reg_897_pp0_iter1_reg);
    xor_ln124_65_fu_712_p2 <= (xor_ln124_143_fu_706_p2 xor xor_ln124_141_fu_696_p2);
    xor_ln124_66_fu_740_p2 <= (xor_ln124_147_fu_735_p2 xor xor_ln124_145_fu_724_p2);
    xor_ln124_67_fu_780_p2 <= (xor_ln124_151_fu_774_p2 xor xor_ln124_149_fu_764_p2);
    xor_ln124_68_fu_808_p2 <= (xor_ln124_155_fu_803_p2 xor xor_ln124_153_fu_793_p2);
    xor_ln132_66_fu_535_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_67_fu_577_p2 <= (x_assign_29_fu_561_p3 xor ap_const_lv8_E);
    xor_ln132_68_fu_611_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln132_69_fu_653_p2 <= (x_assign_30_fu_637_p3 xor ap_const_lv8_E);
    xor_ln132_70_fu_425_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_71_fu_467_p2 <= (x_assign_31_fu_451_p3 xor ap_const_lv8_E);
    xor_ln132_72_fu_501_p2 <= (x_assign_s_fu_409_p3 xor ap_const_lv8_E);
    xor_ln132_fu_383_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    zext_ln121_117_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_82_fu_335_p2),64));
    zext_ln121_118_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_83_fu_345_p2),64));
    zext_ln121_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_fu_324_p2),64));
    zext_ln150_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_311),64));
    zext_ln151_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_315),64));
    zext_ln152_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_311),64));
    zext_ln153_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_315),64));
end behav;
