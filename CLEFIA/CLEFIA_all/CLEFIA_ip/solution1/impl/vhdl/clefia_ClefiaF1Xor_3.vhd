-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clefia_ClefiaF1Xor_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dst_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_ce1 : OUT STD_LOGIC;
    dst_we1 : OUT STD_LOGIC;
    dst_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    src_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    src_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    src_ce1 : OUT STD_LOGIC;
    src_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce0 : OUT STD_LOGIC;
    rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce1 : OUT STD_LOGIC;
    rk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_offset : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of clefia_ClefiaF1Xor_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal clefia_s1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_ce0 : STD_LOGIC;
    signal clefia_s1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_ce0 : STD_LOGIC;
    signal clefia_s0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_301_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_313 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_307_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_317 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_offset_read_reg_977 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal z_reg_1033 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal z_1_reg_1038 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_2_fu_483_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_2_reg_1053 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_reg_1058 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln134_9_fu_601_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_9_reg_1063 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_26_reg_1068 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln180_fu_613_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln180_reg_1073 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln180_reg_1073_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal z_2_reg_1079 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_3_reg_1084 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_s_fu_653_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_s_reg_1089 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_1_fu_695_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_1_reg_1095 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_6_fu_767_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_6_reg_1101 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_reg_1106 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln134_11_fu_843_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_11_reg_1111 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_30_reg_1116 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_855_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_reg_1131 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_4_fu_861_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_4_reg_1136 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_7_fu_867_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_7_reg_1141 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_9_fu_873_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_9_reg_1146 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln165_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln121_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_59_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln121_60_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln174_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln176_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln124_32_fu_900_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_33_fu_928_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_34_fu_949_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_35_fu_970_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_fu_326_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_24_fu_337_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_25_fu_347_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_377_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_fu_385_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_fu_391_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_fu_399_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_403_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_3_fu_411_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_419_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_1_fu_427_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_1_fu_433_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_1_fu_441_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_445_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_6_fu_453_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_461_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_2_fu_469_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_2_fu_475_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_495_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_7_fu_503_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_7_fu_509_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_7_fu_517_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_22_fu_521_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_4_fu_529_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_537_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_8_fu_545_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_8_fu_551_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_8_fu_559_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_fu_563_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_5_fu_571_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_579_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_9_fu_587_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_9_fu_593_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_619_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_3_fu_627_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_3_fu_633_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_3_fu_641_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_14_fu_645_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_661_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_4_fu_669_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_4_fu_675_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_4_fu_683_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_16_fu_687_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_703_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_5_fu_711_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_5_fu_717_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_5_fu_725_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_fu_729_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_2_fu_737_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_745_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_6_fu_753_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_6_fu_759_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_779_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_10_fu_787_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_10_fu_793_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_10_fu_801_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_28_fu_805_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_7_fu_813_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_821_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_11_fu_829_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_11_fu_835_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_36_fu_879_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_38_fu_889_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_39_fu_894_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_37_fu_884_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_40_fu_907_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_42_fu_918_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_43_fu_923_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_41_fu_913_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_45_fu_940_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_46_fu_944_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_44_fu_935_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_48_fu_961_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_49_fu_965_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_47_fu_956_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    clefia_s1_U : component clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s1_address0,
        ce0 => clefia_s1_ce0,
        q0 => clefia_s1_q0);

    clefia_s0_U : component clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s0_address0,
        ce0 => clefia_s0_ce0,
        q0 => clefia_s0_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                or_ln134_4_reg_1136 <= or_ln134_4_fu_861_p3;
                or_ln134_7_reg_1141 <= or_ln134_7_fu_867_p3;
                or_ln134_9_reg_1146 <= or_ln134_9_fu_873_p3;
                or_ln_reg_1131 <= or_ln_fu_855_p3;
                tmp_12_reg_1058 <= select_ln131_2_fu_475_p3(7 downto 7);
                tmp_26_reg_1068 <= select_ln131_9_fu_593_p3(7 downto 7);
                trunc_ln134_2_reg_1053 <= trunc_ln134_2_fu_483_p1;
                trunc_ln134_9_reg_1063 <= trunc_ln134_9_fu_601_p1;
                xor_ln180_reg_1073 <= xor_ln180_fu_613_p2;
                xor_ln180_reg_1073_pp0_iter1_reg <= xor_ln180_reg_1073;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_313 <= grp_fu_301_p2;
                reg_317 <= grp_fu_307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                rk_offset_read_reg_977 <= rk_offset;
                tmp_20_reg_1106 <= select_ln131_6_fu_759_p3(7 downto 7);
                tmp_30_reg_1116 <= select_ln131_11_fu_835_p3(7 downto 7);
                trunc_ln134_11_reg_1111 <= trunc_ln134_11_fu_843_p1;
                trunc_ln134_6_reg_1101 <= trunc_ln134_6_fu_767_p1;
                x_assign_1_reg_1095 <= x_assign_1_fu_695_p3;
                x_assign_s_reg_1089 <= x_assign_s_fu_653_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                z_1_reg_1038 <= clefia_s0_q0;
                z_reg_1033 <= clefia_s1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                z_2_reg_1079 <= clefia_s1_q0;
                z_3_reg_1084 <= clefia_s0_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln121_24_fu_337_p2 <= std_logic_vector(unsigned(rk_offset_read_reg_977) + unsigned(ap_const_lv8_2));
    add_ln121_25_fu_347_p2 <= std_logic_vector(unsigned(rk_offset_read_reg_977) + unsigned(ap_const_lv8_3));
    add_ln121_fu_326_p2 <= std_logic_vector(unsigned(rk_offset) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s0_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, zext_ln174_fu_362_p1, ap_block_pp0_stage3, zext_ln176_fu_372_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                clefia_s0_address0 <= zext_ln176_fu_372_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                clefia_s0_address0 <= zext_ln174_fu_362_p1(8 - 1 downto 0);
            else 
                clefia_s0_address0 <= "XXXXXXXX";
            end if;
        else 
            clefia_s0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            clefia_s0_ce0 <= ap_const_logic_1;
        else 
            clefia_s0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s1_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, zext_ln173_fu_357_p1, ap_block_pp0_stage2, zext_ln175_fu_367_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                clefia_s1_address0 <= zext_ln175_fu_367_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                clefia_s1_address0 <= zext_ln173_fu_357_p1(8 - 1 downto 0);
            else 
                clefia_s1_address0 <= "XXXXXXXX";
            end if;
        else 
            clefia_s1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            clefia_s1_ce0 <= ap_const_logic_1;
        else 
            clefia_s1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dst_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dst_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        else 
            dst_address0 <= "XXXX";
        end if; 
    end process;


    dst_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dst_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dst_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        else 
            dst_address1 <= "XXXX";
        end if; 
    end process;


    dst_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_ce1 <= ap_const_logic_1;
        else 
            dst_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dst_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, src_q0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, xor_ln124_33_fu_928_p2, xor_ln124_35_fu_970_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_d0 <= xor_ln124_35_fu_970_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_d0 <= xor_ln124_33_fu_928_p2;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_d0 <= src_q0;
        else 
            dst_d0 <= "XXXXXXXX";
        end if; 
    end process;


    dst_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, src_q1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, xor_ln124_32_fu_900_p2, xor_ln124_34_fu_949_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_d1 <= xor_ln124_34_fu_949_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_d1 <= xor_ln124_32_fu_900_p2;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_d1 <= src_q1;
        else 
            dst_d1 <= "XXXXXXXX";
        end if; 
    end process;


    dst_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_we1 <= ap_const_logic_1;
        else 
            dst_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_301_p2 <= (src_q1 xor rk_q1);
    grp_fu_307_p2 <= (src_q0 xor rk_q0);
    or_ln134_4_fu_861_p3 <= (trunc_ln134_6_reg_1101 & tmp_20_reg_1106);
    or_ln134_7_fu_867_p3 <= (trunc_ln134_9_reg_1063 & tmp_26_reg_1068);
    or_ln134_9_fu_873_p3 <= (trunc_ln134_11_reg_1111 & tmp_30_reg_1116);
    or_ln_fu_855_p3 <= (trunc_ln134_2_reg_1053 & tmp_12_reg_1058);

    rk_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln121_fu_332_p1, ap_block_pp0_stage1, zext_ln121_60_fu_352_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                rk_address0 <= zext_ln121_60_fu_352_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                rk_address0 <= zext_ln121_fu_332_p1(8 - 1 downto 0);
            else 
                rk_address0 <= "XXXXXXXX";
            end if;
        else 
            rk_address0 <= "XXXXXXXX";
        end if; 
    end process;


    rk_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, zext_ln165_fu_321_p1, ap_block_pp0_stage0, zext_ln121_59_fu_342_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                rk_address1 <= zext_ln121_59_fu_342_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                rk_address1 <= zext_ln165_fu_321_p1(8 - 1 downto 0);
            else 
                rk_address1 <= "XXXXXXXX";
            end if;
        else 
            rk_address1 <= "XXXXXXXX";
        end if; 
    end process;


    rk_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            rk_ce0 <= ap_const_logic_1;
        else 
            rk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rk_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            rk_ce1 <= ap_const_logic_1;
        else 
            rk_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln131_10_fu_793_p3 <= 
        xor_ln132_10_fu_787_p2 when (tmp_27_fu_779_p3(0) = '1') else 
        x_assign_s_fu_653_p3;
    select_ln131_11_fu_835_p3 <= 
        xor_ln132_11_fu_829_p2 when (tmp_29_fu_821_p3(0) = '1') else 
        x_assign_7_fu_813_p3;
    select_ln131_1_fu_433_p3 <= 
        xor_ln132_1_fu_427_p2 when (tmp_9_fu_419_p3(0) = '1') else 
        x_assign_3_fu_411_p3;
    select_ln131_2_fu_475_p3 <= 
        xor_ln132_2_fu_469_p2 when (tmp_11_fu_461_p3(0) = '1') else 
        x_assign_6_fu_453_p3;
    select_ln131_3_fu_633_p3 <= 
        xor_ln132_3_fu_627_p2 when (tmp_13_fu_619_p3(0) = '1') else 
        clefia_s1_q0;
    select_ln131_4_fu_675_p3 <= 
        xor_ln132_4_fu_669_p2 when (tmp_15_fu_661_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_5_fu_717_p3 <= 
        xor_ln132_5_fu_711_p2 when (tmp_17_fu_703_p3(0) = '1') else 
        x_assign_1_fu_695_p3;
    select_ln131_6_fu_759_p3 <= 
        xor_ln132_6_fu_753_p2 when (tmp_19_fu_745_p3(0) = '1') else 
        x_assign_2_fu_737_p3;
    select_ln131_7_fu_509_p3 <= 
        xor_ln132_7_fu_503_p2 when (tmp_21_fu_495_p3(0) = '1') else 
        clefia_s1_q0;
    select_ln131_8_fu_551_p3 <= 
        xor_ln132_8_fu_545_p2 when (tmp_23_fu_537_p3(0) = '1') else 
        x_assign_4_fu_529_p3;
    select_ln131_9_fu_593_p3 <= 
        xor_ln132_9_fu_587_p2 when (tmp_25_fu_579_p3(0) = '1') else 
        x_assign_5_fu_571_p3;
    select_ln131_fu_391_p3 <= 
        xor_ln132_fu_385_p2 when (tmp_fu_377_p3(0) = '1') else 
        clefia_s0_q0;

    src_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            src_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            src_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            src_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        else 
            src_address0 <= "XXXX";
        end if; 
    end process;


    src_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            src_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            src_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            src_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        else 
            src_address1 <= "XXXX";
        end if; 
    end process;


    src_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            src_ce1 <= ap_const_logic_1;
        else 
            src_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_445_p3 <= select_ln131_1_fu_433_p3(7 downto 7);
    tmp_11_fu_461_p3 <= select_ln131_1_fu_433_p3(6 downto 6);
    tmp_13_fu_619_p3 <= clefia_s1_q0(7 downto 7);
    tmp_14_fu_645_p3 <= select_ln131_3_fu_633_p3(7 downto 7);
    tmp_15_fu_661_p3 <= clefia_s0_q0(7 downto 7);
    tmp_16_fu_687_p3 <= select_ln131_4_fu_675_p3(7 downto 7);
    tmp_17_fu_703_p3 <= select_ln131_4_fu_675_p3(6 downto 6);
    tmp_18_fu_729_p3 <= select_ln131_5_fu_717_p3(7 downto 7);
    tmp_19_fu_745_p3 <= select_ln131_5_fu_717_p3(6 downto 6);
    tmp_21_fu_495_p3 <= clefia_s1_q0(7 downto 7);
    tmp_22_fu_521_p3 <= select_ln131_7_fu_509_p3(7 downto 7);
    tmp_23_fu_537_p3 <= select_ln131_7_fu_509_p3(6 downto 6);
    tmp_24_fu_563_p3 <= select_ln131_8_fu_551_p3(7 downto 7);
    tmp_25_fu_579_p3 <= select_ln131_8_fu_551_p3(6 downto 6);
    tmp_27_fu_779_p3 <= select_ln131_3_fu_633_p3(6 downto 6);
    tmp_28_fu_805_p3 <= select_ln131_10_fu_793_p3(7 downto 7);
    tmp_29_fu_821_p3 <= select_ln131_10_fu_793_p3(6 downto 6);
    tmp_8_fu_403_p3 <= select_ln131_fu_391_p3(7 downto 7);
    tmp_9_fu_419_p3 <= select_ln131_fu_391_p3(6 downto 6);
    tmp_fu_377_p3 <= clefia_s0_q0(7 downto 7);
    trunc_ln134_10_fu_801_p1 <= select_ln131_10_fu_793_p3(7 - 1 downto 0);
    trunc_ln134_11_fu_843_p1 <= select_ln131_11_fu_835_p3(7 - 1 downto 0);
    trunc_ln134_1_fu_441_p1 <= select_ln131_1_fu_433_p3(7 - 1 downto 0);
    trunc_ln134_2_fu_483_p1 <= select_ln131_2_fu_475_p3(7 - 1 downto 0);
    trunc_ln134_3_fu_641_p1 <= select_ln131_3_fu_633_p3(7 - 1 downto 0);
    trunc_ln134_4_fu_683_p1 <= select_ln131_4_fu_675_p3(7 - 1 downto 0);
    trunc_ln134_5_fu_725_p1 <= select_ln131_5_fu_717_p3(7 - 1 downto 0);
    trunc_ln134_6_fu_767_p1 <= select_ln131_6_fu_759_p3(7 - 1 downto 0);
    trunc_ln134_7_fu_517_p1 <= select_ln131_7_fu_509_p3(7 - 1 downto 0);
    trunc_ln134_8_fu_559_p1 <= select_ln131_8_fu_551_p3(7 - 1 downto 0);
    trunc_ln134_9_fu_601_p1 <= select_ln131_9_fu_593_p3(7 - 1 downto 0);
    trunc_ln134_fu_399_p1 <= select_ln131_fu_391_p3(7 - 1 downto 0);
    x_assign_1_fu_695_p3 <= (trunc_ln134_4_fu_683_p1 & tmp_16_fu_687_p3);
    x_assign_2_fu_737_p3 <= (trunc_ln134_5_fu_725_p1 & tmp_18_fu_729_p3);
    x_assign_3_fu_411_p3 <= (trunc_ln134_fu_399_p1 & tmp_8_fu_403_p3);
    x_assign_4_fu_529_p3 <= (trunc_ln134_7_fu_517_p1 & tmp_22_fu_521_p3);
    x_assign_5_fu_571_p3 <= (trunc_ln134_8_fu_559_p1 & tmp_24_fu_563_p3);
    x_assign_6_fu_453_p3 <= (trunc_ln134_1_fu_441_p1 & tmp_10_fu_445_p3);
    x_assign_7_fu_813_p3 <= (trunc_ln134_10_fu_801_p1 & tmp_28_fu_805_p3);
    x_assign_s_fu_653_p3 <= (trunc_ln134_3_fu_641_p1 & tmp_14_fu_645_p3);
    xor_ln124_32_fu_900_p2 <= (xor_ln124_39_fu_894_p2 xor xor_ln124_37_fu_884_p2);
    xor_ln124_33_fu_928_p2 <= (xor_ln124_43_fu_923_p2 xor xor_ln124_41_fu_913_p2);
    xor_ln124_34_fu_949_p2 <= (xor_ln124_46_fu_944_p2 xor xor_ln124_44_fu_935_p2);
    xor_ln124_35_fu_970_p2 <= (xor_ln124_49_fu_965_p2 xor xor_ln124_47_fu_956_p2);
    xor_ln124_36_fu_879_p2 <= (x_assign_s_reg_1089 xor src_q1);
    xor_ln124_37_fu_884_p2 <= (z_reg_1033 xor xor_ln124_36_fu_879_p2);
    xor_ln124_38_fu_889_p2 <= (x_assign_1_reg_1095 xor or_ln134_4_fu_861_p3);
    xor_ln124_39_fu_894_p2 <= (xor_ln124_38_fu_889_p2 xor or_ln_fu_855_p3);
    xor_ln124_40_fu_907_p2 <= (src_q0 xor or_ln134_7_fu_867_p3);
    xor_ln124_41_fu_913_p2 <= (z_1_reg_1038 xor xor_ln124_40_fu_907_p2);
    xor_ln124_42_fu_918_p2 <= (x_assign_1_reg_1095 xor or_ln134_9_fu_873_p3);
    xor_ln124_43_fu_923_p2 <= (xor_ln124_42_fu_918_p2 xor x_assign_s_reg_1089);
    xor_ln124_44_fu_935_p2 <= (z_2_reg_1079 xor src_q1);
    xor_ln124_45_fu_940_p2 <= (or_ln_reg_1131 xor or_ln134_4_reg_1136);
    xor_ln124_46_fu_944_p2 <= (xor_ln180_reg_1073_pp0_iter1_reg xor xor_ln124_45_fu_940_p2);
    xor_ln124_47_fu_956_p2 <= (z_3_reg_1084 xor src_q0);
    xor_ln124_48_fu_961_p2 <= (or_ln134_9_reg_1146 xor or_ln134_7_reg_1141);
    xor_ln124_49_fu_965_p2 <= (xor_ln180_reg_1073_pp0_iter1_reg xor xor_ln124_48_fu_961_p2);
    xor_ln132_10_fu_787_p2 <= (x_assign_s_fu_653_p3 xor ap_const_lv8_E);
    xor_ln132_11_fu_829_p2 <= (x_assign_7_fu_813_p3 xor ap_const_lv8_E);
    xor_ln132_1_fu_427_p2 <= (x_assign_3_fu_411_p3 xor ap_const_lv8_E);
    xor_ln132_2_fu_469_p2 <= (x_assign_6_fu_453_p3 xor ap_const_lv8_E);
    xor_ln132_3_fu_627_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln132_4_fu_669_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_5_fu_711_p2 <= (x_assign_1_fu_695_p3 xor ap_const_lv8_E);
    xor_ln132_6_fu_753_p2 <= (x_assign_2_fu_737_p3 xor ap_const_lv8_E);
    xor_ln132_7_fu_503_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln132_8_fu_545_p2 <= (x_assign_4_fu_529_p3 xor ap_const_lv8_E);
    xor_ln132_9_fu_587_p2 <= (x_assign_5_fu_571_p3 xor ap_const_lv8_E);
    xor_ln132_fu_385_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln180_fu_613_p2 <= (x_assign_4_fu_529_p3 xor x_assign_3_fu_411_p3);
    zext_ln121_59_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_24_fu_337_p2),64));
    zext_ln121_60_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_25_fu_347_p2),64));
    zext_ln121_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_fu_326_p2),64));
    zext_ln165_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rk_offset),64));
    zext_ln173_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_313),64));
    zext_ln174_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_317),64));
    zext_ln175_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_313),64));
    zext_ln176_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_317),64));
end behav;
