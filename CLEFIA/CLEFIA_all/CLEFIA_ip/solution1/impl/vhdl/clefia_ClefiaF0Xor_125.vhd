-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clefia_ClefiaF0Xor_125 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dst_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_ce1 : OUT STD_LOGIC;
    dst_we1 : OUT STD_LOGIC;
    dst_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    src_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    src_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    src_ce1 : OUT STD_LOGIC;
    src_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce0 : OUT STD_LOGIC;
    rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_offset : IN STD_LOGIC_VECTOR (6 downto 0) );
end;


architecture behav of clefia_ClefiaF0Xor_125 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal clefia_s0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_ce0 : STD_LOGIC;
    signal clefia_s0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_ce0 : STD_LOGIC;
    signal clefia_s1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_295 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_300_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_306 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal rk_offset_read_reg_814 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal xor_ln124_fu_315_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_reg_836 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_load_38_reg_861 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_reg_876 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_25_fu_394_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_25_reg_886 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_25_reg_886_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_57_fu_424_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_57_reg_892 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_57_reg_892_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_127_reg_897 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_127_reg_897_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln124_34_fu_436_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_34_reg_902 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_16_reg_907 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_s_fu_480_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_s_reg_917 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_58_fu_510_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_58_reg_923 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_129_reg_928 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_17_reg_933 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_23_fu_560_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_23_reg_943 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_53_fu_590_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_53_reg_949 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_119_reg_954 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_18_reg_959 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_24_fu_636_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_24_reg_964 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_55_fu_666_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_55_reg_970 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_123_reg_975 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal rk_offset_cast_fu_310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln121_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln121_102_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln150_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_103_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln151_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln153_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln124_56_fu_711_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_57_fu_739_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_58_fu_779_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_59_fu_807_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_fu_321_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln121_67_fu_331_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln121_68_fu_345_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_124_fu_360_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_56_fu_368_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_56_fu_374_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_56_fu_382_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_125_fu_386_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_126_fu_402_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_57_fu_410_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_57_fu_416_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_446_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_fu_454_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_fu_460_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_fu_468_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_115_fu_472_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_128_fu_488_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_58_fu_496_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_58_fu_502_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_116_fu_526_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_52_fu_534_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_52_fu_540_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_52_fu_548_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_117_fu_552_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_118_fu_568_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_53_fu_576_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_53_fu_582_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_120_fu_602_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_54_fu_610_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_54_fu_616_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_54_fu_624_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_121_fu_628_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_122_fu_644_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_55_fu_652_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_55_fu_658_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_108_fu_690_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_3_fu_684_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_110_fu_700_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_s_fu_678_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_111_fu_705_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_109_fu_695_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_112_fu_718_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_114_fu_728_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_115_fu_734_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_113_fu_723_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_116_fu_758_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_fu_752_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_118_fu_768_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_4_fu_746_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_119_fu_773_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_117_fu_763_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_120_fu_786_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_122_fu_797_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_123_fu_802_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_121_fu_792_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    clefia_s0_U : component clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s0_address0,
        ce0 => clefia_s0_ce0,
        q0 => clefia_s0_q0);

    clefia_s1_U : component clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s1_address0,
        ce0 => clefia_s1_ce0,
        q0 => clefia_s1_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    reg_295 <= src_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    reg_295 <= src_q0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then
                reg_306 <= grp_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                rk_offset_read_reg_814 <= rk_offset;
                tmp_129_reg_928 <= select_ln131_58_fu_502_p3(7 downto 7);
                trunc_ln134_58_reg_923 <= trunc_ln134_58_fu_510_p1;
                x_assign_s_reg_917 <= x_assign_s_fu_480_p3;
                xor_ln124_34_reg_902 <= xor_ln124_34_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                src_load_38_reg_861 <= src_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_119_reg_954 <= select_ln131_53_fu_582_p3(7 downto 7);
                trunc_ln134_53_reg_949 <= trunc_ln134_53_fu_590_p1;
                x_assign_23_reg_943 <= x_assign_23_fu_560_p3;
                xor_ln124_reg_836 <= xor_ln124_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_123_reg_975 <= select_ln131_55_fu_658_p3(7 downto 7);
                trunc_ln134_55_reg_970 <= trunc_ln134_55_fu_666_p1;
                x_assign_24_reg_964 <= x_assign_24_fu_636_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp_127_reg_897 <= select_ln131_57_fu_416_p3(7 downto 7);
                tmp_127_reg_897_pp0_iter1_reg <= tmp_127_reg_897;
                trunc_ln134_57_reg_892 <= trunc_ln134_57_fu_424_p1;
                trunc_ln134_57_reg_892_pp0_iter1_reg <= trunc_ln134_57_reg_892;
                x_assign_25_reg_886 <= x_assign_25_fu_394_p3;
                x_assign_25_reg_886_pp0_iter1_reg <= x_assign_25_reg_886;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                z_16_reg_907 <= clefia_s1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                z_17_reg_933 <= clefia_s0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                z_18_reg_959 <= clefia_s1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                z_reg_876 <= clefia_s0_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln121_67_fu_331_p2 <= std_logic_vector(unsigned(rk_offset_read_reg_814) + unsigned(ap_const_lv7_2));
    add_ln121_68_fu_345_p2 <= std_logic_vector(unsigned(rk_offset_read_reg_814) + unsigned(ap_const_lv7_3));
    add_ln121_fu_321_p2 <= std_logic_vector(unsigned(rk_offset_read_reg_814) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, zext_ln150_fu_341_p1, zext_ln152_fu_441_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            clefia_s0_address0 <= zext_ln152_fu_441_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            clefia_s0_address0 <= zext_ln150_fu_341_p1(8 - 1 downto 0);
        else 
            clefia_s0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            clefia_s0_ce0 <= ap_const_logic_1;
        else 
            clefia_s0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s1_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage3, zext_ln151_fu_355_p1, zext_ln153_fu_522_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            clefia_s1_address0 <= zext_ln153_fu_522_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            clefia_s1_address0 <= zext_ln151_fu_355_p1(8 - 1 downto 0);
        else 
            clefia_s1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            clefia_s1_ce0 <= ap_const_logic_1;
        else 
            clefia_s1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dst_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dst_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            dst_address0 <= "XXXX";
        end if; 
    end process;


    dst_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dst_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dst_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            dst_address1 <= "XXXX";
        end if; 
    end process;


    dst_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_ce1 <= ap_const_logic_1;
        else 
            dst_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dst_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, src_q0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, xor_ln124_57_fu_739_p2, xor_ln124_59_fu_807_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_d0 <= xor_ln124_59_fu_807_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_d0 <= xor_ln124_57_fu_739_p2;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_d0 <= src_q0;
        else 
            dst_d0 <= "XXXXXXXX";
        end if; 
    end process;


    dst_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, src_q1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, xor_ln124_56_fu_711_p2, xor_ln124_58_fu_779_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_d1 <= xor_ln124_58_fu_779_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_d1 <= xor_ln124_56_fu_711_p2;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_d1 <= src_q1;
        else 
            dst_d1 <= "XXXXXXXX";
        end if; 
    end process;


    dst_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_we1 <= ap_const_logic_1;
        else 
            dst_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_300_p2 <= (rk_q0 xor reg_295);
    or_ln134_3_fu_684_p3 <= (trunc_ln134_55_reg_970 & tmp_123_reg_975);
    or_ln134_4_fu_746_p3 <= (trunc_ln134_57_reg_892_pp0_iter1_reg & tmp_127_reg_897_pp0_iter1_reg);
    or_ln134_s_fu_678_p3 <= (trunc_ln134_53_reg_949 & tmp_119_reg_954);
    or_ln_fu_752_p3 <= (trunc_ln134_58_reg_923 & tmp_129_reg_928);

    rk_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, rk_offset_cast_fu_310_p1, ap_block_pp0_stage0, zext_ln121_fu_326_p1, ap_block_pp0_stage1, zext_ln121_102_fu_336_p1, ap_block_pp0_stage2, zext_ln121_103_fu_350_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                rk_address0 <= zext_ln121_103_fu_350_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                rk_address0 <= zext_ln121_102_fu_336_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                rk_address0 <= zext_ln121_fu_326_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                rk_address0 <= rk_offset_cast_fu_310_p1(8 - 1 downto 0);
            else 
                rk_address0 <= "XXXXXXXX";
            end if;
        else 
            rk_address0 <= "XXXXXXXX";
        end if; 
    end process;


    rk_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            rk_ce0 <= ap_const_logic_1;
        else 
            rk_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rk_offset_cast_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rk_offset),64));
    select_ln131_52_fu_540_p3 <= 
        xor_ln132_52_fu_534_p2 when (tmp_116_fu_526_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_53_fu_582_p3 <= 
        xor_ln132_53_fu_576_p2 when (tmp_118_fu_568_p3(0) = '1') else 
        x_assign_23_fu_560_p3;
    select_ln131_54_fu_616_p3 <= 
        xor_ln132_54_fu_610_p2 when (tmp_120_fu_602_p3(0) = '1') else 
        clefia_s1_q0;
    select_ln131_55_fu_658_p3 <= 
        xor_ln132_55_fu_652_p2 when (tmp_122_fu_644_p3(0) = '1') else 
        x_assign_24_fu_636_p3;
    select_ln131_56_fu_374_p3 <= 
        xor_ln132_56_fu_368_p2 when (tmp_124_fu_360_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_57_fu_416_p3 <= 
        xor_ln132_57_fu_410_p2 when (tmp_126_fu_402_p3(0) = '1') else 
        x_assign_25_fu_394_p3;
    select_ln131_58_fu_502_p3 <= 
        xor_ln132_58_fu_496_p2 when (tmp_128_fu_488_p3(0) = '1') else 
        x_assign_s_fu_480_p3;
    select_ln131_fu_460_p3 <= 
        xor_ln132_fu_454_p2 when (tmp_fu_446_p3(0) = '1') else 
        clefia_s1_q0;

    src_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            src_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            src_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            src_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            src_address0 <= "XXXX";
        end if; 
    end process;


    src_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            src_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            src_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            src_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            src_address1 <= "XXXX";
        end if; 
    end process;


    src_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            src_ce1 <= ap_const_logic_1;
        else 
            src_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_115_fu_472_p3 <= select_ln131_fu_460_p3(7 downto 7);
    tmp_116_fu_526_p3 <= clefia_s0_q0(7 downto 7);
    tmp_117_fu_552_p3 <= select_ln131_52_fu_540_p3(7 downto 7);
    tmp_118_fu_568_p3 <= select_ln131_52_fu_540_p3(6 downto 6);
    tmp_120_fu_602_p3 <= clefia_s1_q0(7 downto 7);
    tmp_121_fu_628_p3 <= select_ln131_54_fu_616_p3(7 downto 7);
    tmp_122_fu_644_p3 <= select_ln131_54_fu_616_p3(6 downto 6);
    tmp_124_fu_360_p3 <= clefia_s0_q0(7 downto 7);
    tmp_125_fu_386_p3 <= select_ln131_56_fu_374_p3(7 downto 7);
    tmp_126_fu_402_p3 <= select_ln131_56_fu_374_p3(6 downto 6);
    tmp_128_fu_488_p3 <= select_ln131_fu_460_p3(6 downto 6);
    tmp_fu_446_p3 <= clefia_s1_q0(7 downto 7);
    trunc_ln134_52_fu_548_p1 <= select_ln131_52_fu_540_p3(7 - 1 downto 0);
    trunc_ln134_53_fu_590_p1 <= select_ln131_53_fu_582_p3(7 - 1 downto 0);
    trunc_ln134_54_fu_624_p1 <= select_ln131_54_fu_616_p3(7 - 1 downto 0);
    trunc_ln134_55_fu_666_p1 <= select_ln131_55_fu_658_p3(7 - 1 downto 0);
    trunc_ln134_56_fu_382_p1 <= select_ln131_56_fu_374_p3(7 - 1 downto 0);
    trunc_ln134_57_fu_424_p1 <= select_ln131_57_fu_416_p3(7 - 1 downto 0);
    trunc_ln134_58_fu_510_p1 <= select_ln131_58_fu_502_p3(7 - 1 downto 0);
    trunc_ln134_fu_468_p1 <= select_ln131_fu_460_p3(7 - 1 downto 0);
    x_assign_23_fu_560_p3 <= (trunc_ln134_52_fu_548_p1 & tmp_117_fu_552_p3);
    x_assign_24_fu_636_p3 <= (trunc_ln134_54_fu_624_p1 & tmp_121_fu_628_p3);
    x_assign_25_fu_394_p3 <= (trunc_ln134_56_fu_382_p1 & tmp_125_fu_386_p3);
    x_assign_s_fu_480_p3 <= (trunc_ln134_fu_468_p1 & tmp_115_fu_472_p3);
    xor_ln124_108_fu_690_p2 <= (x_assign_s_reg_917 xor src_q1);
    xor_ln124_109_fu_695_p2 <= (z_reg_876 xor xor_ln124_108_fu_690_p2);
    xor_ln124_110_fu_700_p2 <= (x_assign_24_reg_964 xor or_ln134_3_fu_684_p3);
    xor_ln124_111_fu_705_p2 <= (xor_ln124_110_fu_700_p2 xor or_ln134_s_fu_678_p3);
    xor_ln124_112_fu_718_p2 <= (x_assign_25_reg_886 xor src_q0);
    xor_ln124_113_fu_723_p2 <= (z_16_reg_907 xor xor_ln124_112_fu_718_p2);
    xor_ln124_114_fu_728_p2 <= (or_ln134_s_fu_678_p3 xor or_ln134_3_fu_684_p3);
    xor_ln124_115_fu_734_p2 <= (xor_ln124_114_fu_728_p2 xor x_assign_23_reg_943);
    xor_ln124_116_fu_758_p2 <= (x_assign_s_reg_917 xor src_q1);
    xor_ln124_117_fu_763_p2 <= (z_17_reg_933 xor xor_ln124_116_fu_758_p2);
    xor_ln124_118_fu_768_p2 <= (x_assign_24_reg_964 xor or_ln_fu_752_p3);
    xor_ln124_119_fu_773_p2 <= (xor_ln124_118_fu_768_p2 xor or_ln134_4_fu_746_p3);
    xor_ln124_120_fu_786_p2 <= (src_q0 xor or_ln134_4_fu_746_p3);
    xor_ln124_121_fu_792_p2 <= (z_18_reg_959 xor xor_ln124_120_fu_786_p2);
    xor_ln124_122_fu_797_p2 <= (x_assign_23_reg_943 xor or_ln_fu_752_p3);
    xor_ln124_123_fu_802_p2 <= (xor_ln124_122_fu_797_p2 xor x_assign_25_reg_886_pp0_iter1_reg);
    xor_ln124_34_fu_436_p2 <= (src_load_38_reg_861 xor rk_q0);
    xor_ln124_56_fu_711_p2 <= (xor_ln124_111_fu_705_p2 xor xor_ln124_109_fu_695_p2);
    xor_ln124_57_fu_739_p2 <= (xor_ln124_115_fu_734_p2 xor xor_ln124_113_fu_723_p2);
    xor_ln124_58_fu_779_p2 <= (xor_ln124_119_fu_773_p2 xor xor_ln124_117_fu_763_p2);
    xor_ln124_59_fu_807_p2 <= (xor_ln124_123_fu_802_p2 xor xor_ln124_121_fu_792_p2);
    xor_ln124_fu_315_p2 <= (src_q1 xor rk_q0);
    xor_ln132_52_fu_534_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_53_fu_576_p2 <= (x_assign_23_fu_560_p3 xor ap_const_lv8_E);
    xor_ln132_54_fu_610_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln132_55_fu_652_p2 <= (x_assign_24_fu_636_p3 xor ap_const_lv8_E);
    xor_ln132_56_fu_368_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_57_fu_410_p2 <= (x_assign_25_fu_394_p3 xor ap_const_lv8_E);
    xor_ln132_58_fu_496_p2 <= (x_assign_s_fu_480_p3 xor ap_const_lv8_E);
    xor_ln132_fu_454_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    zext_ln121_102_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_67_fu_331_p2),64));
    zext_ln121_103_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_68_fu_345_p2),64));
    zext_ln121_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_fu_321_p2),64));
    zext_ln150_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_reg_836),64));
    zext_ln151_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_306),64));
    zext_ln152_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_306),64));
    zext_ln153_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_34_reg_902),64));
end behav;
