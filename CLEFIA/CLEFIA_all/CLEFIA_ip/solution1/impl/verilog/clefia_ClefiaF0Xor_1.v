// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clefia_ClefiaF0Xor_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0,
        dst_address1,
        dst_ce1,
        dst_we1,
        dst_d1,
        dst_offset,
        src_address0,
        src_ce0,
        src_q0,
        src_address1,
        src_ce1,
        src_q1,
        src_offset,
        rk_address0,
        rk_ce0,
        rk_q0,
        rk_offset
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
output  [4:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [7:0] dst_d0;
output  [4:0] dst_address1;
output   dst_ce1;
output   dst_we1;
output  [7:0] dst_d1;
input  [4:0] dst_offset;
output  [4:0] src_address0;
output   src_ce0;
input  [7:0] src_q0;
output  [4:0] src_address1;
output   src_ce1;
input  [7:0] src_q1;
input  [4:0] src_offset;
output  [8:0] rk_address0;
output   rk_ce0;
input  [7:0] rk_q0;
input  [7:0] rk_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] dst_address0;
reg dst_ce0;
reg dst_we0;
reg[7:0] dst_d0;
reg[4:0] dst_address1;
reg dst_ce1;
reg dst_we1;
reg[7:0] dst_d1;
reg[4:0] src_address0;
reg src_ce0;
reg[4:0] src_address1;
reg src_ce1;
reg[8:0] rk_address0;
reg rk_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state8_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_subdone;
reg   [7:0] clefia_s0_address0;
reg    clefia_s0_ce0;
wire   [7:0] clefia_s0_q0;
reg   [7:0] clefia_s1_address0;
reg    clefia_s1_ce0;
wire   [7:0] clefia_s1_q0;
reg   [7:0] reg_297;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [7:0] grp_fu_302_p2;
reg   [7:0] reg_308;
wire    ap_block_pp0_stage3_11001;
reg   [7:0] rk_offset_read_reg_972;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [4:0] src_offset_read_reg_977;
reg   [4:0] src_offset_read_reg_977_pp0_iter1_reg;
reg   [4:0] dst_offset_read_reg_1002;
reg   [4:0] dst_offset_read_reg_1002_pp0_iter1_reg;
wire   [8:0] rk_offset_cast_fu_338_p1;
reg   [8:0] rk_offset_cast_reg_1012;
wire   [7:0] xor_ln124_fu_341_p2;
reg   [7:0] xor_ln124_reg_1018;
reg   [7:0] src_load_45_reg_1043;
reg   [7:0] z_reg_1058;
wire   [7:0] x_assign_28_fu_472_p3;
reg   [7:0] x_assign_28_reg_1068;
reg   [7:0] x_assign_28_reg_1068_pp0_iter1_reg;
wire   [6:0] trunc_ln134_64_fu_502_p1;
reg   [6:0] trunc_ln134_64_reg_1074;
reg   [6:0] trunc_ln134_64_reg_1074_pp0_iter1_reg;
reg   [0:0] tmp_142_reg_1079;
reg   [0:0] tmp_142_reg_1079_pp0_iter1_reg;
wire   [7:0] xor_ln124_60_fu_514_p2;
reg   [7:0] xor_ln124_60_reg_1084;
reg   [7:0] z_19_reg_1089;
wire   [7:0] x_assign_s_fu_558_p3;
reg   [7:0] x_assign_s_reg_1099;
wire   [6:0] trunc_ln134_65_fu_588_p1;
reg   [6:0] trunc_ln134_65_reg_1105;
reg   [0:0] tmp_144_reg_1110;
reg   [7:0] z_20_reg_1115;
wire   [7:0] x_assign_26_fu_638_p3;
reg   [7:0] x_assign_26_reg_1125;
wire   [6:0] trunc_ln134_60_fu_668_p1;
reg   [6:0] trunc_ln134_60_reg_1131;
reg   [0:0] tmp_134_reg_1136;
reg   [7:0] z_21_reg_1141;
wire   [7:0] x_assign_27_fu_714_p3;
reg   [7:0] x_assign_27_reg_1146;
wire   [6:0] trunc_ln134_62_fu_744_p1;
reg   [6:0] trunc_ln134_62_reg_1152;
reg   [0:0] tmp_138_reg_1157;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg   [4:0] ap_port_reg_dst_offset;
wire   [63:0] rk_offset_cast1_fu_312_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] src_offset_cast_fu_317_p1;
wire   [63:0] zext_ln121_104_fu_328_p1;
wire   [63:0] zext_ln121_fu_353_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln121_106_fu_363_p1;
wire   [63:0] zext_ln121_108_fu_373_p1;
wire   [63:0] dst_offset_cast_fu_333_p1;
wire   [63:0] zext_ln114_fu_384_p1;
wire   [63:0] zext_ln121_105_fu_394_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln150_fu_399_p1;
wire   [63:0] zext_ln114_9_fu_408_p1;
wire   [63:0] zext_ln114_10_fu_418_p1;
wire   [63:0] zext_ln121_107_fu_428_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln151_fu_433_p1;
wire   [63:0] zext_ln152_fu_519_p1;
wire   [63:0] zext_ln153_fu_600_p1;
wire   [63:0] zext_ln121_109_fu_761_p1;
wire   [63:0] zext_ln121_111_fu_771_p1;
wire   [63:0] zext_ln121_110_fu_793_p1;
wire   [63:0] zext_ln121_112_fu_831_p1;
wire   [63:0] zext_ln121_113_fu_869_p1;
wire   [63:0] zext_ln121_115_fu_879_p1;
wire   [63:0] zext_ln121_114_fu_901_p1;
wire   [63:0] zext_ln121_116_fu_939_p1;
wire   [7:0] xor_ln124_61_fu_819_p2;
wire   [7:0] xor_ln124_62_fu_857_p2;
wire   [7:0] xor_ln124_63_fu_927_p2;
wire   [7:0] xor_ln124_64_fu_965_p2;
wire   [4:0] add_ln121_69_fu_322_p2;
wire   [8:0] add_ln121_fu_347_p2;
wire   [4:0] add_ln121_71_fu_358_p2;
wire   [4:0] add_ln121_73_fu_368_p2;
wire   [4:0] add_ln114_fu_378_p2;
wire   [8:0] add_ln121_70_fu_389_p2;
wire   [4:0] add_ln114_7_fu_403_p2;
wire   [4:0] add_ln114_8_fu_413_p2;
wire   [8:0] add_ln121_72_fu_423_p2;
wire   [0:0] tmp_139_fu_438_p3;
wire   [7:0] xor_ln132_63_fu_446_p2;
wire   [7:0] select_ln131_63_fu_452_p3;
wire   [6:0] trunc_ln134_63_fu_460_p1;
wire   [0:0] tmp_140_fu_464_p3;
wire   [0:0] tmp_141_fu_480_p3;
wire   [7:0] xor_ln132_64_fu_488_p2;
wire   [7:0] select_ln131_64_fu_494_p3;
wire   [0:0] tmp_fu_524_p3;
wire   [7:0] xor_ln132_fu_532_p2;
wire   [7:0] select_ln131_fu_538_p3;
wire   [6:0] trunc_ln134_fu_546_p1;
wire   [0:0] tmp_130_fu_550_p3;
wire   [0:0] tmp_143_fu_566_p3;
wire   [7:0] xor_ln132_65_fu_574_p2;
wire   [7:0] select_ln131_65_fu_580_p3;
wire   [0:0] tmp_131_fu_604_p3;
wire   [7:0] xor_ln132_59_fu_612_p2;
wire   [7:0] select_ln131_59_fu_618_p3;
wire   [6:0] trunc_ln134_59_fu_626_p1;
wire   [0:0] tmp_132_fu_630_p3;
wire   [0:0] tmp_133_fu_646_p3;
wire   [7:0] xor_ln132_60_fu_654_p2;
wire   [7:0] select_ln131_60_fu_660_p3;
wire   [0:0] tmp_135_fu_680_p3;
wire   [7:0] xor_ln132_61_fu_688_p2;
wire   [7:0] select_ln131_61_fu_694_p3;
wire   [6:0] trunc_ln134_61_fu_702_p1;
wire   [0:0] tmp_136_fu_706_p3;
wire   [0:0] tmp_137_fu_722_p3;
wire   [7:0] xor_ln132_62_fu_730_p2;
wire   [7:0] select_ln131_62_fu_736_p3;
wire   [4:0] add_ln121_74_fu_756_p2;
wire   [4:0] add_ln121_76_fu_766_p2;
wire   [4:0] add_ln121_75_fu_788_p2;
wire   [7:0] xor_ln124_124_fu_798_p2;
wire   [7:0] or_ln134_5_fu_782_p3;
wire   [7:0] xor_ln124_126_fu_808_p2;
wire   [7:0] or_ln134_s_fu_776_p3;
wire   [7:0] xor_ln124_127_fu_813_p2;
wire   [7:0] xor_ln124_125_fu_803_p2;
wire   [4:0] add_ln121_77_fu_826_p2;
wire   [7:0] xor_ln124_128_fu_836_p2;
wire   [7:0] xor_ln124_130_fu_846_p2;
wire   [7:0] xor_ln124_131_fu_852_p2;
wire   [7:0] xor_ln124_129_fu_841_p2;
wire   [4:0] add_ln121_78_fu_864_p2;
wire   [4:0] add_ln121_80_fu_874_p2;
wire   [4:0] add_ln121_79_fu_896_p2;
wire   [7:0] xor_ln124_132_fu_906_p2;
wire   [7:0] or_ln_fu_890_p3;
wire   [7:0] xor_ln124_134_fu_916_p2;
wire   [7:0] or_ln134_6_fu_884_p3;
wire   [7:0] xor_ln124_135_fu_921_p2;
wire   [7:0] xor_ln124_133_fu_911_p2;
wire   [4:0] add_ln121_81_fu_934_p2;
wire   [7:0] xor_ln124_136_fu_944_p2;
wire   [7:0] xor_ln124_138_fu_955_p2;
wire   [7:0] xor_ln124_139_fu_960_p2;
wire   [7:0] xor_ln124_137_fu_950_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to2;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s0_address0),
    .ce0(clefia_s0_ce0),
    .q0(clefia_s0_q0)
);

clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s1_address0),
    .ce0(clefia_s1_ce0),
    .q0(clefia_s1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce))) begin
        if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            reg_297 <= src_q1;
        end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            reg_297 <= src_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_port_reg_dst_offset <= dst_offset;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce))) begin
        dst_offset_read_reg_1002 <= ap_port_reg_dst_offset;
        dst_offset_read_reg_1002_pp0_iter1_reg <= dst_offset_read_reg_1002;
        rk_offset_cast_reg_1012[7 : 0] <= rk_offset_cast_fu_338_p1[7 : 0];
        tmp_134_reg_1136 <= select_ln131_60_fu_660_p3[32'd7];
        trunc_ln134_60_reg_1131 <= trunc_ln134_60_fu_668_p1;
        x_assign_26_reg_1125 <= x_assign_26_fu_638_p3;
        xor_ln124_reg_1018 <= xor_ln124_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_308 <= grp_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rk_offset_read_reg_972 <= rk_offset;
        src_offset_read_reg_977 <= src_offset;
        src_offset_read_reg_977_pp0_iter1_reg <= src_offset_read_reg_977;
        tmp_144_reg_1110 <= select_ln131_65_fu_580_p3[32'd7];
        trunc_ln134_65_reg_1105 <= trunc_ln134_65_fu_588_p1;
        x_assign_s_reg_1099 <= x_assign_s_fu_558_p3;
        xor_ln124_60_reg_1084 <= xor_ln124_60_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        src_load_45_reg_1043 <= src_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_138_reg_1157 <= select_ln131_62_fu_736_p3[32'd7];
        trunc_ln134_62_reg_1152 <= trunc_ln134_62_fu_744_p1;
        x_assign_27_reg_1146 <= x_assign_27_fu_714_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_142_reg_1079 <= select_ln131_64_fu_494_p3[32'd7];
        tmp_142_reg_1079_pp0_iter1_reg <= tmp_142_reg_1079;
        trunc_ln134_64_reg_1074 <= trunc_ln134_64_fu_502_p1;
        trunc_ln134_64_reg_1074_pp0_iter1_reg <= trunc_ln134_64_reg_1074;
        x_assign_28_reg_1068 <= x_assign_28_fu_472_p3;
        x_assign_28_reg_1068_pp0_iter1_reg <= x_assign_28_reg_1068;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_19_reg_1089 <= clefia_s1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce))) begin
        z_20_reg_1115 <= clefia_s0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        z_21_reg_1141 <= clefia_s1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        z_reg_1058 <= clefia_s0_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        clefia_s0_address0 = zext_ln152_fu_519_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        clefia_s0_address0 = zext_ln150_fu_399_p1;
    end else begin
        clefia_s0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        clefia_s0_ce0 = 1'b1;
    end else begin
        clefia_s0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        clefia_s1_address0 = zext_ln153_fu_600_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        clefia_s1_address0 = zext_ln151_fu_433_p1;
    end else begin
        clefia_s1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce)))) begin
        clefia_s1_ce0 = 1'b1;
    end else begin
        clefia_s1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_address0 = zext_ln121_116_fu_939_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_address0 = zext_ln121_112_fu_831_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        dst_address0 = zext_ln114_10_fu_418_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dst_address0 = zext_ln114_fu_384_p1;
    end else begin
        dst_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_address1 = zext_ln121_114_fu_901_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_address1 = zext_ln121_110_fu_793_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        dst_address1 = zext_ln114_9_fu_408_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dst_address1 = dst_offset_cast_fu_333_p1;
    end else begin
        dst_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce)))) begin
        dst_ce0 = 1'b1;
    end else begin
        dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce)))) begin
        dst_ce1 = 1'b1;
    end else begin
        dst_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_d0 = xor_ln124_64_fu_965_p2;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_d0 = xor_ln124_62_fu_857_p2;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_d0 = src_q0;
    end else begin
        dst_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_d1 = xor_ln124_63_fu_927_p2;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_d1 = xor_ln124_61_fu_819_p2;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_d1 = src_q1;
    end else begin
        dst_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce)))) begin
        dst_we0 = 1'b1;
    end else begin
        dst_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce)))) begin
        dst_we1 = 1'b1;
    end else begin
        dst_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            rk_address0 = zext_ln121_107_fu_428_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            rk_address0 = zext_ln121_105_fu_394_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            rk_address0 = zext_ln121_fu_353_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            rk_address0 = rk_offset_cast1_fu_312_p1;
        end else begin
            rk_address0 = 'bx;
        end
    end else begin
        rk_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce)))) begin
        rk_ce0 = 1'b1;
    end else begin
        rk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        src_address0 = zext_ln121_115_fu_879_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        src_address0 = zext_ln121_111_fu_771_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        src_address0 = zext_ln121_108_fu_373_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_address0 = zext_ln121_104_fu_328_p1;
    end else begin
        src_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        src_address1 = zext_ln121_113_fu_869_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        src_address1 = zext_ln121_109_fu_761_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        src_address1 = zext_ln121_106_fu_363_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_address1 = src_offset_cast_fu_317_p1;
    end else begin
        src_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce)))) begin
        src_ce0 = 1'b1;
    end else begin
        src_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce)))) begin
        src_ce1 = 1'b1;
    end else begin
        src_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln114_7_fu_403_p2 = (dst_offset_read_reg_1002 + 5'd2);

assign add_ln114_8_fu_413_p2 = (dst_offset_read_reg_1002 + 5'd3);

assign add_ln114_fu_378_p2 = (ap_port_reg_dst_offset + 5'd1);

assign add_ln121_69_fu_322_p2 = (src_offset + 5'd1);

assign add_ln121_70_fu_389_p2 = (rk_offset_cast_reg_1012 + 9'd2);

assign add_ln121_71_fu_358_p2 = (src_offset_read_reg_977 + 5'd2);

assign add_ln121_72_fu_423_p2 = (rk_offset_cast_reg_1012 + 9'd3);

assign add_ln121_73_fu_368_p2 = (src_offset_read_reg_977 + 5'd3);

assign add_ln121_74_fu_756_p2 = (src_offset_read_reg_977_pp0_iter1_reg + 5'd4);

assign add_ln121_75_fu_788_p2 = (dst_offset_read_reg_1002_pp0_iter1_reg + 5'd4);

assign add_ln121_76_fu_766_p2 = (src_offset_read_reg_977_pp0_iter1_reg + 5'd5);

assign add_ln121_77_fu_826_p2 = (dst_offset_read_reg_1002_pp0_iter1_reg + 5'd5);

assign add_ln121_78_fu_864_p2 = (src_offset_read_reg_977_pp0_iter1_reg + 5'd6);

assign add_ln121_79_fu_896_p2 = (dst_offset_read_reg_1002_pp0_iter1_reg + 5'd6);

assign add_ln121_80_fu_874_p2 = (src_offset_read_reg_977_pp0_iter1_reg + 5'd7);

assign add_ln121_81_fu_934_p2 = (dst_offset_read_reg_1002_pp0_iter1_reg + 5'd7);

assign add_ln121_fu_347_p2 = (rk_offset_cast_fu_338_p1 + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_subdone = (1'b0 == ap_ce);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dst_offset_cast_fu_333_p1 = ap_port_reg_dst_offset;

assign grp_fu_302_p2 = (rk_q0 ^ reg_297);

assign or_ln134_5_fu_782_p3 = {{trunc_ln134_62_reg_1152}, {tmp_138_reg_1157}};

assign or_ln134_6_fu_884_p3 = {{trunc_ln134_64_reg_1074_pp0_iter1_reg}, {tmp_142_reg_1079_pp0_iter1_reg}};

assign or_ln134_s_fu_776_p3 = {{trunc_ln134_60_reg_1131}, {tmp_134_reg_1136}};

assign or_ln_fu_890_p3 = {{trunc_ln134_65_reg_1105}, {tmp_144_reg_1110}};

assign rk_offset_cast1_fu_312_p1 = rk_offset;

assign rk_offset_cast_fu_338_p1 = rk_offset_read_reg_972;

assign select_ln131_59_fu_618_p3 = ((tmp_131_fu_604_p3[0:0] == 1'b1) ? xor_ln132_59_fu_612_p2 : clefia_s0_q0);

assign select_ln131_60_fu_660_p3 = ((tmp_133_fu_646_p3[0:0] == 1'b1) ? xor_ln132_60_fu_654_p2 : x_assign_26_fu_638_p3);

assign select_ln131_61_fu_694_p3 = ((tmp_135_fu_680_p3[0:0] == 1'b1) ? xor_ln132_61_fu_688_p2 : clefia_s1_q0);

assign select_ln131_62_fu_736_p3 = ((tmp_137_fu_722_p3[0:0] == 1'b1) ? xor_ln132_62_fu_730_p2 : x_assign_27_fu_714_p3);

assign select_ln131_63_fu_452_p3 = ((tmp_139_fu_438_p3[0:0] == 1'b1) ? xor_ln132_63_fu_446_p2 : clefia_s0_q0);

assign select_ln131_64_fu_494_p3 = ((tmp_141_fu_480_p3[0:0] == 1'b1) ? xor_ln132_64_fu_488_p2 : x_assign_28_fu_472_p3);

assign select_ln131_65_fu_580_p3 = ((tmp_143_fu_566_p3[0:0] == 1'b1) ? xor_ln132_65_fu_574_p2 : x_assign_s_fu_558_p3);

assign select_ln131_fu_538_p3 = ((tmp_fu_524_p3[0:0] == 1'b1) ? xor_ln132_fu_532_p2 : clefia_s1_q0);

assign src_offset_cast_fu_317_p1 = src_offset;

assign tmp_130_fu_550_p3 = select_ln131_fu_538_p3[32'd7];

assign tmp_131_fu_604_p3 = clefia_s0_q0[32'd7];

assign tmp_132_fu_630_p3 = select_ln131_59_fu_618_p3[32'd7];

assign tmp_133_fu_646_p3 = select_ln131_59_fu_618_p3[32'd6];

assign tmp_135_fu_680_p3 = clefia_s1_q0[32'd7];

assign tmp_136_fu_706_p3 = select_ln131_61_fu_694_p3[32'd7];

assign tmp_137_fu_722_p3 = select_ln131_61_fu_694_p3[32'd6];

assign tmp_139_fu_438_p3 = clefia_s0_q0[32'd7];

assign tmp_140_fu_464_p3 = select_ln131_63_fu_452_p3[32'd7];

assign tmp_141_fu_480_p3 = select_ln131_63_fu_452_p3[32'd6];

assign tmp_143_fu_566_p3 = select_ln131_fu_538_p3[32'd6];

assign tmp_fu_524_p3 = clefia_s1_q0[32'd7];

assign trunc_ln134_59_fu_626_p1 = select_ln131_59_fu_618_p3[6:0];

assign trunc_ln134_60_fu_668_p1 = select_ln131_60_fu_660_p3[6:0];

assign trunc_ln134_61_fu_702_p1 = select_ln131_61_fu_694_p3[6:0];

assign trunc_ln134_62_fu_744_p1 = select_ln131_62_fu_736_p3[6:0];

assign trunc_ln134_63_fu_460_p1 = select_ln131_63_fu_452_p3[6:0];

assign trunc_ln134_64_fu_502_p1 = select_ln131_64_fu_494_p3[6:0];

assign trunc_ln134_65_fu_588_p1 = select_ln131_65_fu_580_p3[6:0];

assign trunc_ln134_fu_546_p1 = select_ln131_fu_538_p3[6:0];

assign x_assign_26_fu_638_p3 = {{trunc_ln134_59_fu_626_p1}, {tmp_132_fu_630_p3}};

assign x_assign_27_fu_714_p3 = {{trunc_ln134_61_fu_702_p1}, {tmp_136_fu_706_p3}};

assign x_assign_28_fu_472_p3 = {{trunc_ln134_63_fu_460_p1}, {tmp_140_fu_464_p3}};

assign x_assign_s_fu_558_p3 = {{trunc_ln134_fu_546_p1}, {tmp_130_fu_550_p3}};

assign xor_ln124_124_fu_798_p2 = (x_assign_s_reg_1099 ^ src_q1);

assign xor_ln124_125_fu_803_p2 = (z_reg_1058 ^ xor_ln124_124_fu_798_p2);

assign xor_ln124_126_fu_808_p2 = (x_assign_27_reg_1146 ^ or_ln134_5_fu_782_p3);

assign xor_ln124_127_fu_813_p2 = (xor_ln124_126_fu_808_p2 ^ or_ln134_s_fu_776_p3);

assign xor_ln124_128_fu_836_p2 = (x_assign_28_reg_1068 ^ src_q0);

assign xor_ln124_129_fu_841_p2 = (z_19_reg_1089 ^ xor_ln124_128_fu_836_p2);

assign xor_ln124_130_fu_846_p2 = (or_ln134_s_fu_776_p3 ^ or_ln134_5_fu_782_p3);

assign xor_ln124_131_fu_852_p2 = (xor_ln124_130_fu_846_p2 ^ x_assign_26_reg_1125);

assign xor_ln124_132_fu_906_p2 = (x_assign_s_reg_1099 ^ src_q1);

assign xor_ln124_133_fu_911_p2 = (z_20_reg_1115 ^ xor_ln124_132_fu_906_p2);

assign xor_ln124_134_fu_916_p2 = (x_assign_27_reg_1146 ^ or_ln_fu_890_p3);

assign xor_ln124_135_fu_921_p2 = (xor_ln124_134_fu_916_p2 ^ or_ln134_6_fu_884_p3);

assign xor_ln124_136_fu_944_p2 = (src_q0 ^ or_ln134_6_fu_884_p3);

assign xor_ln124_137_fu_950_p2 = (z_21_reg_1141 ^ xor_ln124_136_fu_944_p2);

assign xor_ln124_138_fu_955_p2 = (x_assign_26_reg_1125 ^ or_ln_fu_890_p3);

assign xor_ln124_139_fu_960_p2 = (xor_ln124_138_fu_955_p2 ^ x_assign_28_reg_1068_pp0_iter1_reg);

assign xor_ln124_60_fu_514_p2 = (src_load_45_reg_1043 ^ rk_q0);

assign xor_ln124_61_fu_819_p2 = (xor_ln124_127_fu_813_p2 ^ xor_ln124_125_fu_803_p2);

assign xor_ln124_62_fu_857_p2 = (xor_ln124_131_fu_852_p2 ^ xor_ln124_129_fu_841_p2);

assign xor_ln124_63_fu_927_p2 = (xor_ln124_135_fu_921_p2 ^ xor_ln124_133_fu_911_p2);

assign xor_ln124_64_fu_965_p2 = (xor_ln124_139_fu_960_p2 ^ xor_ln124_137_fu_950_p2);

assign xor_ln124_fu_341_p2 = (src_q1 ^ rk_q0);

assign xor_ln132_59_fu_612_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_60_fu_654_p2 = (x_assign_26_fu_638_p3 ^ 8'd14);

assign xor_ln132_61_fu_688_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_62_fu_730_p2 = (x_assign_27_fu_714_p3 ^ 8'd14);

assign xor_ln132_63_fu_446_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_64_fu_488_p2 = (x_assign_28_fu_472_p3 ^ 8'd14);

assign xor_ln132_65_fu_574_p2 = (x_assign_s_fu_558_p3 ^ 8'd14);

assign xor_ln132_fu_532_p2 = (clefia_s1_q0 ^ 8'd14);

assign zext_ln114_10_fu_418_p1 = add_ln114_8_fu_413_p2;

assign zext_ln114_9_fu_408_p1 = add_ln114_7_fu_403_p2;

assign zext_ln114_fu_384_p1 = add_ln114_fu_378_p2;

assign zext_ln121_104_fu_328_p1 = add_ln121_69_fu_322_p2;

assign zext_ln121_105_fu_394_p1 = add_ln121_70_fu_389_p2;

assign zext_ln121_106_fu_363_p1 = add_ln121_71_fu_358_p2;

assign zext_ln121_107_fu_428_p1 = add_ln121_72_fu_423_p2;

assign zext_ln121_108_fu_373_p1 = add_ln121_73_fu_368_p2;

assign zext_ln121_109_fu_761_p1 = add_ln121_74_fu_756_p2;

assign zext_ln121_110_fu_793_p1 = add_ln121_75_fu_788_p2;

assign zext_ln121_111_fu_771_p1 = add_ln121_76_fu_766_p2;

assign zext_ln121_112_fu_831_p1 = add_ln121_77_fu_826_p2;

assign zext_ln121_113_fu_869_p1 = add_ln121_78_fu_864_p2;

assign zext_ln121_114_fu_901_p1 = add_ln121_79_fu_896_p2;

assign zext_ln121_115_fu_879_p1 = add_ln121_80_fu_874_p2;

assign zext_ln121_116_fu_939_p1 = add_ln121_81_fu_934_p2;

assign zext_ln121_fu_353_p1 = add_ln121_fu_347_p2;

assign zext_ln150_fu_399_p1 = xor_ln124_reg_1018;

assign zext_ln151_fu_433_p1 = reg_308;

assign zext_ln152_fu_519_p1 = reg_308;

assign zext_ln153_fu_600_p1 = xor_ln124_60_reg_1084;

always @ (posedge ap_clk) begin
    rk_offset_cast_reg_1012[8] <= 1'b0;
end

endmodule //clefia_ClefiaF0Xor_1
