// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clefia_ClefiaF1Xor_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0,
        dst_address1,
        dst_ce1,
        dst_we1,
        dst_d1,
        dst_offset,
        src_address0,
        src_ce0,
        src_q0,
        src_address1,
        src_ce1,
        src_q1,
        src_offset,
        rk_address0,
        rk_ce0,
        rk_q0,
        rk_offset
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
output  [4:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [7:0] dst_d0;
output  [4:0] dst_address1;
output   dst_ce1;
output   dst_we1;
output  [7:0] dst_d1;
input  [4:0] dst_offset;
output  [4:0] src_address0;
output   src_ce0;
input  [7:0] src_q0;
output  [4:0] src_address1;
output   src_ce1;
input  [7:0] src_q1;
input  [4:0] src_offset;
output  [8:0] rk_address0;
output   rk_ce0;
input  [7:0] rk_q0;
input  [7:0] rk_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] dst_address0;
reg dst_ce0;
reg dst_we0;
reg[7:0] dst_d0;
reg[4:0] dst_address1;
reg dst_ce1;
reg dst_we1;
reg[7:0] dst_d1;
reg[4:0] src_address0;
reg src_ce0;
reg[4:0] src_address1;
reg src_ce1;
reg[8:0] rk_address0;
reg rk_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state8_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_subdone;
reg   [7:0] clefia_s1_address0;
reg    clefia_s1_ce0;
wire   [7:0] clefia_s1_q0;
reg   [7:0] clefia_s0_address0;
reg    clefia_s0_ce0;
wire   [7:0] clefia_s0_q0;
reg   [7:0] reg_297;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [7:0] grp_fu_302_p2;
reg   [7:0] reg_308;
wire    ap_block_pp0_stage3_11001;
reg   [7:0] rk_offset_read_reg_1131;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [4:0] src_offset_read_reg_1136;
reg   [4:0] src_offset_read_reg_1136_pp0_iter1_reg;
reg   [4:0] dst_offset_read_reg_1161;
reg   [4:0] dst_offset_read_reg_1161_pp0_iter1_reg;
wire   [8:0] rk_offset_cast_fu_338_p1;
reg   [8:0] rk_offset_cast_reg_1171;
wire   [7:0] xor_ln124_fu_341_p2;
reg   [7:0] xor_ln124_reg_1177;
reg   [7:0] src_load_10_reg_1202;
reg   [7:0] z_reg_1217;
wire   [7:0] x_assign_3_fu_472_p3;
reg   [7:0] x_assign_3_reg_1227;
wire   [6:0] trunc_ln134_20_fu_544_p1;
reg   [6:0] trunc_ln134_20_reg_1232;
reg   [0:0] tmp_49_reg_1237;
wire   [7:0] xor_ln124_3_fu_556_p2;
reg   [7:0] xor_ln124_3_reg_1242;
reg   [7:0] z_4_reg_1247;
wire   [6:0] trunc_ln134_13_fu_672_p1;
reg   [6:0] trunc_ln134_13_reg_1257;
reg   [0:0] tmp_35_reg_1262;
wire   [7:0] xor_ln180_fu_684_p2;
reg   [7:0] xor_ln180_reg_1267;
reg   [7:0] z_5_reg_1273;
wire   [7:0] x_assign_9_fu_727_p3;
reg   [7:0] x_assign_9_reg_1283;
wire   [6:0] trunc_ln134_22_fu_799_p1;
reg   [6:0] trunc_ln134_22_reg_1289;
reg   [0:0] tmp_53_reg_1294;
reg   [7:0] z_6_reg_1299;
wire   [7:0] x_assign_1_fu_845_p3;
reg   [7:0] x_assign_1_reg_1304;
wire   [6:0] trunc_ln134_17_fu_917_p1;
reg   [6:0] trunc_ln134_17_reg_1310;
reg   [0:0] tmp_43_reg_1315;
wire   [7:0] or_ln_fu_949_p3;
reg   [7:0] or_ln_reg_1330;
wire   [7:0] or_ln134_4_fu_955_p3;
reg   [7:0] or_ln134_4_reg_1335;
wire   [7:0] or_ln134_7_fu_961_p3;
reg   [7:0] or_ln134_7_reg_1340;
wire   [7:0] or_ln134_9_fu_967_p3;
reg   [7:0] or_ln134_9_reg_1345;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg   [4:0] ap_port_reg_dst_offset;
wire   [63:0] rk_offset_cast1_fu_312_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] src_offset_cast_fu_317_p1;
wire   [63:0] zext_ln121_61_fu_328_p1;
wire   [63:0] zext_ln121_fu_353_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln121_63_fu_363_p1;
wire   [63:0] zext_ln121_65_fu_373_p1;
wire   [63:0] dst_offset_cast_fu_333_p1;
wire   [63:0] zext_ln114_fu_384_p1;
wire   [63:0] zext_ln121_62_fu_394_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln173_fu_399_p1;
wire   [63:0] zext_ln114_3_fu_408_p1;
wire   [63:0] zext_ln114_4_fu_418_p1;
wire   [63:0] zext_ln121_64_fu_428_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln174_fu_433_p1;
wire   [63:0] zext_ln175_fu_561_p1;
wire   [63:0] zext_ln176_fu_689_p1;
wire   [63:0] zext_ln121_66_fu_934_p1;
wire   [63:0] zext_ln121_68_fu_944_p1;
wire   [63:0] zext_ln121_67_fu_978_p1;
wire   [63:0] zext_ln121_69_fu_1016_p1;
wire   [63:0] zext_ln121_70_fu_1054_p1;
wire   [63:0] zext_ln121_72_fu_1064_p1;
wire   [63:0] zext_ln121_71_fu_1074_p1;
wire   [63:0] zext_ln121_73_fu_1105_p1;
wire   [7:0] xor_ln124_37_fu_1004_p2;
wire   [7:0] xor_ln124_38_fu_1042_p2;
wire   [7:0] xor_ln124_39_fu_1093_p2;
wire   [7:0] xor_ln124_40_fu_1124_p2;
wire   [4:0] add_ln121_26_fu_322_p2;
wire   [8:0] add_ln121_fu_347_p2;
wire   [4:0] add_ln121_28_fu_358_p2;
wire   [4:0] add_ln121_30_fu_368_p2;
wire   [4:0] add_ln114_fu_378_p2;
wire   [8:0] add_ln121_27_fu_389_p2;
wire   [4:0] add_ln114_1_fu_403_p2;
wire   [4:0] add_ln114_2_fu_413_p2;
wire   [8:0] add_ln121_29_fu_423_p2;
wire   [0:0] tmp_44_fu_438_p3;
wire   [7:0] xor_ln132_18_fu_446_p2;
wire   [7:0] select_ln131_18_fu_452_p3;
wire   [6:0] trunc_ln134_18_fu_460_p1;
wire   [0:0] tmp_45_fu_464_p3;
wire   [0:0] tmp_46_fu_480_p3;
wire   [7:0] xor_ln132_19_fu_488_p2;
wire   [7:0] select_ln131_19_fu_494_p3;
wire   [6:0] trunc_ln134_19_fu_502_p1;
wire   [0:0] tmp_47_fu_506_p3;
wire   [7:0] x_assign_4_fu_514_p3;
wire   [0:0] tmp_48_fu_522_p3;
wire   [7:0] xor_ln132_20_fu_530_p2;
wire   [7:0] select_ln131_20_fu_536_p3;
wire   [0:0] tmp_fu_566_p3;
wire   [7:0] xor_ln132_fu_574_p2;
wire   [7:0] select_ln131_fu_580_p3;
wire   [6:0] trunc_ln134_fu_588_p1;
wire   [0:0] tmp_31_fu_592_p3;
wire   [7:0] x_assign_s_fu_600_p3;
wire   [0:0] tmp_32_fu_608_p3;
wire   [7:0] xor_ln132_12_fu_616_p2;
wire   [7:0] select_ln131_12_fu_622_p3;
wire   [6:0] trunc_ln134_12_fu_630_p1;
wire   [0:0] tmp_33_fu_634_p3;
wire   [7:0] x_assign_8_fu_642_p3;
wire   [0:0] tmp_34_fu_650_p3;
wire   [7:0] xor_ln132_13_fu_658_p2;
wire   [7:0] select_ln131_13_fu_664_p3;
wire   [0:0] tmp_36_fu_693_p3;
wire   [7:0] xor_ln132_14_fu_701_p2;
wire   [7:0] select_ln131_14_fu_707_p3;
wire   [6:0] trunc_ln134_14_fu_715_p1;
wire   [0:0] tmp_37_fu_719_p3;
wire   [0:0] tmp_50_fu_735_p3;
wire   [7:0] xor_ln132_21_fu_743_p2;
wire   [7:0] select_ln131_21_fu_749_p3;
wire   [6:0] trunc_ln134_21_fu_757_p1;
wire   [0:0] tmp_51_fu_761_p3;
wire   [7:0] x_assign_5_fu_769_p3;
wire   [0:0] tmp_52_fu_777_p3;
wire   [7:0] xor_ln132_22_fu_785_p2;
wire   [7:0] select_ln131_22_fu_791_p3;
wire   [0:0] tmp_38_fu_811_p3;
wire   [7:0] xor_ln132_15_fu_819_p2;
wire   [7:0] select_ln131_15_fu_825_p3;
wire   [6:0] trunc_ln134_15_fu_833_p1;
wire   [0:0] tmp_39_fu_837_p3;
wire   [0:0] tmp_40_fu_853_p3;
wire   [7:0] xor_ln132_16_fu_861_p2;
wire   [7:0] select_ln131_16_fu_867_p3;
wire   [6:0] trunc_ln134_16_fu_875_p1;
wire   [0:0] tmp_41_fu_879_p3;
wire   [7:0] x_assign_2_fu_887_p3;
wire   [0:0] tmp_42_fu_895_p3;
wire   [7:0] xor_ln132_17_fu_903_p2;
wire   [7:0] select_ln131_17_fu_909_p3;
wire   [4:0] add_ln121_31_fu_929_p2;
wire   [4:0] add_ln121_33_fu_939_p2;
wire   [4:0] add_ln121_32_fu_973_p2;
wire   [7:0] xor_ln124_50_fu_983_p2;
wire   [7:0] xor_ln124_52_fu_993_p2;
wire   [7:0] xor_ln124_53_fu_998_p2;
wire   [7:0] xor_ln124_51_fu_988_p2;
wire   [4:0] add_ln121_34_fu_1011_p2;
wire   [7:0] xor_ln124_54_fu_1021_p2;
wire   [7:0] xor_ln124_56_fu_1032_p2;
wire   [7:0] xor_ln124_57_fu_1037_p2;
wire   [7:0] xor_ln124_55_fu_1027_p2;
wire   [4:0] add_ln121_35_fu_1049_p2;
wire   [4:0] add_ln121_37_fu_1059_p2;
wire   [4:0] add_ln121_36_fu_1069_p2;
wire   [7:0] xor_ln124_59_fu_1084_p2;
wire   [7:0] xor_ln124_60_fu_1088_p2;
wire   [7:0] xor_ln124_58_fu_1079_p2;
wire   [4:0] add_ln121_38_fu_1100_p2;
wire   [7:0] xor_ln124_62_fu_1115_p2;
wire   [7:0] xor_ln124_63_fu_1119_p2;
wire   [7:0] xor_ln124_61_fu_1110_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to2;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s1_address0),
    .ce0(clefia_s1_ce0),
    .q0(clefia_s1_q0)
);

clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s0_address0),
    .ce0(clefia_s0_ce0),
    .q0(clefia_s0_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce))) begin
        if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            reg_297 <= src_q1;
        end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            reg_297 <= src_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_port_reg_dst_offset <= dst_offset;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce))) begin
        dst_offset_read_reg_1161 <= ap_port_reg_dst_offset;
        dst_offset_read_reg_1161_pp0_iter1_reg <= dst_offset_read_reg_1161;
        rk_offset_cast_reg_1171[7 : 0] <= rk_offset_cast_fu_338_p1[7 : 0];
        tmp_53_reg_1294 <= select_ln131_22_fu_791_p3[32'd7];
        trunc_ln134_22_reg_1289 <= trunc_ln134_22_fu_799_p1;
        x_assign_9_reg_1283 <= x_assign_9_fu_727_p3;
        xor_ln124_reg_1177 <= xor_ln124_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        or_ln134_4_reg_1335 <= or_ln134_4_fu_955_p3;
        or_ln134_7_reg_1340 <= or_ln134_7_fu_961_p3;
        or_ln134_9_reg_1345 <= or_ln134_9_fu_967_p3;
        or_ln_reg_1330 <= or_ln_fu_949_p3;
        tmp_49_reg_1237 <= select_ln131_20_fu_536_p3[32'd7];
        trunc_ln134_20_reg_1232 <= trunc_ln134_20_fu_544_p1;
        x_assign_3_reg_1227 <= x_assign_3_fu_472_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_308 <= grp_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rk_offset_read_reg_1131 <= rk_offset;
        src_offset_read_reg_1136 <= src_offset;
        src_offset_read_reg_1136_pp0_iter1_reg <= src_offset_read_reg_1136;
        tmp_35_reg_1262 <= select_ln131_13_fu_664_p3[32'd7];
        trunc_ln134_13_reg_1257 <= trunc_ln134_13_fu_672_p1;
        xor_ln124_3_reg_1242 <= xor_ln124_3_fu_556_p2;
        xor_ln180_reg_1267 <= xor_ln180_fu_684_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        src_load_10_reg_1202 <= src_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_43_reg_1315 <= select_ln131_17_fu_909_p3[32'd7];
        trunc_ln134_17_reg_1310 <= trunc_ln134_17_fu_917_p1;
        x_assign_1_reg_1304 <= x_assign_1_fu_845_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_4_reg_1247 <= clefia_s0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce))) begin
        z_5_reg_1273 <= clefia_s1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        z_6_reg_1299 <= clefia_s0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        z_reg_1217 <= clefia_s1_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        clefia_s0_address0 = zext_ln176_fu_689_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        clefia_s0_address0 = zext_ln174_fu_433_p1;
    end else begin
        clefia_s0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce)))) begin
        clefia_s0_ce0 = 1'b1;
    end else begin
        clefia_s0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        clefia_s1_address0 = zext_ln175_fu_561_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        clefia_s1_address0 = zext_ln173_fu_399_p1;
    end else begin
        clefia_s1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        clefia_s1_ce0 = 1'b1;
    end else begin
        clefia_s1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_address0 = zext_ln121_73_fu_1105_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_address0 = zext_ln121_69_fu_1016_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        dst_address0 = zext_ln114_4_fu_418_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dst_address0 = zext_ln114_fu_384_p1;
    end else begin
        dst_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_address1 = zext_ln121_71_fu_1074_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_address1 = zext_ln121_67_fu_978_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        dst_address1 = zext_ln114_3_fu_408_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dst_address1 = dst_offset_cast_fu_333_p1;
    end else begin
        dst_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce)))) begin
        dst_ce0 = 1'b1;
    end else begin
        dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce)))) begin
        dst_ce1 = 1'b1;
    end else begin
        dst_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_d0 = xor_ln124_40_fu_1124_p2;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_d0 = xor_ln124_38_fu_1042_p2;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_d0 = src_q0;
    end else begin
        dst_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_d1 = xor_ln124_39_fu_1093_p2;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dst_d1 = xor_ln124_37_fu_1004_p2;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_d1 = src_q1;
    end else begin
        dst_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce)))) begin
        dst_we0 = 1'b1;
    end else begin
        dst_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce)))) begin
        dst_we1 = 1'b1;
    end else begin
        dst_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            rk_address0 = zext_ln121_64_fu_428_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            rk_address0 = zext_ln121_62_fu_394_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            rk_address0 = zext_ln121_fu_353_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            rk_address0 = rk_offset_cast1_fu_312_p1;
        end else begin
            rk_address0 = 'bx;
        end
    end else begin
        rk_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce)))) begin
        rk_ce0 = 1'b1;
    end else begin
        rk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        src_address0 = zext_ln121_72_fu_1064_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        src_address0 = zext_ln121_68_fu_944_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        src_address0 = zext_ln121_65_fu_373_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_address0 = zext_ln121_61_fu_328_p1;
    end else begin
        src_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        src_address1 = zext_ln121_70_fu_1054_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        src_address1 = zext_ln121_66_fu_934_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        src_address1 = zext_ln121_63_fu_363_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_address1 = src_offset_cast_fu_317_p1;
    end else begin
        src_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce)))) begin
        src_ce0 = 1'b1;
    end else begin
        src_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce)))) begin
        src_ce1 = 1'b1;
    end else begin
        src_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln114_1_fu_403_p2 = (dst_offset_read_reg_1161 + 5'd2);

assign add_ln114_2_fu_413_p2 = (dst_offset_read_reg_1161 + 5'd3);

assign add_ln114_fu_378_p2 = (ap_port_reg_dst_offset + 5'd1);

assign add_ln121_26_fu_322_p2 = (src_offset + 5'd1);

assign add_ln121_27_fu_389_p2 = (rk_offset_cast_reg_1171 + 9'd2);

assign add_ln121_28_fu_358_p2 = (src_offset_read_reg_1136 + 5'd2);

assign add_ln121_29_fu_423_p2 = (rk_offset_cast_reg_1171 + 9'd3);

assign add_ln121_30_fu_368_p2 = (src_offset_read_reg_1136 + 5'd3);

assign add_ln121_31_fu_929_p2 = (src_offset_read_reg_1136_pp0_iter1_reg + 5'd4);

assign add_ln121_32_fu_973_p2 = (dst_offset_read_reg_1161_pp0_iter1_reg + 5'd4);

assign add_ln121_33_fu_939_p2 = (src_offset_read_reg_1136_pp0_iter1_reg + 5'd5);

assign add_ln121_34_fu_1011_p2 = (dst_offset_read_reg_1161_pp0_iter1_reg + 5'd5);

assign add_ln121_35_fu_1049_p2 = (src_offset_read_reg_1136_pp0_iter1_reg + 5'd6);

assign add_ln121_36_fu_1069_p2 = (dst_offset_read_reg_1161_pp0_iter1_reg + 5'd6);

assign add_ln121_37_fu_1059_p2 = (src_offset_read_reg_1136_pp0_iter1_reg + 5'd7);

assign add_ln121_38_fu_1100_p2 = (dst_offset_read_reg_1161_pp0_iter1_reg + 5'd7);

assign add_ln121_fu_347_p2 = (rk_offset_cast_fu_338_p1 + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_subdone = (1'b0 == ap_ce);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dst_offset_cast_fu_333_p1 = ap_port_reg_dst_offset;

assign grp_fu_302_p2 = (rk_q0 ^ reg_297);

assign or_ln134_4_fu_955_p3 = {{trunc_ln134_17_reg_1310}, {tmp_43_reg_1315}};

assign or_ln134_7_fu_961_p3 = {{trunc_ln134_20_reg_1232}, {tmp_49_reg_1237}};

assign or_ln134_9_fu_967_p3 = {{trunc_ln134_22_reg_1289}, {tmp_53_reg_1294}};

assign or_ln_fu_949_p3 = {{trunc_ln134_13_reg_1257}, {tmp_35_reg_1262}};

assign rk_offset_cast1_fu_312_p1 = rk_offset;

assign rk_offset_cast_fu_338_p1 = rk_offset_read_reg_1131;

assign select_ln131_12_fu_622_p3 = ((tmp_32_fu_608_p3[0:0] == 1'b1) ? xor_ln132_12_fu_616_p2 : x_assign_s_fu_600_p3);

assign select_ln131_13_fu_664_p3 = ((tmp_34_fu_650_p3[0:0] == 1'b1) ? xor_ln132_13_fu_658_p2 : x_assign_8_fu_642_p3);

assign select_ln131_14_fu_707_p3 = ((tmp_36_fu_693_p3[0:0] == 1'b1) ? xor_ln132_14_fu_701_p2 : clefia_s1_q0);

assign select_ln131_15_fu_825_p3 = ((tmp_38_fu_811_p3[0:0] == 1'b1) ? xor_ln132_15_fu_819_p2 : clefia_s0_q0);

assign select_ln131_16_fu_867_p3 = ((tmp_40_fu_853_p3[0:0] == 1'b1) ? xor_ln132_16_fu_861_p2 : x_assign_1_fu_845_p3);

assign select_ln131_17_fu_909_p3 = ((tmp_42_fu_895_p3[0:0] == 1'b1) ? xor_ln132_17_fu_903_p2 : x_assign_2_fu_887_p3);

assign select_ln131_18_fu_452_p3 = ((tmp_44_fu_438_p3[0:0] == 1'b1) ? xor_ln132_18_fu_446_p2 : clefia_s1_q0);

assign select_ln131_19_fu_494_p3 = ((tmp_46_fu_480_p3[0:0] == 1'b1) ? xor_ln132_19_fu_488_p2 : x_assign_3_fu_472_p3);

assign select_ln131_20_fu_536_p3 = ((tmp_48_fu_522_p3[0:0] == 1'b1) ? xor_ln132_20_fu_530_p2 : x_assign_4_fu_514_p3);

assign select_ln131_21_fu_749_p3 = ((tmp_50_fu_735_p3[0:0] == 1'b1) ? xor_ln132_21_fu_743_p2 : x_assign_9_fu_727_p3);

assign select_ln131_22_fu_791_p3 = ((tmp_52_fu_777_p3[0:0] == 1'b1) ? xor_ln132_22_fu_785_p2 : x_assign_5_fu_769_p3);

assign select_ln131_fu_580_p3 = ((tmp_fu_566_p3[0:0] == 1'b1) ? xor_ln132_fu_574_p2 : clefia_s0_q0);

assign src_offset_cast_fu_317_p1 = src_offset;

assign tmp_31_fu_592_p3 = select_ln131_fu_580_p3[32'd7];

assign tmp_32_fu_608_p3 = select_ln131_fu_580_p3[32'd6];

assign tmp_33_fu_634_p3 = select_ln131_12_fu_622_p3[32'd7];

assign tmp_34_fu_650_p3 = select_ln131_12_fu_622_p3[32'd6];

assign tmp_36_fu_693_p3 = clefia_s1_q0[32'd7];

assign tmp_37_fu_719_p3 = select_ln131_14_fu_707_p3[32'd7];

assign tmp_38_fu_811_p3 = clefia_s0_q0[32'd7];

assign tmp_39_fu_837_p3 = select_ln131_15_fu_825_p3[32'd7];

assign tmp_40_fu_853_p3 = select_ln131_15_fu_825_p3[32'd6];

assign tmp_41_fu_879_p3 = select_ln131_16_fu_867_p3[32'd7];

assign tmp_42_fu_895_p3 = select_ln131_16_fu_867_p3[32'd6];

assign tmp_44_fu_438_p3 = clefia_s1_q0[32'd7];

assign tmp_45_fu_464_p3 = select_ln131_18_fu_452_p3[32'd7];

assign tmp_46_fu_480_p3 = select_ln131_18_fu_452_p3[32'd6];

assign tmp_47_fu_506_p3 = select_ln131_19_fu_494_p3[32'd7];

assign tmp_48_fu_522_p3 = select_ln131_19_fu_494_p3[32'd6];

assign tmp_50_fu_735_p3 = select_ln131_14_fu_707_p3[32'd6];

assign tmp_51_fu_761_p3 = select_ln131_21_fu_749_p3[32'd7];

assign tmp_52_fu_777_p3 = select_ln131_21_fu_749_p3[32'd6];

assign tmp_fu_566_p3 = clefia_s0_q0[32'd7];

assign trunc_ln134_12_fu_630_p1 = select_ln131_12_fu_622_p3[6:0];

assign trunc_ln134_13_fu_672_p1 = select_ln131_13_fu_664_p3[6:0];

assign trunc_ln134_14_fu_715_p1 = select_ln131_14_fu_707_p3[6:0];

assign trunc_ln134_15_fu_833_p1 = select_ln131_15_fu_825_p3[6:0];

assign trunc_ln134_16_fu_875_p1 = select_ln131_16_fu_867_p3[6:0];

assign trunc_ln134_17_fu_917_p1 = select_ln131_17_fu_909_p3[6:0];

assign trunc_ln134_18_fu_460_p1 = select_ln131_18_fu_452_p3[6:0];

assign trunc_ln134_19_fu_502_p1 = select_ln131_19_fu_494_p3[6:0];

assign trunc_ln134_20_fu_544_p1 = select_ln131_20_fu_536_p3[6:0];

assign trunc_ln134_21_fu_757_p1 = select_ln131_21_fu_749_p3[6:0];

assign trunc_ln134_22_fu_799_p1 = select_ln131_22_fu_791_p3[6:0];

assign trunc_ln134_fu_588_p1 = select_ln131_fu_580_p3[6:0];

assign x_assign_1_fu_845_p3 = {{trunc_ln134_15_fu_833_p1}, {tmp_39_fu_837_p3}};

assign x_assign_2_fu_887_p3 = {{trunc_ln134_16_fu_875_p1}, {tmp_41_fu_879_p3}};

assign x_assign_3_fu_472_p3 = {{trunc_ln134_18_fu_460_p1}, {tmp_45_fu_464_p3}};

assign x_assign_4_fu_514_p3 = {{trunc_ln134_19_fu_502_p1}, {tmp_47_fu_506_p3}};

assign x_assign_5_fu_769_p3 = {{trunc_ln134_21_fu_757_p1}, {tmp_51_fu_761_p3}};

assign x_assign_8_fu_642_p3 = {{trunc_ln134_12_fu_630_p1}, {tmp_33_fu_634_p3}};

assign x_assign_9_fu_727_p3 = {{trunc_ln134_14_fu_715_p1}, {tmp_37_fu_719_p3}};

assign x_assign_s_fu_600_p3 = {{trunc_ln134_fu_588_p1}, {tmp_31_fu_592_p3}};

assign xor_ln124_37_fu_1004_p2 = (xor_ln124_53_fu_998_p2 ^ xor_ln124_51_fu_988_p2);

assign xor_ln124_38_fu_1042_p2 = (xor_ln124_57_fu_1037_p2 ^ xor_ln124_55_fu_1027_p2);

assign xor_ln124_39_fu_1093_p2 = (xor_ln124_60_fu_1088_p2 ^ xor_ln124_58_fu_1079_p2);

assign xor_ln124_3_fu_556_p2 = (src_load_10_reg_1202 ^ rk_q0);

assign xor_ln124_40_fu_1124_p2 = (xor_ln124_63_fu_1119_p2 ^ xor_ln124_61_fu_1110_p2);

assign xor_ln124_50_fu_983_p2 = (x_assign_9_reg_1283 ^ src_q1);

assign xor_ln124_51_fu_988_p2 = (z_reg_1217 ^ xor_ln124_50_fu_983_p2);

assign xor_ln124_52_fu_993_p2 = (x_assign_1_reg_1304 ^ or_ln134_4_fu_955_p3);

assign xor_ln124_53_fu_998_p2 = (xor_ln124_52_fu_993_p2 ^ or_ln_fu_949_p3);

assign xor_ln124_54_fu_1021_p2 = (src_q0 ^ or_ln134_7_fu_961_p3);

assign xor_ln124_55_fu_1027_p2 = (z_4_reg_1247 ^ xor_ln124_54_fu_1021_p2);

assign xor_ln124_56_fu_1032_p2 = (x_assign_1_reg_1304 ^ or_ln134_9_fu_967_p3);

assign xor_ln124_57_fu_1037_p2 = (xor_ln124_56_fu_1032_p2 ^ x_assign_9_reg_1283);

assign xor_ln124_58_fu_1079_p2 = (z_5_reg_1273 ^ src_q1);

assign xor_ln124_59_fu_1084_p2 = (or_ln_reg_1330 ^ or_ln134_4_reg_1335);

assign xor_ln124_60_fu_1088_p2 = (xor_ln180_reg_1267 ^ xor_ln124_59_fu_1084_p2);

assign xor_ln124_61_fu_1110_p2 = (z_6_reg_1299 ^ src_q0);

assign xor_ln124_62_fu_1115_p2 = (or_ln134_9_reg_1345 ^ or_ln134_7_reg_1340);

assign xor_ln124_63_fu_1119_p2 = (xor_ln180_reg_1267 ^ xor_ln124_62_fu_1115_p2);

assign xor_ln124_fu_341_p2 = (src_q1 ^ rk_q0);

assign xor_ln132_12_fu_616_p2 = (x_assign_s_fu_600_p3 ^ 8'd14);

assign xor_ln132_13_fu_658_p2 = (x_assign_8_fu_642_p3 ^ 8'd14);

assign xor_ln132_14_fu_701_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_15_fu_819_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_16_fu_861_p2 = (x_assign_1_fu_845_p3 ^ 8'd14);

assign xor_ln132_17_fu_903_p2 = (x_assign_2_fu_887_p3 ^ 8'd14);

assign xor_ln132_18_fu_446_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_19_fu_488_p2 = (x_assign_3_fu_472_p3 ^ 8'd14);

assign xor_ln132_20_fu_530_p2 = (x_assign_4_fu_514_p3 ^ 8'd14);

assign xor_ln132_21_fu_743_p2 = (x_assign_9_fu_727_p3 ^ 8'd14);

assign xor_ln132_22_fu_785_p2 = (x_assign_5_fu_769_p3 ^ 8'd14);

assign xor_ln132_fu_574_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln180_fu_684_p2 = (x_assign_s_fu_600_p3 ^ x_assign_3_reg_1227);

assign zext_ln114_3_fu_408_p1 = add_ln114_1_fu_403_p2;

assign zext_ln114_4_fu_418_p1 = add_ln114_2_fu_413_p2;

assign zext_ln114_fu_384_p1 = add_ln114_fu_378_p2;

assign zext_ln121_61_fu_328_p1 = add_ln121_26_fu_322_p2;

assign zext_ln121_62_fu_394_p1 = add_ln121_27_fu_389_p2;

assign zext_ln121_63_fu_363_p1 = add_ln121_28_fu_358_p2;

assign zext_ln121_64_fu_428_p1 = add_ln121_29_fu_423_p2;

assign zext_ln121_65_fu_373_p1 = add_ln121_30_fu_368_p2;

assign zext_ln121_66_fu_934_p1 = add_ln121_31_fu_929_p2;

assign zext_ln121_67_fu_978_p1 = add_ln121_32_fu_973_p2;

assign zext_ln121_68_fu_944_p1 = add_ln121_33_fu_939_p2;

assign zext_ln121_69_fu_1016_p1 = add_ln121_34_fu_1011_p2;

assign zext_ln121_70_fu_1054_p1 = add_ln121_35_fu_1049_p2;

assign zext_ln121_71_fu_1074_p1 = add_ln121_36_fu_1069_p2;

assign zext_ln121_72_fu_1064_p1 = add_ln121_37_fu_1059_p2;

assign zext_ln121_73_fu_1105_p1 = add_ln121_38_fu_1100_p2;

assign zext_ln121_fu_353_p1 = add_ln121_fu_347_p2;

assign zext_ln173_fu_399_p1 = xor_ln124_reg_1177;

assign zext_ln174_fu_433_p1 = reg_308;

assign zext_ln175_fu_561_p1 = reg_308;

assign zext_ln176_fu_689_p1 = xor_ln124_3_reg_1242;

always @ (posedge ap_clk) begin
    rk_offset_cast_reg_1171[8] <= 1'b0;
end

endmodule //clefia_ClefiaF1Xor_2
