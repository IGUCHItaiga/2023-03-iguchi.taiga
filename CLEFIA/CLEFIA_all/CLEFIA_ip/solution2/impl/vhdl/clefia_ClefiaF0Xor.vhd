-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clefia_ClefiaF0Xor is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read23 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read24 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read25 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read26 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read27 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read28 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read29 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce0 : OUT STD_LOGIC;
    rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce1 : OUT STD_LOGIC;
    rk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_offset : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of clefia_ClefiaF0Xor is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal clefia_s0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_ce0 : STD_LOGIC;
    signal clefia_s0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_ce0 : STD_LOGIC;
    signal clefia_s1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_183 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_187 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_offset_read_reg_749 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_reg_765 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_reg_765_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_7_reg_770 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_7_reg_770_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_8_reg_775 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_8_reg_775_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_9_reg_780 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_9_reg_780_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_10_reg_785 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_10_reg_785_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_11_reg_791 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_11_reg_791_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_12_reg_797 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_12_reg_797_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read83_reg_803 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read83_reg_803_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal z_23_reg_839 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_24_reg_844 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_29_fu_301_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_29_reg_849 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_30_fu_385_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_30_reg_855 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_149_fu_435_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_149_reg_861 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_port_reg_p_read8 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read23 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read24 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read25 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read26 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read27 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read28 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read29 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln124_80_fu_197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln124_81_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal rk_offset_cast_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln124_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln153_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_fu_257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln151_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln124_77_fu_191_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_78_fu_202_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_fu_217_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_39_fu_227_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_40_fu_232_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_fu_247_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_38_fu_252_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_146_fu_267_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_66_fu_275_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_66_fu_281_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_66_fu_289_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_147_fu_293_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_148_fu_309_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_67_fu_317_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_67_fu_323_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_67_fu_331_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_149_fu_335_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_150_fu_351_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_68_fu_359_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_68_fu_365_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_68_fu_373_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_151_fu_377_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_152_fu_393_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_69_fu_401_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_69_fu_407_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_69_fu_415_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_153_fu_419_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln134_s_fu_343_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_7_fu_427_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_441_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_fu_449_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_fu_455_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_fu_463_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_145_fu_467_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_154_fu_483_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_70_fu_491_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_70_fu_497_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_70_fu_505_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_155_fu_509_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_31_fu_517_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_156_fu_525_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_71_fu_533_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_71_fu_539_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_71_fu_547_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_157_fu_551_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_s_fu_475_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_158_fu_567_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_72_fu_575_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_72_fu_581_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_72_fu_589_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_159_fu_593_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln124_147_fu_609_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_150_fu_620_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_148_fu_614_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_152_fu_630_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_154_fu_641_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_153_fu_635_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_8_fu_559_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_156_fu_651_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_158_fu_662_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_fu_601_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_159_fu_666_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_157_fu_657_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_161_fu_678_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_163_fu_689_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_164_fu_694_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_162_fu_684_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_151_fu_624_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_155_fu_645_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_160_fu_672_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_165_fu_699_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    clefia_s0_U : component clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s0_address0,
        ce0 => clefia_s0_ce0,
        q0 => clefia_s0_q0);

    clefia_s1_U : component clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s1_address0,
        ce0 => clefia_s1_ce0,
        q0 => clefia_s1_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_port_reg_p_read23 <= p_read23;
                ap_port_reg_p_read24 <= p_read24;
                ap_port_reg_p_read25 <= p_read25;
                ap_port_reg_p_read26 <= p_read26;
                ap_port_reg_p_read27 <= p_read27;
                ap_port_reg_p_read28 <= p_read28;
                ap_port_reg_p_read29 <= p_read29;
                ap_port_reg_p_read8 <= p_read8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_read83_reg_803 <= ap_port_reg_p_read8;
                p_read83_reg_803_pp0_iter1_reg <= p_read83_reg_803;
                p_read_10_reg_785 <= ap_port_reg_p_read25;
                p_read_10_reg_785_pp0_iter1_reg <= p_read_10_reg_785;
                p_read_11_reg_791 <= ap_port_reg_p_read24;
                p_read_11_reg_791_pp0_iter1_reg <= p_read_11_reg_791;
                p_read_12_reg_797 <= ap_port_reg_p_read23;
                p_read_12_reg_797_pp0_iter1_reg <= p_read_12_reg_797;
                p_read_7_reg_770 <= ap_port_reg_p_read28;
                p_read_7_reg_770_pp0_iter1_reg <= p_read_7_reg_770;
                p_read_8_reg_775 <= ap_port_reg_p_read27;
                p_read_8_reg_775_pp0_iter1_reg <= p_read_8_reg_775;
                p_read_9_reg_780 <= ap_port_reg_p_read26;
                p_read_9_reg_780_pp0_iter1_reg <= p_read_9_reg_780;
                p_read_reg_765 <= ap_port_reg_p_read29;
                p_read_reg_765_pp0_iter1_reg <= p_read_reg_765;
                x_assign_29_reg_849 <= x_assign_29_fu_301_p3;
                x_assign_30_reg_855 <= x_assign_30_fu_385_p3;
                xor_ln124_149_reg_861 <= xor_ln124_149_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                reg_183 <= rk_q1;
                reg_187 <= rk_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                rk_offset_read_reg_749 <= rk_offset;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                z_23_reg_839 <= clefia_s0_q0;
                z_24_reg_844 <= clefia_s1_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln124_77_fu_191_p2 <= std_logic_vector(unsigned(rk_offset) + unsigned(ap_const_lv8_2));
    add_ln124_78_fu_202_p2 <= std_logic_vector(unsigned(rk_offset) + unsigned(ap_const_lv8_3));
    add_ln124_fu_217_p2 <= std_logic_vector(unsigned(rk_offset_read_reg_749) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= p_read83_reg_803_pp0_iter1_reg;
    ap_return_1 <= p_read_12_reg_797_pp0_iter1_reg;
    ap_return_2 <= p_read_11_reg_791_pp0_iter1_reg;
    ap_return_3 <= p_read_10_reg_785_pp0_iter1_reg;
    ap_return_4 <= xor_ln124_151_fu_624_p2;
    ap_return_5 <= xor_ln124_155_fu_645_p2;
    ap_return_6 <= xor_ln124_160_fu_672_p2;
    ap_return_7 <= xor_ln124_165_fu_699_p2;

    clefia_s0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln152_fu_237_p1, zext_ln150_fu_257_p1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                clefia_s0_address0 <= zext_ln150_fu_257_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                clefia_s0_address0 <= zext_ln152_fu_237_p1(8 - 1 downto 0);
            else 
                clefia_s0_address0 <= "XXXXXXXX";
            end if;
        else 
            clefia_s0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            clefia_s0_ce0 <= ap_const_logic_1;
        else 
            clefia_s0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln153_fu_242_p1, zext_ln151_fu_262_p1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                clefia_s1_address0 <= zext_ln151_fu_262_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                clefia_s1_address0 <= zext_ln153_fu_242_p1(8 - 1 downto 0);
            else 
                clefia_s1_address0 <= "XXXXXXXX";
            end if;
        else 
            clefia_s1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            clefia_s1_ce0 <= ap_const_logic_1;
        else 
            clefia_s1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln134_7_fu_427_p3 <= (trunc_ln134_69_fu_415_p1 & tmp_153_fu_419_p3);
    or_ln134_8_fu_559_p3 <= (trunc_ln134_71_fu_547_p1 & tmp_157_fu_551_p3);
    or_ln134_s_fu_343_p3 <= (trunc_ln134_67_fu_331_p1 & tmp_149_fu_335_p3);
    or_ln_fu_601_p3 <= (trunc_ln134_72_fu_589_p1 & tmp_159_fu_593_p3);

    rk_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln124_81_fu_208_p1, ap_block_pp0_stage1, zext_ln124_fu_222_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                rk_address0 <= zext_ln124_fu_222_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                rk_address0 <= zext_ln124_81_fu_208_p1(8 - 1 downto 0);
            else 
                rk_address0 <= "XXXXXXXX";
            end if;
        else 
            rk_address0 <= "XXXXXXXX";
        end if; 
    end process;


    rk_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, zext_ln124_80_fu_197_p1, ap_block_pp0_stage0, rk_offset_cast_fu_213_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                rk_address1 <= rk_offset_cast_fu_213_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                rk_address1 <= zext_ln124_80_fu_197_p1(8 - 1 downto 0);
            else 
                rk_address1 <= "XXXXXXXX";
            end if;
        else 
            rk_address1 <= "XXXXXXXX";
        end if; 
    end process;


    rk_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            rk_ce0 <= ap_const_logic_1;
        else 
            rk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rk_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            rk_ce1 <= ap_const_logic_1;
        else 
            rk_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    rk_offset_cast_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rk_offset_read_reg_749),64));
    select_ln131_66_fu_281_p3 <= 
        xor_ln132_66_fu_275_p2 when (tmp_146_fu_267_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_67_fu_323_p3 <= 
        xor_ln132_67_fu_317_p2 when (tmp_148_fu_309_p3(0) = '1') else 
        x_assign_29_fu_301_p3;
    select_ln131_68_fu_365_p3 <= 
        xor_ln132_68_fu_359_p2 when (tmp_150_fu_351_p3(0) = '1') else 
        clefia_s1_q0;
    select_ln131_69_fu_407_p3 <= 
        xor_ln132_69_fu_401_p2 when (tmp_152_fu_393_p3(0) = '1') else 
        x_assign_30_fu_385_p3;
    select_ln131_70_fu_497_p3 <= 
        xor_ln132_70_fu_491_p2 when (tmp_154_fu_483_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_71_fu_539_p3 <= 
        xor_ln132_71_fu_533_p2 when (tmp_156_fu_525_p3(0) = '1') else 
        x_assign_31_fu_517_p3;
    select_ln131_72_fu_581_p3 <= 
        xor_ln132_72_fu_575_p2 when (tmp_158_fu_567_p3(0) = '1') else 
        x_assign_s_fu_475_p3;
    select_ln131_fu_455_p3 <= 
        xor_ln132_fu_449_p2 when (tmp_fu_441_p3(0) = '1') else 
        clefia_s1_q0;
    tmp_145_fu_467_p3 <= select_ln131_fu_455_p3(7 downto 7);
    tmp_146_fu_267_p3 <= clefia_s0_q0(7 downto 7);
    tmp_147_fu_293_p3 <= select_ln131_66_fu_281_p3(7 downto 7);
    tmp_148_fu_309_p3 <= select_ln131_66_fu_281_p3(6 downto 6);
    tmp_149_fu_335_p3 <= select_ln131_67_fu_323_p3(7 downto 7);
    tmp_150_fu_351_p3 <= clefia_s1_q0(7 downto 7);
    tmp_151_fu_377_p3 <= select_ln131_68_fu_365_p3(7 downto 7);
    tmp_152_fu_393_p3 <= select_ln131_68_fu_365_p3(6 downto 6);
    tmp_153_fu_419_p3 <= select_ln131_69_fu_407_p3(7 downto 7);
    tmp_154_fu_483_p3 <= clefia_s0_q0(7 downto 7);
    tmp_155_fu_509_p3 <= select_ln131_70_fu_497_p3(7 downto 7);
    tmp_156_fu_525_p3 <= select_ln131_70_fu_497_p3(6 downto 6);
    tmp_157_fu_551_p3 <= select_ln131_71_fu_539_p3(7 downto 7);
    tmp_158_fu_567_p3 <= select_ln131_fu_455_p3(6 downto 6);
    tmp_159_fu_593_p3 <= select_ln131_72_fu_581_p3(7 downto 7);
    tmp_fu_441_p3 <= clefia_s1_q0(7 downto 7);
    trunc_ln134_66_fu_289_p1 <= select_ln131_66_fu_281_p3(7 - 1 downto 0);
    trunc_ln134_67_fu_331_p1 <= select_ln131_67_fu_323_p3(7 - 1 downto 0);
    trunc_ln134_68_fu_373_p1 <= select_ln131_68_fu_365_p3(7 - 1 downto 0);
    trunc_ln134_69_fu_415_p1 <= select_ln131_69_fu_407_p3(7 - 1 downto 0);
    trunc_ln134_70_fu_505_p1 <= select_ln131_70_fu_497_p3(7 - 1 downto 0);
    trunc_ln134_71_fu_547_p1 <= select_ln131_71_fu_539_p3(7 - 1 downto 0);
    trunc_ln134_72_fu_589_p1 <= select_ln131_72_fu_581_p3(7 - 1 downto 0);
    trunc_ln134_fu_463_p1 <= select_ln131_fu_455_p3(7 - 1 downto 0);
    x_assign_29_fu_301_p3 <= (trunc_ln134_66_fu_289_p1 & tmp_147_fu_293_p3);
    x_assign_30_fu_385_p3 <= (trunc_ln134_68_fu_373_p1 & tmp_151_fu_377_p3);
    x_assign_31_fu_517_p3 <= (trunc_ln134_70_fu_505_p1 & tmp_155_fu_509_p3);
    x_assign_s_fu_475_p3 <= (trunc_ln134_fu_463_p1 & tmp_145_fu_467_p3);
    xor_ln124_147_fu_609_p2 <= (x_assign_s_fu_475_p3 xor p_read_9_reg_780_pp0_iter1_reg);
    xor_ln124_148_fu_614_p2 <= (xor_ln124_147_fu_609_p2 xor clefia_s0_q0);
    xor_ln124_149_fu_435_p2 <= (or_ln134_s_fu_343_p3 xor or_ln134_7_fu_427_p3);
    xor_ln124_150_fu_620_p2 <= (xor_ln124_149_reg_861 xor x_assign_30_reg_855);
    xor_ln124_151_fu_624_p2 <= (xor_ln124_150_fu_620_p2 xor xor_ln124_148_fu_614_p2);
    xor_ln124_152_fu_630_p2 <= (x_assign_31_fu_517_p3 xor x_assign_29_reg_849);
    xor_ln124_153_fu_635_p2 <= (xor_ln124_152_fu_630_p2 xor clefia_s1_q0);
    xor_ln124_154_fu_641_p2 <= (xor_ln124_149_reg_861 xor p_read_8_reg_775_pp0_iter1_reg);
    xor_ln124_155_fu_645_p2 <= (xor_ln124_154_fu_641_p2 xor xor_ln124_153_fu_635_p2);
    xor_ln124_156_fu_651_p2 <= (x_assign_s_fu_475_p3 xor or_ln134_8_fu_559_p3);
    xor_ln124_157_fu_657_p2 <= (z_23_reg_839 xor xor_ln124_156_fu_651_p2);
    xor_ln124_158_fu_662_p2 <= (x_assign_30_reg_855 xor p_read_7_reg_770_pp0_iter1_reg);
    xor_ln124_159_fu_666_p2 <= (xor_ln124_158_fu_662_p2 xor or_ln_fu_601_p3);
    xor_ln124_160_fu_672_p2 <= (xor_ln124_159_fu_666_p2 xor xor_ln124_157_fu_657_p2);
    xor_ln124_161_fu_678_p2 <= (x_assign_31_fu_517_p3 xor or_ln134_8_fu_559_p3);
    xor_ln124_162_fu_684_p2 <= (z_24_reg_844 xor xor_ln124_161_fu_678_p2);
    xor_ln124_163_fu_689_p2 <= (p_read_reg_765_pp0_iter1_reg xor or_ln_fu_601_p3);
    xor_ln124_164_fu_694_p2 <= (xor_ln124_163_fu_689_p2 xor x_assign_29_reg_849);
    xor_ln124_165_fu_699_p2 <= (xor_ln124_164_fu_694_p2 xor xor_ln124_162_fu_684_p2);
    xor_ln124_38_fu_252_p2 <= (reg_187 xor p_read_12_reg_797);
    xor_ln124_39_fu_227_p2 <= (reg_183 xor p_read_11_reg_791);
    xor_ln124_40_fu_232_p2 <= (reg_187 xor p_read_10_reg_785);
    xor_ln124_fu_247_p2 <= (reg_183 xor p_read83_reg_803);
    xor_ln132_66_fu_275_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_67_fu_317_p2 <= (x_assign_29_fu_301_p3 xor ap_const_lv8_E);
    xor_ln132_68_fu_359_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln132_69_fu_401_p2 <= (x_assign_30_fu_385_p3 xor ap_const_lv8_E);
    xor_ln132_70_fu_491_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_71_fu_533_p2 <= (x_assign_31_fu_517_p3 xor ap_const_lv8_E);
    xor_ln132_72_fu_575_p2 <= (x_assign_s_fu_475_p3 xor ap_const_lv8_E);
    xor_ln132_fu_449_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    zext_ln124_80_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_77_fu_191_p2),64));
    zext_ln124_81_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_78_fu_202_p2),64));
    zext_ln124_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_fu_217_p2),64));
    zext_ln150_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_fu_247_p2),64));
    zext_ln151_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_38_fu_252_p2),64));
    zext_ln152_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_39_fu_227_p2),64));
    zext_ln153_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_40_fu_232_p2),64));
end behav;
