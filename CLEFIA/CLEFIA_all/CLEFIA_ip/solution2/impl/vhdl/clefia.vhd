-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clefia is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of clefia is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "clefia_clefia,hls_ip_2022_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.084000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=7753,HLS_SYN_LUT=19538,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal pt_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_bitlen : STD_LOGIC_VECTOR (31 downto 0);
    signal Clefia_enc_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Clefia_enc_ce0 : STD_LOGIC;
    signal Clefia_enc_we0 : STD_LOGIC;
    signal Clefia_enc_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_bitlen_read_reg_423 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln395_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln395_reg_429 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln398_reg_433 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln401_reg_437 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ct_0_reg_446 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ct_1_reg_456 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ct_2_reg_466 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ct_3_reg_476 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ct_4_reg_486 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ct_5_reg_496 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ct_6_reg_506 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ct_7_reg_516 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ct_8_reg_526 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ct_9_reg_536 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ct_10_reg_546 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ct_11_reg_556 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ct_12_reg_566 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ct_13_reg_576 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ct_14_reg_586 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ct_15_reg_596 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal rk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_ce0 : STD_LOGIC;
    signal rk_we0 : STD_LOGIC;
    signal rk_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_ce1 : STD_LOGIC;
    signal rk_we1 : STD_LOGIC;
    signal rk_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet256_fu_321_ap_start : STD_LOGIC;
    signal grp_ClefiaKeySet256_fu_321_ap_done : STD_LOGIC;
    signal grp_ClefiaKeySet256_fu_321_ap_idle : STD_LOGIC;
    signal grp_ClefiaKeySet256_fu_321_ap_ready : STD_LOGIC;
    signal grp_ClefiaKeySet256_fu_321_rk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet256_fu_321_rk_ce0 : STD_LOGIC;
    signal grp_ClefiaKeySet256_fu_321_rk_we0 : STD_LOGIC;
    signal grp_ClefiaKeySet256_fu_321_rk_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet256_fu_321_rk_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet256_fu_321_rk_ce1 : STD_LOGIC;
    signal grp_ClefiaKeySet192_fu_335_ap_start : STD_LOGIC;
    signal grp_ClefiaKeySet192_fu_335_ap_done : STD_LOGIC;
    signal grp_ClefiaKeySet192_fu_335_ap_idle : STD_LOGIC;
    signal grp_ClefiaKeySet192_fu_335_ap_ready : STD_LOGIC;
    signal grp_ClefiaKeySet192_fu_335_rk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_fu_335_rk_ce0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_fu_335_rk_we0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_fu_335_rk_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_fu_335_rk_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_fu_335_rk_ce1 : STD_LOGIC;
    signal grp_ClefiaKeySet128_fu_349_ap_start : STD_LOGIC;
    signal grp_ClefiaKeySet128_fu_349_ap_done : STD_LOGIC;
    signal grp_ClefiaKeySet128_fu_349_ap_idle : STD_LOGIC;
    signal grp_ClefiaKeySet128_fu_349_ap_ready : STD_LOGIC;
    signal grp_ClefiaKeySet128_fu_349_rk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet128_fu_349_rk_ce0 : STD_LOGIC;
    signal grp_ClefiaKeySet128_fu_349_rk_we0 : STD_LOGIC;
    signal grp_ClefiaKeySet128_fu_349_rk_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet128_fu_349_rk_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet128_fu_349_rk_ce1 : STD_LOGIC;
    signal grp_ClefiaKeySet128_fu_349_rk_we1 : STD_LOGIC;
    signal grp_ClefiaKeySet128_fu_349_rk_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_fu_361_ap_start : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_fu_361_ap_done : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_fu_361_ap_idle : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_fu_361_ap_ready : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_fu_361_Clefia_enc_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ClefiaEncrypt_1_fu_361_Clefia_enc_ce0 : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_fu_361_Clefia_enc_we0 : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_fu_361_Clefia_enc_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_fu_361_pt_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ClefiaEncrypt_1_fu_361_pt_ce0 : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_fu_361_rk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_fu_361_rk_ce0 : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_fu_361_rk_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_fu_361_rk_ce1 : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_fu_376_ap_start : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_fu_376_ap_done : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_fu_376_ap_idle : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_fu_376_ap_ready : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_fu_376_Clefia_dec_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ClefiaDecrypt_1_fu_376_Clefia_dec_ce0 : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_fu_376_Clefia_dec_we0 : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_fu_376_Clefia_dec_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_fu_376_rk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_fu_376_rk_ce0 : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_fu_376_rk_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_fu_376_rk_ce1 : STD_LOGIC;
    signal r_reg_277 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_predicate_op55_call_state2 : BOOLEAN;
    signal ap_predicate_op57_call_state2 : BOOLEAN;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal r_1_reg_299 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_ClefiaKeySet256_fu_321_ap_start_reg : STD_LOGIC := '0';
    signal grp_ClefiaKeySet192_fu_335_ap_start_reg : STD_LOGIC := '0';
    signal grp_ClefiaKeySet128_fu_349_ap_start_reg : STD_LOGIC := '0';
    signal grp_ClefiaEncrypt_1_fu_361_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_ClefiaDecrypt_1_fu_376_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_405_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_411_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clefia_ClefiaKeySet256 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce0 : OUT STD_LOGIC;
        rk_we0 : OUT STD_LOGIC;
        rk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce1 : OUT STD_LOGIC;
        rk_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaKeySet192 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce0 : OUT STD_LOGIC;
        rk_we0 : OUT STD_LOGIC;
        rk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce1 : OUT STD_LOGIC;
        rk_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaKeySet128 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce0 : OUT STD_LOGIC;
        rk_we0 : OUT STD_LOGIC;
        rk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce1 : OUT STD_LOGIC;
        rk_we1 : OUT STD_LOGIC;
        rk_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaEncrypt_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Clefia_enc_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Clefia_enc_ce0 : OUT STD_LOGIC;
        Clefia_enc_we0 : OUT STD_LOGIC;
        Clefia_enc_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pt_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        pt_ce0 : OUT STD_LOGIC;
        pt_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce0 : OUT STD_LOGIC;
        rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce1 : OUT STD_LOGIC;
        rk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        r : IN STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component clefia_ClefiaDecrypt_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Clefia_dec_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Clefia_dec_ce0 : OUT STD_LOGIC;
        Clefia_dec_we0 : OUT STD_LOGIC;
        Clefia_dec_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (7 downto 0);
        rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce0 : OUT STD_LOGIC;
        rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce1 : OUT STD_LOGIC;
        rk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        r : IN STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component clefia_rk_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        pt_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        pt_ce0 : IN STD_LOGIC;
        pt_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_bitlen : OUT STD_LOGIC_VECTOR (31 downto 0);
        Clefia_enc_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        Clefia_enc_ce0 : IN STD_LOGIC;
        Clefia_enc_we0 : IN STD_LOGIC;
        Clefia_enc_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        Clefia_enc_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        Clefia_dec_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        Clefia_dec_ce0 : IN STD_LOGIC;
        Clefia_dec_we0 : IN STD_LOGIC;
        Clefia_dec_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    rk_U : component clefia_rk_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 224,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => rk_address0,
        ce0 => rk_ce0,
        we0 => rk_we0,
        d0 => rk_d0,
        q0 => rk_q0,
        address1 => rk_address1,
        ce1 => rk_ce1,
        we1 => rk_we1,
        d1 => grp_ClefiaKeySet128_fu_349_rk_d1,
        q1 => rk_q1);

    grp_ClefiaKeySet256_fu_321 : component clefia_ClefiaKeySet256
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ClefiaKeySet256_fu_321_ap_start,
        ap_done => grp_ClefiaKeySet256_fu_321_ap_done,
        ap_idle => grp_ClefiaKeySet256_fu_321_ap_idle,
        ap_ready => grp_ClefiaKeySet256_fu_321_ap_ready,
        rk_address0 => grp_ClefiaKeySet256_fu_321_rk_address0,
        rk_ce0 => grp_ClefiaKeySet256_fu_321_rk_ce0,
        rk_we0 => grp_ClefiaKeySet256_fu_321_rk_we0,
        rk_d0 => grp_ClefiaKeySet256_fu_321_rk_d0,
        rk_address1 => grp_ClefiaKeySet256_fu_321_rk_address1,
        rk_ce1 => grp_ClefiaKeySet256_fu_321_rk_ce1,
        rk_q1 => rk_q1);

    grp_ClefiaKeySet192_fu_335 : component clefia_ClefiaKeySet192
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ClefiaKeySet192_fu_335_ap_start,
        ap_done => grp_ClefiaKeySet192_fu_335_ap_done,
        ap_idle => grp_ClefiaKeySet192_fu_335_ap_idle,
        ap_ready => grp_ClefiaKeySet192_fu_335_ap_ready,
        rk_address0 => grp_ClefiaKeySet192_fu_335_rk_address0,
        rk_ce0 => grp_ClefiaKeySet192_fu_335_rk_ce0,
        rk_we0 => grp_ClefiaKeySet192_fu_335_rk_we0,
        rk_d0 => grp_ClefiaKeySet192_fu_335_rk_d0,
        rk_address1 => grp_ClefiaKeySet192_fu_335_rk_address1,
        rk_ce1 => grp_ClefiaKeySet192_fu_335_rk_ce1,
        rk_q1 => rk_q1);

    grp_ClefiaKeySet128_fu_349 : component clefia_ClefiaKeySet128
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ClefiaKeySet128_fu_349_ap_start,
        ap_done => grp_ClefiaKeySet128_fu_349_ap_done,
        ap_idle => grp_ClefiaKeySet128_fu_349_ap_idle,
        ap_ready => grp_ClefiaKeySet128_fu_349_ap_ready,
        rk_address0 => grp_ClefiaKeySet128_fu_349_rk_address0,
        rk_ce0 => grp_ClefiaKeySet128_fu_349_rk_ce0,
        rk_we0 => grp_ClefiaKeySet128_fu_349_rk_we0,
        rk_d0 => grp_ClefiaKeySet128_fu_349_rk_d0,
        rk_address1 => grp_ClefiaKeySet128_fu_349_rk_address1,
        rk_ce1 => grp_ClefiaKeySet128_fu_349_rk_ce1,
        rk_we1 => grp_ClefiaKeySet128_fu_349_rk_we1,
        rk_d1 => grp_ClefiaKeySet128_fu_349_rk_d1);

    grp_ClefiaEncrypt_1_fu_361 : component clefia_ClefiaEncrypt_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ClefiaEncrypt_1_fu_361_ap_start,
        ap_done => grp_ClefiaEncrypt_1_fu_361_ap_done,
        ap_idle => grp_ClefiaEncrypt_1_fu_361_ap_idle,
        ap_ready => grp_ClefiaEncrypt_1_fu_361_ap_ready,
        Clefia_enc_address0 => grp_ClefiaEncrypt_1_fu_361_Clefia_enc_address0,
        Clefia_enc_ce0 => grp_ClefiaEncrypt_1_fu_361_Clefia_enc_ce0,
        Clefia_enc_we0 => grp_ClefiaEncrypt_1_fu_361_Clefia_enc_we0,
        Clefia_enc_d0 => grp_ClefiaEncrypt_1_fu_361_Clefia_enc_d0,
        pt_address0 => grp_ClefiaEncrypt_1_fu_361_pt_address0,
        pt_ce0 => grp_ClefiaEncrypt_1_fu_361_pt_ce0,
        pt_q0 => pt_q0,
        rk_address0 => grp_ClefiaEncrypt_1_fu_361_rk_address0,
        rk_ce0 => grp_ClefiaEncrypt_1_fu_361_rk_ce0,
        rk_q0 => rk_q0,
        rk_address1 => grp_ClefiaEncrypt_1_fu_361_rk_address1,
        rk_ce1 => grp_ClefiaEncrypt_1_fu_361_rk_ce1,
        rk_q1 => rk_q1,
        r => r_reg_277);

    grp_ClefiaDecrypt_1_fu_376 : component clefia_ClefiaDecrypt_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ClefiaDecrypt_1_fu_376_ap_start,
        ap_done => grp_ClefiaDecrypt_1_fu_376_ap_done,
        ap_idle => grp_ClefiaDecrypt_1_fu_376_ap_idle,
        ap_ready => grp_ClefiaDecrypt_1_fu_376_ap_ready,
        Clefia_dec_address0 => grp_ClefiaDecrypt_1_fu_376_Clefia_dec_address0,
        Clefia_dec_ce0 => grp_ClefiaDecrypt_1_fu_376_Clefia_dec_ce0,
        Clefia_dec_we0 => grp_ClefiaDecrypt_1_fu_376_Clefia_dec_we0,
        Clefia_dec_d0 => grp_ClefiaDecrypt_1_fu_376_Clefia_dec_d0,
        p_read => ct_0_reg_446,
        p_read1 => ct_1_reg_456,
        p_read2 => ct_2_reg_466,
        p_read3 => ct_3_reg_476,
        p_read4 => ct_4_reg_486,
        p_read5 => ct_5_reg_496,
        p_read6 => ct_6_reg_506,
        p_read7 => ct_7_reg_516,
        p_read8 => ct_8_reg_526,
        p_read9 => ct_9_reg_536,
        p_read10 => ct_10_reg_546,
        p_read11 => ct_11_reg_556,
        p_read12 => ct_12_reg_566,
        p_read13 => ct_13_reg_576,
        p_read14 => ct_14_reg_586,
        p_read15 => ct_15_reg_596,
        rk_address0 => grp_ClefiaDecrypt_1_fu_376_rk_address0,
        rk_ce0 => grp_ClefiaDecrypt_1_fu_376_rk_ce0,
        rk_q0 => rk_q0,
        rk_address1 => grp_ClefiaDecrypt_1_fu_376_rk_address1,
        rk_ce1 => grp_ClefiaDecrypt_1_fu_376_rk_ce1,
        rk_q1 => rk_q1,
        r => r_1_reg_299);

    control_s_axi_U : component clefia_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        pt_address0 => grp_ClefiaEncrypt_1_fu_361_pt_address0,
        pt_ce0 => grp_ClefiaEncrypt_1_fu_361_pt_ce0,
        pt_q0 => pt_q0,
        key_bitlen => key_bitlen,
        Clefia_enc_address0 => Clefia_enc_address0,
        Clefia_enc_ce0 => Clefia_enc_ce0,
        Clefia_enc_we0 => Clefia_enc_we0,
        Clefia_enc_d0 => grp_ClefiaEncrypt_1_fu_361_Clefia_enc_d0,
        Clefia_enc_q0 => Clefia_enc_q0,
        Clefia_dec_address0 => grp_ClefiaDecrypt_1_fu_376_Clefia_dec_address0,
        Clefia_dec_ce0 => grp_ClefiaDecrypt_1_fu_376_Clefia_dec_ce0,
        Clefia_dec_we0 => grp_ClefiaDecrypt_1_fu_376_Clefia_dec_we0,
        Clefia_dec_d0 => grp_ClefiaDecrypt_1_fu_376_Clefia_dec_d0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_ClefiaDecrypt_1_fu_376_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ClefiaDecrypt_1_fu_376_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    grp_ClefiaDecrypt_1_fu_376_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ClefiaDecrypt_1_fu_376_ap_ready = ap_const_logic_1)) then 
                    grp_ClefiaDecrypt_1_fu_376_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ClefiaEncrypt_1_fu_361_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ClefiaEncrypt_1_fu_361_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_ClefiaEncrypt_1_fu_361_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ClefiaEncrypt_1_fu_361_ap_ready = ap_const_logic_1)) then 
                    grp_ClefiaEncrypt_1_fu_361_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ClefiaKeySet128_fu_349_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ClefiaKeySet128_fu_349_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln395_fu_417_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln395_reg_429 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
                    grp_ClefiaKeySet128_fu_349_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ClefiaKeySet128_fu_349_ap_ready = ap_const_logic_1)) then 
                    grp_ClefiaKeySet128_fu_349_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ClefiaKeySet192_fu_335_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ClefiaKeySet192_fu_335_ap_start_reg <= ap_const_logic_0;
            else
                if ((((grp_fu_405_p2 = ap_const_lv1_1) and (icmp_ln395_fu_417_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_fu_405_p2 = ap_const_lv1_1) and (icmp_ln395_reg_429 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
                    grp_ClefiaKeySet192_fu_335_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ClefiaKeySet192_fu_335_ap_ready = ap_const_logic_1)) then 
                    grp_ClefiaKeySet192_fu_335_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ClefiaKeySet256_fu_321_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ClefiaKeySet256_fu_321_ap_start_reg <= ap_const_logic_0;
            else
                if ((((grp_fu_411_p2 = ap_const_lv1_1) and (grp_fu_405_p2 = ap_const_lv1_0) and (icmp_ln395_fu_417_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_fu_411_p2 = ap_const_lv1_1) and (grp_fu_405_p2 = ap_const_lv1_0) and (icmp_ln395_reg_429 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
                    grp_ClefiaKeySet256_fu_321_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ClefiaKeySet256_fu_321_ap_ready = ap_const_logic_1)) then 
                    grp_ClefiaKeySet256_fu_321_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    r_1_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_411_p2 = ap_const_lv1_0) and (grp_fu_405_p2 = ap_const_lv1_0) and (icmp_ln395_reg_429 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                r_1_reg_299(1) <= '0';
                r_1_reg_299(2) <= '0';
                r_1_reg_299(3) <= '0';
                r_1_reg_299(4) <= '0';
            elsif (((grp_ClefiaKeySet256_fu_321_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                r_1_reg_299(1) <= '1';
                r_1_reg_299(2) <= '0';
                r_1_reg_299(3) <= '1';
                r_1_reg_299(4) <= '1';
            elsif (((grp_ClefiaKeySet192_fu_335_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                r_1_reg_299(1) <= '1';
                r_1_reg_299(2) <= '1';
                r_1_reg_299(3) <= '0';
                r_1_reg_299(4) <= '1';
            elsif (((grp_ClefiaKeySet128_fu_349_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                r_1_reg_299(1) <= '1';
                r_1_reg_299(2) <= '0';
                r_1_reg_299(3) <= '0';
                r_1_reg_299(4) <= '1';
            end if; 
        end if;
    end process;

    r_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_411_p2 = ap_const_lv1_0) and (grp_fu_405_p2 = ap_const_lv1_0) and (icmp_ln395_fu_417_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_reg_277(1) <= '0';
                r_reg_277(2) <= '0';
                r_reg_277(3) <= '0';
                r_reg_277(4) <= '0';
            elsif (((icmp_ln401_reg_437 = ap_const_lv1_1) and (icmp_ln398_reg_433 = ap_const_lv1_0) and (icmp_ln395_reg_429 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_reg_277(1) <= '1';
                r_reg_277(2) <= '0';
                r_reg_277(3) <= '1';
                r_reg_277(4) <= '1';
            elsif (((icmp_ln398_reg_433 = ap_const_lv1_1) and (icmp_ln395_reg_429 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_reg_277(1) <= '1';
                r_reg_277(2) <= '1';
                r_reg_277(3) <= '0';
                r_reg_277(4) <= '1';
            elsif (((icmp_ln395_reg_429 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_reg_277(1) <= '1';
                r_reg_277(2) <= '0';
                r_reg_277(3) <= '0';
                r_reg_277(4) <= '1';
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                ct_0_reg_446 <= Clefia_enc_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                ct_10_reg_546 <= Clefia_enc_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                ct_11_reg_556 <= Clefia_enc_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                ct_12_reg_566 <= Clefia_enc_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                ct_13_reg_576 <= Clefia_enc_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                ct_14_reg_586 <= Clefia_enc_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                ct_15_reg_596 <= Clefia_enc_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ct_1_reg_456 <= Clefia_enc_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                ct_2_reg_466 <= Clefia_enc_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                ct_3_reg_476 <= Clefia_enc_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                ct_4_reg_486 <= Clefia_enc_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                ct_5_reg_496 <= Clefia_enc_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                ct_6_reg_506 <= Clefia_enc_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                ct_7_reg_516 <= Clefia_enc_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                ct_8_reg_526 <= Clefia_enc_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                ct_9_reg_536 <= Clefia_enc_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln395_reg_429 <= icmp_ln395_fu_417_p2;
                key_bitlen_read_reg_423 <= key_bitlen;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln395_fu_417_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln398_reg_433 <= grp_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_405_p2 = ap_const_lv1_0) and (icmp_ln395_fu_417_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln401_reg_437 <= grp_fu_411_p2;
            end if;
        end if;
    end process;
    r_reg_277(0) <= '0';
    r_1_reg_299(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln395_reg_429, grp_fu_405_p2, grp_fu_411_p2, ap_CS_fsm_state21, grp_ClefiaKeySet256_fu_321_ap_done, grp_ClefiaKeySet192_fu_335_ap_done, grp_ClefiaKeySet128_fu_349_ap_done, grp_ClefiaEncrypt_1_fu_361_ap_done, grp_ClefiaDecrypt_1_fu_376_ap_done, ap_CS_fsm_state2, ap_block_state2_on_subcall_done, ap_CS_fsm_state24, ap_CS_fsm_state23, ap_CS_fsm_state22, ap_CS_fsm_state4, ap_CS_fsm_state26)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_ClefiaEncrypt_1_fu_361_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_fu_411_p2 = ap_const_lv1_0) and (grp_fu_405_p2 = ap_const_lv1_0) and (icmp_ln395_reg_429 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                elsif (((grp_fu_411_p2 = ap_const_lv1_1) and (grp_fu_405_p2 = ap_const_lv1_0) and (icmp_ln395_reg_429 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                elsif (((grp_fu_405_p2 = ap_const_lv1_1) and (icmp_ln395_reg_429 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state22 => 
                if (((grp_ClefiaKeySet256_fu_321_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((grp_ClefiaKeySet192_fu_335_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((grp_ClefiaKeySet128_fu_349_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((grp_ClefiaDecrypt_1_fu_376_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Clefia_enc_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, grp_ClefiaEncrypt_1_fu_361_Clefia_enc_address0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            Clefia_enc_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            Clefia_enc_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            Clefia_enc_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            Clefia_enc_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            Clefia_enc_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            Clefia_enc_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            Clefia_enc_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            Clefia_enc_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Clefia_enc_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Clefia_enc_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Clefia_enc_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Clefia_enc_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Clefia_enc_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Clefia_enc_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Clefia_enc_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Clefia_enc_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Clefia_enc_address0 <= grp_ClefiaEncrypt_1_fu_361_Clefia_enc_address0;
        else 
            Clefia_enc_address0 <= "XXXX";
        end if; 
    end process;


    Clefia_enc_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, grp_ClefiaEncrypt_1_fu_361_Clefia_enc_ce0, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            Clefia_enc_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Clefia_enc_ce0 <= grp_ClefiaEncrypt_1_fu_361_Clefia_enc_ce0;
        else 
            Clefia_enc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Clefia_enc_we0_assign_proc : process(grp_ClefiaEncrypt_1_fu_361_Clefia_enc_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Clefia_enc_we0 <= grp_ClefiaEncrypt_1_fu_361_Clefia_enc_we0;
        else 
            Clefia_enc_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;

    ap_ST_fsm_state22_blk_assign_proc : process(grp_ClefiaKeySet256_fu_321_ap_done)
    begin
        if ((grp_ClefiaKeySet256_fu_321_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state23_blk_assign_proc : process(grp_ClefiaKeySet192_fu_335_ap_done)
    begin
        if ((grp_ClefiaKeySet192_fu_335_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state24_blk_assign_proc : process(grp_ClefiaKeySet128_fu_349_ap_done)
    begin
        if ((grp_ClefiaKeySet128_fu_349_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state24_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state24_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state25_blk <= ap_const_logic_0;

    ap_ST_fsm_state26_blk_assign_proc : process(grp_ClefiaDecrypt_1_fu_376_ap_done)
    begin
        if ((grp_ClefiaDecrypt_1_fu_376_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state26_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state26_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_on_subcall_done)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_ClefiaEncrypt_1_fu_361_ap_done)
    begin
        if ((grp_ClefiaEncrypt_1_fu_361_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state2_on_subcall_done_assign_proc : process(icmp_ln395_reg_429, grp_ClefiaKeySet256_fu_321_ap_done, grp_ClefiaKeySet192_fu_335_ap_done, grp_ClefiaKeySet128_fu_349_ap_done, ap_predicate_op55_call_state2, ap_predicate_op57_call_state2)
    begin
                ap_block_state2_on_subcall_done <= (((icmp_ln395_reg_429 = ap_const_lv1_1) and (grp_ClefiaKeySet128_fu_349_ap_done = ap_const_logic_0)) or ((ap_predicate_op57_call_state2 = ap_const_boolean_1) and (grp_ClefiaKeySet192_fu_335_ap_done = ap_const_logic_0)) or ((ap_predicate_op55_call_state2 = ap_const_boolean_1) and (grp_ClefiaKeySet256_fu_321_ap_done = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(grp_ClefiaDecrypt_1_fu_376_ap_done, ap_CS_fsm_state26)
    begin
        if (((grp_ClefiaDecrypt_1_fu_376_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op55_call_state2_assign_proc : process(icmp_ln395_reg_429, icmp_ln398_reg_433, icmp_ln401_reg_437)
    begin
                ap_predicate_op55_call_state2 <= ((icmp_ln401_reg_437 = ap_const_lv1_1) and (icmp_ln398_reg_433 = ap_const_lv1_0) and (icmp_ln395_reg_429 = ap_const_lv1_0));
    end process;


    ap_predicate_op57_call_state2_assign_proc : process(icmp_ln395_reg_429, icmp_ln398_reg_433)
    begin
                ap_predicate_op57_call_state2 <= ((icmp_ln398_reg_433 = ap_const_lv1_1) and (icmp_ln395_reg_429 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(grp_ClefiaDecrypt_1_fu_376_ap_done, ap_CS_fsm_state26)
    begin
        if (((grp_ClefiaDecrypt_1_fu_376_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_ClefiaDecrypt_1_fu_376_ap_start <= grp_ClefiaDecrypt_1_fu_376_ap_start_reg;
    grp_ClefiaEncrypt_1_fu_361_ap_start <= grp_ClefiaEncrypt_1_fu_361_ap_start_reg;
    grp_ClefiaKeySet128_fu_349_ap_start <= grp_ClefiaKeySet128_fu_349_ap_start_reg;
    grp_ClefiaKeySet192_fu_335_ap_start <= grp_ClefiaKeySet192_fu_335_ap_start_reg;
    grp_ClefiaKeySet256_fu_321_ap_start <= grp_ClefiaKeySet256_fu_321_ap_start_reg;

    grp_fu_405_p0_assign_proc : process(ap_CS_fsm_state1, key_bitlen, key_bitlen_read_reg_423, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_405_p0 <= key_bitlen_read_reg_423;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_405_p0 <= key_bitlen;
        else 
            grp_fu_405_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_405_p2 <= "1" when (grp_fu_405_p0 = ap_const_lv32_C0) else "0";

    grp_fu_411_p0_assign_proc : process(ap_CS_fsm_state1, key_bitlen, key_bitlen_read_reg_423, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_411_p0 <= key_bitlen_read_reg_423;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_411_p0 <= key_bitlen;
        else 
            grp_fu_411_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_411_p2 <= "1" when (grp_fu_411_p0 = ap_const_lv32_100) else "0";
    icmp_ln395_fu_417_p2 <= "1" when (key_bitlen = ap_const_lv32_80) else "0";

    rk_address0_assign_proc : process(icmp_ln395_reg_429, grp_ClefiaKeySet256_fu_321_rk_address0, grp_ClefiaKeySet192_fu_335_rk_address0, grp_ClefiaKeySet128_fu_349_rk_address0, grp_ClefiaEncrypt_1_fu_361_rk_address0, grp_ClefiaDecrypt_1_fu_376_rk_address0, ap_CS_fsm_state2, ap_predicate_op55_call_state2, ap_predicate_op57_call_state2, ap_CS_fsm_state24, ap_CS_fsm_state23, ap_CS_fsm_state22, ap_CS_fsm_state4, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            rk_address0 <= grp_ClefiaDecrypt_1_fu_376_rk_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rk_address0 <= grp_ClefiaEncrypt_1_fu_361_rk_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or ((icmp_ln395_reg_429 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            rk_address0 <= grp_ClefiaKeySet128_fu_349_rk_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_predicate_op57_call_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            rk_address0 <= grp_ClefiaKeySet192_fu_335_rk_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_predicate_op55_call_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            rk_address0 <= grp_ClefiaKeySet256_fu_321_rk_address0;
        else 
            rk_address0 <= "XXXXXXXX";
        end if; 
    end process;


    rk_address1_assign_proc : process(icmp_ln395_reg_429, grp_ClefiaKeySet256_fu_321_rk_address1, grp_ClefiaKeySet192_fu_335_rk_address1, grp_ClefiaKeySet128_fu_349_rk_address1, grp_ClefiaEncrypt_1_fu_361_rk_address1, grp_ClefiaDecrypt_1_fu_376_rk_address1, ap_CS_fsm_state2, ap_predicate_op55_call_state2, ap_predicate_op57_call_state2, ap_CS_fsm_state24, ap_CS_fsm_state23, ap_CS_fsm_state22, ap_CS_fsm_state4, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            rk_address1 <= grp_ClefiaDecrypt_1_fu_376_rk_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rk_address1 <= grp_ClefiaEncrypt_1_fu_361_rk_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or ((icmp_ln395_reg_429 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            rk_address1 <= grp_ClefiaKeySet128_fu_349_rk_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_predicate_op57_call_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            rk_address1 <= grp_ClefiaKeySet192_fu_335_rk_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_predicate_op55_call_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            rk_address1 <= grp_ClefiaKeySet256_fu_321_rk_address1;
        else 
            rk_address1 <= "XXXXXXXX";
        end if; 
    end process;


    rk_ce0_assign_proc : process(icmp_ln395_reg_429, grp_ClefiaKeySet256_fu_321_rk_ce0, grp_ClefiaKeySet192_fu_335_rk_ce0, grp_ClefiaKeySet128_fu_349_rk_ce0, grp_ClefiaEncrypt_1_fu_361_rk_ce0, grp_ClefiaDecrypt_1_fu_376_rk_ce0, ap_CS_fsm_state2, ap_predicate_op55_call_state2, ap_predicate_op57_call_state2, ap_CS_fsm_state24, ap_CS_fsm_state23, ap_CS_fsm_state22, ap_CS_fsm_state4, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            rk_ce0 <= grp_ClefiaDecrypt_1_fu_376_rk_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rk_ce0 <= grp_ClefiaEncrypt_1_fu_361_rk_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or ((icmp_ln395_reg_429 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            rk_ce0 <= grp_ClefiaKeySet128_fu_349_rk_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_predicate_op57_call_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            rk_ce0 <= grp_ClefiaKeySet192_fu_335_rk_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_predicate_op55_call_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            rk_ce0 <= grp_ClefiaKeySet256_fu_321_rk_ce0;
        else 
            rk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rk_ce1_assign_proc : process(icmp_ln395_reg_429, grp_ClefiaKeySet256_fu_321_rk_ce1, grp_ClefiaKeySet192_fu_335_rk_ce1, grp_ClefiaKeySet128_fu_349_rk_ce1, grp_ClefiaEncrypt_1_fu_361_rk_ce1, grp_ClefiaDecrypt_1_fu_376_rk_ce1, ap_CS_fsm_state2, ap_predicate_op55_call_state2, ap_predicate_op57_call_state2, ap_CS_fsm_state24, ap_CS_fsm_state23, ap_CS_fsm_state22, ap_CS_fsm_state4, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            rk_ce1 <= grp_ClefiaDecrypt_1_fu_376_rk_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rk_ce1 <= grp_ClefiaEncrypt_1_fu_361_rk_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or ((icmp_ln395_reg_429 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            rk_ce1 <= grp_ClefiaKeySet128_fu_349_rk_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_predicate_op57_call_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            rk_ce1 <= grp_ClefiaKeySet192_fu_335_rk_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_predicate_op55_call_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            rk_ce1 <= grp_ClefiaKeySet256_fu_321_rk_ce1;
        else 
            rk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rk_d0_assign_proc : process(icmp_ln395_reg_429, grp_ClefiaKeySet256_fu_321_rk_d0, grp_ClefiaKeySet192_fu_335_rk_d0, grp_ClefiaKeySet128_fu_349_rk_d0, ap_CS_fsm_state2, ap_predicate_op55_call_state2, ap_predicate_op57_call_state2, ap_CS_fsm_state24, ap_CS_fsm_state23, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((icmp_ln395_reg_429 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            rk_d0 <= grp_ClefiaKeySet128_fu_349_rk_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_predicate_op57_call_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            rk_d0 <= grp_ClefiaKeySet192_fu_335_rk_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_predicate_op55_call_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            rk_d0 <= grp_ClefiaKeySet256_fu_321_rk_d0;
        else 
            rk_d0 <= "XXXXXXXX";
        end if; 
    end process;


    rk_we0_assign_proc : process(icmp_ln395_reg_429, grp_ClefiaKeySet256_fu_321_rk_we0, grp_ClefiaKeySet192_fu_335_rk_we0, grp_ClefiaKeySet128_fu_349_rk_we0, ap_CS_fsm_state2, ap_predicate_op55_call_state2, ap_predicate_op57_call_state2, ap_CS_fsm_state24, ap_CS_fsm_state23, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((icmp_ln395_reg_429 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            rk_we0 <= grp_ClefiaKeySet128_fu_349_rk_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_predicate_op57_call_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            rk_we0 <= grp_ClefiaKeySet192_fu_335_rk_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_predicate_op55_call_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            rk_we0 <= grp_ClefiaKeySet256_fu_321_rk_we0;
        else 
            rk_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rk_we1_assign_proc : process(icmp_ln395_reg_429, grp_ClefiaKeySet128_fu_349_rk_we1, ap_CS_fsm_state2, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((icmp_ln395_reg_429 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            rk_we1 <= grp_ClefiaKeySet128_fu_349_rk_we1;
        else 
            rk_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
