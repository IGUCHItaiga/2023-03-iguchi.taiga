-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clefia_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rin_44 : IN STD_LOGIC_VECTOR (7 downto 0);
    rin_43 : IN STD_LOGIC_VECTOR (7 downto 0);
    rin_42 : IN STD_LOGIC_VECTOR (7 downto 0);
    rin_41 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
    rin_40 : IN STD_LOGIC_VECTOR (7 downto 0);
    rin_39 : IN STD_LOGIC_VECTOR (7 downto 0);
    rin_38 : IN STD_LOGIC_VECTOR (7 downto 0);
    rin : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    r_cast2 : IN STD_LOGIC_VECTOR (4 downto 0);
    shl_ln : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce0 : OUT STD_LOGIC;
    rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce1 : OUT STD_LOGIC;
    rk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    fin_4_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_4_out_ap_vld : OUT STD_LOGIC;
    fin_5_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_5_out_ap_vld : OUT STD_LOGIC;
    fin_6_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_6_out_ap_vld : OUT STD_LOGIC;
    fin_7_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_7_out_ap_vld : OUT STD_LOGIC;
    fin_8_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_8_out_ap_vld : OUT STD_LOGIC;
    fin_9_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_9_out_ap_vld : OUT STD_LOGIC;
    fin_10_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_10_out_ap_vld : OUT STD_LOGIC;
    fin_11_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_11_out_ap_vld : OUT STD_LOGIC;
    fin_12_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_12_out_ap_vld : OUT STD_LOGIC;
    fin_13_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_13_out_ap_vld : OUT STD_LOGIC;
    fin_14_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_14_out_ap_vld : OUT STD_LOGIC;
    fin_15_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_15_out_ap_vld : OUT STD_LOGIC;
    fin_0_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_0_out_ap_vld : OUT STD_LOGIC;
    fin_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_1_out_ap_vld : OUT STD_LOGIC;
    fin_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_2_out_ap_vld : OUT STD_LOGIC;
    fin_3_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_3_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of clefia_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv36_FFFFFFFF8 : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111111111111000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal icmp_ln230_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage10 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal idx_load_reg_1040 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal fin_0_4_0_load_reg_1045 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_1_4_0_load_reg_1051 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_2_4_0_load_reg_1057 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_3_4_0_load_reg_1063 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_4_5_0_load_reg_1069 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_5_5_0_load_reg_1075 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_6_5_0_load_reg_1081 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_7_5_0_load_reg_1087 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln224_fu_575_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln224_reg_1093 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_4_reg_1099 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal fin_5_reg_1105 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_6_reg_1111 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_7_reg_1117 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_8_reg_1123 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_9_reg_1129 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_10_reg_1135 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_11_reg_1141 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_8_4_0_load_reg_1147 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal fin_9_4_0_load_reg_1153 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_10_4_0_load_reg_1159 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_11_4_0_load_reg_1165 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_12_5_0_load_reg_1171 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_13_5_0_load_reg_1177 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_14_5_0_load_reg_1183 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_15_5_0_load_reg_1189 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln224_1_fu_654_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln224_1_reg_1195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal icmp_ln230_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal grp_ClefiaF0Xor_fu_404_ap_start : STD_LOGIC;
    signal grp_ClefiaF0Xor_fu_404_ap_done : STD_LOGIC;
    signal grp_ClefiaF0Xor_fu_404_ap_idle : STD_LOGIC;
    signal grp_ClefiaF0Xor_fu_404_ap_ready : STD_LOGIC;
    signal grp_ClefiaF0Xor_fu_404_rk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF0Xor_fu_404_rk_ce0 : STD_LOGIC;
    signal grp_ClefiaF0Xor_fu_404_rk_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF0Xor_fu_404_rk_ce1 : STD_LOGIC;
    signal grp_ClefiaF0Xor_fu_404_rk_offset : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF0Xor_fu_404_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF0Xor_fu_404_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF0Xor_fu_404_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF0Xor_fu_404_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF0Xor_fu_404_ap_return_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF0Xor_fu_404_ap_return_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF0Xor_fu_404_ap_return_6 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF0Xor_fu_404_ap_return_7 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF1Xor_3_fu_423_ap_start : STD_LOGIC;
    signal grp_ClefiaF1Xor_3_fu_423_ap_done : STD_LOGIC;
    signal grp_ClefiaF1Xor_3_fu_423_ap_idle : STD_LOGIC;
    signal grp_ClefiaF1Xor_3_fu_423_ap_ready : STD_LOGIC;
    signal grp_ClefiaF1Xor_3_fu_423_rk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF1Xor_3_fu_423_rk_ce0 : STD_LOGIC;
    signal grp_ClefiaF1Xor_3_fu_423_rk_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF1Xor_3_fu_423_rk_ce1 : STD_LOGIC;
    signal grp_ClefiaF1Xor_3_fu_423_rk_offset : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF1Xor_3_fu_423_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF1Xor_3_fu_423_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF1Xor_3_fu_423_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF1Xor_3_fu_423_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF1Xor_3_fu_423_ap_return_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF1Xor_3_fu_423_ap_return_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF1Xor_3_fu_423_ap_return_6 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF1Xor_3_fu_423_ap_return_7 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaF0Xor_fu_404_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal grp_ClefiaF1Xor_3_fu_423_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal idx_fu_112 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln233_fu_706_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal dec12_i_in_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_cast2_cast_fu_442_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fin_0_4_0_fu_120 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln234_15_fu_813_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_1_4_0_fu_124 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln234_14_fu_806_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_2_4_0_fu_128 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln234_13_fu_799_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_3_4_0_fu_132 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln234_12_fu_792_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_4_5_0_fu_136 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln234_11_fu_786_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_5_5_0_fu_140 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln234_10_fu_780_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_6_5_0_fu_144 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln234_9_fu_774_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_7_5_0_fu_148 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln234_8_fu_768_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_8_4_0_fu_152 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln234_7_fu_762_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_9_4_0_fu_156 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln234_6_fu_756_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_10_4_0_fu_160 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln234_5_fu_750_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_11_4_0_fu_164 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln234_4_fu_744_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_12_5_0_fu_168 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln234_3_fu_737_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_13_5_0_fu_172 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln234_2_fu_730_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_14_5_0_fu_176 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln234_1_fu_723_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_15_5_0_fu_180 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln234_fu_716_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal trunc_ln224_fu_571_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln234_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clefia_ClefiaF0Xor IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read23 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read24 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read25 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read26 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read27 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read28 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read29 : IN STD_LOGIC_VECTOR (7 downto 0);
        rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce0 : OUT STD_LOGIC;
        rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce1 : OUT STD_LOGIC;
        rk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        rk_offset : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaF1Xor_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_8_read : IN STD_LOGIC_VECTOR (7 downto 0);
        src_9_read : IN STD_LOGIC_VECTOR (7 downto 0);
        src_10_read : IN STD_LOGIC_VECTOR (7 downto 0);
        src_11_read : IN STD_LOGIC_VECTOR (7 downto 0);
        src_12_read : IN STD_LOGIC_VECTOR (7 downto 0);
        src_13_read : IN STD_LOGIC_VECTOR (7 downto 0);
        src_14_read : IN STD_LOGIC_VECTOR (7 downto 0);
        src_15_read : IN STD_LOGIC_VECTOR (7 downto 0);
        rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce0 : OUT STD_LOGIC;
        rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce1 : OUT STD_LOGIC;
        rk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        rk_offset : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    grp_ClefiaF0Xor_fu_404 : component clefia_ClefiaF0Xor
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ClefiaF0Xor_fu_404_ap_start,
        ap_done => grp_ClefiaF0Xor_fu_404_ap_done,
        ap_idle => grp_ClefiaF0Xor_fu_404_ap_idle,
        ap_ready => grp_ClefiaF0Xor_fu_404_ap_ready,
        p_read8 => fin_0_4_0_fu_120,
        p_read23 => fin_1_4_0_fu_124,
        p_read24 => fin_2_4_0_fu_128,
        p_read25 => fin_3_4_0_fu_132,
        p_read26 => fin_4_5_0_fu_136,
        p_read27 => fin_5_5_0_fu_140,
        p_read28 => fin_6_5_0_fu_144,
        p_read29 => fin_7_5_0_fu_148,
        rk_address0 => grp_ClefiaF0Xor_fu_404_rk_address0,
        rk_ce0 => grp_ClefiaF0Xor_fu_404_rk_ce0,
        rk_q0 => rk_q0,
        rk_address1 => grp_ClefiaF0Xor_fu_404_rk_address1,
        rk_ce1 => grp_ClefiaF0Xor_fu_404_rk_ce1,
        rk_q1 => rk_q1,
        rk_offset => grp_ClefiaF0Xor_fu_404_rk_offset,
        ap_return_0 => grp_ClefiaF0Xor_fu_404_ap_return_0,
        ap_return_1 => grp_ClefiaF0Xor_fu_404_ap_return_1,
        ap_return_2 => grp_ClefiaF0Xor_fu_404_ap_return_2,
        ap_return_3 => grp_ClefiaF0Xor_fu_404_ap_return_3,
        ap_return_4 => grp_ClefiaF0Xor_fu_404_ap_return_4,
        ap_return_5 => grp_ClefiaF0Xor_fu_404_ap_return_5,
        ap_return_6 => grp_ClefiaF0Xor_fu_404_ap_return_6,
        ap_return_7 => grp_ClefiaF0Xor_fu_404_ap_return_7);

    grp_ClefiaF1Xor_3_fu_423 : component clefia_ClefiaF1Xor_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ClefiaF1Xor_3_fu_423_ap_start,
        ap_done => grp_ClefiaF1Xor_3_fu_423_ap_done,
        ap_idle => grp_ClefiaF1Xor_3_fu_423_ap_idle,
        ap_ready => grp_ClefiaF1Xor_3_fu_423_ap_ready,
        src_8_read => fin_8_4_0_fu_152,
        src_9_read => fin_9_4_0_fu_156,
        src_10_read => fin_10_4_0_fu_160,
        src_11_read => fin_11_4_0_fu_164,
        src_12_read => fin_12_5_0_fu_168,
        src_13_read => fin_13_5_0_fu_172,
        src_14_read => fin_14_5_0_fu_176,
        src_15_read => fin_15_5_0_fu_180,
        rk_address0 => grp_ClefiaF1Xor_3_fu_423_rk_address0,
        rk_ce0 => grp_ClefiaF1Xor_3_fu_423_rk_ce0,
        rk_q0 => rk_q0,
        rk_address1 => grp_ClefiaF1Xor_3_fu_423_rk_address1,
        rk_ce1 => grp_ClefiaF1Xor_3_fu_423_rk_ce1,
        rk_q1 => rk_q1,
        rk_offset => grp_ClefiaF1Xor_3_fu_423_rk_offset,
        ap_return_0 => grp_ClefiaF1Xor_3_fu_423_ap_return_0,
        ap_return_1 => grp_ClefiaF1Xor_3_fu_423_ap_return_1,
        ap_return_2 => grp_ClefiaF1Xor_3_fu_423_ap_return_2,
        ap_return_3 => grp_ClefiaF1Xor_3_fu_423_ap_return_3,
        ap_return_4 => grp_ClefiaF1Xor_3_fu_423_ap_return_4,
        ap_return_5 => grp_ClefiaF1Xor_3_fu_423_ap_return_5,
        ap_return_6 => grp_ClefiaF1Xor_3_fu_423_ap_return_6,
        ap_return_7 => grp_ClefiaF1Xor_3_fu_423_ap_return_7);

    flow_control_loop_pipe_sequential_init_U : component clefia_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage10,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    grp_ClefiaF0Xor_fu_404_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ClefiaF0Xor_fu_404_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    grp_ClefiaF0Xor_fu_404_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ClefiaF0Xor_fu_404_ap_ready = ap_const_logic_1)) then 
                    grp_ClefiaF0Xor_fu_404_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ClefiaF1Xor_3_fu_423_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ClefiaF1Xor_3_fu_423_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    grp_ClefiaF1Xor_3_fu_423_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ClefiaF1Xor_3_fu_423_ap_ready = ap_const_logic_1)) then 
                    grp_ClefiaF1Xor_3_fu_423_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    dec12_i_in_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    dec12_i_in_fu_116 <= r_cast2_cast_fu_442_p1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln230_reg_1201 = ap_const_lv1_1))) then 
                    dec12_i_in_fu_116 <= add_ln224_1_reg_1195;
                end if;
            end if; 
        end if;
    end process;

    fin_0_4_0_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    fin_0_4_0_fu_120 <= p_read;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln230_reg_1201 = ap_const_lv1_1))) then 
                    fin_0_4_0_fu_120 <= select_ln234_15_fu_813_p3;
                end if;
            end if; 
        end if;
    end process;

    fin_10_4_0_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    fin_10_4_0_fu_160 <= p_read10;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln230_reg_1201 = ap_const_lv1_1))) then 
                    fin_10_4_0_fu_160 <= select_ln234_5_fu_750_p3;
                end if;
            end if; 
        end if;
    end process;

    fin_11_4_0_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    fin_11_4_0_fu_164 <= p_read11;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln230_reg_1201 = ap_const_lv1_1))) then 
                    fin_11_4_0_fu_164 <= select_ln234_4_fu_744_p3;
                end if;
            end if; 
        end if;
    end process;

    fin_12_5_0_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    fin_12_5_0_fu_168 <= rin_41;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln230_reg_1201 = ap_const_lv1_1))) then 
                    fin_12_5_0_fu_168 <= select_ln234_3_fu_737_p3;
                end if;
            end if; 
        end if;
    end process;

    fin_13_5_0_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    fin_13_5_0_fu_172 <= rin_42;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln230_reg_1201 = ap_const_lv1_1))) then 
                    fin_13_5_0_fu_172 <= select_ln234_2_fu_730_p3;
                end if;
            end if; 
        end if;
    end process;

    fin_14_5_0_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    fin_14_5_0_fu_176 <= rin_43;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln230_reg_1201 = ap_const_lv1_1))) then 
                    fin_14_5_0_fu_176 <= select_ln234_1_fu_723_p3;
                end if;
            end if; 
        end if;
    end process;

    fin_15_5_0_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    fin_15_5_0_fu_180 <= rin_44;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln230_reg_1201 = ap_const_lv1_1))) then 
                    fin_15_5_0_fu_180 <= select_ln234_fu_716_p3;
                end if;
            end if; 
        end if;
    end process;

    fin_1_4_0_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    fin_1_4_0_fu_124 <= p_read1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln230_reg_1201 = ap_const_lv1_1))) then 
                    fin_1_4_0_fu_124 <= select_ln234_14_fu_806_p3;
                end if;
            end if; 
        end if;
    end process;

    fin_2_4_0_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    fin_2_4_0_fu_128 <= p_read2;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln230_reg_1201 = ap_const_lv1_1))) then 
                    fin_2_4_0_fu_128 <= select_ln234_13_fu_799_p3;
                end if;
            end if; 
        end if;
    end process;

    fin_3_4_0_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    fin_3_4_0_fu_132 <= p_read3;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln230_reg_1201 = ap_const_lv1_1))) then 
                    fin_3_4_0_fu_132 <= select_ln234_12_fu_792_p3;
                end if;
            end if; 
        end if;
    end process;

    fin_4_5_0_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    fin_4_5_0_fu_136 <= rin;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln230_reg_1201 = ap_const_lv1_1))) then 
                    fin_4_5_0_fu_136 <= select_ln234_11_fu_786_p3;
                end if;
            end if; 
        end if;
    end process;

    fin_5_5_0_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    fin_5_5_0_fu_140 <= rin_38;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln230_reg_1201 = ap_const_lv1_1))) then 
                    fin_5_5_0_fu_140 <= select_ln234_10_fu_780_p3;
                end if;
            end if; 
        end if;
    end process;

    fin_6_5_0_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    fin_6_5_0_fu_144 <= rin_39;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln230_reg_1201 = ap_const_lv1_1))) then 
                    fin_6_5_0_fu_144 <= select_ln234_9_fu_774_p3;
                end if;
            end if; 
        end if;
    end process;

    fin_7_5_0_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    fin_7_5_0_fu_148 <= rin_40;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln230_reg_1201 = ap_const_lv1_1))) then 
                    fin_7_5_0_fu_148 <= select_ln234_8_fu_768_p3;
                end if;
            end if; 
        end if;
    end process;

    fin_8_4_0_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    fin_8_4_0_fu_152 <= p_read8;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln230_reg_1201 = ap_const_lv1_1))) then 
                    fin_8_4_0_fu_152 <= select_ln234_7_fu_762_p3;
                end if;
            end if; 
        end if;
    end process;

    fin_9_4_0_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    fin_9_4_0_fu_156 <= p_read9;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln230_reg_1201 = ap_const_lv1_1))) then 
                    fin_9_4_0_fu_156 <= select_ln234_6_fu_756_p3;
                end if;
            end if; 
        end if;
    end process;

    idx_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    idx_fu_112 <= ap_const_lv36_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln230_reg_1201 = ap_const_lv1_1))) then 
                    idx_fu_112 <= add_ln233_fu_706_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                add_ln224_1_reg_1195 <= add_ln224_1_fu_654_p2;
                icmp_ln230_reg_1201 <= icmp_ln230_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln224_reg_1093 <= add_ln224_fu_575_p2;
                fin_0_4_0_load_reg_1045 <= fin_0_4_0_fu_120;
                fin_1_4_0_load_reg_1051 <= fin_1_4_0_fu_124;
                fin_2_4_0_load_reg_1057 <= fin_2_4_0_fu_128;
                fin_3_4_0_load_reg_1063 <= fin_3_4_0_fu_132;
                fin_4_5_0_load_reg_1069 <= fin_4_5_0_fu_136;
                fin_5_5_0_load_reg_1075 <= fin_5_5_0_fu_140;
                fin_6_5_0_load_reg_1081 <= fin_6_5_0_fu_144;
                fin_7_5_0_load_reg_1087 <= fin_7_5_0_fu_148;
                idx_load_reg_1040 <= idx_fu_112;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                fin_10_4_0_load_reg_1159 <= fin_10_4_0_fu_160;
                fin_11_4_0_load_reg_1165 <= fin_11_4_0_fu_164;
                fin_12_5_0_load_reg_1171 <= fin_12_5_0_fu_168;
                fin_13_5_0_load_reg_1177 <= fin_13_5_0_fu_172;
                fin_14_5_0_load_reg_1183 <= fin_14_5_0_fu_176;
                fin_15_5_0_load_reg_1189 <= fin_15_5_0_fu_180;
                fin_8_4_0_load_reg_1147 <= fin_8_4_0_fu_152;
                fin_9_4_0_load_reg_1153 <= fin_9_4_0_fu_156;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                fin_10_reg_1135 <= grp_ClefiaF0Xor_fu_404_ap_return_6;
                fin_11_reg_1141 <= grp_ClefiaF0Xor_fu_404_ap_return_7;
                fin_4_reg_1099 <= grp_ClefiaF0Xor_fu_404_ap_return_0;
                fin_5_reg_1105 <= grp_ClefiaF0Xor_fu_404_ap_return_1;
                fin_6_reg_1111 <= grp_ClefiaF0Xor_fu_404_ap_return_2;
                fin_7_reg_1117 <= grp_ClefiaF0Xor_fu_404_ap_return_3;
                fin_8_reg_1123 <= grp_ClefiaF0Xor_fu_404_ap_return_4;
                fin_9_reg_1129 <= grp_ClefiaF0Xor_fu_404_ap_return_5;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage10_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter1_stage0, ap_idle_pp0_0to0, ap_idle_pp0_1to1, ap_done_pending_pp0, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln224_1_fu_654_p2 <= std_logic_vector(unsigned(dec12_i_in_fu_116) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln224_fu_575_p2 <= std_logic_vector(unsigned(shl_ln) + unsigned(trunc_ln224_fu_571_p1));
    add_ln233_fu_706_p2 <= std_logic_vector(unsigned(idx_load_reg_1040) + unsigned(ap_const_lv36_FFFFFFFF8));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage10_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_subdone, icmp_ln230_fu_660_p2)
    begin
        if (((icmp_ln230_fu_660_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            ap_condition_exit_pp0_iter0_stage10 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln230_reg_1201, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln230_reg_1201 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (not(((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_loop_exit_ready = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage10;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    fin_0_out <= grp_ClefiaF1Xor_3_fu_423_ap_return_4;

    fin_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln230_reg_1201)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln230_reg_1201 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fin_0_out_ap_vld <= ap_const_logic_1;
        else 
            fin_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_10_out <= fin_10_reg_1135;

    fin_10_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln230_reg_1201)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln230_reg_1201 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fin_10_out_ap_vld <= ap_const_logic_1;
        else 
            fin_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_11_out <= fin_11_reg_1141;

    fin_11_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln230_reg_1201)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln230_reg_1201 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fin_11_out_ap_vld <= ap_const_logic_1;
        else 
            fin_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_12_out <= grp_ClefiaF1Xor_3_fu_423_ap_return_0;

    fin_12_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln230_reg_1201)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln230_reg_1201 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fin_12_out_ap_vld <= ap_const_logic_1;
        else 
            fin_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_13_out <= grp_ClefiaF1Xor_3_fu_423_ap_return_1;

    fin_13_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln230_reg_1201)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln230_reg_1201 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fin_13_out_ap_vld <= ap_const_logic_1;
        else 
            fin_13_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_14_out <= grp_ClefiaF1Xor_3_fu_423_ap_return_2;

    fin_14_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln230_reg_1201)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln230_reg_1201 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fin_14_out_ap_vld <= ap_const_logic_1;
        else 
            fin_14_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_15_out <= grp_ClefiaF1Xor_3_fu_423_ap_return_3;

    fin_15_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln230_reg_1201)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln230_reg_1201 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fin_15_out_ap_vld <= ap_const_logic_1;
        else 
            fin_15_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_1_out <= grp_ClefiaF1Xor_3_fu_423_ap_return_5;

    fin_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln230_reg_1201)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln230_reg_1201 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fin_1_out_ap_vld <= ap_const_logic_1;
        else 
            fin_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_2_out <= grp_ClefiaF1Xor_3_fu_423_ap_return_6;

    fin_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln230_reg_1201)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln230_reg_1201 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fin_2_out_ap_vld <= ap_const_logic_1;
        else 
            fin_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_3_out <= grp_ClefiaF1Xor_3_fu_423_ap_return_7;

    fin_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln230_reg_1201)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln230_reg_1201 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fin_3_out_ap_vld <= ap_const_logic_1;
        else 
            fin_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_4_out <= fin_4_reg_1099;

    fin_4_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln230_reg_1201)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln230_reg_1201 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fin_4_out_ap_vld <= ap_const_logic_1;
        else 
            fin_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_5_out <= fin_5_reg_1105;

    fin_5_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln230_reg_1201)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln230_reg_1201 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fin_5_out_ap_vld <= ap_const_logic_1;
        else 
            fin_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_6_out <= fin_6_reg_1111;

    fin_6_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln230_reg_1201)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln230_reg_1201 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fin_6_out_ap_vld <= ap_const_logic_1;
        else 
            fin_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_7_out <= fin_7_reg_1117;

    fin_7_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln230_reg_1201)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln230_reg_1201 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fin_7_out_ap_vld <= ap_const_logic_1;
        else 
            fin_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_8_out <= fin_8_reg_1123;

    fin_8_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln230_reg_1201)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln230_reg_1201 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fin_8_out_ap_vld <= ap_const_logic_1;
        else 
            fin_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_9_out <= fin_9_reg_1129;

    fin_9_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln230_reg_1201)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln230_reg_1201 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fin_9_out_ap_vld <= ap_const_logic_1;
        else 
            fin_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_ClefiaF0Xor_fu_404_ap_start <= grp_ClefiaF0Xor_fu_404_ap_start_reg;
    grp_ClefiaF0Xor_fu_404_rk_offset <= std_logic_vector(unsigned(shl_ln) + unsigned(trunc_ln224_fu_571_p1));
    grp_ClefiaF1Xor_3_fu_423_ap_start <= grp_ClefiaF1Xor_3_fu_423_ap_start_reg;
    grp_ClefiaF1Xor_3_fu_423_rk_offset <= (ap_const_lv8_4 or add_ln224_reg_1093);
    icmp_ln230_fu_660_p2 <= "1" when (signed(add_ln224_1_fu_654_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln234_fu_711_p2 <= "1" when (add_ln224_1_reg_1195 = ap_const_lv32_0) else "0";
    r_cast2_cast_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_cast2),32));

    rk_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage6, grp_ClefiaF0Xor_fu_404_rk_address0, grp_ClefiaF1Xor_3_fu_423_rk_address0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then 
            rk_address0 <= grp_ClefiaF1Xor_3_fu_423_rk_address0;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            rk_address0 <= grp_ClefiaF0Xor_fu_404_rk_address0;
        else 
            rk_address0 <= "XXXXXXXX";
        end if; 
    end process;


    rk_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage6, grp_ClefiaF0Xor_fu_404_rk_address1, grp_ClefiaF1Xor_3_fu_423_rk_address1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then 
            rk_address1 <= grp_ClefiaF1Xor_3_fu_423_rk_address1;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            rk_address1 <= grp_ClefiaF0Xor_fu_404_rk_address1;
        else 
            rk_address1 <= "XXXXXXXX";
        end if; 
    end process;


    rk_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage6, grp_ClefiaF0Xor_fu_404_rk_ce0, grp_ClefiaF1Xor_3_fu_423_rk_ce0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then 
            rk_ce0 <= grp_ClefiaF1Xor_3_fu_423_rk_ce0;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            rk_ce0 <= grp_ClefiaF0Xor_fu_404_rk_ce0;
        else 
            rk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rk_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage6, grp_ClefiaF0Xor_fu_404_rk_ce1, grp_ClefiaF1Xor_3_fu_423_rk_ce1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then 
            rk_ce1 <= grp_ClefiaF1Xor_3_fu_423_rk_ce1;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            rk_ce1 <= grp_ClefiaF0Xor_fu_404_rk_ce1;
        else 
            rk_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln234_10_fu_780_p3 <= 
        fin_5_5_0_load_reg_1075 when (icmp_ln234_fu_711_p2(0) = '1') else 
        fin_5_reg_1105;
    select_ln234_11_fu_786_p3 <= 
        fin_4_5_0_load_reg_1069 when (icmp_ln234_fu_711_p2(0) = '1') else 
        fin_4_reg_1099;
    select_ln234_12_fu_792_p3 <= 
        fin_3_4_0_load_reg_1063 when (icmp_ln234_fu_711_p2(0) = '1') else 
        grp_ClefiaF1Xor_3_fu_423_ap_return_7;
    select_ln234_13_fu_799_p3 <= 
        fin_2_4_0_load_reg_1057 when (icmp_ln234_fu_711_p2(0) = '1') else 
        grp_ClefiaF1Xor_3_fu_423_ap_return_6;
    select_ln234_14_fu_806_p3 <= 
        fin_1_4_0_load_reg_1051 when (icmp_ln234_fu_711_p2(0) = '1') else 
        grp_ClefiaF1Xor_3_fu_423_ap_return_5;
    select_ln234_15_fu_813_p3 <= 
        fin_0_4_0_load_reg_1045 when (icmp_ln234_fu_711_p2(0) = '1') else 
        grp_ClefiaF1Xor_3_fu_423_ap_return_4;
    select_ln234_1_fu_723_p3 <= 
        fin_14_5_0_load_reg_1183 when (icmp_ln234_fu_711_p2(0) = '1') else 
        grp_ClefiaF1Xor_3_fu_423_ap_return_2;
    select_ln234_2_fu_730_p3 <= 
        fin_13_5_0_load_reg_1177 when (icmp_ln234_fu_711_p2(0) = '1') else 
        grp_ClefiaF1Xor_3_fu_423_ap_return_1;
    select_ln234_3_fu_737_p3 <= 
        fin_12_5_0_load_reg_1171 when (icmp_ln234_fu_711_p2(0) = '1') else 
        grp_ClefiaF1Xor_3_fu_423_ap_return_0;
    select_ln234_4_fu_744_p3 <= 
        fin_11_4_0_load_reg_1165 when (icmp_ln234_fu_711_p2(0) = '1') else 
        fin_11_reg_1141;
    select_ln234_5_fu_750_p3 <= 
        fin_10_4_0_load_reg_1159 when (icmp_ln234_fu_711_p2(0) = '1') else 
        fin_10_reg_1135;
    select_ln234_6_fu_756_p3 <= 
        fin_9_4_0_load_reg_1153 when (icmp_ln234_fu_711_p2(0) = '1') else 
        fin_9_reg_1129;
    select_ln234_7_fu_762_p3 <= 
        fin_8_4_0_load_reg_1147 when (icmp_ln234_fu_711_p2(0) = '1') else 
        fin_8_reg_1123;
    select_ln234_8_fu_768_p3 <= 
        fin_7_5_0_load_reg_1087 when (icmp_ln234_fu_711_p2(0) = '1') else 
        fin_7_reg_1117;
    select_ln234_9_fu_774_p3 <= 
        fin_6_5_0_load_reg_1081 when (icmp_ln234_fu_711_p2(0) = '1') else 
        fin_6_reg_1111;
    select_ln234_fu_716_p3 <= 
        fin_15_5_0_load_reg_1189 when (icmp_ln234_fu_711_p2(0) = '1') else 
        grp_ClefiaF1Xor_3_fu_423_ap_return_3;
    trunc_ln224_fu_571_p1 <= idx_fu_112(8 - 1 downto 0);
end behav;
