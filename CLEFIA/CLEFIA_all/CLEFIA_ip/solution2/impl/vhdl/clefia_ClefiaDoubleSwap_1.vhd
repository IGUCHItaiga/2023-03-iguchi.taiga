-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clefia_ClefiaDoubleSwap_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    lk_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lk_ce0 : OUT STD_LOGIC;
    lk_we0 : OUT STD_LOGIC;
    lk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    lk_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lk_ce1 : OUT STD_LOGIC;
    lk_we1 : OUT STD_LOGIC;
    lk_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    lk_offset : IN STD_LOGIC_VECTOR (4 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of clefia_ClefiaDoubleSwap_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal lk_offset_read_reg_561 : STD_LOGIC_VECTOR (4 downto 0);
    signal lk_addr_reg_579 : STD_LOGIC_VECTOR (4 downto 0);
    signal lk_addr_63_reg_584 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln246_fu_245_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln246_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal lshr_ln_reg_594 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln247_fu_249_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln247_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal lk_addr_64_reg_604 : STD_LOGIC_VECTOR (4 downto 0);
    signal lk_addr_65_reg_609 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_reg_614 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln1_reg_619 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln248_fu_273_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln248_reg_624 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln2_reg_629 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln249_fu_277_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln249_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal lk_addr_66_reg_639 : STD_LOGIC_VECTOR (4 downto 0);
    signal lk_addr_67_reg_644 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln3_reg_649 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln250_fu_301_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln250_reg_654 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln4_reg_659 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln251_fu_305_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln251_reg_664 : STD_LOGIC_VECTOR (0 downto 0);
    signal lk_addr_68_reg_669 : STD_LOGIC_VECTOR (4 downto 0);
    signal lk_addr_69_reg_674 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln5_reg_679 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln252_fu_329_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln252_reg_684 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln6_reg_689 : STD_LOGIC_VECTOR (6 downto 0);
    signal lk_addr_70_reg_694 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln253_1_fu_343_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln253_1_reg_700 : STD_LOGIC_VECTOR (0 downto 0);
    signal lk_addr_71_reg_705 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln253_fu_357_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln253_reg_711 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_reg_716 : STD_LOGIC_VECTOR (0 downto 0);
    signal lk_addr_72_reg_721 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln256_fu_371_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln256_reg_727 : STD_LOGIC_VECTOR (6 downto 0);
    signal lk_addr_73_reg_732 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_166_reg_738 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_160_reg_743 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_161_reg_748 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln257_fu_385_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln257_reg_753 : STD_LOGIC_VECTOR (6 downto 0);
    signal lk_addr_74_reg_758 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln258_fu_399_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln258_reg_764 : STD_LOGIC_VECTOR (6 downto 0);
    signal lk_addr_75_reg_769 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_162_reg_775 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_163_reg_780 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln259_fu_413_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln259_reg_785 : STD_LOGIC_VECTOR (6 downto 0);
    signal lk_addr_76_reg_790 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln260_fu_427_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln260_reg_796 : STD_LOGIC_VECTOR (6 downto 0);
    signal lk_addr_77_reg_801 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_164_reg_807 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_165_reg_812 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln261_fu_455_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln261_reg_817 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln262_fu_459_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln262_reg_822 : STD_LOGIC_VECTOR (6 downto 0);
    signal lk_offset_cast_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln246_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln247_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln248_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln249_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln252_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln253_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln256_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln257_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln258_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln259_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln260_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln261_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_fu_441_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_31_fu_448_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal t_32_fu_463_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_33_fu_470_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal t_34_fu_477_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_35_fu_484_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal t_36_fu_491_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_37_fu_498_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal t_38_fu_505_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_39_fu_512_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal t_40_fu_519_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_41_fu_526_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal t_42_fu_533_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_43_fu_540_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal t_44_fu_547_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_45_fu_554_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln246_fu_234_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln247_fu_253_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln248_fu_263_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln249_fu_281_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln250_fu_291_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln251_fu_309_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln252_fu_319_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln253_fu_333_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln255_fu_347_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln256_fu_361_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln257_fu_375_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln258_fu_389_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln259_fu_403_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln260_fu_417_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln261_fu_431_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                lk_addr_63_reg_584 <= zext_ln246_fu_240_p1(5 - 1 downto 0);
                lk_addr_reg_579 <= lk_offset_cast_fu_229_p1(5 - 1 downto 0);
                lk_offset_read_reg_561 <= lk_offset;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                lk_addr_64_reg_604 <= zext_ln247_fu_258_p1(5 - 1 downto 0);
                lk_addr_65_reg_609 <= zext_ln248_fu_268_p1(5 - 1 downto 0);
                lshr_ln_reg_594 <= lk_q0(7 downto 1);
                tmp_s_reg_614 <= lk_q1(7 downto 1);
                trunc_ln246_reg_589 <= trunc_ln246_fu_245_p1;
                trunc_ln247_reg_599 <= trunc_ln247_fu_249_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                lk_addr_66_reg_639 <= zext_ln249_fu_286_p1(5 - 1 downto 0);
                lk_addr_67_reg_644 <= zext_ln250_fu_296_p1(5 - 1 downto 0);
                lshr_ln1_reg_619 <= lk_q1(7 downto 1);
                lshr_ln2_reg_629 <= lk_q0(7 downto 1);
                trunc_ln248_reg_624 <= trunc_ln248_fu_273_p1;
                trunc_ln249_reg_634 <= trunc_ln249_fu_277_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                lk_addr_68_reg_669 <= zext_ln251_fu_314_p1(5 - 1 downto 0);
                lk_addr_69_reg_674 <= zext_ln252_fu_324_p1(5 - 1 downto 0);
                lshr_ln3_reg_649 <= lk_q1(7 downto 1);
                lshr_ln4_reg_659 <= lk_q0(7 downto 1);
                trunc_ln250_reg_654 <= trunc_ln250_fu_301_p1;
                trunc_ln251_reg_664 <= trunc_ln251_fu_305_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                lk_addr_70_reg_694 <= zext_ln253_fu_338_p1(5 - 1 downto 0);
                lk_addr_71_reg_705 <= zext_ln255_fu_352_p1(5 - 1 downto 0);
                lshr_ln5_reg_679 <= lk_q1(7 downto 1);
                lshr_ln6_reg_689 <= lk_q0(7 downto 1);
                trunc_ln252_reg_684 <= trunc_ln252_fu_329_p1;
                trunc_ln253_1_reg_700 <= trunc_ln253_1_fu_343_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                lk_addr_72_reg_721 <= zext_ln256_fu_366_p1(5 - 1 downto 0);
                lk_addr_73_reg_732 <= zext_ln257_fu_380_p1(5 - 1 downto 0);
                tmp_166_reg_738 <= lk_q1(7 downto 7);
                tmp_reg_716 <= lk_q0(7 downto 7);
                trunc_ln253_reg_711 <= trunc_ln253_fu_357_p1;
                trunc_ln256_reg_727 <= trunc_ln256_fu_371_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                lk_addr_74_reg_758 <= zext_ln258_fu_394_p1(5 - 1 downto 0);
                lk_addr_75_reg_769 <= zext_ln259_fu_408_p1(5 - 1 downto 0);
                tmp_160_reg_743 <= lk_q1(7 downto 7);
                tmp_161_reg_748 <= lk_q0(7 downto 7);
                trunc_ln257_reg_753 <= trunc_ln257_fu_385_p1;
                trunc_ln258_reg_764 <= trunc_ln258_fu_399_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                lk_addr_76_reg_790 <= zext_ln260_fu_422_p1(5 - 1 downto 0);
                lk_addr_77_reg_801 <= zext_ln261_fu_436_p1(5 - 1 downto 0);
                tmp_162_reg_775 <= lk_q1(7 downto 7);
                tmp_163_reg_780 <= lk_q0(7 downto 7);
                trunc_ln259_reg_785 <= trunc_ln259_fu_413_p1;
                trunc_ln260_reg_796 <= trunc_ln260_fu_427_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_164_reg_807 <= lk_q1(7 downto 7);
                tmp_165_reg_812 <= lk_q0(7 downto 7);
                trunc_ln261_reg_817 <= trunc_ln261_fu_455_p1;
                trunc_ln262_reg_822 <= trunc_ln262_fu_459_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln246_fu_234_p2 <= std_logic_vector(unsigned(lk_offset) + unsigned(ap_const_lv5_1));
    add_ln247_fu_253_p2 <= std_logic_vector(unsigned(lk_offset_read_reg_561) + unsigned(ap_const_lv5_2));
    add_ln248_fu_263_p2 <= std_logic_vector(unsigned(lk_offset_read_reg_561) + unsigned(ap_const_lv5_3));
    add_ln249_fu_281_p2 <= std_logic_vector(unsigned(lk_offset_read_reg_561) + unsigned(ap_const_lv5_4));
    add_ln250_fu_291_p2 <= std_logic_vector(unsigned(lk_offset_read_reg_561) + unsigned(ap_const_lv5_5));
    add_ln251_fu_309_p2 <= std_logic_vector(unsigned(lk_offset_read_reg_561) + unsigned(ap_const_lv5_6));
    add_ln252_fu_319_p2 <= std_logic_vector(unsigned(lk_offset_read_reg_561) + unsigned(ap_const_lv5_7));
    add_ln253_fu_333_p2 <= std_logic_vector(unsigned(lk_offset_read_reg_561) + unsigned(ap_const_lv5_F));
    add_ln255_fu_347_p2 <= std_logic_vector(unsigned(lk_offset_read_reg_561) + unsigned(ap_const_lv5_8));
    add_ln256_fu_361_p2 <= std_logic_vector(unsigned(lk_offset_read_reg_561) + unsigned(ap_const_lv5_9));
    add_ln257_fu_375_p2 <= std_logic_vector(unsigned(lk_offset_read_reg_561) + unsigned(ap_const_lv5_A));
    add_ln258_fu_389_p2 <= std_logic_vector(unsigned(lk_offset_read_reg_561) + unsigned(ap_const_lv5_B));
    add_ln259_fu_403_p2 <= std_logic_vector(unsigned(lk_offset_read_reg_561) + unsigned(ap_const_lv5_C));
    add_ln260_fu_417_p2 <= std_logic_vector(unsigned(lk_offset_read_reg_561) + unsigned(ap_const_lv5_D));
    add_ln261_fu_431_p2 <= std_logic_vector(unsigned(lk_offset_read_reg_561) + unsigned(ap_const_lv5_E));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state12_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state13_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_ce)
    begin
        if (((ap_const_logic_0 = ap_ce) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    lk_address0_assign_proc : process(ap_CS_fsm_state1, lk_addr_63_reg_584, ap_CS_fsm_state2, lk_addr_65_reg_609, ap_CS_fsm_state3, lk_addr_67_reg_644, ap_CS_fsm_state4, lk_addr_69_reg_674, ap_CS_fsm_state5, lk_addr_70_reg_694, ap_CS_fsm_state6, lk_addr_72_reg_721, ap_CS_fsm_state7, lk_addr_74_reg_758, ap_CS_fsm_state8, lk_addr_76_reg_790, ap_CS_fsm_state9, zext_ln246_fu_240_p1, zext_ln248_fu_268_p1, zext_ln250_fu_296_p1, zext_ln252_fu_324_p1, zext_ln255_fu_352_p1, zext_ln257_fu_380_p1, zext_ln259_fu_408_p1, zext_ln261_fu_436_p1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            lk_address0 <= lk_addr_70_reg_694;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            lk_address0 <= lk_addr_76_reg_790;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            lk_address0 <= lk_addr_74_reg_758;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            lk_address0 <= lk_addr_72_reg_721;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            lk_address0 <= lk_addr_69_reg_674;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            lk_address0 <= lk_addr_67_reg_644;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            lk_address0 <= lk_addr_65_reg_609;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            lk_address0 <= lk_addr_63_reg_584;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            lk_address0 <= zext_ln261_fu_436_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            lk_address0 <= zext_ln259_fu_408_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            lk_address0 <= zext_ln257_fu_380_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            lk_address0 <= zext_ln255_fu_352_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            lk_address0 <= zext_ln252_fu_324_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            lk_address0 <= zext_ln250_fu_296_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            lk_address0 <= zext_ln248_fu_268_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            lk_address0 <= zext_ln246_fu_240_p1(5 - 1 downto 0);
        else 
            lk_address0 <= "XXXXX";
        end if; 
    end process;


    lk_address1_assign_proc : process(ap_CS_fsm_state1, lk_addr_reg_579, ap_CS_fsm_state2, lk_addr_64_reg_604, ap_CS_fsm_state3, lk_addr_66_reg_639, ap_CS_fsm_state4, lk_addr_68_reg_669, ap_CS_fsm_state5, lk_addr_71_reg_705, ap_CS_fsm_state6, lk_addr_73_reg_732, ap_CS_fsm_state7, lk_addr_75_reg_769, ap_CS_fsm_state8, lk_addr_77_reg_801, ap_CS_fsm_state9, lk_offset_cast_fu_229_p1, zext_ln247_fu_258_p1, zext_ln249_fu_286_p1, zext_ln251_fu_314_p1, zext_ln253_fu_338_p1, zext_ln256_fu_366_p1, zext_ln258_fu_394_p1, zext_ln260_fu_422_p1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            lk_address1 <= lk_addr_77_reg_801;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            lk_address1 <= lk_addr_75_reg_769;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            lk_address1 <= lk_addr_73_reg_732;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            lk_address1 <= lk_addr_71_reg_705;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            lk_address1 <= lk_addr_68_reg_669;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            lk_address1 <= lk_addr_66_reg_639;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            lk_address1 <= lk_addr_64_reg_604;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            lk_address1 <= lk_addr_reg_579;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            lk_address1 <= zext_ln260_fu_422_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            lk_address1 <= zext_ln258_fu_394_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            lk_address1 <= zext_ln256_fu_366_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            lk_address1 <= zext_ln253_fu_338_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            lk_address1 <= zext_ln251_fu_314_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            lk_address1 <= zext_ln249_fu_286_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            lk_address1 <= zext_ln247_fu_258_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            lk_address1 <= lk_offset_cast_fu_229_p1(5 - 1 downto 0);
        else 
            lk_address1 <= "XXXXX";
        end if; 
    end process;


    lk_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            lk_ce0 <= ap_const_logic_1;
        else 
            lk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lk_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            lk_ce1 <= ap_const_logic_1;
        else 
            lk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lk_d0_assign_proc : process(ap_CS_fsm_state9, t_31_fu_448_p3, ap_CS_fsm_state10, t_33_fu_470_p3, ap_CS_fsm_state11, t_35_fu_484_p3, ap_CS_fsm_state12, t_37_fu_498_p3, ap_CS_fsm_state13, t_39_fu_512_p3, ap_CS_fsm_state14, t_41_fu_526_p3, ap_CS_fsm_state15, t_43_fu_540_p3, ap_CS_fsm_state16, t_45_fu_554_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            lk_d0 <= t_45_fu_554_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            lk_d0 <= t_43_fu_540_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            lk_d0 <= t_41_fu_526_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            lk_d0 <= t_39_fu_512_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            lk_d0 <= t_37_fu_498_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            lk_d0 <= t_35_fu_484_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            lk_d0 <= t_33_fu_470_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            lk_d0 <= t_31_fu_448_p3;
        else 
            lk_d0 <= "XXXXXXXX";
        end if; 
    end process;


    lk_d1_assign_proc : process(ap_CS_fsm_state9, t_fu_441_p3, ap_CS_fsm_state10, t_32_fu_463_p3, ap_CS_fsm_state11, t_34_fu_477_p3, ap_CS_fsm_state12, t_36_fu_491_p3, ap_CS_fsm_state13, t_38_fu_505_p3, ap_CS_fsm_state14, t_40_fu_519_p3, ap_CS_fsm_state15, t_42_fu_533_p3, ap_CS_fsm_state16, t_44_fu_547_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            lk_d1 <= t_44_fu_547_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            lk_d1 <= t_42_fu_533_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            lk_d1 <= t_40_fu_519_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            lk_d1 <= t_38_fu_505_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            lk_d1 <= t_36_fu_491_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            lk_d1 <= t_34_fu_477_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            lk_d1 <= t_32_fu_463_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            lk_d1 <= t_fu_441_p3;
        else 
            lk_d1 <= "XXXXXXXX";
        end if; 
    end process;

    lk_offset_cast_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lk_offset),64));

    lk_we0_assign_proc : process(ap_ce, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            lk_we0 <= ap_const_logic_1;
        else 
            lk_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lk_we1_assign_proc : process(ap_ce, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            lk_we1 <= ap_const_logic_1;
        else 
            lk_we1 <= ap_const_logic_0;
        end if; 
    end process;

    t_31_fu_448_p3 <= (trunc_ln247_reg_599 & lshr_ln1_reg_619);
    t_32_fu_463_p3 <= (trunc_ln248_reg_624 & lshr_ln2_reg_629);
    t_33_fu_470_p3 <= (trunc_ln249_reg_634 & lshr_ln3_reg_649);
    t_34_fu_477_p3 <= (trunc_ln250_reg_654 & lshr_ln4_reg_659);
    t_35_fu_484_p3 <= (trunc_ln251_reg_664 & lshr_ln5_reg_679);
    t_36_fu_491_p3 <= (trunc_ln252_reg_684 & lshr_ln6_reg_689);
    t_37_fu_498_p3 <= (trunc_ln253_1_reg_700 & trunc_ln253_reg_711);
    t_38_fu_505_p3 <= (tmp_s_reg_614 & tmp_reg_716);
    t_39_fu_512_p3 <= (trunc_ln256_reg_727 & tmp_160_reg_743);
    t_40_fu_519_p3 <= (trunc_ln257_reg_753 & tmp_161_reg_748);
    t_41_fu_526_p3 <= (trunc_ln258_reg_764 & tmp_162_reg_775);
    t_42_fu_533_p3 <= (trunc_ln259_reg_785 & tmp_163_reg_780);
    t_43_fu_540_p3 <= (trunc_ln260_reg_796 & tmp_164_reg_807);
    t_44_fu_547_p3 <= (trunc_ln261_reg_817 & tmp_165_reg_812);
    t_45_fu_554_p3 <= (trunc_ln262_reg_822 & tmp_166_reg_738);
    t_fu_441_p3 <= (trunc_ln246_reg_589 & lshr_ln_reg_594);
    trunc_ln246_fu_245_p1 <= lk_q1(1 - 1 downto 0);
    trunc_ln247_fu_249_p1 <= lk_q0(1 - 1 downto 0);
    trunc_ln248_fu_273_p1 <= lk_q1(1 - 1 downto 0);
    trunc_ln249_fu_277_p1 <= lk_q0(1 - 1 downto 0);
    trunc_ln250_fu_301_p1 <= lk_q1(1 - 1 downto 0);
    trunc_ln251_fu_305_p1 <= lk_q0(1 - 1 downto 0);
    trunc_ln252_fu_329_p1 <= lk_q1(1 - 1 downto 0);
    trunc_ln253_1_fu_343_p1 <= lk_q0(1 - 1 downto 0);
    trunc_ln253_fu_357_p1 <= lk_q1(7 - 1 downto 0);
    trunc_ln256_fu_371_p1 <= lk_q0(7 - 1 downto 0);
    trunc_ln257_fu_385_p1 <= lk_q1(7 - 1 downto 0);
    trunc_ln258_fu_399_p1 <= lk_q0(7 - 1 downto 0);
    trunc_ln259_fu_413_p1 <= lk_q1(7 - 1 downto 0);
    trunc_ln260_fu_427_p1 <= lk_q0(7 - 1 downto 0);
    trunc_ln261_fu_455_p1 <= lk_q1(7 - 1 downto 0);
    trunc_ln262_fu_459_p1 <= lk_q0(7 - 1 downto 0);
    zext_ln246_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln246_fu_234_p2),64));
    zext_ln247_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln247_fu_253_p2),64));
    zext_ln248_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln248_fu_263_p2),64));
    zext_ln249_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln249_fu_281_p2),64));
    zext_ln250_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln250_fu_291_p2),64));
    zext_ln251_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln251_fu_309_p2),64));
    zext_ln252_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln252_fu_319_p2),64));
    zext_ln253_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln253_fu_333_p2),64));
    zext_ln255_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln255_fu_347_p2),64));
    zext_ln256_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln256_fu_361_p2),64));
    zext_ln257_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln257_fu_375_p2),64));
    zext_ln258_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln258_fu_389_p2),64));
    zext_ln259_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln259_fu_403_p2),64));
    zext_ln260_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln260_fu_417_p2),64));
    zext_ln261_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln261_fu_431_p2),64));
end behav;
