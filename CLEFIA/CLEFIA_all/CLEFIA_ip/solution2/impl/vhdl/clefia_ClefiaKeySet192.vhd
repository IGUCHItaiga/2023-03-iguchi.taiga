-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clefia_ClefiaKeySet192 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce0 : OUT STD_LOGIC;
    rk_we0 : OUT STD_LOGIC;
    rk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce1 : OUT STD_LOGIC;
    rk_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of clefia_ClefiaKeySet192 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (71 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (71 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (71 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (71 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (71 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (71 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (71 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (71 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (71 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (71 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (71 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (71 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_EE : STD_LOGIC_VECTOR (7 downto 0) := "11101110";
    constant ap_const_lv8_DD : STD_LOGIC_VECTOR (7 downto 0) := "11011101";
    constant ap_const_lv8_CC : STD_LOGIC_VECTOR (7 downto 0) := "11001100";
    constant ap_const_lv8_BB : STD_LOGIC_VECTOR (7 downto 0) := "10111011";
    constant ap_const_lv8_AA : STD_LOGIC_VECTOR (7 downto 0) := "10101010";
    constant ap_const_lv8_99 : STD_LOGIC_VECTOR (7 downto 0) := "10011001";
    constant ap_const_lv8_88 : STD_LOGIC_VECTOR (7 downto 0) := "10001000";
    constant ap_const_lv8_77 : STD_LOGIC_VECTOR (7 downto 0) := "01110111";
    constant ap_const_lv8_66 : STD_LOGIC_VECTOR (7 downto 0) := "01100110";
    constant ap_const_lv8_55 : STD_LOGIC_VECTOR (7 downto 0) := "01010101";
    constant ap_const_lv8_44 : STD_LOGIC_VECTOR (7 downto 0) := "01000100";
    constant ap_const_lv8_33 : STD_LOGIC_VECTOR (7 downto 0) := "00110011";
    constant ap_const_lv8_22 : STD_LOGIC_VECTOR (7 downto 0) := "00100010";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv8_E0 : STD_LOGIC_VECTOR (7 downto 0) := "11100000";
    constant ap_const_lv8_D0 : STD_LOGIC_VECTOR (7 downto 0) := "11010000";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_B0 : STD_LOGIC_VECTOR (7 downto 0) := "10110000";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv9_A0 : STD_LOGIC_VECTOR (8 downto 0) := "010100000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal skey256_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal skey256_ce0 : STD_LOGIC;
    signal skey256_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal skey256_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal skey256_ce1 : STD_LOGIC;
    signal skey256_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal add_ln340_fu_1123_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln340_reg_1361 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal or_ln326_fu_1129_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln326_reg_1366 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln340_fu_1117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln341_fu_1137_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln341_reg_1374 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_1141_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1378 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln348_fu_1161_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln348_reg_1382 : STD_LOGIC_VECTOR (8 downto 0);
    signal fin_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal fin_ce0 : STD_LOGIC;
    signal fin_we0 : STD_LOGIC;
    signal fin_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal fin_ce1 : STD_LOGIC;
    signal fin_we1 : STD_LOGIC;
    signal fin_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal fout_ce0 : STD_LOGIC;
    signal fout_we0 : STD_LOGIC;
    signal fout_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal fout_ce1 : STD_LOGIC;
    signal fout_we1 : STD_LOGIC;
    signal fout_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lk_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal lk_ce0 : STD_LOGIC;
    signal lk_we0 : STD_LOGIC;
    signal lk_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lk_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lk_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lk_ce1 : STD_LOGIC;
    signal lk_we1 : STD_LOGIC;
    signal lk_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lk_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_ap_start : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_ap_done : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_ap_idle : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_ap_ready : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_ce0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_we0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_ce1 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_we1 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_ce0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_we0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_ce1 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_we1 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_ap_start : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_ap_done : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_ap_idle : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_ap_ready : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_rk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_rk_ce0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_rk_we0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_rk_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_skey256_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_skey256_ce0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_skey256_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_skey256_ce1 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_start : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_done : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_idle : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_ready : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_lk_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_lk_ce0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_rk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_rk_ce0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_rk_we0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_rk_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_start : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_done : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_idle : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_ready : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_lk_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_lk_ce0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_rk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_rk_ce0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_rk_we0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_rk_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_start : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_done : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_idle : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_ready : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_rk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_rk_ce0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_rk_we0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_rk_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_skey256_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_skey256_ce0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_skey256_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_skey256_ce1 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_ap_start : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_ap_done : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_ap_idle : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_ap_ready : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_ce0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_we0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_ce1 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_skey256_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_skey256_ce0 : STD_LOGIC;
    signal grp_ClefiaDoubleSwap_1_fu_1084_ap_start : STD_LOGIC;
    signal grp_ClefiaDoubleSwap_1_fu_1084_ap_done : STD_LOGIC;
    signal grp_ClefiaDoubleSwap_1_fu_1084_ap_idle : STD_LOGIC;
    signal grp_ClefiaDoubleSwap_1_fu_1084_ap_ready : STD_LOGIC;
    signal grp_ClefiaDoubleSwap_1_fu_1084_lk_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_ClefiaDoubleSwap_1_fu_1084_lk_ce0 : STD_LOGIC;
    signal grp_ClefiaDoubleSwap_1_fu_1084_lk_we0 : STD_LOGIC;
    signal grp_ClefiaDoubleSwap_1_fu_1084_lk_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDoubleSwap_1_fu_1084_lk_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_ClefiaDoubleSwap_1_fu_1084_lk_ce1 : STD_LOGIC;
    signal grp_ClefiaDoubleSwap_1_fu_1084_lk_we1 : STD_LOGIC;
    signal grp_ClefiaDoubleSwap_1_fu_1084_lk_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDoubleSwap_1_fu_1084_lk_offset : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_ClefiaDoubleSwap_1_fu_1084_ap_ce : STD_LOGIC;
    signal ap_block_state39_on_subcall_done : BOOLEAN;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_ap_done : STD_LOGIC;
    signal ap_block_state57_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_ap_start : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_ap_idle : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_ap_ready : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_ce0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_we0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_ce1 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_skey256_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_skey256_ce0 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_ap_start_reg : STD_LOGIC := '0';
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_ClefiaDoubleSwap_1_fu_1084_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (71 downto 0);
    signal ap_NS_fsm_state39 : STD_LOGIC;
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_NS_fsm_state57 : STD_LOGIC;
    signal grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal idx26_fu_174 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln354_fu_1169_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_178 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_1149_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln348_fu_1157_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_block_state18_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clefia_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fin_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        fin_ce0 : OUT STD_LOGIC;
        fin_we0 : OUT STD_LOGIC;
        fin_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        fin_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        fin_ce1 : OUT STD_LOGIC;
        fin_we1 : OUT STD_LOGIC;
        fin_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        fout_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        fout_ce0 : OUT STD_LOGIC;
        fout_we0 : OUT STD_LOGIC;
        fout_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        fout_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        fout_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        fout_ce1 : OUT STD_LOGIC;
        fout_we1 : OUT STD_LOGIC;
        fout_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        fout_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaKeySet192_Pipeline_ByteXor_label2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce0 : OUT STD_LOGIC;
        rk_we0 : OUT STD_LOGIC;
        rk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        skey256_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        skey256_ce0 : OUT STD_LOGIC;
        skey256_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        skey256_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        skey256_ce1 : OUT STD_LOGIC;
        skey256_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaKeySet192_Pipeline_ByteXor_label28 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        add_ln348 : IN STD_LOGIC_VECTOR (8 downto 0);
        lk_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        lk_ce0 : OUT STD_LOGIC;
        lk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        or_ln326 : IN STD_LOGIC_VECTOR (7 downto 0);
        rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce0 : OUT STD_LOGIC;
        rk_we0 : OUT STD_LOGIC;
        rk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaKeySet192_Pipeline_ByteXor_label26 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        add_ln348 : IN STD_LOGIC_VECTOR (8 downto 0);
        lk_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        lk_ce0 : OUT STD_LOGIC;
        lk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        or_ln326 : IN STD_LOGIC_VECTOR (7 downto 0);
        rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce0 : OUT STD_LOGIC;
        rk_we0 : OUT STD_LOGIC;
        rk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaKeySet192_Pipeline_ByteXor_label210 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce0 : OUT STD_LOGIC;
        rk_we0 : OUT STD_LOGIC;
        rk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        skey256_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        skey256_ce0 : OUT STD_LOGIC;
        skey256_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        skey256_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        skey256_ce1 : OUT STD_LOGIC;
        skey256_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaKeySet192_Pipeline_ByteXor_label29 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        or_ln326 : IN STD_LOGIC_VECTOR (7 downto 0);
        rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce0 : OUT STD_LOGIC;
        rk_we0 : OUT STD_LOGIC;
        rk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce1 : OUT STD_LOGIC;
        rk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        skey256_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        skey256_ce0 : OUT STD_LOGIC;
        skey256_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaDoubleSwap_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        lk_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        lk_ce0 : OUT STD_LOGIC;
        lk_we0 : OUT STD_LOGIC;
        lk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        lk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        lk_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        lk_ce1 : OUT STD_LOGIC;
        lk_we1 : OUT STD_LOGIC;
        lk_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        lk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        lk_offset : IN STD_LOGIC_VECTOR (4 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component clefia_ClefiaKeySet192_Pipeline_ByteXor_label27 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        or_ln326 : IN STD_LOGIC_VECTOR (7 downto 0);
        rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce0 : OUT STD_LOGIC;
        rk_we0 : OUT STD_LOGIC;
        rk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce1 : OUT STD_LOGIC;
        rk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        skey256_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        skey256_ce0 : OUT STD_LOGIC;
        skey256_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaKeySet192_skey256_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaKeySet256_fin_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    skey256_U : component clefia_ClefiaKeySet192_skey256_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => skey256_address0,
        ce0 => skey256_ce0,
        q0 => skey256_q0,
        address1 => skey256_address1,
        ce1 => skey256_ce1,
        q1 => skey256_q1);

    fin_U : component clefia_ClefiaKeySet256_fin_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fin_address0,
        ce0 => fin_ce0,
        we0 => fin_we0,
        d0 => fin_d0,
        q0 => fin_q0,
        address1 => fin_address1,
        ce1 => fin_ce1,
        we1 => fin_we1,
        d1 => fin_d1,
        q1 => fin_q1);

    fout_U : component clefia_ClefiaKeySet256_fin_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fout_address0,
        ce0 => fout_ce0,
        we0 => fout_we0,
        d0 => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_d0,
        q0 => fout_q0,
        address1 => fout_address1,
        ce1 => fout_ce1,
        we1 => fout_we1,
        d1 => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_d1,
        q1 => fout_q1);

    lk_U : component clefia_ClefiaKeySet256_fin_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lk_address0,
        ce0 => lk_ce0,
        we0 => lk_we0,
        d0 => lk_d0,
        q0 => lk_q0,
        address1 => lk_address1,
        ce1 => lk_ce1,
        we1 => lk_we1,
        d1 => lk_d1,
        q1 => lk_q1);

    grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025 : component clefia_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_ap_start,
        ap_done => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_ap_done,
        ap_idle => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_ap_idle,
        ap_ready => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_ap_ready,
        fin_address0 => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_address0,
        fin_ce0 => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_ce0,
        fin_we0 => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_we0,
        fin_d0 => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_d0,
        fin_q0 => fin_q0,
        fin_address1 => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_address1,
        fin_ce1 => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_ce1,
        fin_we1 => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_we1,
        fin_d1 => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_d1,
        fin_q1 => fin_q1,
        fout_address0 => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_address0,
        fout_ce0 => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_ce0,
        fout_we0 => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_we0,
        fout_d0 => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_d0,
        fout_q0 => fout_q0,
        fout_address1 => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_address1,
        fout_ce1 => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_ce1,
        fout_we1 => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_we1,
        fout_d1 => grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_d1,
        fout_q1 => fout_q1);

    grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037 : component clefia_ClefiaKeySet192_Pipeline_ByteXor_label2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_ap_start,
        ap_done => grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_ap_done,
        ap_idle => grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_ap_idle,
        ap_ready => grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_ap_ready,
        rk_address0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_rk_address0,
        rk_ce0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_rk_ce0,
        rk_we0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_rk_we0,
        rk_d0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_rk_d0,
        skey256_address0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_skey256_address0,
        skey256_ce0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_skey256_ce0,
        skey256_q0 => skey256_q0,
        skey256_address1 => grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_skey256_address1,
        skey256_ce1 => grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_skey256_ce1,
        skey256_q1 => skey256_q1);

    grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045 : component clefia_ClefiaKeySet192_Pipeline_ByteXor_label28
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_start,
        ap_done => grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_done,
        ap_idle => grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_idle,
        ap_ready => grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_ready,
        add_ln348 => add_ln348_reg_1382,
        lk_address0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_lk_address0,
        lk_ce0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_lk_ce0,
        lk_q0 => lk_q0,
        or_ln326 => or_ln326_reg_1366,
        rk_address0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_rk_address0,
        rk_ce0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_rk_ce0,
        rk_we0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_rk_we0,
        rk_d0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_rk_d0);

    grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056 : component clefia_ClefiaKeySet192_Pipeline_ByteXor_label26
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_start,
        ap_done => grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_done,
        ap_idle => grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_idle,
        ap_ready => grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_ready,
        add_ln348 => add_ln348_reg_1382,
        lk_address0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_lk_address0,
        lk_ce0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_lk_ce0,
        lk_q0 => lk_q0,
        or_ln326 => or_ln326_reg_1366,
        rk_address0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_rk_address0,
        rk_ce0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_rk_ce0,
        rk_we0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_rk_we0,
        rk_d0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_rk_d0);

    grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067 : component clefia_ClefiaKeySet192_Pipeline_ByteXor_label210
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_start,
        ap_done => grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_done,
        ap_idle => grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_idle,
        ap_ready => grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_ready,
        rk_address0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_rk_address0,
        rk_ce0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_rk_ce0,
        rk_we0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_rk_we0,
        rk_d0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_rk_d0,
        skey256_address0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_skey256_address0,
        skey256_ce0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_skey256_ce0,
        skey256_q0 => skey256_q0,
        skey256_address1 => grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_skey256_address1,
        skey256_ce1 => grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_skey256_ce1,
        skey256_q1 => skey256_q1);

    grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075 : component clefia_ClefiaKeySet192_Pipeline_ByteXor_label29
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_ap_start,
        ap_done => grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_ap_done,
        ap_idle => grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_ap_idle,
        ap_ready => grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_ap_ready,
        or_ln326 => or_ln326_reg_1366,
        rk_address0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_address0,
        rk_ce0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_ce0,
        rk_we0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_we0,
        rk_d0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_d0,
        rk_address1 => grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_address1,
        rk_ce1 => grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_ce1,
        rk_q1 => rk_q1,
        skey256_address0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_skey256_address0,
        skey256_ce0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_skey256_ce0,
        skey256_q0 => skey256_q0);

    grp_ClefiaDoubleSwap_1_fu_1084 : component clefia_ClefiaDoubleSwap_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ClefiaDoubleSwap_1_fu_1084_ap_start,
        ap_done => grp_ClefiaDoubleSwap_1_fu_1084_ap_done,
        ap_idle => grp_ClefiaDoubleSwap_1_fu_1084_ap_idle,
        ap_ready => grp_ClefiaDoubleSwap_1_fu_1084_ap_ready,
        lk_address0 => grp_ClefiaDoubleSwap_1_fu_1084_lk_address0,
        lk_ce0 => grp_ClefiaDoubleSwap_1_fu_1084_lk_ce0,
        lk_we0 => grp_ClefiaDoubleSwap_1_fu_1084_lk_we0,
        lk_d0 => grp_ClefiaDoubleSwap_1_fu_1084_lk_d0,
        lk_q0 => lk_q0,
        lk_address1 => grp_ClefiaDoubleSwap_1_fu_1084_lk_address1,
        lk_ce1 => grp_ClefiaDoubleSwap_1_fu_1084_lk_ce1,
        lk_we1 => grp_ClefiaDoubleSwap_1_fu_1084_lk_we1,
        lk_d1 => grp_ClefiaDoubleSwap_1_fu_1084_lk_d1,
        lk_q1 => lk_q1,
        lk_offset => grp_ClefiaDoubleSwap_1_fu_1084_lk_offset,
        ap_ce => grp_ClefiaDoubleSwap_1_fu_1084_ap_ce);

    grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092 : component clefia_ClefiaKeySet192_Pipeline_ByteXor_label27
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_ap_start,
        ap_done => grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_ap_done,
        ap_idle => grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_ap_idle,
        ap_ready => grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_ap_ready,
        or_ln326 => or_ln326_reg_1366,
        rk_address0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_address0,
        rk_ce0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_ce0,
        rk_we0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_we0,
        rk_d0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_d0,
        rk_address1 => grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_address1,
        rk_ce1 => grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_ce1,
        rk_q1 => rk_q1,
        skey256_address0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_skey256_address0,
        skey256_ce0 => grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_skey256_ce0,
        skey256_q0 => skey256_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_ClefiaDoubleSwap_1_fu_1084_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ClefiaDoubleSwap_1_fu_1084_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_NS_fsm_state57) and ((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55))) or ((ap_const_logic_1 = ap_NS_fsm_state39) and ((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37))))) then 
                    grp_ClefiaDoubleSwap_1_fu_1084_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ClefiaDoubleSwap_1_fu_1084_ap_ready = ap_const_logic_1)) then 
                    grp_ClefiaDoubleSwap_1_fu_1084_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln340_fu_1117_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                    grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_ready = ap_const_logic_1)) then 
                    grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_fu_1141_p3 = ap_const_lv1_1) and (icmp_ln340_fu_1117_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                    grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_ready = ap_const_logic_1)) then 
                    grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                    grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_ap_ready = ap_const_logic_1)) then 
                    grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_fu_1141_p3 = ap_const_lv1_0) and (icmp_ln340_fu_1117_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                    grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_ready = ap_const_logic_1)) then 
                    grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                    grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_ap_ready = ap_const_logic_1)) then 
                    grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_ap_ready = ap_const_logic_1)) then 
                    grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_ap_ready = ap_const_logic_1)) then 
                    grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_178 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                i_fu_178 <= add_ln340_reg_1361;
            end if; 
        end if;
    end process;

    idx26_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                idx26_fu_174 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                idx26_fu_174 <= add_ln354_fu_1169_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                add_ln340_reg_1361 <= add_ln340_fu_1123_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln340_fu_1117_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    add_ln348_reg_1382(8 downto 4) <= add_ln348_fu_1161_p2(8 downto 4);
                    or_ln326_reg_1366(2 downto 0) <= or_ln326_fu_1129_p2(2 downto 0);    or_ln326_reg_1366(7 downto 4) <= or_ln326_fu_1129_p2(7 downto 4);
                tmp_reg_1378 <= i_fu_178(1 downto 1);
                trunc_ln341_reg_1374 <= trunc_ln341_fu_1137_p1;
            end if;
        end if;
    end process;
    or_ln326_reg_1366(3) <= '1';
    add_ln348_reg_1382(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state36, icmp_ln340_fu_1117_p2, trunc_ln341_reg_1374, tmp_fu_1141_p3, grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_done, grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_done, grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_done, ap_block_state39_on_subcall_done, ap_block_state57_on_subcall_done, ap_CS_fsm_state39, ap_CS_fsm_state57, ap_CS_fsm_state18, ap_CS_fsm_state37, ap_CS_fsm_state55, ap_CS_fsm_state72, ap_block_state18_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((tmp_fu_1141_p3 = ap_const_lv1_1) and (icmp_ln340_fu_1117_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                elsif (((tmp_fu_1141_p3 = ap_const_lv1_0) and (icmp_ln340_fu_1117_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state37 => 
                if (((grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_done = ap_const_logic_1) and (trunc_ln341_reg_1374 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                elsif (((grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_done = ap_const_logic_1) and (trunc_ln341_reg_1374 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((ap_const_boolean_0 = ap_block_state39_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state55 => 
                if (((grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_done = ap_const_logic_1) and (trunc_ln341_reg_1374 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                elsif (((grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_done = ap_const_logic_1) and (trunc_ln341_reg_1374 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                if (((ap_const_boolean_0 = ap_block_state57_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state72 => 
                if (((grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln340_fu_1123_p2 <= std_logic_vector(unsigned(i_fu_178) + unsigned(ap_const_lv4_1));
    add_ln348_fu_1161_p2 <= std_logic_vector(unsigned(zext_ln348_fu_1157_p1) + unsigned(ap_const_lv9_A0));
    add_ln354_fu_1169_p2 <= std_logic_vector(unsigned(idx26_fu_174) + unsigned(ap_const_lv8_10));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state39 <= ap_NS_fsm(38);
    ap_NS_fsm_state57 <= ap_NS_fsm(56);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state18_blk_assign_proc : process(ap_block_state18_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state18_on_subcall_done)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;

    ap_ST_fsm_state37_blk_assign_proc : process(grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_done)
    begin
        if ((grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state37_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state37_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state38_blk <= ap_const_logic_0;

    ap_ST_fsm_state39_blk_assign_proc : process(ap_block_state39_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state39_on_subcall_done)) then 
            ap_ST_fsm_state39_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state39_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;

    ap_ST_fsm_state55_blk_assign_proc : process(grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_done)
    begin
        if ((grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state55_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state55_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state56_blk <= ap_const_logic_0;

    ap_ST_fsm_state57_blk_assign_proc : process(ap_block_state57_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state57_on_subcall_done)) then 
            ap_ST_fsm_state57_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state57_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;

    ap_ST_fsm_state72_blk_assign_proc : process(grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_done)
    begin
        if ((grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state72_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state72_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state18_on_subcall_done_assign_proc : process(grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_ap_done, grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_ap_done)
    begin
                ap_block_state18_on_subcall_done <= ((grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_ap_done = ap_const_logic_0) or (grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_ap_done = ap_const_logic_0));
    end process;


    ap_block_state39_on_subcall_done_assign_proc : process(trunc_ln341_reg_1374, grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_ap_done)
    begin
                ap_block_state39_on_subcall_done <= ((grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_ap_done = ap_const_logic_0) and (trunc_ln341_reg_1374 = ap_const_lv1_1));
    end process;


    ap_block_state57_on_subcall_done_assign_proc : process(trunc_ln341_reg_1374, grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_ap_done)
    begin
                ap_block_state57_on_subcall_done <= ((grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_ap_done = ap_const_logic_0) and (trunc_ln341_reg_1374 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_done, ap_CS_fsm_state72)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_done, ap_CS_fsm_state72)
    begin
        if (((grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    fin_address0_assign_proc : process(ap_CS_fsm_state1, grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_address0, ap_CS_fsm_state18, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            fin_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fin_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            fin_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fin_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fin_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fin_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fin_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fin_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fin_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fin_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fin_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fin_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fin_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fin_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fin_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            fin_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fin_address0 <= grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_address0;
        else 
            fin_address0 <= "XXXXX";
        end if; 
    end process;


    fin_address1_assign_proc : process(ap_CS_fsm_state1, grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_address1, ap_CS_fsm_state18, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            fin_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fin_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            fin_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fin_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fin_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fin_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fin_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fin_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fin_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fin_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fin_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fin_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fin_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fin_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fin_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            fin_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fin_address1 <= grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_address1;
        else 
            fin_address1 <= "XXXXX";
        end if; 
    end process;


    fin_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_ce0, ap_CS_fsm_state18, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            fin_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fin_ce0 <= grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_ce0;
        else 
            fin_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fin_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_ce1, ap_CS_fsm_state18, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            fin_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fin_ce1 <= grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_ce1;
        else 
            fin_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    fin_d0_assign_proc : process(ap_CS_fsm_state1, grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_d0, ap_CS_fsm_state18, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            fin_d0 <= ap_const_lv8_77;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fin_d0 <= ap_const_lv8_55;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            fin_d0 <= ap_const_lv8_33;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fin_d0 <= ap_const_lv8_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fin_d0 <= ap_const_lv8_80;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fin_d0 <= ap_const_lv8_A0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fin_d0 <= ap_const_lv8_C0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fin_d0 <= ap_const_lv8_E0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fin_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fin_d0 <= ap_const_lv8_22;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fin_d0 <= ap_const_lv8_44;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fin_d0 <= ap_const_lv8_66;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fin_d0 <= ap_const_lv8_88;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fin_d0 <= ap_const_lv8_AA;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fin_d0 <= ap_const_lv8_CC;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            fin_d0 <= ap_const_lv8_EE;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fin_d0 <= grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_d0;
        else 
            fin_d0 <= "XXXXXXXX";
        end if; 
    end process;


    fin_d1_assign_proc : process(ap_CS_fsm_state1, grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_d1, ap_CS_fsm_state18, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            fin_d1 <= ap_const_lv8_66;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fin_d1 <= ap_const_lv8_44;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            fin_d1 <= ap_const_lv8_22;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fin_d1 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fin_d1 <= ap_const_lv8_90;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fin_d1 <= ap_const_lv8_B0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fin_d1 <= ap_const_lv8_D0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fin_d1 <= ap_const_lv8_F0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fin_d1 <= ap_const_lv8_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fin_d1 <= ap_const_lv8_33;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            fin_d1 <= ap_const_lv8_55;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fin_d1 <= ap_const_lv8_77;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fin_d1 <= ap_const_lv8_99;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fin_d1 <= ap_const_lv8_BB;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fin_d1 <= ap_const_lv8_DD;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            fin_d1 <= ap_const_lv8_FF;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fin_d1 <= grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_d1;
        else 
            fin_d1 <= "XXXXXXXX";
        end if; 
    end process;


    fin_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_we0, ap_CS_fsm_state18, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            fin_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fin_we0 <= grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_we0;
        else 
            fin_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fin_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_we1, ap_CS_fsm_state18, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            fin_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fin_we1 <= grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fin_we1;
        else 
            fin_we1 <= ap_const_logic_0;
        end if; 
    end process;


    fout_address0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_address0, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            fout_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            fout_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            fout_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            fout_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            fout_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            fout_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            fout_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            fout_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            fout_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            fout_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            fout_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            fout_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            fout_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            fout_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            fout_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            fout_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fout_address0 <= grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_address0;
        else 
            fout_address0 <= "XXXXX";
        end if; 
    end process;


    fout_address1_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_address1, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            fout_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            fout_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            fout_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            fout_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            fout_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            fout_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            fout_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            fout_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            fout_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            fout_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            fout_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            fout_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            fout_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            fout_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            fout_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            fout_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fout_address1 <= grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_address1;
        else 
            fout_address1 <= "XXXXX";
        end if; 
    end process;


    fout_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_ce0, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            fout_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fout_ce0 <= grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_ce0;
        else 
            fout_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fout_ce1_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_ce1, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            fout_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fout_ce1 <= grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_ce1;
        else 
            fout_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    fout_we0_assign_proc : process(grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_we0, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fout_we0 <= grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_we0;
        else 
            fout_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fout_we1_assign_proc : process(grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_we1, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fout_we1 <= grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_fout_we1;
        else 
            fout_we1 <= ap_const_logic_0;
        end if; 
    end process;


    grp_ClefiaDoubleSwap_1_fu_1084_ap_ce_assign_proc : process(ap_block_state39_on_subcall_done, ap_block_state57_on_subcall_done, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or ((ap_const_boolean_0 = ap_block_state57_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state57)) or ((ap_const_boolean_0 = ap_block_state39_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            grp_ClefiaDoubleSwap_1_fu_1084_ap_ce <= ap_const_logic_1;
        else 
            grp_ClefiaDoubleSwap_1_fu_1084_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_ClefiaDoubleSwap_1_fu_1084_ap_start <= grp_ClefiaDoubleSwap_1_fu_1084_ap_start_reg;

    grp_ClefiaDoubleSwap_1_fu_1084_lk_offset_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_ClefiaDoubleSwap_1_fu_1084_lk_offset <= ap_const_lv5_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_ClefiaDoubleSwap_1_fu_1084_lk_offset <= ap_const_lv5_0;
        else 
            grp_ClefiaDoubleSwap_1_fu_1084_lk_offset <= "XXXXX";
        end if; 
    end process;

    grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_start <= grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_ap_start_reg;
    grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_start <= grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_ap_start_reg;
    grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_ap_start <= grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_ap_start_reg;
    grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_start <= grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_ap_start_reg;
    grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_ap_start <= grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_ap_start_reg;
    grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_ap_start <= grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_ap_start_reg;
    grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_ap_start <= grp_ClefiaKeySet192_Pipeline_ClefiaGfn8_label4_fu_1025_ap_start_reg;
    icmp_ln340_fu_1117_p2 <= "1" when (i_fu_178 = ap_const_lv4_B) else "0";

    lk_address0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, tmp_reg_1378, grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_lk_address0, grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_lk_address0, grp_ClefiaDoubleSwap_1_fu_1084_lk_address0, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state37, ap_CS_fsm_state55, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            lk_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            lk_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            lk_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            lk_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            lk_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            lk_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            lk_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            lk_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            lk_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            lk_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            lk_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            lk_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            lk_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            lk_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            lk_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            lk_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((tmp_reg_1378 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((tmp_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54)))) then 
            lk_address0 <= grp_ClefiaDoubleSwap_1_fu_1084_lk_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            lk_address0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_lk_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            lk_address0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_lk_address0;
        else 
            lk_address0 <= "XXXXX";
        end if; 
    end process;


    lk_address1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, tmp_reg_1378, grp_ClefiaDoubleSwap_1_fu_1084_lk_address1, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            lk_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            lk_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            lk_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            lk_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            lk_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            lk_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            lk_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            lk_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            lk_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            lk_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            lk_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            lk_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            lk_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            lk_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            lk_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            lk_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((tmp_reg_1378 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((tmp_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54)))) then 
            lk_address1 <= grp_ClefiaDoubleSwap_1_fu_1084_lk_address1;
        else 
            lk_address1 <= "XXXXX";
        end if; 
    end process;


    lk_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, tmp_reg_1378, grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_lk_ce0, grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_lk_ce0, grp_ClefiaDoubleSwap_1_fu_1084_lk_ce0, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state37, ap_CS_fsm_state55, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            lk_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((tmp_reg_1378 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((tmp_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54)))) then 
            lk_ce0 <= grp_ClefiaDoubleSwap_1_fu_1084_lk_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            lk_ce0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_lk_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            lk_ce0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_lk_ce0;
        else 
            lk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lk_ce1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, tmp_reg_1378, grp_ClefiaDoubleSwap_1_fu_1084_lk_ce1, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            lk_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((tmp_reg_1378 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((tmp_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54)))) then 
            lk_ce1 <= grp_ClefiaDoubleSwap_1_fu_1084_lk_ce1;
        else 
            lk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lk_d0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, tmp_reg_1378, fout_q0, grp_ClefiaDoubleSwap_1_fu_1084_lk_d0, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            lk_d0 <= fout_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((tmp_reg_1378 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((tmp_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54)))) then 
            lk_d0 <= grp_ClefiaDoubleSwap_1_fu_1084_lk_d0;
        else 
            lk_d0 <= "XXXXXXXX";
        end if; 
    end process;


    lk_d1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, tmp_reg_1378, fout_q1, grp_ClefiaDoubleSwap_1_fu_1084_lk_d1, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            lk_d1 <= fout_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((tmp_reg_1378 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((tmp_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54)))) then 
            lk_d1 <= grp_ClefiaDoubleSwap_1_fu_1084_lk_d1;
        else 
            lk_d1 <= "XXXXXXXX";
        end if; 
    end process;


    lk_we0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, tmp_reg_1378, grp_ClefiaDoubleSwap_1_fu_1084_lk_we0, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            lk_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((tmp_reg_1378 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((tmp_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54)))) then 
            lk_we0 <= grp_ClefiaDoubleSwap_1_fu_1084_lk_we0;
        else 
            lk_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lk_we1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, tmp_reg_1378, grp_ClefiaDoubleSwap_1_fu_1084_lk_we1, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            lk_we1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((tmp_reg_1378 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((tmp_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54)))) then 
            lk_we1 <= grp_ClefiaDoubleSwap_1_fu_1084_lk_we1;
        else 
            lk_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln326_fu_1129_p2 <= (idx26_fu_174 or ap_const_lv8_8);

    rk_address0_assign_proc : process(trunc_ln341_reg_1374, grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_rk_address0, grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_rk_address0, grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_rk_address0, grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_rk_address0, grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_address0, ap_CS_fsm_state39, ap_CS_fsm_state57, grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_address0, ap_CS_fsm_state18, ap_CS_fsm_state37, ap_CS_fsm_state55, ap_CS_fsm_state72)
    begin
        if (((trunc_ln341_reg_1374 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            rk_address0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_address0;
        elsif (((trunc_ln341_reg_1374 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            rk_address0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            rk_address0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_rk_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            rk_address0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_rk_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            rk_address0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_rk_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rk_address0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_rk_address0;
        else 
            rk_address0 <= "XXXXXXXX";
        end if; 
    end process;


    rk_address1_assign_proc : process(trunc_ln341_reg_1374, grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_address1, ap_CS_fsm_state39, ap_CS_fsm_state57, grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_address1)
    begin
        if ((trunc_ln341_reg_1374 = ap_const_lv1_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                rk_address1 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_address1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                rk_address1 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_address1;
            else 
                rk_address1 <= "XXXXXXXX";
            end if;
        else 
            rk_address1 <= "XXXXXXXX";
        end if; 
    end process;


    rk_ce0_assign_proc : process(trunc_ln341_reg_1374, grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_rk_ce0, grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_rk_ce0, grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_rk_ce0, grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_rk_ce0, grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_ce0, ap_CS_fsm_state39, ap_CS_fsm_state57, grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_ce0, ap_CS_fsm_state18, ap_CS_fsm_state37, ap_CS_fsm_state55, ap_CS_fsm_state72)
    begin
        if (((trunc_ln341_reg_1374 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            rk_ce0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_ce0;
        elsif (((trunc_ln341_reg_1374 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            rk_ce0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            rk_ce0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_rk_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            rk_ce0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_rk_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            rk_ce0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_rk_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rk_ce0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_rk_ce0;
        else 
            rk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rk_ce1_assign_proc : process(trunc_ln341_reg_1374, grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_ce1, ap_CS_fsm_state39, ap_CS_fsm_state57, grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_ce1)
    begin
        if ((trunc_ln341_reg_1374 = ap_const_lv1_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                rk_ce1 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_ce1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                rk_ce1 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_ce1;
            else 
                rk_ce1 <= ap_const_logic_0;
            end if;
        else 
            rk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rk_d0_assign_proc : process(trunc_ln341_reg_1374, grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_rk_d0, grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_rk_d0, grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_rk_d0, grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_rk_d0, grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_d0, ap_CS_fsm_state39, ap_CS_fsm_state57, grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_d0, ap_CS_fsm_state18, ap_CS_fsm_state37, ap_CS_fsm_state55, ap_CS_fsm_state72)
    begin
        if (((trunc_ln341_reg_1374 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            rk_d0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_d0;
        elsif (((trunc_ln341_reg_1374 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            rk_d0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            rk_d0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_rk_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            rk_d0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_rk_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            rk_d0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_rk_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rk_d0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_rk_d0;
        else 
            rk_d0 <= "XXXXXXXX";
        end if; 
    end process;


    rk_we0_assign_proc : process(trunc_ln341_reg_1374, grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_rk_we0, grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_rk_we0, grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_rk_we0, grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_rk_we0, grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_we0, ap_CS_fsm_state39, ap_CS_fsm_state57, grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_we0, ap_CS_fsm_state18, ap_CS_fsm_state37, ap_CS_fsm_state55, ap_CS_fsm_state72)
    begin
        if (((trunc_ln341_reg_1374 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            rk_we0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_rk_we0;
        elsif (((trunc_ln341_reg_1374 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            rk_we0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_rk_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            rk_we0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_rk_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            rk_we0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label26_fu_1056_rk_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            rk_we0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label28_fu_1045_rk_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rk_we0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_rk_we0;
        else 
            rk_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_1149_p3 <= (i_fu_178 & ap_const_lv4_0);

    skey256_address0_assign_proc : process(trunc_ln341_reg_1374, grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_skey256_address0, grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_skey256_address0, grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_skey256_address0, ap_CS_fsm_state39, ap_CS_fsm_state57, grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_skey256_address0, ap_CS_fsm_state18, ap_CS_fsm_state72)
    begin
        if (((trunc_ln341_reg_1374 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            skey256_address0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_skey256_address0;
        elsif (((trunc_ln341_reg_1374 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            skey256_address0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_skey256_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            skey256_address0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_skey256_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            skey256_address0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_skey256_address0;
        else 
            skey256_address0 <= "XXXXX";
        end if; 
    end process;


    skey256_address1_assign_proc : process(grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_skey256_address1, grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_skey256_address1, ap_CS_fsm_state18, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            skey256_address1 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_skey256_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            skey256_address1 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_skey256_address1;
        else 
            skey256_address1 <= "XXXXX";
        end if; 
    end process;


    skey256_ce0_assign_proc : process(trunc_ln341_reg_1374, grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_skey256_ce0, grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_skey256_ce0, grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_skey256_ce0, ap_CS_fsm_state39, ap_CS_fsm_state57, grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_skey256_ce0, ap_CS_fsm_state18, ap_CS_fsm_state72)
    begin
        if (((trunc_ln341_reg_1374 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            skey256_ce0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label27_fu_1092_skey256_ce0;
        elsif (((trunc_ln341_reg_1374 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            skey256_ce0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label29_fu_1075_skey256_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            skey256_ce0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_skey256_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            skey256_ce0 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_skey256_ce0;
        else 
            skey256_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    skey256_ce1_assign_proc : process(grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_skey256_ce1, grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_skey256_ce1, ap_CS_fsm_state18, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            skey256_ce1 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label210_fu_1067_skey256_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            skey256_ce1 <= grp_ClefiaKeySet192_Pipeline_ByteXor_label2_fu_1037_skey256_ce1;
        else 
            skey256_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_1141_p3 <= i_fu_178(1 downto 1);
    trunc_ln341_fu_1137_p1 <= i_fu_178(1 - 1 downto 0);
    zext_ln348_fu_1157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1149_p3),9));
end behav;
