// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clefia_ClefiaF0Xor_121 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read8,
        p_read23,
        p_read24,
        p_read25,
        p_read26,
        p_read27,
        p_read28,
        p_read29,
        rk_address0,
        rk_ce0,
        rk_q0,
        rk_address1,
        rk_ce1,
        rk_q1,
        rk_address2,
        rk_ce2,
        rk_q2,
        rk_address3,
        rk_ce3,
        rk_q3,
        rk_offset,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p_read8;
input  [7:0] p_read23;
input  [7:0] p_read24;
input  [7:0] p_read25;
input  [7:0] p_read26;
input  [7:0] p_read27;
input  [7:0] p_read28;
input  [7:0] p_read29;
output  [7:0] rk_address0;
output   rk_ce0;
input  [7:0] rk_q0;
output  [7:0] rk_address1;
output   rk_ce1;
input  [7:0] rk_q1;
output  [7:0] rk_address2;
output   rk_ce2;
input  [7:0] rk_q2;
output  [7:0] rk_address3;
output   rk_ce3;
input  [7:0] rk_q3;
input  [6:0] rk_offset;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg rk_ce0;
reg rk_ce1;
reg rk_ce2;
reg rk_ce3;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [7:0] clefia_s0_address0;
reg    clefia_s0_ce0;
wire   [7:0] clefia_s0_q0;
wire   [7:0] clefia_s0_address1;
reg    clefia_s0_ce1;
wire   [7:0] clefia_s0_q1;
wire   [7:0] clefia_s1_address0;
reg    clefia_s1_ce0;
wire   [7:0] clefia_s1_q0;
wire   [7:0] clefia_s1_address1;
reg    clefia_s1_ce1;
wire   [7:0] clefia_s1_q1;
reg   [6:0] rk_offset_read_reg_755;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] p_read_reg_761;
reg   [7:0] p_read_reg_761_pp0_iter1_reg;
reg   [7:0] p_read_reg_761_pp0_iter2_reg;
reg   [7:0] p_read_reg_761_pp0_iter3_reg;
reg   [7:0] p_read_1_reg_766;
reg   [7:0] p_read_1_reg_766_pp0_iter1_reg;
reg   [7:0] p_read_1_reg_766_pp0_iter2_reg;
reg   [7:0] p_read_1_reg_766_pp0_iter3_reg;
reg   [7:0] p_read_2_reg_771;
reg   [7:0] p_read_2_reg_771_pp0_iter1_reg;
reg   [7:0] p_read_2_reg_771_pp0_iter2_reg;
reg   [7:0] p_read_2_reg_771_pp0_iter3_reg;
reg   [7:0] p_read_3_reg_776;
reg   [7:0] p_read_3_reg_776_pp0_iter1_reg;
reg   [7:0] p_read_3_reg_776_pp0_iter2_reg;
reg   [7:0] p_read_3_reg_776_pp0_iter3_reg;
reg   [7:0] p_read_4_reg_781;
reg   [7:0] p_read_4_reg_781_pp0_iter1_reg;
reg   [7:0] p_read_4_reg_781_pp0_iter2_reg;
reg   [7:0] p_read_4_reg_781_pp0_iter3_reg;
reg   [7:0] p_read_5_reg_787;
reg   [7:0] p_read_5_reg_787_pp0_iter1_reg;
reg   [7:0] p_read_5_reg_787_pp0_iter2_reg;
reg   [7:0] p_read_5_reg_787_pp0_iter3_reg;
reg   [7:0] p_read_6_reg_793;
reg   [7:0] p_read_6_reg_793_pp0_iter1_reg;
reg   [7:0] p_read_6_reg_793_pp0_iter2_reg;
reg   [7:0] p_read_6_reg_793_pp0_iter3_reg;
reg   [7:0] p_read83_reg_799;
reg   [7:0] p_read83_reg_799_pp0_iter1_reg;
reg   [7:0] p_read83_reg_799_pp0_iter2_reg;
reg   [7:0] p_read83_reg_799_pp0_iter3_reg;
reg   [7:0] rk_load_17_reg_825;
reg   [7:0] rk_load_18_reg_830;
reg   [7:0] rk_load_reg_835;
reg   [7:0] rk_load_16_reg_840;
reg   [7:0] z_17_reg_865;
reg   [7:0] z_18_reg_870;
wire   [7:0] x_assign_23_fu_307_p3;
reg   [7:0] x_assign_23_reg_875;
wire   [7:0] x_assign_24_fu_391_p3;
reg   [7:0] x_assign_24_reg_881;
wire   [7:0] xor_ln124_115_fu_441_p2;
reg   [7:0] xor_ln124_115_reg_887;
wire   [63:0] zext_ln124_67_fu_207_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln124_68_fu_218_p1;
wire   [63:0] rk_offset_cast_fu_223_p1;
wire   [63:0] zext_ln124_fu_232_p1;
wire   [63:0] zext_ln152_fu_245_p1;
wire   [63:0] zext_ln153_fu_250_p1;
wire   [63:0] zext_ln150_fu_263_p1;
wire   [63:0] zext_ln151_fu_268_p1;
wire   [6:0] add_ln124_64_fu_201_p2;
wire   [6:0] add_ln124_65_fu_212_p2;
wire   [6:0] add_ln124_fu_227_p2;
wire   [7:0] xor_ln124_39_fu_237_p2;
wire   [7:0] xor_ln124_40_fu_241_p2;
wire   [7:0] xor_ln124_fu_255_p2;
wire   [7:0] xor_ln124_38_fu_259_p2;
wire   [0:0] tmp_116_fu_273_p3;
wire   [7:0] xor_ln132_52_fu_281_p2;
wire   [7:0] select_ln131_52_fu_287_p3;
wire   [6:0] trunc_ln134_52_fu_295_p1;
wire   [0:0] tmp_117_fu_299_p3;
wire   [0:0] tmp_118_fu_315_p3;
wire   [7:0] xor_ln132_53_fu_323_p2;
wire   [7:0] select_ln131_53_fu_329_p3;
wire   [6:0] trunc_ln134_53_fu_337_p1;
wire   [0:0] tmp_119_fu_341_p3;
wire   [0:0] tmp_120_fu_357_p3;
wire   [7:0] xor_ln132_54_fu_365_p2;
wire   [7:0] select_ln131_54_fu_371_p3;
wire   [6:0] trunc_ln134_54_fu_379_p1;
wire   [0:0] tmp_121_fu_383_p3;
wire   [0:0] tmp_122_fu_399_p3;
wire   [7:0] xor_ln132_55_fu_407_p2;
wire   [7:0] select_ln131_55_fu_413_p3;
wire   [6:0] trunc_ln134_55_fu_421_p1;
wire   [0:0] tmp_123_fu_425_p3;
wire   [7:0] or_ln134_s_fu_349_p3;
wire   [7:0] or_ln134_3_fu_433_p3;
wire   [0:0] tmp_fu_447_p3;
wire   [7:0] xor_ln132_fu_455_p2;
wire   [7:0] select_ln131_fu_461_p3;
wire   [6:0] trunc_ln134_fu_469_p1;
wire   [0:0] tmp_115_fu_473_p3;
wire   [0:0] tmp_124_fu_489_p3;
wire   [7:0] xor_ln132_56_fu_497_p2;
wire   [7:0] select_ln131_56_fu_503_p3;
wire   [6:0] trunc_ln134_56_fu_511_p1;
wire   [0:0] tmp_125_fu_515_p3;
wire   [7:0] x_assign_25_fu_523_p3;
wire   [0:0] tmp_126_fu_531_p3;
wire   [7:0] xor_ln132_57_fu_539_p2;
wire   [7:0] select_ln131_57_fu_545_p3;
wire   [6:0] trunc_ln134_57_fu_553_p1;
wire   [0:0] tmp_127_fu_557_p3;
wire   [7:0] x_assign_s_fu_481_p3;
wire   [0:0] tmp_128_fu_573_p3;
wire   [7:0] xor_ln132_58_fu_581_p2;
wire   [7:0] select_ln131_58_fu_587_p3;
wire   [6:0] trunc_ln134_58_fu_595_p1;
wire   [0:0] tmp_129_fu_599_p3;
wire   [7:0] xor_ln124_113_fu_615_p2;
wire   [7:0] xor_ln124_116_fu_626_p2;
wire   [7:0] xor_ln124_114_fu_620_p2;
wire   [7:0] xor_ln124_118_fu_636_p2;
wire   [7:0] xor_ln124_120_fu_647_p2;
wire   [7:0] xor_ln124_119_fu_641_p2;
wire   [7:0] or_ln134_4_fu_565_p3;
wire   [7:0] xor_ln124_122_fu_657_p2;
wire   [7:0] xor_ln124_124_fu_668_p2;
wire   [7:0] or_ln_fu_607_p3;
wire   [7:0] xor_ln124_125_fu_672_p2;
wire   [7:0] xor_ln124_123_fu_663_p2;
wire   [7:0] xor_ln124_127_fu_684_p2;
wire   [7:0] xor_ln124_129_fu_695_p2;
wire   [7:0] xor_ln124_130_fu_700_p2;
wire   [7:0] xor_ln124_128_fu_690_p2;
wire   [7:0] xor_ln124_117_fu_630_p2;
wire   [7:0] xor_ln124_121_fu_651_p2;
wire   [7:0] xor_ln124_126_fu_678_p2;
wire   [7:0] xor_ln124_131_fu_705_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to3;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

clefia_ClefiaF0Xor_121_clefia_s0_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s0_address0),
    .ce0(clefia_s0_ce0),
    .q0(clefia_s0_q0),
    .address1(clefia_s0_address1),
    .ce1(clefia_s0_ce1),
    .q1(clefia_s0_q1)
);

clefia_ClefiaF0Xor_121_clefia_s1_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s1_address0),
    .ce0(clefia_s1_ce0),
    .q0(clefia_s1_q0),
    .address1(clefia_s1_address1),
    .ce1(clefia_s1_ce1),
    .q1(clefia_s1_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_read83_reg_799 <= p_read8;
        p_read83_reg_799_pp0_iter1_reg <= p_read83_reg_799;
        p_read_1_reg_766 <= p_read28;
        p_read_1_reg_766_pp0_iter1_reg <= p_read_1_reg_766;
        p_read_2_reg_771 <= p_read27;
        p_read_2_reg_771_pp0_iter1_reg <= p_read_2_reg_771;
        p_read_3_reg_776 <= p_read26;
        p_read_3_reg_776_pp0_iter1_reg <= p_read_3_reg_776;
        p_read_4_reg_781 <= p_read25;
        p_read_4_reg_781_pp0_iter1_reg <= p_read_4_reg_781;
        p_read_5_reg_787 <= p_read24;
        p_read_5_reg_787_pp0_iter1_reg <= p_read_5_reg_787;
        p_read_6_reg_793 <= p_read23;
        p_read_6_reg_793_pp0_iter1_reg <= p_read_6_reg_793;
        p_read_reg_761 <= p_read29;
        p_read_reg_761_pp0_iter1_reg <= p_read_reg_761;
        rk_offset_read_reg_755 <= rk_offset;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        p_read83_reg_799_pp0_iter2_reg <= p_read83_reg_799_pp0_iter1_reg;
        p_read83_reg_799_pp0_iter3_reg <= p_read83_reg_799_pp0_iter2_reg;
        p_read_1_reg_766_pp0_iter2_reg <= p_read_1_reg_766_pp0_iter1_reg;
        p_read_1_reg_766_pp0_iter3_reg <= p_read_1_reg_766_pp0_iter2_reg;
        p_read_2_reg_771_pp0_iter2_reg <= p_read_2_reg_771_pp0_iter1_reg;
        p_read_2_reg_771_pp0_iter3_reg <= p_read_2_reg_771_pp0_iter2_reg;
        p_read_3_reg_776_pp0_iter2_reg <= p_read_3_reg_776_pp0_iter1_reg;
        p_read_3_reg_776_pp0_iter3_reg <= p_read_3_reg_776_pp0_iter2_reg;
        p_read_4_reg_781_pp0_iter2_reg <= p_read_4_reg_781_pp0_iter1_reg;
        p_read_4_reg_781_pp0_iter3_reg <= p_read_4_reg_781_pp0_iter2_reg;
        p_read_5_reg_787_pp0_iter2_reg <= p_read_5_reg_787_pp0_iter1_reg;
        p_read_5_reg_787_pp0_iter3_reg <= p_read_5_reg_787_pp0_iter2_reg;
        p_read_6_reg_793_pp0_iter2_reg <= p_read_6_reg_793_pp0_iter1_reg;
        p_read_6_reg_793_pp0_iter3_reg <= p_read_6_reg_793_pp0_iter2_reg;
        p_read_reg_761_pp0_iter2_reg <= p_read_reg_761_pp0_iter1_reg;
        p_read_reg_761_pp0_iter3_reg <= p_read_reg_761_pp0_iter2_reg;
        x_assign_23_reg_875 <= x_assign_23_fu_307_p3;
        x_assign_24_reg_881 <= x_assign_24_fu_391_p3;
        xor_ln124_115_reg_887 <= xor_ln124_115_fu_441_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        rk_load_16_reg_840 <= rk_q0;
        rk_load_reg_835 <= rk_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rk_load_17_reg_825 <= rk_q3;
        rk_load_18_reg_830 <= rk_q2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        z_17_reg_865 <= clefia_s0_q1;
        z_18_reg_870 <= clefia_s1_q1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        clefia_s0_ce0 = 1'b1;
    end else begin
        clefia_s0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        clefia_s0_ce1 = 1'b1;
    end else begin
        clefia_s0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        clefia_s1_ce0 = 1'b1;
    end else begin
        clefia_s1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        clefia_s1_ce1 = 1'b1;
    end else begin
        clefia_s1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rk_ce0 = 1'b1;
    end else begin
        rk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rk_ce1 = 1'b1;
    end else begin
        rk_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rk_ce2 = 1'b1;
    end else begin
        rk_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rk_ce3 = 1'b1;
    end else begin
        rk_ce3 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln124_64_fu_201_p2 = (rk_offset + 7'd2);

assign add_ln124_65_fu_212_p2 = (rk_offset + 7'd3);

assign add_ln124_fu_227_p2 = (rk_offset_read_reg_755 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = p_read83_reg_799_pp0_iter3_reg;

assign ap_return_1 = p_read_6_reg_793_pp0_iter3_reg;

assign ap_return_2 = p_read_5_reg_787_pp0_iter3_reg;

assign ap_return_3 = p_read_4_reg_781_pp0_iter3_reg;

assign ap_return_4 = xor_ln124_117_fu_630_p2;

assign ap_return_5 = xor_ln124_121_fu_651_p2;

assign ap_return_6 = xor_ln124_126_fu_678_p2;

assign ap_return_7 = xor_ln124_131_fu_705_p2;

assign clefia_s0_address0 = zext_ln150_fu_263_p1;

assign clefia_s0_address1 = zext_ln152_fu_245_p1;

assign clefia_s1_address0 = zext_ln151_fu_268_p1;

assign clefia_s1_address1 = zext_ln153_fu_250_p1;

assign or_ln134_3_fu_433_p3 = {{trunc_ln134_55_fu_421_p1}, {tmp_123_fu_425_p3}};

assign or_ln134_4_fu_565_p3 = {{trunc_ln134_57_fu_553_p1}, {tmp_127_fu_557_p3}};

assign or_ln134_s_fu_349_p3 = {{trunc_ln134_53_fu_337_p1}, {tmp_119_fu_341_p3}};

assign or_ln_fu_607_p3 = {{trunc_ln134_58_fu_595_p1}, {tmp_129_fu_599_p3}};

assign rk_address0 = zext_ln124_fu_232_p1;

assign rk_address1 = rk_offset_cast_fu_223_p1;

assign rk_address2 = zext_ln124_68_fu_218_p1;

assign rk_address3 = zext_ln124_67_fu_207_p1;

assign rk_offset_cast_fu_223_p1 = rk_offset_read_reg_755;

assign select_ln131_52_fu_287_p3 = ((tmp_116_fu_273_p3[0:0] == 1'b1) ? xor_ln132_52_fu_281_p2 : clefia_s0_q1);

assign select_ln131_53_fu_329_p3 = ((tmp_118_fu_315_p3[0:0] == 1'b1) ? xor_ln132_53_fu_323_p2 : x_assign_23_fu_307_p3);

assign select_ln131_54_fu_371_p3 = ((tmp_120_fu_357_p3[0:0] == 1'b1) ? xor_ln132_54_fu_365_p2 : clefia_s1_q1);

assign select_ln131_55_fu_413_p3 = ((tmp_122_fu_399_p3[0:0] == 1'b1) ? xor_ln132_55_fu_407_p2 : x_assign_24_fu_391_p3);

assign select_ln131_56_fu_503_p3 = ((tmp_124_fu_489_p3[0:0] == 1'b1) ? xor_ln132_56_fu_497_p2 : clefia_s0_q0);

assign select_ln131_57_fu_545_p3 = ((tmp_126_fu_531_p3[0:0] == 1'b1) ? xor_ln132_57_fu_539_p2 : x_assign_25_fu_523_p3);

assign select_ln131_58_fu_587_p3 = ((tmp_128_fu_573_p3[0:0] == 1'b1) ? xor_ln132_58_fu_581_p2 : x_assign_s_fu_481_p3);

assign select_ln131_fu_461_p3 = ((tmp_fu_447_p3[0:0] == 1'b1) ? xor_ln132_fu_455_p2 : clefia_s1_q0);

assign tmp_115_fu_473_p3 = select_ln131_fu_461_p3[32'd7];

assign tmp_116_fu_273_p3 = clefia_s0_q1[32'd7];

assign tmp_117_fu_299_p3 = select_ln131_52_fu_287_p3[32'd7];

assign tmp_118_fu_315_p3 = select_ln131_52_fu_287_p3[32'd6];

assign tmp_119_fu_341_p3 = select_ln131_53_fu_329_p3[32'd7];

assign tmp_120_fu_357_p3 = clefia_s1_q1[32'd7];

assign tmp_121_fu_383_p3 = select_ln131_54_fu_371_p3[32'd7];

assign tmp_122_fu_399_p3 = select_ln131_54_fu_371_p3[32'd6];

assign tmp_123_fu_425_p3 = select_ln131_55_fu_413_p3[32'd7];

assign tmp_124_fu_489_p3 = clefia_s0_q0[32'd7];

assign tmp_125_fu_515_p3 = select_ln131_56_fu_503_p3[32'd7];

assign tmp_126_fu_531_p3 = select_ln131_56_fu_503_p3[32'd6];

assign tmp_127_fu_557_p3 = select_ln131_57_fu_545_p3[32'd7];

assign tmp_128_fu_573_p3 = select_ln131_fu_461_p3[32'd6];

assign tmp_129_fu_599_p3 = select_ln131_58_fu_587_p3[32'd7];

assign tmp_fu_447_p3 = clefia_s1_q0[32'd7];

assign trunc_ln134_52_fu_295_p1 = select_ln131_52_fu_287_p3[6:0];

assign trunc_ln134_53_fu_337_p1 = select_ln131_53_fu_329_p3[6:0];

assign trunc_ln134_54_fu_379_p1 = select_ln131_54_fu_371_p3[6:0];

assign trunc_ln134_55_fu_421_p1 = select_ln131_55_fu_413_p3[6:0];

assign trunc_ln134_56_fu_511_p1 = select_ln131_56_fu_503_p3[6:0];

assign trunc_ln134_57_fu_553_p1 = select_ln131_57_fu_545_p3[6:0];

assign trunc_ln134_58_fu_595_p1 = select_ln131_58_fu_587_p3[6:0];

assign trunc_ln134_fu_469_p1 = select_ln131_fu_461_p3[6:0];

assign x_assign_23_fu_307_p3 = {{trunc_ln134_52_fu_295_p1}, {tmp_117_fu_299_p3}};

assign x_assign_24_fu_391_p3 = {{trunc_ln134_54_fu_379_p1}, {tmp_121_fu_383_p3}};

assign x_assign_25_fu_523_p3 = {{trunc_ln134_56_fu_511_p1}, {tmp_125_fu_515_p3}};

assign x_assign_s_fu_481_p3 = {{trunc_ln134_fu_469_p1}, {tmp_115_fu_473_p3}};

assign xor_ln124_113_fu_615_p2 = (x_assign_s_fu_481_p3 ^ p_read_3_reg_776_pp0_iter3_reg);

assign xor_ln124_114_fu_620_p2 = (xor_ln124_113_fu_615_p2 ^ clefia_s0_q0);

assign xor_ln124_115_fu_441_p2 = (or_ln134_s_fu_349_p3 ^ or_ln134_3_fu_433_p3);

assign xor_ln124_116_fu_626_p2 = (xor_ln124_115_reg_887 ^ x_assign_24_reg_881);

assign xor_ln124_117_fu_630_p2 = (xor_ln124_116_fu_626_p2 ^ xor_ln124_114_fu_620_p2);

assign xor_ln124_118_fu_636_p2 = (x_assign_25_fu_523_p3 ^ x_assign_23_reg_875);

assign xor_ln124_119_fu_641_p2 = (xor_ln124_118_fu_636_p2 ^ clefia_s1_q0);

assign xor_ln124_120_fu_647_p2 = (xor_ln124_115_reg_887 ^ p_read_2_reg_771_pp0_iter3_reg);

assign xor_ln124_121_fu_651_p2 = (xor_ln124_120_fu_647_p2 ^ xor_ln124_119_fu_641_p2);

assign xor_ln124_122_fu_657_p2 = (x_assign_s_fu_481_p3 ^ or_ln134_4_fu_565_p3);

assign xor_ln124_123_fu_663_p2 = (z_17_reg_865 ^ xor_ln124_122_fu_657_p2);

assign xor_ln124_124_fu_668_p2 = (x_assign_24_reg_881 ^ p_read_1_reg_766_pp0_iter3_reg);

assign xor_ln124_125_fu_672_p2 = (xor_ln124_124_fu_668_p2 ^ or_ln_fu_607_p3);

assign xor_ln124_126_fu_678_p2 = (xor_ln124_125_fu_672_p2 ^ xor_ln124_123_fu_663_p2);

assign xor_ln124_127_fu_684_p2 = (x_assign_25_fu_523_p3 ^ or_ln134_4_fu_565_p3);

assign xor_ln124_128_fu_690_p2 = (z_18_reg_870 ^ xor_ln124_127_fu_684_p2);

assign xor_ln124_129_fu_695_p2 = (p_read_reg_761_pp0_iter3_reg ^ or_ln_fu_607_p3);

assign xor_ln124_130_fu_700_p2 = (xor_ln124_129_fu_695_p2 ^ x_assign_23_reg_875);

assign xor_ln124_131_fu_705_p2 = (xor_ln124_130_fu_700_p2 ^ xor_ln124_128_fu_690_p2);

assign xor_ln124_38_fu_259_p2 = (rk_load_16_reg_840 ^ p_read_6_reg_793_pp0_iter2_reg);

assign xor_ln124_39_fu_237_p2 = (rk_load_17_reg_825 ^ p_read_5_reg_787_pp0_iter1_reg);

assign xor_ln124_40_fu_241_p2 = (rk_load_18_reg_830 ^ p_read_4_reg_781_pp0_iter1_reg);

assign xor_ln124_fu_255_p2 = (rk_load_reg_835 ^ p_read83_reg_799_pp0_iter2_reg);

assign xor_ln132_52_fu_281_p2 = (clefia_s0_q1 ^ 8'd14);

assign xor_ln132_53_fu_323_p2 = (x_assign_23_fu_307_p3 ^ 8'd14);

assign xor_ln132_54_fu_365_p2 = (clefia_s1_q1 ^ 8'd14);

assign xor_ln132_55_fu_407_p2 = (x_assign_24_fu_391_p3 ^ 8'd14);

assign xor_ln132_56_fu_497_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_57_fu_539_p2 = (x_assign_25_fu_523_p3 ^ 8'd14);

assign xor_ln132_58_fu_581_p2 = (x_assign_s_fu_481_p3 ^ 8'd14);

assign xor_ln132_fu_455_p2 = (clefia_s1_q0 ^ 8'd14);

assign zext_ln124_67_fu_207_p1 = add_ln124_64_fu_201_p2;

assign zext_ln124_68_fu_218_p1 = add_ln124_65_fu_212_p2;

assign zext_ln124_fu_232_p1 = add_ln124_fu_227_p2;

assign zext_ln150_fu_263_p1 = xor_ln124_fu_255_p2;

assign zext_ln151_fu_268_p1 = xor_ln124_38_fu_259_p2;

assign zext_ln152_fu_245_p1 = xor_ln124_39_fu_237_p2;

assign zext_ln153_fu_250_p1 = xor_ln124_40_fu_241_p2;

endmodule //clefia_ClefiaF0Xor_121
