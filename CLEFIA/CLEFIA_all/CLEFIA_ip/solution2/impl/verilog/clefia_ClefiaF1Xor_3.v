// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clefia_ClefiaF1Xor_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_8_read,
        src_9_read,
        src_10_read,
        src_11_read,
        src_12_read,
        src_13_read,
        src_14_read,
        src_15_read,
        rk_address0,
        rk_ce0,
        rk_q0,
        rk_address1,
        rk_ce1,
        rk_q1,
        rk_offset,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] src_8_read;
input  [7:0] src_9_read;
input  [7:0] src_10_read;
input  [7:0] src_11_read;
input  [7:0] src_12_read;
input  [7:0] src_13_read;
input  [7:0] src_14_read;
input  [7:0] src_15_read;
output  [7:0] rk_address0;
output   rk_ce0;
input  [7:0] rk_q0;
output  [7:0] rk_address1;
output   rk_ce1;
input  [7:0] rk_q1;
input  [7:0] rk_offset;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] rk_address0;
reg rk_ce0;
reg[7:0] rk_address1;
reg rk_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_subdone;
reg   [7:0] clefia_s1_address0;
reg    clefia_s1_ce0;
wire   [7:0] clefia_s1_q0;
reg   [7:0] clefia_s0_address0;
reg    clefia_s0_ce0;
wire   [7:0] clefia_s0_q0;
reg   [7:0] reg_183;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] reg_187;
reg   [7:0] rk_offset_read_reg_901;
reg   [7:0] src_15_read_1_reg_917;
reg   [7:0] src_15_read_1_reg_917_pp0_iter1_reg;
reg   [7:0] src_14_read_1_reg_922;
reg   [7:0] src_14_read_1_reg_922_pp0_iter1_reg;
reg   [7:0] src_13_read_1_reg_927;
reg   [7:0] src_13_read_1_reg_927_pp0_iter1_reg;
reg   [7:0] src_12_read_1_reg_932;
reg   [7:0] src_12_read_1_reg_932_pp0_iter1_reg;
reg   [7:0] src_11_read_1_reg_937;
reg   [7:0] src_11_read_1_reg_937_pp0_iter1_reg;
reg   [7:0] src_10_read_1_reg_943;
reg   [7:0] src_10_read_1_reg_943_pp0_iter1_reg;
reg   [7:0] src_9_read_1_reg_949;
reg   [7:0] src_9_read_1_reg_949_pp0_iter1_reg;
reg   [7:0] src_8_read_1_reg_955;
reg   [7:0] src_8_read_1_reg_955_pp0_iter1_reg;
reg   [7:0] z_reg_981;
reg   [7:0] z_1_reg_986;
wire   [6:0] trunc_ln134_2_fu_373_p1;
reg   [6:0] trunc_ln134_2_reg_1001;
reg   [0:0] tmp_12_reg_1006;
wire   [6:0] trunc_ln134_9_fu_491_p1;
reg   [6:0] trunc_ln134_9_reg_1011;
reg   [0:0] tmp_26_reg_1016;
wire   [7:0] xor_ln124_44_fu_503_p2;
reg   [7:0] xor_ln124_44_reg_1021;
reg   [7:0] z_2_reg_1027;
reg   [7:0] z_3_reg_1032;
wire   [7:0] x_assign_s_fu_543_p3;
reg   [7:0] x_assign_s_reg_1037;
wire   [7:0] x_assign_1_fu_585_p3;
reg   [7:0] x_assign_1_reg_1043;
wire   [6:0] trunc_ln134_6_fu_657_p1;
reg   [6:0] trunc_ln134_6_reg_1049;
reg   [0:0] tmp_20_reg_1054;
wire   [6:0] trunc_ln134_11_fu_733_p1;
reg   [6:0] trunc_ln134_11_reg_1059;
reg   [0:0] tmp_30_reg_1064;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [7:0] ap_port_reg_src_8_read;
reg   [7:0] ap_port_reg_src_9_read;
reg   [7:0] ap_port_reg_src_10_read;
reg   [7:0] ap_port_reg_src_11_read;
reg   [7:0] ap_port_reg_src_12_read;
reg   [7:0] ap_port_reg_src_13_read;
reg   [7:0] ap_port_reg_src_14_read;
reg   [7:0] ap_port_reg_src_15_read;
wire   [63:0] zext_ln121_fu_191_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln124_fu_202_p1;
wire   [63:0] zext_ln124_30_fu_212_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln124_31_fu_222_p1;
wire   [63:0] zext_ln173_fu_237_p1;
wire   [63:0] zext_ln174_fu_242_p1;
wire   [63:0] zext_ln175_fu_257_p1;
wire   [63:0] zext_ln176_fu_262_p1;
wire   [7:0] add_ln124_fu_196_p2;
wire   [7:0] add_ln124_27_fu_207_p2;
wire   [7:0] add_ln124_28_fu_217_p2;
wire   [7:0] xor_ln124_fu_227_p2;
wire   [7:0] xor_ln124_31_fu_232_p2;
wire   [7:0] xor_ln124_32_fu_247_p2;
wire   [7:0] xor_ln124_33_fu_252_p2;
wire   [0:0] tmp_fu_267_p3;
wire   [7:0] xor_ln132_fu_275_p2;
wire   [7:0] select_ln131_fu_281_p3;
wire   [6:0] trunc_ln134_fu_289_p1;
wire   [0:0] tmp_8_fu_293_p3;
wire   [7:0] x_assign_3_fu_301_p3;
wire   [0:0] tmp_9_fu_309_p3;
wire   [7:0] xor_ln132_1_fu_317_p2;
wire   [7:0] select_ln131_1_fu_323_p3;
wire   [6:0] trunc_ln134_1_fu_331_p1;
wire   [0:0] tmp_10_fu_335_p3;
wire   [7:0] x_assign_6_fu_343_p3;
wire   [0:0] tmp_11_fu_351_p3;
wire   [7:0] xor_ln132_2_fu_359_p2;
wire   [7:0] select_ln131_2_fu_365_p3;
wire   [0:0] tmp_21_fu_385_p3;
wire   [7:0] xor_ln132_7_fu_393_p2;
wire   [7:0] select_ln131_7_fu_399_p3;
wire   [6:0] trunc_ln134_7_fu_407_p1;
wire   [0:0] tmp_22_fu_411_p3;
wire   [7:0] x_assign_4_fu_419_p3;
wire   [0:0] tmp_23_fu_427_p3;
wire   [7:0] xor_ln132_8_fu_435_p2;
wire   [7:0] select_ln131_8_fu_441_p3;
wire   [6:0] trunc_ln134_8_fu_449_p1;
wire   [0:0] tmp_24_fu_453_p3;
wire   [7:0] x_assign_5_fu_461_p3;
wire   [0:0] tmp_25_fu_469_p3;
wire   [7:0] xor_ln132_9_fu_477_p2;
wire   [7:0] select_ln131_9_fu_483_p3;
wire   [0:0] tmp_13_fu_509_p3;
wire   [7:0] xor_ln132_3_fu_517_p2;
wire   [7:0] select_ln131_3_fu_523_p3;
wire   [6:0] trunc_ln134_3_fu_531_p1;
wire   [0:0] tmp_14_fu_535_p3;
wire   [0:0] tmp_15_fu_551_p3;
wire   [7:0] xor_ln132_4_fu_559_p2;
wire   [7:0] select_ln131_4_fu_565_p3;
wire   [6:0] trunc_ln134_4_fu_573_p1;
wire   [0:0] tmp_16_fu_577_p3;
wire   [0:0] tmp_17_fu_593_p3;
wire   [7:0] xor_ln132_5_fu_601_p2;
wire   [7:0] select_ln131_5_fu_607_p3;
wire   [6:0] trunc_ln134_5_fu_615_p1;
wire   [0:0] tmp_18_fu_619_p3;
wire   [7:0] x_assign_2_fu_627_p3;
wire   [0:0] tmp_19_fu_635_p3;
wire   [7:0] xor_ln132_6_fu_643_p2;
wire   [7:0] select_ln131_6_fu_649_p3;
wire   [0:0] tmp_27_fu_669_p3;
wire   [7:0] xor_ln132_10_fu_677_p2;
wire   [7:0] select_ln131_10_fu_683_p3;
wire   [6:0] trunc_ln134_10_fu_691_p1;
wire   [0:0] tmp_28_fu_695_p3;
wire   [7:0] x_assign_7_fu_703_p3;
wire   [0:0] tmp_29_fu_711_p3;
wire   [7:0] xor_ln132_11_fu_719_p2;
wire   [7:0] select_ln131_11_fu_725_p3;
wire   [7:0] xor_ln124_34_fu_769_p2;
wire   [7:0] or_ln_fu_745_p3;
wire   [7:0] or_ln134_4_fu_751_p3;
wire   [7:0] xor_ln124_36_fu_778_p2;
wire   [7:0] xor_ln124_37_fu_784_p2;
wire   [7:0] xor_ln124_35_fu_773_p2;
wire   [7:0] xor_ln124_39_fu_795_p2;
wire   [7:0] or_ln134_7_fu_757_p3;
wire   [7:0] or_ln134_9_fu_763_p3;
wire   [7:0] xor_ln124_41_fu_804_p2;
wire   [7:0] xor_ln124_42_fu_810_p2;
wire   [7:0] xor_ln124_40_fu_799_p2;
wire   [7:0] xor_ln124_46_fu_825_p2;
wire   [7:0] xor_ln124_45_fu_821_p2;
wire   [7:0] xor_ln124_49_fu_840_p2;
wire   [7:0] xor_ln124_50_fu_845_p2;
wire   [7:0] xor_ln124_48_fu_836_p2;
wire   [7:0] xor_ln124_38_fu_789_p2;
wire   [7:0] xor_ln124_43_fu_815_p2;
wire   [7:0] xor_ln124_47_fu_830_p2;
wire   [7:0] xor_ln124_51_fu_851_p2;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s1_address0),
    .ce0(clefia_s1_ce0),
    .q0(clefia_s1_q0)
);

clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s0_address0),
    .ce0(clefia_s0_ce0),
    .q0(clefia_s0_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_port_reg_src_10_read <= src_10_read;
        ap_port_reg_src_11_read <= src_11_read;
        ap_port_reg_src_12_read <= src_12_read;
        ap_port_reg_src_13_read <= src_13_read;
        ap_port_reg_src_14_read <= src_14_read;
        ap_port_reg_src_15_read <= src_15_read;
        ap_port_reg_src_8_read <= src_8_read;
        ap_port_reg_src_9_read <= src_9_read;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_183 <= rk_q1;
        reg_187 <= rk_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rk_offset_read_reg_901 <= rk_offset;
        tmp_20_reg_1054 <= select_ln131_6_fu_649_p3[32'd7];
        tmp_30_reg_1064 <= select_ln131_11_fu_725_p3[32'd7];
        trunc_ln134_11_reg_1059 <= trunc_ln134_11_fu_733_p1;
        trunc_ln134_6_reg_1049 <= trunc_ln134_6_fu_657_p1;
        x_assign_1_reg_1043 <= x_assign_1_fu_585_p3;
        x_assign_s_reg_1037 <= x_assign_s_fu_543_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        src_10_read_1_reg_943 <= ap_port_reg_src_10_read;
        src_10_read_1_reg_943_pp0_iter1_reg <= src_10_read_1_reg_943;
        src_11_read_1_reg_937 <= ap_port_reg_src_11_read;
        src_11_read_1_reg_937_pp0_iter1_reg <= src_11_read_1_reg_937;
        src_12_read_1_reg_932 <= ap_port_reg_src_12_read;
        src_12_read_1_reg_932_pp0_iter1_reg <= src_12_read_1_reg_932;
        src_13_read_1_reg_927 <= ap_port_reg_src_13_read;
        src_13_read_1_reg_927_pp0_iter1_reg <= src_13_read_1_reg_927;
        src_14_read_1_reg_922 <= ap_port_reg_src_14_read;
        src_14_read_1_reg_922_pp0_iter1_reg <= src_14_read_1_reg_922;
        src_15_read_1_reg_917 <= ap_port_reg_src_15_read;
        src_15_read_1_reg_917_pp0_iter1_reg <= src_15_read_1_reg_917;
        src_8_read_1_reg_955 <= ap_port_reg_src_8_read;
        src_8_read_1_reg_955_pp0_iter1_reg <= src_8_read_1_reg_955;
        src_9_read_1_reg_949 <= ap_port_reg_src_9_read;
        src_9_read_1_reg_949_pp0_iter1_reg <= src_9_read_1_reg_949;
        tmp_12_reg_1006 <= select_ln131_2_fu_365_p3[32'd7];
        tmp_26_reg_1016 <= select_ln131_9_fu_483_p3[32'd7];
        trunc_ln134_2_reg_1001 <= trunc_ln134_2_fu_373_p1;
        trunc_ln134_9_reg_1011 <= trunc_ln134_9_fu_491_p1;
        xor_ln124_44_reg_1021 <= xor_ln124_44_fu_503_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        z_1_reg_986 <= clefia_s0_q0;
        z_reg_981 <= clefia_s1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_2_reg_1027 <= clefia_s1_q0;
        z_3_reg_1032 <= clefia_s0_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            clefia_s0_address0 = zext_ln176_fu_262_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            clefia_s0_address0 = zext_ln174_fu_242_p1;
        end else begin
            clefia_s0_address0 = 'bx;
        end
    end else begin
        clefia_s0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        clefia_s0_ce0 = 1'b1;
    end else begin
        clefia_s0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            clefia_s1_address0 = zext_ln175_fu_257_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            clefia_s1_address0 = zext_ln173_fu_237_p1;
        end else begin
            clefia_s1_address0 = 'bx;
        end
    end else begin
        clefia_s1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        clefia_s1_ce0 = 1'b1;
    end else begin
        clefia_s1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            rk_address0 = zext_ln124_31_fu_222_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            rk_address0 = zext_ln124_fu_202_p1;
        end else begin
            rk_address0 = 'bx;
        end
    end else begin
        rk_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            rk_address1 = zext_ln124_30_fu_212_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            rk_address1 = zext_ln121_fu_191_p1;
        end else begin
            rk_address1 = 'bx;
        end
    end else begin
        rk_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        rk_ce0 = 1'b1;
    end else begin
        rk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        rk_ce1 = 1'b1;
    end else begin
        rk_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln124_27_fu_207_p2 = (rk_offset_read_reg_901 + 8'd2);

assign add_ln124_28_fu_217_p2 = (rk_offset_read_reg_901 + 8'd3);

assign add_ln124_fu_196_p2 = (rk_offset + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = src_8_read_1_reg_955_pp0_iter1_reg;

assign ap_return_1 = src_9_read_1_reg_949_pp0_iter1_reg;

assign ap_return_2 = src_10_read_1_reg_943_pp0_iter1_reg;

assign ap_return_3 = src_11_read_1_reg_937_pp0_iter1_reg;

assign ap_return_4 = xor_ln124_38_fu_789_p2;

assign ap_return_5 = xor_ln124_43_fu_815_p2;

assign ap_return_6 = xor_ln124_47_fu_830_p2;

assign ap_return_7 = xor_ln124_51_fu_851_p2;

assign or_ln134_4_fu_751_p3 = {{trunc_ln134_6_reg_1049}, {tmp_20_reg_1054}};

assign or_ln134_7_fu_757_p3 = {{trunc_ln134_9_reg_1011}, {tmp_26_reg_1016}};

assign or_ln134_9_fu_763_p3 = {{trunc_ln134_11_reg_1059}, {tmp_30_reg_1064}};

assign or_ln_fu_745_p3 = {{trunc_ln134_2_reg_1001}, {tmp_12_reg_1006}};

assign select_ln131_10_fu_683_p3 = ((tmp_27_fu_669_p3[0:0] == 1'b1) ? xor_ln132_10_fu_677_p2 : x_assign_s_fu_543_p3);

assign select_ln131_11_fu_725_p3 = ((tmp_29_fu_711_p3[0:0] == 1'b1) ? xor_ln132_11_fu_719_p2 : x_assign_7_fu_703_p3);

assign select_ln131_1_fu_323_p3 = ((tmp_9_fu_309_p3[0:0] == 1'b1) ? xor_ln132_1_fu_317_p2 : x_assign_3_fu_301_p3);

assign select_ln131_2_fu_365_p3 = ((tmp_11_fu_351_p3[0:0] == 1'b1) ? xor_ln132_2_fu_359_p2 : x_assign_6_fu_343_p3);

assign select_ln131_3_fu_523_p3 = ((tmp_13_fu_509_p3[0:0] == 1'b1) ? xor_ln132_3_fu_517_p2 : clefia_s1_q0);

assign select_ln131_4_fu_565_p3 = ((tmp_15_fu_551_p3[0:0] == 1'b1) ? xor_ln132_4_fu_559_p2 : clefia_s0_q0);

assign select_ln131_5_fu_607_p3 = ((tmp_17_fu_593_p3[0:0] == 1'b1) ? xor_ln132_5_fu_601_p2 : x_assign_1_fu_585_p3);

assign select_ln131_6_fu_649_p3 = ((tmp_19_fu_635_p3[0:0] == 1'b1) ? xor_ln132_6_fu_643_p2 : x_assign_2_fu_627_p3);

assign select_ln131_7_fu_399_p3 = ((tmp_21_fu_385_p3[0:0] == 1'b1) ? xor_ln132_7_fu_393_p2 : clefia_s1_q0);

assign select_ln131_8_fu_441_p3 = ((tmp_23_fu_427_p3[0:0] == 1'b1) ? xor_ln132_8_fu_435_p2 : x_assign_4_fu_419_p3);

assign select_ln131_9_fu_483_p3 = ((tmp_25_fu_469_p3[0:0] == 1'b1) ? xor_ln132_9_fu_477_p2 : x_assign_5_fu_461_p3);

assign select_ln131_fu_281_p3 = ((tmp_fu_267_p3[0:0] == 1'b1) ? xor_ln132_fu_275_p2 : clefia_s0_q0);

assign tmp_10_fu_335_p3 = select_ln131_1_fu_323_p3[32'd7];

assign tmp_11_fu_351_p3 = select_ln131_1_fu_323_p3[32'd6];

assign tmp_13_fu_509_p3 = clefia_s1_q0[32'd7];

assign tmp_14_fu_535_p3 = select_ln131_3_fu_523_p3[32'd7];

assign tmp_15_fu_551_p3 = clefia_s0_q0[32'd7];

assign tmp_16_fu_577_p3 = select_ln131_4_fu_565_p3[32'd7];

assign tmp_17_fu_593_p3 = select_ln131_4_fu_565_p3[32'd6];

assign tmp_18_fu_619_p3 = select_ln131_5_fu_607_p3[32'd7];

assign tmp_19_fu_635_p3 = select_ln131_5_fu_607_p3[32'd6];

assign tmp_21_fu_385_p3 = clefia_s1_q0[32'd7];

assign tmp_22_fu_411_p3 = select_ln131_7_fu_399_p3[32'd7];

assign tmp_23_fu_427_p3 = select_ln131_7_fu_399_p3[32'd6];

assign tmp_24_fu_453_p3 = select_ln131_8_fu_441_p3[32'd7];

assign tmp_25_fu_469_p3 = select_ln131_8_fu_441_p3[32'd6];

assign tmp_27_fu_669_p3 = select_ln131_3_fu_523_p3[32'd6];

assign tmp_28_fu_695_p3 = select_ln131_10_fu_683_p3[32'd7];

assign tmp_29_fu_711_p3 = select_ln131_10_fu_683_p3[32'd6];

assign tmp_8_fu_293_p3 = select_ln131_fu_281_p3[32'd7];

assign tmp_9_fu_309_p3 = select_ln131_fu_281_p3[32'd6];

assign tmp_fu_267_p3 = clefia_s0_q0[32'd7];

assign trunc_ln134_10_fu_691_p1 = select_ln131_10_fu_683_p3[6:0];

assign trunc_ln134_11_fu_733_p1 = select_ln131_11_fu_725_p3[6:0];

assign trunc_ln134_1_fu_331_p1 = select_ln131_1_fu_323_p3[6:0];

assign trunc_ln134_2_fu_373_p1 = select_ln131_2_fu_365_p3[6:0];

assign trunc_ln134_3_fu_531_p1 = select_ln131_3_fu_523_p3[6:0];

assign trunc_ln134_4_fu_573_p1 = select_ln131_4_fu_565_p3[6:0];

assign trunc_ln134_5_fu_615_p1 = select_ln131_5_fu_607_p3[6:0];

assign trunc_ln134_6_fu_657_p1 = select_ln131_6_fu_649_p3[6:0];

assign trunc_ln134_7_fu_407_p1 = select_ln131_7_fu_399_p3[6:0];

assign trunc_ln134_8_fu_449_p1 = select_ln131_8_fu_441_p3[6:0];

assign trunc_ln134_9_fu_491_p1 = select_ln131_9_fu_483_p3[6:0];

assign trunc_ln134_fu_289_p1 = select_ln131_fu_281_p3[6:0];

assign x_assign_1_fu_585_p3 = {{trunc_ln134_4_fu_573_p1}, {tmp_16_fu_577_p3}};

assign x_assign_2_fu_627_p3 = {{trunc_ln134_5_fu_615_p1}, {tmp_18_fu_619_p3}};

assign x_assign_3_fu_301_p3 = {{trunc_ln134_fu_289_p1}, {tmp_8_fu_293_p3}};

assign x_assign_4_fu_419_p3 = {{trunc_ln134_7_fu_407_p1}, {tmp_22_fu_411_p3}};

assign x_assign_5_fu_461_p3 = {{trunc_ln134_8_fu_449_p1}, {tmp_24_fu_453_p3}};

assign x_assign_6_fu_343_p3 = {{trunc_ln134_1_fu_331_p1}, {tmp_10_fu_335_p3}};

assign x_assign_7_fu_703_p3 = {{trunc_ln134_10_fu_691_p1}, {tmp_28_fu_695_p3}};

assign x_assign_s_fu_543_p3 = {{trunc_ln134_3_fu_531_p1}, {tmp_14_fu_535_p3}};

assign xor_ln124_31_fu_232_p2 = (src_9_read_1_reg_949 ^ reg_187);

assign xor_ln124_32_fu_247_p2 = (src_10_read_1_reg_943 ^ reg_183);

assign xor_ln124_33_fu_252_p2 = (src_11_read_1_reg_937 ^ reg_187);

assign xor_ln124_34_fu_769_p2 = (x_assign_s_reg_1037 ^ src_12_read_1_reg_932_pp0_iter1_reg);

assign xor_ln124_35_fu_773_p2 = (z_reg_981 ^ xor_ln124_34_fu_769_p2);

assign xor_ln124_36_fu_778_p2 = (or_ln_fu_745_p3 ^ or_ln134_4_fu_751_p3);

assign xor_ln124_37_fu_784_p2 = (xor_ln124_36_fu_778_p2 ^ x_assign_1_reg_1043);

assign xor_ln124_38_fu_789_p2 = (xor_ln124_37_fu_784_p2 ^ xor_ln124_35_fu_773_p2);

assign xor_ln124_39_fu_795_p2 = (x_assign_s_reg_1037 ^ x_assign_1_reg_1043);

assign xor_ln124_40_fu_799_p2 = (z_1_reg_986 ^ xor_ln124_39_fu_795_p2);

assign xor_ln124_41_fu_804_p2 = (or_ln134_9_fu_763_p3 ^ or_ln134_7_fu_757_p3);

assign xor_ln124_42_fu_810_p2 = (xor_ln124_41_fu_804_p2 ^ src_13_read_1_reg_927_pp0_iter1_reg);

assign xor_ln124_43_fu_815_p2 = (xor_ln124_42_fu_810_p2 ^ xor_ln124_40_fu_799_p2);

assign xor_ln124_44_fu_503_p2 = (x_assign_4_fu_419_p3 ^ x_assign_3_fu_301_p3);

assign xor_ln124_45_fu_821_p2 = (z_2_reg_1027 ^ xor_ln124_44_reg_1021);

assign xor_ln124_46_fu_825_p2 = (xor_ln124_36_fu_778_p2 ^ src_14_read_1_reg_922_pp0_iter1_reg);

assign xor_ln124_47_fu_830_p2 = (xor_ln124_46_fu_825_p2 ^ xor_ln124_45_fu_821_p2);

assign xor_ln124_48_fu_836_p2 = (z_3_reg_1032 ^ xor_ln124_44_reg_1021);

assign xor_ln124_49_fu_840_p2 = (src_15_read_1_reg_917_pp0_iter1_reg ^ or_ln134_9_fu_763_p3);

assign xor_ln124_50_fu_845_p2 = (xor_ln124_49_fu_840_p2 ^ or_ln134_7_fu_757_p3);

assign xor_ln124_51_fu_851_p2 = (xor_ln124_50_fu_845_p2 ^ xor_ln124_48_fu_836_p2);

assign xor_ln124_fu_227_p2 = (src_8_read_1_reg_955 ^ reg_183);

assign xor_ln132_10_fu_677_p2 = (x_assign_s_fu_543_p3 ^ 8'd14);

assign xor_ln132_11_fu_719_p2 = (x_assign_7_fu_703_p3 ^ 8'd14);

assign xor_ln132_1_fu_317_p2 = (x_assign_3_fu_301_p3 ^ 8'd14);

assign xor_ln132_2_fu_359_p2 = (x_assign_6_fu_343_p3 ^ 8'd14);

assign xor_ln132_3_fu_517_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_4_fu_559_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_5_fu_601_p2 = (x_assign_1_fu_585_p3 ^ 8'd14);

assign xor_ln132_6_fu_643_p2 = (x_assign_2_fu_627_p3 ^ 8'd14);

assign xor_ln132_7_fu_393_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_8_fu_435_p2 = (x_assign_4_fu_419_p3 ^ 8'd14);

assign xor_ln132_9_fu_477_p2 = (x_assign_5_fu_461_p3 ^ 8'd14);

assign xor_ln132_fu_275_p2 = (clefia_s0_q0 ^ 8'd14);

assign zext_ln121_fu_191_p1 = rk_offset;

assign zext_ln124_30_fu_212_p1 = add_ln124_27_fu_207_p2;

assign zext_ln124_31_fu_222_p1 = add_ln124_28_fu_217_p2;

assign zext_ln124_fu_202_p1 = add_ln124_fu_196_p2;

assign zext_ln173_fu_237_p1 = xor_ln124_fu_227_p2;

assign zext_ln174_fu_242_p1 = xor_ln124_31_fu_232_p2;

assign zext_ln175_fu_257_p1 = xor_ln124_32_fu_247_p2;

assign zext_ln176_fu_262_p1 = xor_ln124_33_fu_252_p2;

endmodule //clefia_ClefiaF1Xor_3
