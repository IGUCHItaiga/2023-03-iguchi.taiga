// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clefia_ClefiaDoubleSwap_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        lk_address0,
        lk_ce0,
        lk_we0,
        lk_d0,
        lk_q0,
        lk_address1,
        lk_ce1,
        lk_we1,
        lk_d1,
        lk_q1,
        lk_offset,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] lk_address0;
output   lk_ce0;
output   lk_we0;
output  [7:0] lk_d0;
input  [7:0] lk_q0;
output  [4:0] lk_address1;
output   lk_ce1;
output   lk_we1;
output  [7:0] lk_d1;
input  [7:0] lk_q1;
input  [4:0] lk_offset;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] lk_address0;
reg lk_ce0;
reg lk_we0;
reg[7:0] lk_d0;
reg[4:0] lk_address1;
reg lk_ce1;
reg lk_we1;
reg[7:0] lk_d1;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] lk_offset_read_reg_561;
reg   [4:0] lk_addr_reg_579;
reg   [4:0] lk_addr_63_reg_584;
wire   [0:0] trunc_ln246_fu_245_p1;
reg   [0:0] trunc_ln246_reg_589;
wire    ap_CS_fsm_state2;
reg   [6:0] lshr_ln_reg_594;
wire   [0:0] trunc_ln247_fu_249_p1;
reg   [0:0] trunc_ln247_reg_599;
reg   [4:0] lk_addr_64_reg_604;
reg   [4:0] lk_addr_65_reg_609;
reg   [6:0] tmp_s_reg_614;
reg   [6:0] lshr_ln1_reg_619;
wire    ap_CS_fsm_state3;
wire   [0:0] trunc_ln248_fu_273_p1;
reg   [0:0] trunc_ln248_reg_624;
reg   [6:0] lshr_ln2_reg_629;
wire   [0:0] trunc_ln249_fu_277_p1;
reg   [0:0] trunc_ln249_reg_634;
reg   [4:0] lk_addr_66_reg_639;
reg   [4:0] lk_addr_67_reg_644;
reg   [6:0] lshr_ln3_reg_649;
wire    ap_CS_fsm_state4;
wire   [0:0] trunc_ln250_fu_301_p1;
reg   [0:0] trunc_ln250_reg_654;
reg   [6:0] lshr_ln4_reg_659;
wire   [0:0] trunc_ln251_fu_305_p1;
reg   [0:0] trunc_ln251_reg_664;
reg   [4:0] lk_addr_68_reg_669;
reg   [4:0] lk_addr_69_reg_674;
reg   [6:0] lshr_ln5_reg_679;
wire    ap_CS_fsm_state5;
wire   [0:0] trunc_ln252_fu_329_p1;
reg   [0:0] trunc_ln252_reg_684;
reg   [6:0] lshr_ln6_reg_689;
reg   [4:0] lk_addr_70_reg_694;
wire   [0:0] trunc_ln253_1_fu_343_p1;
reg   [0:0] trunc_ln253_1_reg_700;
reg   [4:0] lk_addr_71_reg_705;
wire   [6:0] trunc_ln253_fu_357_p1;
reg   [6:0] trunc_ln253_reg_711;
wire    ap_CS_fsm_state6;
reg   [0:0] tmp_reg_716;
reg   [4:0] lk_addr_72_reg_721;
wire   [6:0] trunc_ln256_fu_371_p1;
reg   [6:0] trunc_ln256_reg_727;
reg   [4:0] lk_addr_73_reg_732;
reg   [0:0] tmp_166_reg_738;
reg   [0:0] tmp_160_reg_743;
wire    ap_CS_fsm_state7;
reg   [0:0] tmp_161_reg_748;
wire   [6:0] trunc_ln257_fu_385_p1;
reg   [6:0] trunc_ln257_reg_753;
reg   [4:0] lk_addr_74_reg_758;
wire   [6:0] trunc_ln258_fu_399_p1;
reg   [6:0] trunc_ln258_reg_764;
reg   [4:0] lk_addr_75_reg_769;
reg   [0:0] tmp_162_reg_775;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_163_reg_780;
wire   [6:0] trunc_ln259_fu_413_p1;
reg   [6:0] trunc_ln259_reg_785;
reg   [4:0] lk_addr_76_reg_790;
wire   [6:0] trunc_ln260_fu_427_p1;
reg   [6:0] trunc_ln260_reg_796;
reg   [4:0] lk_addr_77_reg_801;
reg   [0:0] tmp_164_reg_807;
wire    ap_CS_fsm_state9;
reg   [0:0] tmp_165_reg_812;
wire   [6:0] trunc_ln261_fu_455_p1;
reg   [6:0] trunc_ln261_reg_817;
wire   [6:0] trunc_ln262_fu_459_p1;
reg   [6:0] trunc_ln262_reg_822;
wire   [63:0] lk_offset_cast_fu_229_p1;
wire   [63:0] zext_ln246_fu_240_p1;
wire   [63:0] zext_ln247_fu_258_p1;
wire   [63:0] zext_ln248_fu_268_p1;
wire   [63:0] zext_ln249_fu_286_p1;
wire   [63:0] zext_ln250_fu_296_p1;
wire   [63:0] zext_ln251_fu_314_p1;
wire   [63:0] zext_ln252_fu_324_p1;
wire   [63:0] zext_ln253_fu_338_p1;
wire   [63:0] zext_ln255_fu_352_p1;
wire   [63:0] zext_ln256_fu_366_p1;
wire   [63:0] zext_ln257_fu_380_p1;
wire   [63:0] zext_ln258_fu_394_p1;
wire   [63:0] zext_ln259_fu_408_p1;
wire   [63:0] zext_ln260_fu_422_p1;
wire   [63:0] zext_ln261_fu_436_p1;
wire   [7:0] t_fu_441_p3;
wire   [7:0] t_31_fu_448_p3;
wire    ap_CS_fsm_state10;
wire   [7:0] t_32_fu_463_p3;
wire   [7:0] t_33_fu_470_p3;
wire    ap_CS_fsm_state11;
wire   [7:0] t_34_fu_477_p3;
wire   [7:0] t_35_fu_484_p3;
wire    ap_CS_fsm_state12;
wire   [7:0] t_36_fu_491_p3;
wire   [7:0] t_37_fu_498_p3;
wire    ap_CS_fsm_state13;
wire   [7:0] t_38_fu_505_p3;
wire   [7:0] t_39_fu_512_p3;
wire    ap_CS_fsm_state14;
wire   [7:0] t_40_fu_519_p3;
wire   [7:0] t_41_fu_526_p3;
wire    ap_CS_fsm_state15;
wire   [7:0] t_42_fu_533_p3;
wire   [7:0] t_43_fu_540_p3;
wire    ap_CS_fsm_state16;
wire   [7:0] t_44_fu_547_p3;
wire   [7:0] t_45_fu_554_p3;
wire   [4:0] add_ln246_fu_234_p2;
wire   [4:0] add_ln247_fu_253_p2;
wire   [4:0] add_ln248_fu_263_p2;
wire   [4:0] add_ln249_fu_281_p2;
wire   [4:0] add_ln250_fu_291_p2;
wire   [4:0] add_ln251_fu_309_p2;
wire   [4:0] add_ln252_fu_319_p2;
wire   [4:0] add_ln253_fu_333_p2;
wire   [4:0] add_ln255_fu_347_p2;
wire   [4:0] add_ln256_fu_361_p2;
wire   [4:0] add_ln257_fu_375_p2;
wire   [4:0] add_ln258_fu_389_p2;
wire   [4:0] add_ln259_fu_403_p2;
wire   [4:0] add_ln260_fu_417_p2;
wire   [4:0] add_ln261_fu_431_p2;
reg   [15:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        lk_addr_63_reg_584 <= zext_ln246_fu_240_p1;
        lk_addr_reg_579 <= lk_offset_cast_fu_229_p1;
        lk_offset_read_reg_561 <= lk_offset;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lk_addr_64_reg_604 <= zext_ln247_fu_258_p1;
        lk_addr_65_reg_609 <= zext_ln248_fu_268_p1;
        lshr_ln_reg_594 <= {{lk_q0[7:1]}};
        tmp_s_reg_614 <= {{lk_q1[7:1]}};
        trunc_ln246_reg_589 <= trunc_ln246_fu_245_p1;
        trunc_ln247_reg_599 <= trunc_ln247_fu_249_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        lk_addr_66_reg_639 <= zext_ln249_fu_286_p1;
        lk_addr_67_reg_644 <= zext_ln250_fu_296_p1;
        lshr_ln1_reg_619 <= {{lk_q1[7:1]}};
        lshr_ln2_reg_629 <= {{lk_q0[7:1]}};
        trunc_ln248_reg_624 <= trunc_ln248_fu_273_p1;
        trunc_ln249_reg_634 <= trunc_ln249_fu_277_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        lk_addr_68_reg_669 <= zext_ln251_fu_314_p1;
        lk_addr_69_reg_674 <= zext_ln252_fu_324_p1;
        lshr_ln3_reg_649 <= {{lk_q1[7:1]}};
        lshr_ln4_reg_659 <= {{lk_q0[7:1]}};
        trunc_ln250_reg_654 <= trunc_ln250_fu_301_p1;
        trunc_ln251_reg_664 <= trunc_ln251_fu_305_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        lk_addr_70_reg_694 <= zext_ln253_fu_338_p1;
        lk_addr_71_reg_705 <= zext_ln255_fu_352_p1;
        lshr_ln5_reg_679 <= {{lk_q1[7:1]}};
        lshr_ln6_reg_689 <= {{lk_q0[7:1]}};
        trunc_ln252_reg_684 <= trunc_ln252_fu_329_p1;
        trunc_ln253_1_reg_700 <= trunc_ln253_1_fu_343_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        lk_addr_72_reg_721 <= zext_ln256_fu_366_p1;
        lk_addr_73_reg_732 <= zext_ln257_fu_380_p1;
        tmp_166_reg_738 <= lk_q1[32'd7];
        tmp_reg_716 <= lk_q0[32'd7];
        trunc_ln253_reg_711 <= trunc_ln253_fu_357_p1;
        trunc_ln256_reg_727 <= trunc_ln256_fu_371_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        lk_addr_74_reg_758 <= zext_ln258_fu_394_p1;
        lk_addr_75_reg_769 <= zext_ln259_fu_408_p1;
        tmp_160_reg_743 <= lk_q1[32'd7];
        tmp_161_reg_748 <= lk_q0[32'd7];
        trunc_ln257_reg_753 <= trunc_ln257_fu_385_p1;
        trunc_ln258_reg_764 <= trunc_ln258_fu_399_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        lk_addr_76_reg_790 <= zext_ln260_fu_422_p1;
        lk_addr_77_reg_801 <= zext_ln261_fu_436_p1;
        tmp_162_reg_775 <= lk_q1[32'd7];
        tmp_163_reg_780 <= lk_q0[32'd7];
        trunc_ln259_reg_785 <= trunc_ln259_fu_413_p1;
        trunc_ln260_reg_796 <= trunc_ln260_fu_427_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_164_reg_807 <= lk_q1[32'd7];
        tmp_165_reg_812 <= lk_q0[32'd7];
        trunc_ln261_reg_817 <= trunc_ln261_fu_455_p1;
        trunc_ln262_reg_822 <= trunc_ln262_fu_459_p1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_ce) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state16)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        lk_address0 = lk_addr_70_reg_694;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        lk_address0 = lk_addr_76_reg_790;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        lk_address0 = lk_addr_74_reg_758;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        lk_address0 = lk_addr_72_reg_721;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        lk_address0 = lk_addr_69_reg_674;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        lk_address0 = lk_addr_67_reg_644;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        lk_address0 = lk_addr_65_reg_609;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        lk_address0 = lk_addr_63_reg_584;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        lk_address0 = zext_ln261_fu_436_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        lk_address0 = zext_ln259_fu_408_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        lk_address0 = zext_ln257_fu_380_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        lk_address0 = zext_ln255_fu_352_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        lk_address0 = zext_ln252_fu_324_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lk_address0 = zext_ln250_fu_296_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        lk_address0 = zext_ln248_fu_268_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        lk_address0 = zext_ln246_fu_240_p1;
    end else begin
        lk_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        lk_address1 = lk_addr_77_reg_801;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        lk_address1 = lk_addr_75_reg_769;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        lk_address1 = lk_addr_73_reg_732;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        lk_address1 = lk_addr_71_reg_705;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        lk_address1 = lk_addr_68_reg_669;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        lk_address1 = lk_addr_66_reg_639;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        lk_address1 = lk_addr_64_reg_604;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        lk_address1 = lk_addr_reg_579;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        lk_address1 = zext_ln260_fu_422_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        lk_address1 = zext_ln258_fu_394_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        lk_address1 = zext_ln256_fu_366_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        lk_address1 = zext_ln253_fu_338_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        lk_address1 = zext_ln251_fu_314_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lk_address1 = zext_ln249_fu_286_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        lk_address1 = zext_ln247_fu_258_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        lk_address1 = lk_offset_cast_fu_229_p1;
    end else begin
        lk_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state5)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        lk_ce0 = 1'b1;
    end else begin
        lk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state5)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        lk_ce1 = 1'b1;
    end else begin
        lk_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        lk_d0 = t_45_fu_554_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        lk_d0 = t_43_fu_540_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        lk_d0 = t_41_fu_526_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        lk_d0 = t_39_fu_512_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        lk_d0 = t_37_fu_498_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        lk_d0 = t_35_fu_484_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        lk_d0 = t_33_fu_470_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        lk_d0 = t_31_fu_448_p3;
    end else begin
        lk_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        lk_d1 = t_44_fu_547_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        lk_d1 = t_42_fu_533_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        lk_d1 = t_40_fu_519_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        lk_d1 = t_38_fu_505_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        lk_d1 = t_36_fu_491_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        lk_d1 = t_34_fu_477_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        lk_d1 = t_32_fu_463_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        lk_d1 = t_fu_441_p3;
    end else begin
        lk_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9)))) begin
        lk_we0 = 1'b1;
    end else begin
        lk_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9)))) begin
        lk_we1 = 1'b1;
    end else begin
        lk_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln246_fu_234_p2 = (lk_offset + 5'd1);

assign add_ln247_fu_253_p2 = (lk_offset_read_reg_561 + 5'd2);

assign add_ln248_fu_263_p2 = (lk_offset_read_reg_561 + 5'd3);

assign add_ln249_fu_281_p2 = (lk_offset_read_reg_561 + 5'd4);

assign add_ln250_fu_291_p2 = (lk_offset_read_reg_561 + 5'd5);

assign add_ln251_fu_309_p2 = (lk_offset_read_reg_561 + 5'd6);

assign add_ln252_fu_319_p2 = (lk_offset_read_reg_561 + 5'd7);

assign add_ln253_fu_333_p2 = (lk_offset_read_reg_561 + 5'd15);

assign add_ln255_fu_347_p2 = (lk_offset_read_reg_561 + 5'd8);

assign add_ln256_fu_361_p2 = (lk_offset_read_reg_561 + 5'd9);

assign add_ln257_fu_375_p2 = (lk_offset_read_reg_561 + 5'd10);

assign add_ln258_fu_389_p2 = (lk_offset_read_reg_561 + 5'd11);

assign add_ln259_fu_403_p2 = (lk_offset_read_reg_561 + 5'd12);

assign add_ln260_fu_417_p2 = (lk_offset_read_reg_561 + 5'd13);

assign add_ln261_fu_431_p2 = (lk_offset_read_reg_561 + 5'd14);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign lk_offset_cast_fu_229_p1 = lk_offset;

assign t_31_fu_448_p3 = {{trunc_ln247_reg_599}, {lshr_ln1_reg_619}};

assign t_32_fu_463_p3 = {{trunc_ln248_reg_624}, {lshr_ln2_reg_629}};

assign t_33_fu_470_p3 = {{trunc_ln249_reg_634}, {lshr_ln3_reg_649}};

assign t_34_fu_477_p3 = {{trunc_ln250_reg_654}, {lshr_ln4_reg_659}};

assign t_35_fu_484_p3 = {{trunc_ln251_reg_664}, {lshr_ln5_reg_679}};

assign t_36_fu_491_p3 = {{trunc_ln252_reg_684}, {lshr_ln6_reg_689}};

assign t_37_fu_498_p3 = {{trunc_ln253_1_reg_700}, {trunc_ln253_reg_711}};

assign t_38_fu_505_p3 = {{tmp_s_reg_614}, {tmp_reg_716}};

assign t_39_fu_512_p3 = {{trunc_ln256_reg_727}, {tmp_160_reg_743}};

assign t_40_fu_519_p3 = {{trunc_ln257_reg_753}, {tmp_161_reg_748}};

assign t_41_fu_526_p3 = {{trunc_ln258_reg_764}, {tmp_162_reg_775}};

assign t_42_fu_533_p3 = {{trunc_ln259_reg_785}, {tmp_163_reg_780}};

assign t_43_fu_540_p3 = {{trunc_ln260_reg_796}, {tmp_164_reg_807}};

assign t_44_fu_547_p3 = {{trunc_ln261_reg_817}, {tmp_165_reg_812}};

assign t_45_fu_554_p3 = {{trunc_ln262_reg_822}, {tmp_166_reg_738}};

assign t_fu_441_p3 = {{trunc_ln246_reg_589}, {lshr_ln_reg_594}};

assign trunc_ln246_fu_245_p1 = lk_q1[0:0];

assign trunc_ln247_fu_249_p1 = lk_q0[0:0];

assign trunc_ln248_fu_273_p1 = lk_q1[0:0];

assign trunc_ln249_fu_277_p1 = lk_q0[0:0];

assign trunc_ln250_fu_301_p1 = lk_q1[0:0];

assign trunc_ln251_fu_305_p1 = lk_q0[0:0];

assign trunc_ln252_fu_329_p1 = lk_q1[0:0];

assign trunc_ln253_1_fu_343_p1 = lk_q0[0:0];

assign trunc_ln253_fu_357_p1 = lk_q1[6:0];

assign trunc_ln256_fu_371_p1 = lk_q0[6:0];

assign trunc_ln257_fu_385_p1 = lk_q1[6:0];

assign trunc_ln258_fu_399_p1 = lk_q0[6:0];

assign trunc_ln259_fu_413_p1 = lk_q1[6:0];

assign trunc_ln260_fu_427_p1 = lk_q0[6:0];

assign trunc_ln261_fu_455_p1 = lk_q1[6:0];

assign trunc_ln262_fu_459_p1 = lk_q0[6:0];

assign zext_ln246_fu_240_p1 = add_ln246_fu_234_p2;

assign zext_ln247_fu_258_p1 = add_ln247_fu_253_p2;

assign zext_ln248_fu_268_p1 = add_ln248_fu_263_p2;

assign zext_ln249_fu_286_p1 = add_ln249_fu_281_p2;

assign zext_ln250_fu_296_p1 = add_ln250_fu_291_p2;

assign zext_ln251_fu_314_p1 = add_ln251_fu_309_p2;

assign zext_ln252_fu_324_p1 = add_ln252_fu_319_p2;

assign zext_ln253_fu_338_p1 = add_ln253_fu_333_p2;

assign zext_ln255_fu_352_p1 = add_ln255_fu_347_p2;

assign zext_ln256_fu_366_p1 = add_ln256_fu_361_p2;

assign zext_ln257_fu_380_p1 = add_ln257_fu_375_p2;

assign zext_ln258_fu_394_p1 = add_ln258_fu_389_p2;

assign zext_ln259_fu_408_p1 = add_ln259_fu_403_p2;

assign zext_ln260_fu_422_p1 = add_ln260_fu_417_p2;

assign zext_ln261_fu_436_p1 = add_ln261_fu_431_p2;

endmodule //clefia_ClefiaDoubleSwap_1
