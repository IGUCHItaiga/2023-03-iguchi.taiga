-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clefia_ClefiaF1Xor_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_8_read : IN STD_LOGIC_VECTOR (7 downto 0);
    src_9_read : IN STD_LOGIC_VECTOR (7 downto 0);
    src_10_read : IN STD_LOGIC_VECTOR (7 downto 0);
    src_11_read : IN STD_LOGIC_VECTOR (7 downto 0);
    src_12_read : IN STD_LOGIC_VECTOR (7 downto 0);
    src_13_read : IN STD_LOGIC_VECTOR (7 downto 0);
    src_14_read : IN STD_LOGIC_VECTOR (7 downto 0);
    src_15_read : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce0 : OUT STD_LOGIC;
    rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce1 : OUT STD_LOGIC;
    rk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_offset : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of clefia_ClefiaF1Xor_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal clefia_s1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_ce0 : STD_LOGIC;
    signal clefia_s1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_ce0 : STD_LOGIC;
    signal clefia_s0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_183 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_187 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_offset_read_reg_901 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_15_read_1_reg_917 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_15_read_1_reg_917_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_14_read_1_reg_922 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_14_read_1_reg_922_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_13_read_1_reg_927 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_13_read_1_reg_927_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_12_read_1_reg_932 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_12_read_1_reg_932_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_11_read_1_reg_937 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_11_read_1_reg_937_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_10_read_1_reg_943 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_10_read_1_reg_943_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_9_read_1_reg_949 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_9_read_1_reg_949_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_8_read_1_reg_955 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_8_read_1_reg_955_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal z_reg_981 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_1_reg_986 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_2_fu_373_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_2_reg_1001 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_reg_1006 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln134_9_fu_491_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_9_reg_1011 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_26_reg_1016 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln124_44_fu_503_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_44_reg_1021 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_2_reg_1027 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_3_reg_1032 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_s_fu_543_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_s_reg_1037 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_1_fu_585_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_1_reg_1043 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_6_fu_657_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_6_reg_1049 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_reg_1054 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln134_11_fu_733_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_11_reg_1059 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_30_reg_1064 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_port_reg_src_8_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_src_9_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_src_10_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_src_11_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_src_12_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_src_13_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_src_14_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_src_15_read : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln121_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln124_fu_202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_30_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln124_31_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_fu_257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln124_fu_196_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_27_fu_207_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_28_fu_217_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_fu_227_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_31_fu_232_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_32_fu_247_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_33_fu_252_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_267_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_fu_275_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_fu_281_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_fu_289_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_293_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_3_fu_301_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_309_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_1_fu_317_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_1_fu_323_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_1_fu_331_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_335_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_6_fu_343_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_351_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_2_fu_359_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_2_fu_365_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_385_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_7_fu_393_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_7_fu_399_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_7_fu_407_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_22_fu_411_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_4_fu_419_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_427_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_8_fu_435_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_8_fu_441_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_8_fu_449_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_fu_453_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_5_fu_461_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_469_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_9_fu_477_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_9_fu_483_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_509_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_3_fu_517_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_3_fu_523_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_3_fu_531_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_14_fu_535_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_551_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_4_fu_559_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_4_fu_565_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_4_fu_573_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_16_fu_577_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_593_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_5_fu_601_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_5_fu_607_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_5_fu_615_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_fu_619_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_2_fu_627_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_635_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_6_fu_643_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_6_fu_649_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_669_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_10_fu_677_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_10_fu_683_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_10_fu_691_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_28_fu_695_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_7_fu_703_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_711_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_11_fu_719_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_11_fu_725_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_34_fu_769_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_fu_745_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_4_fu_751_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_36_fu_778_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_37_fu_784_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_35_fu_773_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_39_fu_795_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_7_fu_757_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_9_fu_763_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_41_fu_804_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_42_fu_810_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_40_fu_799_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_46_fu_825_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_45_fu_821_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_49_fu_840_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_50_fu_845_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_48_fu_836_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_38_fu_789_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_43_fu_815_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_47_fu_830_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_51_fu_851_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    clefia_s1_U : component clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s1_address0,
        ce0 => clefia_s1_ce0,
        q0 => clefia_s1_q0);

    clefia_s0_U : component clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s0_address0,
        ce0 => clefia_s0_ce0,
        q0 => clefia_s0_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_port_reg_src_10_read <= src_10_read;
                ap_port_reg_src_11_read <= src_11_read;
                ap_port_reg_src_12_read <= src_12_read;
                ap_port_reg_src_13_read <= src_13_read;
                ap_port_reg_src_14_read <= src_14_read;
                ap_port_reg_src_15_read <= src_15_read;
                ap_port_reg_src_8_read <= src_8_read;
                ap_port_reg_src_9_read <= src_9_read;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                reg_183 <= rk_q1;
                reg_187 <= rk_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                rk_offset_read_reg_901 <= rk_offset;
                tmp_20_reg_1054 <= select_ln131_6_fu_649_p3(7 downto 7);
                tmp_30_reg_1064 <= select_ln131_11_fu_725_p3(7 downto 7);
                trunc_ln134_11_reg_1059 <= trunc_ln134_11_fu_733_p1;
                trunc_ln134_6_reg_1049 <= trunc_ln134_6_fu_657_p1;
                x_assign_1_reg_1043 <= x_assign_1_fu_585_p3;
                x_assign_s_reg_1037 <= x_assign_s_fu_543_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                src_10_read_1_reg_943 <= ap_port_reg_src_10_read;
                src_10_read_1_reg_943_pp0_iter1_reg <= src_10_read_1_reg_943;
                src_11_read_1_reg_937 <= ap_port_reg_src_11_read;
                src_11_read_1_reg_937_pp0_iter1_reg <= src_11_read_1_reg_937;
                src_12_read_1_reg_932 <= ap_port_reg_src_12_read;
                src_12_read_1_reg_932_pp0_iter1_reg <= src_12_read_1_reg_932;
                src_13_read_1_reg_927 <= ap_port_reg_src_13_read;
                src_13_read_1_reg_927_pp0_iter1_reg <= src_13_read_1_reg_927;
                src_14_read_1_reg_922 <= ap_port_reg_src_14_read;
                src_14_read_1_reg_922_pp0_iter1_reg <= src_14_read_1_reg_922;
                src_15_read_1_reg_917 <= ap_port_reg_src_15_read;
                src_15_read_1_reg_917_pp0_iter1_reg <= src_15_read_1_reg_917;
                src_8_read_1_reg_955 <= ap_port_reg_src_8_read;
                src_8_read_1_reg_955_pp0_iter1_reg <= src_8_read_1_reg_955;
                src_9_read_1_reg_949 <= ap_port_reg_src_9_read;
                src_9_read_1_reg_949_pp0_iter1_reg <= src_9_read_1_reg_949;
                tmp_12_reg_1006 <= select_ln131_2_fu_365_p3(7 downto 7);
                tmp_26_reg_1016 <= select_ln131_9_fu_483_p3(7 downto 7);
                trunc_ln134_2_reg_1001 <= trunc_ln134_2_fu_373_p1;
                trunc_ln134_9_reg_1011 <= trunc_ln134_9_fu_491_p1;
                xor_ln124_44_reg_1021 <= xor_ln124_44_fu_503_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                z_1_reg_986 <= clefia_s0_q0;
                z_reg_981 <= clefia_s1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                z_2_reg_1027 <= clefia_s1_q0;
                z_3_reg_1032 <= clefia_s0_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln124_27_fu_207_p2 <= std_logic_vector(unsigned(rk_offset_read_reg_901) + unsigned(ap_const_lv8_2));
    add_ln124_28_fu_217_p2 <= std_logic_vector(unsigned(rk_offset_read_reg_901) + unsigned(ap_const_lv8_3));
    add_ln124_fu_196_p2 <= std_logic_vector(unsigned(rk_offset) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= src_8_read_1_reg_955_pp0_iter1_reg;
    ap_return_1 <= src_9_read_1_reg_949_pp0_iter1_reg;
    ap_return_2 <= src_10_read_1_reg_943_pp0_iter1_reg;
    ap_return_3 <= src_11_read_1_reg_937_pp0_iter1_reg;
    ap_return_4 <= xor_ln124_38_fu_789_p2;
    ap_return_5 <= xor_ln124_43_fu_815_p2;
    ap_return_6 <= xor_ln124_47_fu_830_p2;
    ap_return_7 <= xor_ln124_51_fu_851_p2;

    clefia_s0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln174_fu_242_p1, zext_ln176_fu_262_p1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                clefia_s0_address0 <= zext_ln176_fu_262_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                clefia_s0_address0 <= zext_ln174_fu_242_p1(8 - 1 downto 0);
            else 
                clefia_s0_address0 <= "XXXXXXXX";
            end if;
        else 
            clefia_s0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            clefia_s0_ce0 <= ap_const_logic_1;
        else 
            clefia_s0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln173_fu_237_p1, zext_ln175_fu_257_p1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                clefia_s1_address0 <= zext_ln175_fu_257_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                clefia_s1_address0 <= zext_ln173_fu_237_p1(8 - 1 downto 0);
            else 
                clefia_s1_address0 <= "XXXXXXXX";
            end if;
        else 
            clefia_s1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            clefia_s1_ce0 <= ap_const_logic_1;
        else 
            clefia_s1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln134_4_fu_751_p3 <= (trunc_ln134_6_reg_1049 & tmp_20_reg_1054);
    or_ln134_7_fu_757_p3 <= (trunc_ln134_9_reg_1011 & tmp_26_reg_1016);
    or_ln134_9_fu_763_p3 <= (trunc_ln134_11_reg_1059 & tmp_30_reg_1064);
    or_ln_fu_745_p3 <= (trunc_ln134_2_reg_1001 & tmp_12_reg_1006);

    rk_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln124_fu_202_p1, ap_block_pp0_stage1, zext_ln124_31_fu_222_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                rk_address0 <= zext_ln124_31_fu_222_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                rk_address0 <= zext_ln124_fu_202_p1(8 - 1 downto 0);
            else 
                rk_address0 <= "XXXXXXXX";
            end if;
        else 
            rk_address0 <= "XXXXXXXX";
        end if; 
    end process;


    rk_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, zext_ln121_fu_191_p1, ap_block_pp0_stage0, zext_ln124_30_fu_212_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                rk_address1 <= zext_ln124_30_fu_212_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                rk_address1 <= zext_ln121_fu_191_p1(8 - 1 downto 0);
            else 
                rk_address1 <= "XXXXXXXX";
            end if;
        else 
            rk_address1 <= "XXXXXXXX";
        end if; 
    end process;


    rk_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            rk_ce0 <= ap_const_logic_1;
        else 
            rk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rk_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            rk_ce1 <= ap_const_logic_1;
        else 
            rk_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln131_10_fu_683_p3 <= 
        xor_ln132_10_fu_677_p2 when (tmp_27_fu_669_p3(0) = '1') else 
        x_assign_s_fu_543_p3;
    select_ln131_11_fu_725_p3 <= 
        xor_ln132_11_fu_719_p2 when (tmp_29_fu_711_p3(0) = '1') else 
        x_assign_7_fu_703_p3;
    select_ln131_1_fu_323_p3 <= 
        xor_ln132_1_fu_317_p2 when (tmp_9_fu_309_p3(0) = '1') else 
        x_assign_3_fu_301_p3;
    select_ln131_2_fu_365_p3 <= 
        xor_ln132_2_fu_359_p2 when (tmp_11_fu_351_p3(0) = '1') else 
        x_assign_6_fu_343_p3;
    select_ln131_3_fu_523_p3 <= 
        xor_ln132_3_fu_517_p2 when (tmp_13_fu_509_p3(0) = '1') else 
        clefia_s1_q0;
    select_ln131_4_fu_565_p3 <= 
        xor_ln132_4_fu_559_p2 when (tmp_15_fu_551_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_5_fu_607_p3 <= 
        xor_ln132_5_fu_601_p2 when (tmp_17_fu_593_p3(0) = '1') else 
        x_assign_1_fu_585_p3;
    select_ln131_6_fu_649_p3 <= 
        xor_ln132_6_fu_643_p2 when (tmp_19_fu_635_p3(0) = '1') else 
        x_assign_2_fu_627_p3;
    select_ln131_7_fu_399_p3 <= 
        xor_ln132_7_fu_393_p2 when (tmp_21_fu_385_p3(0) = '1') else 
        clefia_s1_q0;
    select_ln131_8_fu_441_p3 <= 
        xor_ln132_8_fu_435_p2 when (tmp_23_fu_427_p3(0) = '1') else 
        x_assign_4_fu_419_p3;
    select_ln131_9_fu_483_p3 <= 
        xor_ln132_9_fu_477_p2 when (tmp_25_fu_469_p3(0) = '1') else 
        x_assign_5_fu_461_p3;
    select_ln131_fu_281_p3 <= 
        xor_ln132_fu_275_p2 when (tmp_fu_267_p3(0) = '1') else 
        clefia_s0_q0;
    tmp_10_fu_335_p3 <= select_ln131_1_fu_323_p3(7 downto 7);
    tmp_11_fu_351_p3 <= select_ln131_1_fu_323_p3(6 downto 6);
    tmp_13_fu_509_p3 <= clefia_s1_q0(7 downto 7);
    tmp_14_fu_535_p3 <= select_ln131_3_fu_523_p3(7 downto 7);
    tmp_15_fu_551_p3 <= clefia_s0_q0(7 downto 7);
    tmp_16_fu_577_p3 <= select_ln131_4_fu_565_p3(7 downto 7);
    tmp_17_fu_593_p3 <= select_ln131_4_fu_565_p3(6 downto 6);
    tmp_18_fu_619_p3 <= select_ln131_5_fu_607_p3(7 downto 7);
    tmp_19_fu_635_p3 <= select_ln131_5_fu_607_p3(6 downto 6);
    tmp_21_fu_385_p3 <= clefia_s1_q0(7 downto 7);
    tmp_22_fu_411_p3 <= select_ln131_7_fu_399_p3(7 downto 7);
    tmp_23_fu_427_p3 <= select_ln131_7_fu_399_p3(6 downto 6);
    tmp_24_fu_453_p3 <= select_ln131_8_fu_441_p3(7 downto 7);
    tmp_25_fu_469_p3 <= select_ln131_8_fu_441_p3(6 downto 6);
    tmp_27_fu_669_p3 <= select_ln131_3_fu_523_p3(6 downto 6);
    tmp_28_fu_695_p3 <= select_ln131_10_fu_683_p3(7 downto 7);
    tmp_29_fu_711_p3 <= select_ln131_10_fu_683_p3(6 downto 6);
    tmp_8_fu_293_p3 <= select_ln131_fu_281_p3(7 downto 7);
    tmp_9_fu_309_p3 <= select_ln131_fu_281_p3(6 downto 6);
    tmp_fu_267_p3 <= clefia_s0_q0(7 downto 7);
    trunc_ln134_10_fu_691_p1 <= select_ln131_10_fu_683_p3(7 - 1 downto 0);
    trunc_ln134_11_fu_733_p1 <= select_ln131_11_fu_725_p3(7 - 1 downto 0);
    trunc_ln134_1_fu_331_p1 <= select_ln131_1_fu_323_p3(7 - 1 downto 0);
    trunc_ln134_2_fu_373_p1 <= select_ln131_2_fu_365_p3(7 - 1 downto 0);
    trunc_ln134_3_fu_531_p1 <= select_ln131_3_fu_523_p3(7 - 1 downto 0);
    trunc_ln134_4_fu_573_p1 <= select_ln131_4_fu_565_p3(7 - 1 downto 0);
    trunc_ln134_5_fu_615_p1 <= select_ln131_5_fu_607_p3(7 - 1 downto 0);
    trunc_ln134_6_fu_657_p1 <= select_ln131_6_fu_649_p3(7 - 1 downto 0);
    trunc_ln134_7_fu_407_p1 <= select_ln131_7_fu_399_p3(7 - 1 downto 0);
    trunc_ln134_8_fu_449_p1 <= select_ln131_8_fu_441_p3(7 - 1 downto 0);
    trunc_ln134_9_fu_491_p1 <= select_ln131_9_fu_483_p3(7 - 1 downto 0);
    trunc_ln134_fu_289_p1 <= select_ln131_fu_281_p3(7 - 1 downto 0);
    x_assign_1_fu_585_p3 <= (trunc_ln134_4_fu_573_p1 & tmp_16_fu_577_p3);
    x_assign_2_fu_627_p3 <= (trunc_ln134_5_fu_615_p1 & tmp_18_fu_619_p3);
    x_assign_3_fu_301_p3 <= (trunc_ln134_fu_289_p1 & tmp_8_fu_293_p3);
    x_assign_4_fu_419_p3 <= (trunc_ln134_7_fu_407_p1 & tmp_22_fu_411_p3);
    x_assign_5_fu_461_p3 <= (trunc_ln134_8_fu_449_p1 & tmp_24_fu_453_p3);
    x_assign_6_fu_343_p3 <= (trunc_ln134_1_fu_331_p1 & tmp_10_fu_335_p3);
    x_assign_7_fu_703_p3 <= (trunc_ln134_10_fu_691_p1 & tmp_28_fu_695_p3);
    x_assign_s_fu_543_p3 <= (trunc_ln134_3_fu_531_p1 & tmp_14_fu_535_p3);
    xor_ln124_31_fu_232_p2 <= (src_9_read_1_reg_949 xor reg_187);
    xor_ln124_32_fu_247_p2 <= (src_10_read_1_reg_943 xor reg_183);
    xor_ln124_33_fu_252_p2 <= (src_11_read_1_reg_937 xor reg_187);
    xor_ln124_34_fu_769_p2 <= (x_assign_s_reg_1037 xor src_12_read_1_reg_932_pp0_iter1_reg);
    xor_ln124_35_fu_773_p2 <= (z_reg_981 xor xor_ln124_34_fu_769_p2);
    xor_ln124_36_fu_778_p2 <= (or_ln_fu_745_p3 xor or_ln134_4_fu_751_p3);
    xor_ln124_37_fu_784_p2 <= (xor_ln124_36_fu_778_p2 xor x_assign_1_reg_1043);
    xor_ln124_38_fu_789_p2 <= (xor_ln124_37_fu_784_p2 xor xor_ln124_35_fu_773_p2);
    xor_ln124_39_fu_795_p2 <= (x_assign_s_reg_1037 xor x_assign_1_reg_1043);
    xor_ln124_40_fu_799_p2 <= (z_1_reg_986 xor xor_ln124_39_fu_795_p2);
    xor_ln124_41_fu_804_p2 <= (or_ln134_9_fu_763_p3 xor or_ln134_7_fu_757_p3);
    xor_ln124_42_fu_810_p2 <= (xor_ln124_41_fu_804_p2 xor src_13_read_1_reg_927_pp0_iter1_reg);
    xor_ln124_43_fu_815_p2 <= (xor_ln124_42_fu_810_p2 xor xor_ln124_40_fu_799_p2);
    xor_ln124_44_fu_503_p2 <= (x_assign_4_fu_419_p3 xor x_assign_3_fu_301_p3);
    xor_ln124_45_fu_821_p2 <= (z_2_reg_1027 xor xor_ln124_44_reg_1021);
    xor_ln124_46_fu_825_p2 <= (xor_ln124_36_fu_778_p2 xor src_14_read_1_reg_922_pp0_iter1_reg);
    xor_ln124_47_fu_830_p2 <= (xor_ln124_46_fu_825_p2 xor xor_ln124_45_fu_821_p2);
    xor_ln124_48_fu_836_p2 <= (z_3_reg_1032 xor xor_ln124_44_reg_1021);
    xor_ln124_49_fu_840_p2 <= (src_15_read_1_reg_917_pp0_iter1_reg xor or_ln134_9_fu_763_p3);
    xor_ln124_50_fu_845_p2 <= (xor_ln124_49_fu_840_p2 xor or_ln134_7_fu_757_p3);
    xor_ln124_51_fu_851_p2 <= (xor_ln124_50_fu_845_p2 xor xor_ln124_48_fu_836_p2);
    xor_ln124_fu_227_p2 <= (src_8_read_1_reg_955 xor reg_183);
    xor_ln132_10_fu_677_p2 <= (x_assign_s_fu_543_p3 xor ap_const_lv8_E);
    xor_ln132_11_fu_719_p2 <= (x_assign_7_fu_703_p3 xor ap_const_lv8_E);
    xor_ln132_1_fu_317_p2 <= (x_assign_3_fu_301_p3 xor ap_const_lv8_E);
    xor_ln132_2_fu_359_p2 <= (x_assign_6_fu_343_p3 xor ap_const_lv8_E);
    xor_ln132_3_fu_517_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln132_4_fu_559_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_5_fu_601_p2 <= (x_assign_1_fu_585_p3 xor ap_const_lv8_E);
    xor_ln132_6_fu_643_p2 <= (x_assign_2_fu_627_p3 xor ap_const_lv8_E);
    xor_ln132_7_fu_393_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln132_8_fu_435_p2 <= (x_assign_4_fu_419_p3 xor ap_const_lv8_E);
    xor_ln132_9_fu_477_p2 <= (x_assign_5_fu_461_p3 xor ap_const_lv8_E);
    xor_ln132_fu_275_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    zext_ln121_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rk_offset),64));
    zext_ln124_30_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_27_fu_207_p2),64));
    zext_ln124_31_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_28_fu_217_p2),64));
    zext_ln124_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_fu_196_p2),64));
    zext_ln173_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_fu_227_p2),64));
    zext_ln174_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_31_fu_232_p2),64));
    zext_ln175_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_32_fu_247_p2),64));
    zext_ln176_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_33_fu_252_p2),64));
end behav;
