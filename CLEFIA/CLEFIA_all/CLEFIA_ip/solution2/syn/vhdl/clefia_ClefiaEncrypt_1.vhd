-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clefia_ClefiaEncrypt_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Clefia_enc_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Clefia_enc_ce0 : OUT STD_LOGIC;
    Clefia_enc_we0 : OUT STD_LOGIC;
    Clefia_enc_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pt_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pt_ce0 : OUT STD_LOGIC;
    pt_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce0 : OUT STD_LOGIC;
    rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce1 : OUT STD_LOGIC;
    rk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    r : IN STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of clefia_ClefiaEncrypt_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (33 downto 0) := "0000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (33 downto 0) := "0000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (33 downto 0) := "0000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (33 downto 0) := "0000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (33 downto 0) := "0000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (33 downto 0) := "0000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (33 downto 0) := "0001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (33 downto 0) := "0010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (33 downto 0) := "0100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (33 downto 0) := "1000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_831 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reg_836 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal rin_reg_1179 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal rin_16_reg_1189 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal rin_17_reg_1199 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal rin_18_reg_1209 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal pt_load_2_reg_1229 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal pt_load_3_reg_1239 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal rin_19_reg_1249 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal rin_20_reg_1259 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal rin_21_reg_1274 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_23_fu_840_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_23_reg_1294 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_24_fu_846_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_24_reg_1304 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_25_fu_852_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_25_reg_1319 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_26_fu_857_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_26_reg_1324 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal rin_27_fu_862_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_27_reg_1344 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_28_fu_868_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_28_reg_1354 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal rin_29_fu_874_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_29_reg_1369 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_load_31_reg_1374 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal rin_30_fu_880_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_30_reg_1385 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln193_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln193_reg_1390 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_941_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_1439 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal xor_ln124_fu_970_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_reg_1459 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal xor_ln124_45_fu_986_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_45_reg_1469 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_46_fu_1002_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_46_reg_1479 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal xor_ln124_47_fu_1008_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_47_reg_1484 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_48_fu_1034_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_48_reg_1499 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal xor_ln124_49_fu_1050_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_49_reg_1509 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_50_fu_1066_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_50_reg_1519 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal xor_ln124_51_fu_1072_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_51_reg_1524 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_ap_start : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_ap_done : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_ap_idle : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_ap_ready : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_rk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_rk_ce0 : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_rk_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_rk_ce1 : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_12_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_12_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_13_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_13_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_14_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_14_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_15_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_15_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_0_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_0_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_1_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_1_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_2_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_2_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_3_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_3_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_4_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_4_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_5_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_5_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_6_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_6_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_7_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_7_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_8_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_8_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_9_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_9_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_10_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_10_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_11_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_11_out_ap_vld : STD_LOGIC;
    signal ap_phi_mux_fout_0_1_phi_fu_607_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_0_1_reg_603 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_5_1_reg_615 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_4_1_reg_626 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_1_1_reg_637 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_7_1_reg_649 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_6_1_reg_660 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_2_1_reg_671 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_13_1_reg_683 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_12_1_reg_694 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_3_1_reg_705 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_15_1_reg_717 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_14_1_reg_728 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_8_1_reg_739 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_9_1_reg_751 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_10_1_reg_763 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_11_1_reg_775 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal fin_4_loc_fu_118 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_5_loc_fu_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_6_loc_fu_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_7_loc_fu_106 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_8_loc_fu_102 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_9_loc_fu_98 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_10_loc_fu_94 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_11_loc_fu_90 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln422_fu_954_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_fu_965_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_82_fu_981_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_83_fu_997_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln423_fu_1019_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_84_fu_1029_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_85_fu_1045_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_86_fu_1061_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal add_ln422_fu_948_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_fu_959_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_79_fu_976_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_80_fu_992_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln423_fu_1014_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_81_fu_1024_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_82_fu_1040_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_83_fu_1056_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clefia_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rin_30 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin_29 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin_28 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin_27 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin_22 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin_21 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin_20 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin_19 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin_26 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin_25 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin_24 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin_23 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin_18 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin_17 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin_16 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin : IN STD_LOGIC_VECTOR (7 downto 0);
        r_cast2 : IN STD_LOGIC_VECTOR (4 downto 0);
        rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce0 : OUT STD_LOGIC;
        rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce1 : OUT STD_LOGIC;
        rk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        fin_12_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_12_out_ap_vld : OUT STD_LOGIC;
        fin_13_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_13_out_ap_vld : OUT STD_LOGIC;
        fin_14_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_14_out_ap_vld : OUT STD_LOGIC;
        fin_15_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_15_out_ap_vld : OUT STD_LOGIC;
        fin_0_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_0_out_ap_vld : OUT STD_LOGIC;
        fin_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_1_out_ap_vld : OUT STD_LOGIC;
        fin_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_2_out_ap_vld : OUT STD_LOGIC;
        fin_3_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_3_out_ap_vld : OUT STD_LOGIC;
        fin_4_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_4_out_ap_vld : OUT STD_LOGIC;
        fin_5_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_5_out_ap_vld : OUT STD_LOGIC;
        fin_6_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_6_out_ap_vld : OUT STD_LOGIC;
        fin_7_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_7_out_ap_vld : OUT STD_LOGIC;
        fin_8_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_8_out_ap_vld : OUT STD_LOGIC;
        fin_9_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_9_out_ap_vld : OUT STD_LOGIC;
        fin_10_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_10_out_ap_vld : OUT STD_LOGIC;
        fin_11_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_11_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787 : component clefia_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_ap_start,
        ap_done => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_ap_done,
        ap_idle => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_ap_idle,
        ap_ready => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_ap_ready,
        rin_30 => rin_30_reg_1385,
        rin_29 => rin_29_reg_1369,
        rin_28 => rin_28_reg_1354,
        rin_27 => rin_27_reg_1344,
        rin_22 => reg_831,
        rin_21 => rin_21_reg_1274,
        rin_20 => rin_20_reg_1259,
        rin_19 => rin_19_reg_1249,
        rin_26 => rin_26_reg_1324,
        rin_25 => rin_25_reg_1319,
        rin_24 => rin_24_reg_1304,
        rin_23 => rin_23_reg_1294,
        rin_18 => rin_18_reg_1209,
        rin_17 => rin_17_reg_1199,
        rin_16 => rin_16_reg_1189,
        rin => rin_reg_1179,
        r_cast2 => r,
        rk_address0 => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_rk_address0,
        rk_ce0 => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_rk_ce0,
        rk_q0 => rk_q0,
        rk_address1 => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_rk_address1,
        rk_ce1 => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_rk_ce1,
        rk_q1 => rk_q1,
        fin_12_out => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_12_out,
        fin_12_out_ap_vld => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_12_out_ap_vld,
        fin_13_out => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_13_out,
        fin_13_out_ap_vld => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_13_out_ap_vld,
        fin_14_out => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_14_out,
        fin_14_out_ap_vld => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_14_out_ap_vld,
        fin_15_out => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_15_out,
        fin_15_out_ap_vld => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_15_out_ap_vld,
        fin_0_out => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_0_out,
        fin_0_out_ap_vld => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_0_out_ap_vld,
        fin_1_out => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_1_out,
        fin_1_out_ap_vld => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_1_out_ap_vld,
        fin_2_out => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_2_out,
        fin_2_out_ap_vld => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_2_out_ap_vld,
        fin_3_out => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_3_out,
        fin_3_out_ap_vld => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_3_out_ap_vld,
        fin_4_out => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_4_out,
        fin_4_out_ap_vld => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_4_out_ap_vld,
        fin_5_out => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_5_out,
        fin_5_out_ap_vld => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_5_out_ap_vld,
        fin_6_out => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_6_out,
        fin_6_out_ap_vld => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_6_out_ap_vld,
        fin_7_out => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_7_out,
        fin_7_out_ap_vld => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_7_out_ap_vld,
        fin_8_out => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_8_out,
        fin_8_out_ap_vld => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_8_out_ap_vld,
        fin_9_out => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_9_out,
        fin_9_out_ap_vld => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_9_out_ap_vld,
        fin_10_out => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_10_out,
        fin_10_out_ap_vld => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_10_out_ap_vld,
        fin_11_out => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_11_out,
        fin_11_out_ap_vld => grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_11_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln193_fu_886_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                    grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_ap_ready = ap_const_logic_1)) then 
                    grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_10_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                fin_10_loc_fu_94 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_10_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_11_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                fin_11_loc_fu_90 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_11_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_4_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                fin_4_loc_fu_118 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_4_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_5_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                fin_5_loc_fu_114 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_5_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_6_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                fin_6_loc_fu_110 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_6_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_7_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                fin_7_loc_fu_106 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_7_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_8_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                fin_8_loc_fu_102 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_8_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_9_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                fin_9_loc_fu_98 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_9_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln193_reg_1390 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                fout_0_1_reg_603 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_12_out;
                fout_10_1_reg_763 <= fin_6_loc_fu_110;
                fout_11_1_reg_775 <= fin_7_loc_fu_106;
                fout_12_1_reg_694 <= fin_8_loc_fu_102;
                fout_13_1_reg_683 <= fin_9_loc_fu_98;
                fout_14_1_reg_728 <= fin_10_loc_fu_94;
                fout_15_1_reg_717 <= fin_11_loc_fu_90;
                fout_1_1_reg_637 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_13_out;
                fout_2_1_reg_671 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_14_out;
                fout_3_1_reg_705 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_15_out;
                fout_4_1_reg_626 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_0_out;
                fout_5_1_reg_615 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_1_out;
                fout_6_1_reg_660 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_2_out;
                fout_7_1_reg_649 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_3_out;
                fout_8_1_reg_739 <= fin_4_loc_fu_118;
                fout_9_1_reg_751 <= fin_5_loc_fu_114;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                icmp_ln193_reg_1390 <= icmp_ln193_fu_886_p2;
                rin_30_reg_1385 <= rin_30_fu_880_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                pt_load_2_reg_1229 <= pt_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                pt_load_3_reg_1239 <= pt_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_831 <= pt_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_836 <= pt_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                rin_16_reg_1189 <= pt_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                rin_17_reg_1199 <= pt_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                rin_18_reg_1209 <= pt_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                rin_19_reg_1249 <= pt_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                rin_20_reg_1259 <= pt_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                rin_21_reg_1274 <= pt_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                rin_23_reg_1294 <= rin_23_fu_840_p2;
                rin_24_reg_1304 <= rin_24_fu_846_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                rin_25_reg_1319 <= rin_25_fu_852_p2;
                rin_26_reg_1324 <= rin_26_fu_857_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                rin_27_reg_1344 <= rin_27_fu_862_p2;
                rin_28_reg_1354 <= rin_28_fu_868_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                rin_29_reg_1369 <= rin_29_fu_874_p2;
                rk_load_31_reg_1374 <= rk_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                rin_reg_1179 <= pt_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                    shl_ln_reg_1439(7 downto 3) <= shl_ln_fu_941_p3(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                xor_ln124_45_reg_1469 <= xor_ln124_45_fu_986_p2;
                xor_ln124_reg_1459 <= xor_ln124_fu_970_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                xor_ln124_46_reg_1479 <= xor_ln124_46_fu_1002_p2;
                xor_ln124_47_reg_1484 <= xor_ln124_47_fu_1008_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                xor_ln124_48_reg_1499 <= xor_ln124_48_fu_1034_p2;
                xor_ln124_49_reg_1509 <= xor_ln124_49_fu_1050_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                xor_ln124_50_reg_1519 <= xor_ln124_50_fu_1066_p2;
                xor_ln124_51_reg_1524 <= xor_ln124_51_fu_1072_p2;
            end if;
        end if;
    end process;
    shl_ln_reg_1439(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state17, icmp_ln193_fu_886_p2, grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_ap_done, ap_CS_fsm_state18)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln193_fu_886_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Clefia_enc_address0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            Clefia_enc_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            Clefia_enc_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Clefia_enc_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            Clefia_enc_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Clefia_enc_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            Clefia_enc_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            Clefia_enc_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            Clefia_enc_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            Clefia_enc_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            Clefia_enc_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            Clefia_enc_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            Clefia_enc_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            Clefia_enc_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Clefia_enc_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            Clefia_enc_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            Clefia_enc_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            Clefia_enc_address0 <= "XXXX";
        end if; 
    end process;


    Clefia_enc_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            Clefia_enc_ce0 <= ap_const_logic_1;
        else 
            Clefia_enc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Clefia_enc_d0_assign_proc : process(ap_CS_fsm_state19, xor_ln124_reg_1459, ap_CS_fsm_state20, xor_ln124_45_reg_1469, xor_ln124_46_reg_1479, ap_CS_fsm_state21, xor_ln124_47_reg_1484, xor_ln124_48_reg_1499, ap_CS_fsm_state22, xor_ln124_49_reg_1509, xor_ln124_50_reg_1519, ap_CS_fsm_state23, xor_ln124_51_reg_1524, ap_phi_mux_fout_0_1_phi_fu_607_p4, fout_1_1_reg_637, fout_2_1_reg_671, fout_3_1_reg_705, fout_8_1_reg_739, fout_9_1_reg_751, fout_10_1_reg_763, fout_11_1_reg_775, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            Clefia_enc_d0 <= xor_ln124_51_reg_1524;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            Clefia_enc_d0 <= xor_ln124_50_reg_1519;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Clefia_enc_d0 <= xor_ln124_49_reg_1509;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            Clefia_enc_d0 <= xor_ln124_48_reg_1499;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Clefia_enc_d0 <= xor_ln124_47_reg_1484;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            Clefia_enc_d0 <= xor_ln124_46_reg_1479;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            Clefia_enc_d0 <= xor_ln124_45_reg_1469;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            Clefia_enc_d0 <= xor_ln124_reg_1459;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            Clefia_enc_d0 <= fout_11_1_reg_775;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            Clefia_enc_d0 <= fout_10_1_reg_763;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            Clefia_enc_d0 <= fout_9_1_reg_751;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            Clefia_enc_d0 <= fout_8_1_reg_739;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            Clefia_enc_d0 <= fout_3_1_reg_705;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Clefia_enc_d0 <= fout_2_1_reg_671;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            Clefia_enc_d0 <= fout_1_1_reg_637;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            Clefia_enc_d0 <= ap_phi_mux_fout_0_1_phi_fu_607_p4;
        else 
            Clefia_enc_d0 <= "XXXXXXXX";
        end if; 
    end process;


    Clefia_enc_we0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            Clefia_enc_we0 <= ap_const_logic_1;
        else 
            Clefia_enc_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln124_79_fu_976_p2 <= std_logic_vector(unsigned(shl_ln_reg_1439) + unsigned(ap_const_lv8_A));
    add_ln124_80_fu_992_p2 <= std_logic_vector(unsigned(shl_ln_reg_1439) + unsigned(ap_const_lv8_B));
    add_ln124_81_fu_1024_p2 <= std_logic_vector(unsigned(shl_ln_reg_1439) + unsigned(ap_const_lv8_D));
    add_ln124_82_fu_1040_p2 <= std_logic_vector(unsigned(shl_ln_reg_1439) + unsigned(ap_const_lv8_E));
    add_ln124_83_fu_1056_p2 <= std_logic_vector(unsigned(shl_ln_reg_1439) + unsigned(ap_const_lv8_F));
    add_ln124_fu_959_p2 <= std_logic_vector(unsigned(shl_ln_fu_941_p3) + unsigned(ap_const_lv8_9));
    add_ln422_fu_948_p2 <= std_logic_vector(unsigned(shl_ln_fu_941_p3) + unsigned(ap_const_lv8_8));
    add_ln423_fu_1014_p2 <= std_logic_vector(unsigned(shl_ln_reg_1439) + unsigned(ap_const_lv8_C));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state18_blk_assign_proc : process(grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_ap_done)
    begin
        if ((grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_fout_0_1_phi_fu_607_p4_assign_proc : process(icmp_ln193_reg_1390, ap_CS_fsm_state19, grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_12_out, fout_0_1_reg_603)
    begin
        if (((icmp_ln193_reg_1390 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_phi_mux_fout_0_1_phi_fu_607_p4 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_fin_12_out;
        else 
            ap_phi_mux_fout_0_1_phi_fu_607_p4 <= fout_0_1_reg_603;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_ap_start <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_ap_start_reg;
    icmp_ln193_fu_886_p2 <= "1" when (r = ap_const_lv5_0) else "0";

    pt_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            pt_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            pt_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            pt_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            pt_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            pt_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pt_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pt_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pt_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pt_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pt_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pt_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pt_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pt_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pt_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pt_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            pt_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            pt_address0 <= "XXXX";
        end if; 
    end process;


    pt_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            pt_ce0 <= ap_const_logic_1;
        else 
            pt_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rin_23_fu_840_p2 <= (rk_q1 xor reg_831);
    rin_24_fu_846_p2 <= (rk_q0 xor reg_836);
    rin_25_fu_852_p2 <= (rk_q1 xor pt_load_2_reg_1229);
    rin_26_fu_857_p2 <= (rk_q0 xor pt_load_3_reg_1239);
    rin_27_fu_862_p2 <= (rk_q1 xor reg_836);
    rin_28_fu_868_p2 <= (rk_q0 xor pt_q0);
    rin_29_fu_874_p2 <= (rk_q1 xor pt_q0);
    rin_30_fu_880_p2 <= (rk_load_31_reg_1374 xor pt_q0);

    rk_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_rk_address0, ap_CS_fsm_state18, zext_ln124_fu_965_p1, zext_ln124_83_fu_997_p1, zext_ln124_84_fu_1029_p1, zext_ln124_86_fu_1061_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            rk_address0 <= zext_ln124_86_fu_1061_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            rk_address0 <= zext_ln124_84_fu_1029_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            rk_address0 <= zext_ln124_83_fu_997_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            rk_address0 <= zext_ln124_fu_965_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            rk_address0 <= ap_const_lv64_7(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            rk_address0 <= ap_const_lv64_5(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            rk_address0 <= ap_const_lv64_3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            rk_address0 <= ap_const_lv64_1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rk_address0 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_rk_address0;
        else 
            rk_address0 <= "XXXXXXXX";
        end if; 
    end process;


    rk_address1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_rk_address1, ap_CS_fsm_state18, zext_ln422_fu_954_p1, zext_ln124_82_fu_981_p1, zext_ln423_fu_1019_p1, zext_ln124_85_fu_1045_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            rk_address1 <= zext_ln124_85_fu_1045_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            rk_address1 <= zext_ln423_fu_1019_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            rk_address1 <= zext_ln124_82_fu_981_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            rk_address1 <= zext_ln422_fu_954_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            rk_address1 <= ap_const_lv64_6(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            rk_address1 <= ap_const_lv64_4(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            rk_address1 <= ap_const_lv64_2(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            rk_address1 <= ap_const_lv64_0(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rk_address1 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_rk_address1;
        else 
            rk_address1 <= "XXXXXXXX";
        end if; 
    end process;


    rk_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_rk_ce0, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            rk_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rk_ce0 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_rk_ce0;
        else 
            rk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rk_ce1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_rk_ce1, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            rk_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rk_ce1 <= grp_ClefiaEncrypt_1_Pipeline_ClefiaGfn4_label3_fu_787_rk_ce1;
        else 
            rk_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_941_p3 <= (r & ap_const_lv3_0);
    xor_ln124_45_fu_986_p2 <= (rk_q0 xor fout_5_1_reg_615);
    xor_ln124_46_fu_1002_p2 <= (rk_q1 xor fout_6_1_reg_660);
    xor_ln124_47_fu_1008_p2 <= (rk_q0 xor fout_7_1_reg_649);
    xor_ln124_48_fu_1034_p2 <= (rk_q1 xor fout_12_1_reg_694);
    xor_ln124_49_fu_1050_p2 <= (rk_q0 xor fout_13_1_reg_683);
    xor_ln124_50_fu_1066_p2 <= (rk_q1 xor fout_14_1_reg_728);
    xor_ln124_51_fu_1072_p2 <= (rk_q0 xor fout_15_1_reg_717);
    xor_ln124_fu_970_p2 <= (rk_q1 xor fout_4_1_reg_626);
    zext_ln124_82_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_79_fu_976_p2),64));
    zext_ln124_83_fu_997_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_80_fu_992_p2),64));
    zext_ln124_84_fu_1029_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_81_fu_1024_p2),64));
    zext_ln124_85_fu_1045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_82_fu_1040_p2),64));
    zext_ln124_86_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_83_fu_1056_p2),64));
    zext_ln124_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_fu_959_p2),64));
    zext_ln422_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln422_fu_948_p2),64));
    zext_ln423_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln423_fu_1014_p2),64));
end behav;
