-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clefia_ClefiaDecrypt_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Clefia_dec_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Clefia_dec_ce0 : OUT STD_LOGIC;
    Clefia_dec_we0 : OUT STD_LOGIC;
    Clefia_dec_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce0 : OUT STD_LOGIC;
    rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce1 : OUT STD_LOGIC;
    rk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    r : IN STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of clefia_ClefiaDecrypt_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shl_ln_fu_817_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_1166 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_load_40_reg_1187 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal rk_load_41_reg_1197 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_load_42_reg_1207 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal rk_load_43_reg_1212 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_load_44_reg_1227 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal rk_load_45_reg_1237 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_load_46_reg_1247 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal rk_load_47_reg_1252 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal rin_fu_907_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_reg_1302 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_38_fu_913_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_38_reg_1307 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_39_fu_919_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_39_reg_1312 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_40_fu_925_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_40_reg_1317 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_41_fu_931_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_41_reg_1322 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_42_fu_937_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_42_reg_1327 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_43_fu_943_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_43_reg_1332 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_44_fu_949_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_44_reg_1337 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln230_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln230_reg_1342 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln124_fu_1009_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_reg_1391 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_ap_start : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_ap_done : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_ap_idle : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_ap_ready : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_rk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_rk_ce0 : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_rk_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_rk_ce1 : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_4_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_4_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_5_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_5_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_6_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_6_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_7_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_7_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_8_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_8_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_9_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_9_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_10_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_10_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_11_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_11_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_12_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_12_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_13_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_13_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_14_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_14_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_15_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_15_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_0_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_0_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_1_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_1_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_2_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_2_out_ap_vld : STD_LOGIC;
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_3_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_3_out_ap_vld : STD_LOGIC;
    signal ap_phi_mux_fout_0_1_phi_fu_585_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_0_1_reg_581 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal fout_4_1_reg_593 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_1_1_reg_604 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_2_1_reg_616 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_3_1_reg_628 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_8_1_reg_640 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_9_1_reg_652 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_10_1_reg_664 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_11_1_reg_676 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_5_1_reg_688 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_6_1_reg_699 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_7_1_reg_710 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_12_1_reg_721 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_13_1_reg_732 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_14_1_reg_743 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_15_1_reg_754 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal fin_12_loc_fu_150 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_13_loc_fu_146 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_14_loc_fu_142 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_15_loc_fu_138 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_0_loc_fu_134 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_1_loc_fu_130 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_2_loc_fu_126 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_3_loc_fu_122 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln432_fu_831_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_fu_842_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_87_fu_852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_88_fu_862_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln433_fu_872_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_89_fu_882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_90_fu_892_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_91_fu_902_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal xor_ln124_52_fu_1015_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_53_fu_1022_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_54_fu_1029_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_55_fu_1036_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_56_fu_1043_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_57_fu_1050_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_58_fu_1057_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln432_fu_825_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_fu_836_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_84_fu_847_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_85_fu_857_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln433_fu_867_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_86_fu_877_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_87_fu_887_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_88_fu_897_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clefia_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rin_44 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin_43 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin_42 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin_41 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin_40 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin_39 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin_38 : IN STD_LOGIC_VECTOR (7 downto 0);
        rin : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        r_cast2 : IN STD_LOGIC_VECTOR (4 downto 0);
        shl_ln : IN STD_LOGIC_VECTOR (7 downto 0);
        rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce0 : OUT STD_LOGIC;
        rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce1 : OUT STD_LOGIC;
        rk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        fin_4_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_4_out_ap_vld : OUT STD_LOGIC;
        fin_5_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_5_out_ap_vld : OUT STD_LOGIC;
        fin_6_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_6_out_ap_vld : OUT STD_LOGIC;
        fin_7_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_7_out_ap_vld : OUT STD_LOGIC;
        fin_8_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_8_out_ap_vld : OUT STD_LOGIC;
        fin_9_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_9_out_ap_vld : OUT STD_LOGIC;
        fin_10_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_10_out_ap_vld : OUT STD_LOGIC;
        fin_11_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_11_out_ap_vld : OUT STD_LOGIC;
        fin_12_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_12_out_ap_vld : OUT STD_LOGIC;
        fin_13_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_13_out_ap_vld : OUT STD_LOGIC;
        fin_14_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_14_out_ap_vld : OUT STD_LOGIC;
        fin_15_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_15_out_ap_vld : OUT STD_LOGIC;
        fin_0_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_0_out_ap_vld : OUT STD_LOGIC;
        fin_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_1_out_ap_vld : OUT STD_LOGIC;
        fin_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_2_out_ap_vld : OUT STD_LOGIC;
        fin_3_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        fin_3_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765 : component clefia_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_ap_start,
        ap_done => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_ap_done,
        ap_idle => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_ap_idle,
        ap_ready => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_ap_ready,
        rin_44 => rin_44_reg_1337,
        rin_43 => rin_43_reg_1332,
        rin_42 => rin_42_reg_1327,
        rin_41 => rin_41_reg_1322,
        p_read11 => p_read11,
        p_read10 => p_read10,
        p_read9 => p_read9,
        p_read8 => p_read8,
        rin_40 => rin_40_reg_1317,
        rin_39 => rin_39_reg_1312,
        rin_38 => rin_38_reg_1307,
        rin => rin_reg_1302,
        p_read3 => p_read3,
        p_read2 => p_read2,
        p_read1 => p_read1,
        p_read => p_read,
        r_cast2 => r,
        shl_ln => shl_ln_reg_1166,
        rk_address0 => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_rk_address0,
        rk_ce0 => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_rk_ce0,
        rk_q0 => rk_q0,
        rk_address1 => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_rk_address1,
        rk_ce1 => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_rk_ce1,
        rk_q1 => rk_q1,
        fin_4_out => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_4_out,
        fin_4_out_ap_vld => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_4_out_ap_vld,
        fin_5_out => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_5_out,
        fin_5_out_ap_vld => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_5_out_ap_vld,
        fin_6_out => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_6_out,
        fin_6_out_ap_vld => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_6_out_ap_vld,
        fin_7_out => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_7_out,
        fin_7_out_ap_vld => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_7_out_ap_vld,
        fin_8_out => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_8_out,
        fin_8_out_ap_vld => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_8_out_ap_vld,
        fin_9_out => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_9_out,
        fin_9_out_ap_vld => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_9_out_ap_vld,
        fin_10_out => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_10_out,
        fin_10_out_ap_vld => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_10_out_ap_vld,
        fin_11_out => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_11_out,
        fin_11_out_ap_vld => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_11_out_ap_vld,
        fin_12_out => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_12_out,
        fin_12_out_ap_vld => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_12_out_ap_vld,
        fin_13_out => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_13_out,
        fin_13_out_ap_vld => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_13_out_ap_vld,
        fin_14_out => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_14_out,
        fin_14_out_ap_vld => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_14_out_ap_vld,
        fin_15_out => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_15_out,
        fin_15_out_ap_vld => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_15_out_ap_vld,
        fin_0_out => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_0_out,
        fin_0_out_ap_vld => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_0_out_ap_vld,
        fin_1_out => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_1_out,
        fin_1_out_ap_vld => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_1_out_ap_vld,
        fin_2_out => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_2_out,
        fin_2_out_ap_vld => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_2_out_ap_vld,
        fin_3_out => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_3_out,
        fin_3_out_ap_vld => grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_3_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln230_fu_955_p2 = ap_const_lv1_0))) then 
                    grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_ap_ready = ap_const_logic_1)) then 
                    grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_0_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                fin_0_loc_fu_134 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_0_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_12_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                fin_12_loc_fu_150 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_12_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_13_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                fin_13_loc_fu_146 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_13_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_14_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                fin_14_loc_fu_142 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_14_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_15_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                fin_15_loc_fu_138 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_15_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_1_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                fin_1_loc_fu_130 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_1_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_2_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                fin_2_loc_fu_126 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_2_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_3_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                fin_3_loc_fu_122 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_3_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln230_reg_1342 = ap_const_lv1_0))) then
                fout_0_1_reg_581 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_4_out;
                fout_10_1_reg_664 <= fin_14_loc_fu_142;
                fout_11_1_reg_676 <= fin_15_loc_fu_138;
                fout_12_1_reg_721 <= fin_0_loc_fu_134;
                fout_13_1_reg_732 <= fin_1_loc_fu_130;
                fout_14_1_reg_743 <= fin_2_loc_fu_126;
                fout_15_1_reg_754 <= fin_3_loc_fu_122;
                fout_1_1_reg_604 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_5_out;
                fout_2_1_reg_616 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_6_out;
                fout_3_1_reg_628 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_7_out;
                fout_4_1_reg_593 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_8_out;
                fout_5_1_reg_688 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_9_out;
                fout_6_1_reg_699 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_10_out;
                fout_7_1_reg_710 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_11_out;
                fout_8_1_reg_640 <= fin_12_loc_fu_150;
                fout_9_1_reg_652 <= fin_13_loc_fu_146;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln230_reg_1342 <= icmp_ln230_fu_955_p2;
                rin_38_reg_1307 <= rin_38_fu_913_p2;
                rin_39_reg_1312 <= rin_39_fu_919_p2;
                rin_40_reg_1317 <= rin_40_fu_925_p2;
                rin_41_reg_1322 <= rin_41_fu_931_p2;
                rin_42_reg_1327 <= rin_42_fu_937_p2;
                rin_43_reg_1332 <= rin_43_fu_943_p2;
                rin_44_reg_1337 <= rin_44_fu_949_p2;
                rin_reg_1302 <= rin_fu_907_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                rk_load_40_reg_1187 <= rk_q1;
                rk_load_41_reg_1197 <= rk_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                rk_load_42_reg_1207 <= rk_q1;
                rk_load_43_reg_1212 <= rk_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                rk_load_44_reg_1227 <= rk_q1;
                rk_load_45_reg_1237 <= rk_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                rk_load_46_reg_1247 <= rk_q1;
                rk_load_47_reg_1252 <= rk_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    shl_ln_reg_1166(7 downto 3) <= shl_ln_fu_817_p3(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                xor_ln124_reg_1391 <= xor_ln124_fu_1009_p2;
            end if;
        end if;
    end process;
    shl_ln_reg_1166(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln230_fu_955_p2, grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_ap_done, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln230_fu_955_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Clefia_dec_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            Clefia_dec_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            Clefia_dec_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Clefia_dec_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            Clefia_dec_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            Clefia_dec_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            Clefia_dec_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            Clefia_dec_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            Clefia_dec_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            Clefia_dec_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            Clefia_dec_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            Clefia_dec_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Clefia_dec_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Clefia_dec_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Clefia_dec_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Clefia_dec_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Clefia_dec_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            Clefia_dec_address0 <= "XXXX";
        end if; 
    end process;


    Clefia_dec_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            Clefia_dec_ce0 <= ap_const_logic_1;
        else 
            Clefia_dec_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Clefia_dec_d0_assign_proc : process(xor_ln124_reg_1391, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_phi_mux_fout_0_1_phi_fu_585_p4, ap_CS_fsm_state8, fout_1_1_reg_604, fout_2_1_reg_616, fout_3_1_reg_628, fout_8_1_reg_640, fout_9_1_reg_652, fout_10_1_reg_664, fout_11_1_reg_676, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state23, xor_ln124_52_fu_1015_p2, xor_ln124_53_fu_1022_p2, xor_ln124_54_fu_1029_p2, xor_ln124_55_fu_1036_p2, xor_ln124_56_fu_1043_p2, xor_ln124_57_fu_1050_p2, xor_ln124_58_fu_1057_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            Clefia_dec_d0 <= xor_ln124_58_fu_1057_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            Clefia_dec_d0 <= xor_ln124_57_fu_1050_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Clefia_dec_d0 <= xor_ln124_56_fu_1043_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            Clefia_dec_d0 <= xor_ln124_55_fu_1036_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            Clefia_dec_d0 <= xor_ln124_54_fu_1029_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            Clefia_dec_d0 <= xor_ln124_53_fu_1022_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            Clefia_dec_d0 <= xor_ln124_52_fu_1015_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            Clefia_dec_d0 <= xor_ln124_reg_1391;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            Clefia_dec_d0 <= fout_11_1_reg_676;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            Clefia_dec_d0 <= fout_10_1_reg_664;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            Clefia_dec_d0 <= fout_9_1_reg_652;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Clefia_dec_d0 <= fout_8_1_reg_640;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Clefia_dec_d0 <= fout_3_1_reg_628;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Clefia_dec_d0 <= fout_2_1_reg_616;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Clefia_dec_d0 <= fout_1_1_reg_604;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Clefia_dec_d0 <= ap_phi_mux_fout_0_1_phi_fu_585_p4;
        else 
            Clefia_dec_d0 <= "XXXXXXXX";
        end if; 
    end process;


    Clefia_dec_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            Clefia_dec_we0 <= ap_const_logic_1;
        else 
            Clefia_dec_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln124_84_fu_847_p2 <= std_logic_vector(unsigned(shl_ln_reg_1166) + unsigned(ap_const_lv8_A));
    add_ln124_85_fu_857_p2 <= std_logic_vector(unsigned(shl_ln_reg_1166) + unsigned(ap_const_lv8_B));
    add_ln124_86_fu_877_p2 <= std_logic_vector(unsigned(shl_ln_reg_1166) + unsigned(ap_const_lv8_D));
    add_ln124_87_fu_887_p2 <= std_logic_vector(unsigned(shl_ln_reg_1166) + unsigned(ap_const_lv8_E));
    add_ln124_88_fu_897_p2 <= std_logic_vector(unsigned(shl_ln_reg_1166) + unsigned(ap_const_lv8_F));
    add_ln124_fu_836_p2 <= std_logic_vector(unsigned(shl_ln_fu_817_p3) + unsigned(ap_const_lv8_9));
    add_ln432_fu_825_p2 <= std_logic_vector(unsigned(shl_ln_fu_817_p3) + unsigned(ap_const_lv8_8));
    add_ln433_fu_867_p2 <= std_logic_vector(unsigned(shl_ln_reg_1166) + unsigned(ap_const_lv8_C));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_ap_done)
    begin
        if ((grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_fout_0_1_phi_fu_585_p4_assign_proc : process(icmp_ln230_reg_1342, grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_4_out, fout_0_1_reg_581, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln230_reg_1342 = ap_const_lv1_0))) then 
            ap_phi_mux_fout_0_1_phi_fu_585_p4 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_fin_4_out;
        else 
            ap_phi_mux_fout_0_1_phi_fu_585_p4 <= fout_0_1_reg_581;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_ap_start <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_ap_start_reg;
    icmp_ln230_fu_955_p2 <= "1" when (r = ap_const_lv5_0) else "0";
    rin_38_fu_913_p2 <= (rk_load_41_reg_1197 xor p_read5);
    rin_39_fu_919_p2 <= (rk_load_42_reg_1207 xor p_read6);
    rin_40_fu_925_p2 <= (rk_load_43_reg_1212 xor p_read7);
    rin_41_fu_931_p2 <= (rk_load_44_reg_1227 xor p_read12);
    rin_42_fu_937_p2 <= (rk_load_45_reg_1237 xor p_read13);
    rin_43_fu_943_p2 <= (rk_load_46_reg_1247 xor p_read14);
    rin_44_fu_949_p2 <= (rk_load_47_reg_1252 xor p_read15);
    rin_fu_907_p2 <= (rk_load_40_reg_1187 xor p_read4);

    rk_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_rk_address0, ap_CS_fsm_state8, ap_CS_fsm_state7, zext_ln124_fu_842_p1, zext_ln124_88_fu_862_p1, zext_ln124_89_fu_882_p1, zext_ln124_91_fu_902_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            rk_address0 <= ap_const_lv64_6(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            rk_address0 <= ap_const_lv64_4(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            rk_address0 <= ap_const_lv64_2(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            rk_address0 <= ap_const_lv64_0(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rk_address0 <= zext_ln124_91_fu_902_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rk_address0 <= zext_ln124_89_fu_882_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rk_address0 <= zext_ln124_88_fu_862_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            rk_address0 <= zext_ln124_fu_842_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rk_address0 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_rk_address0;
        else 
            rk_address0 <= "XXXXXXXX";
        end if; 
    end process;


    rk_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_rk_address1, ap_CS_fsm_state7, zext_ln432_fu_831_p1, zext_ln124_87_fu_852_p1, zext_ln433_fu_872_p1, zext_ln124_90_fu_892_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            rk_address1 <= ap_const_lv64_7(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            rk_address1 <= ap_const_lv64_5(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            rk_address1 <= ap_const_lv64_3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            rk_address1 <= ap_const_lv64_1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rk_address1 <= zext_ln124_90_fu_892_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rk_address1 <= zext_ln433_fu_872_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rk_address1 <= zext_ln124_87_fu_852_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            rk_address1 <= zext_ln432_fu_831_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rk_address1 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_rk_address1;
        else 
            rk_address1 <= "XXXXXXXX";
        end if; 
    end process;


    rk_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_rk_ce0, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            rk_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rk_ce0 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_rk_ce0;
        else 
            rk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rk_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_rk_ce1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            rk_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rk_ce1 <= grp_ClefiaDecrypt_1_Pipeline_ClefiaGfn4Inv_label5_fu_765_rk_ce1;
        else 
            rk_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_817_p3 <= (r & ap_const_lv3_0);
    xor_ln124_52_fu_1015_p2 <= (rk_q1 xor fout_5_1_reg_688);
    xor_ln124_53_fu_1022_p2 <= (rk_q0 xor fout_6_1_reg_699);
    xor_ln124_54_fu_1029_p2 <= (rk_q1 xor fout_7_1_reg_710);
    xor_ln124_55_fu_1036_p2 <= (rk_q0 xor fout_12_1_reg_721);
    xor_ln124_56_fu_1043_p2 <= (rk_q1 xor fout_13_1_reg_732);
    xor_ln124_57_fu_1050_p2 <= (rk_q0 xor fout_14_1_reg_743);
    xor_ln124_58_fu_1057_p2 <= (rk_q1 xor fout_15_1_reg_754);
    xor_ln124_fu_1009_p2 <= (rk_q0 xor fout_4_1_reg_593);
    zext_ln124_87_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_84_fu_847_p2),64));
    zext_ln124_88_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_85_fu_857_p2),64));
    zext_ln124_89_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_86_fu_877_p2),64));
    zext_ln124_90_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_87_fu_887_p2),64));
    zext_ln124_91_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_88_fu_897_p2),64));
    zext_ln124_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_fu_836_p2),64));
    zext_ln432_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln432_fu_825_p2),64));
    zext_ln433_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln433_fu_867_p2),64));
end behav;
