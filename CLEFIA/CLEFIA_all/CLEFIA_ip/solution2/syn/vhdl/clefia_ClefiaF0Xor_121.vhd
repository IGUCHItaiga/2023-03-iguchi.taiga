-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clefia_ClefiaF0Xor_121 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read23 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read24 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read25 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read26 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read27 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read28 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read29 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce0 : OUT STD_LOGIC;
    rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce1 : OUT STD_LOGIC;
    rk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce2 : OUT STD_LOGIC;
    rk_q2 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce3 : OUT STD_LOGIC;
    rk_q3 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_offset : IN STD_LOGIC_VECTOR (6 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of clefia_ClefiaF0Xor_121 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal clefia_s0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_ce0 : STD_LOGIC;
    signal clefia_s0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_ce1 : STD_LOGIC;
    signal clefia_s0_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_ce0 : STD_LOGIC;
    signal clefia_s1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_ce1 : STD_LOGIC;
    signal clefia_s1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_offset_read_reg_755 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_read_reg_761 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_reg_761_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_reg_761_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_reg_761_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_1_reg_766 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_1_reg_766_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_1_reg_766_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_1_reg_766_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_2_reg_771 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_2_reg_771_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_2_reg_771_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_2_reg_771_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_3_reg_776 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_3_reg_776_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_3_reg_776_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_3_reg_776_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_4_reg_781 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_4_reg_781_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_4_reg_781_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_4_reg_781_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_5_reg_787 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_5_reg_787_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_5_reg_787_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_5_reg_787_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_6_reg_793 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_6_reg_793_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_6_reg_793_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_6_reg_793_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read83_reg_799 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read83_reg_799_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read83_reg_799_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read83_reg_799_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_load_17_reg_825 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_load_18_reg_830 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_load_reg_835 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_load_16_reg_840 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_17_reg_865 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_18_reg_870 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_23_fu_307_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_23_reg_875 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_24_fu_391_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_24_reg_881 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_115_fu_441_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_115_reg_887 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln124_67_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln124_68_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal rk_offset_cast_fu_223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln153_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln151_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln124_64_fu_201_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln124_65_fu_212_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln124_fu_227_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln124_39_fu_237_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_40_fu_241_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_fu_255_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_38_fu_259_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_116_fu_273_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_52_fu_281_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_52_fu_287_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_52_fu_295_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_117_fu_299_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_118_fu_315_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_53_fu_323_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_53_fu_329_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_53_fu_337_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_119_fu_341_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_120_fu_357_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_54_fu_365_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_54_fu_371_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_54_fu_379_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_121_fu_383_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_122_fu_399_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_55_fu_407_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_55_fu_413_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_55_fu_421_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_123_fu_425_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln134_s_fu_349_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_3_fu_433_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_447_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_fu_455_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_fu_461_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_fu_469_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_115_fu_473_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_124_fu_489_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_56_fu_497_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_56_fu_503_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_56_fu_511_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_125_fu_515_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_25_fu_523_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_126_fu_531_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_57_fu_539_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_57_fu_545_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_57_fu_553_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_127_fu_557_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_s_fu_481_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_128_fu_573_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_58_fu_581_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_58_fu_587_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_58_fu_595_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_129_fu_599_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln124_113_fu_615_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_116_fu_626_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_114_fu_620_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_118_fu_636_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_120_fu_647_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_119_fu_641_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_4_fu_565_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_122_fu_657_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_124_fu_668_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_fu_607_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_125_fu_672_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_123_fu_663_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_127_fu_684_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_129_fu_695_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_130_fu_700_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_128_fu_690_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_117_fu_630_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_121_fu_651_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_126_fu_678_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_131_fu_705_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clefia_ClefiaF0Xor_121_clefia_s0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaF0Xor_121_clefia_s1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    clefia_s0_U : component clefia_ClefiaF0Xor_121_clefia_s0_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s0_address0,
        ce0 => clefia_s0_ce0,
        q0 => clefia_s0_q0,
        address1 => clefia_s0_address1,
        ce1 => clefia_s0_ce1,
        q1 => clefia_s0_q1);

    clefia_s1_U : component clefia_ClefiaF0Xor_121_clefia_s1_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s1_address0,
        ce0 => clefia_s1_ce0,
        q0 => clefia_s1_q0,
        address1 => clefia_s1_address1,
        ce1 => clefia_s1_ce1,
        q1 => clefia_s1_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_read83_reg_799 <= p_read8;
                p_read83_reg_799_pp0_iter1_reg <= p_read83_reg_799;
                p_read_1_reg_766 <= p_read28;
                p_read_1_reg_766_pp0_iter1_reg <= p_read_1_reg_766;
                p_read_2_reg_771 <= p_read27;
                p_read_2_reg_771_pp0_iter1_reg <= p_read_2_reg_771;
                p_read_3_reg_776 <= p_read26;
                p_read_3_reg_776_pp0_iter1_reg <= p_read_3_reg_776;
                p_read_4_reg_781 <= p_read25;
                p_read_4_reg_781_pp0_iter1_reg <= p_read_4_reg_781;
                p_read_5_reg_787 <= p_read24;
                p_read_5_reg_787_pp0_iter1_reg <= p_read_5_reg_787;
                p_read_6_reg_793 <= p_read23;
                p_read_6_reg_793_pp0_iter1_reg <= p_read_6_reg_793;
                p_read_reg_761 <= p_read29;
                p_read_reg_761_pp0_iter1_reg <= p_read_reg_761;
                rk_offset_read_reg_755 <= rk_offset;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                p_read83_reg_799_pp0_iter2_reg <= p_read83_reg_799_pp0_iter1_reg;
                p_read83_reg_799_pp0_iter3_reg <= p_read83_reg_799_pp0_iter2_reg;
                p_read_1_reg_766_pp0_iter2_reg <= p_read_1_reg_766_pp0_iter1_reg;
                p_read_1_reg_766_pp0_iter3_reg <= p_read_1_reg_766_pp0_iter2_reg;
                p_read_2_reg_771_pp0_iter2_reg <= p_read_2_reg_771_pp0_iter1_reg;
                p_read_2_reg_771_pp0_iter3_reg <= p_read_2_reg_771_pp0_iter2_reg;
                p_read_3_reg_776_pp0_iter2_reg <= p_read_3_reg_776_pp0_iter1_reg;
                p_read_3_reg_776_pp0_iter3_reg <= p_read_3_reg_776_pp0_iter2_reg;
                p_read_4_reg_781_pp0_iter2_reg <= p_read_4_reg_781_pp0_iter1_reg;
                p_read_4_reg_781_pp0_iter3_reg <= p_read_4_reg_781_pp0_iter2_reg;
                p_read_5_reg_787_pp0_iter2_reg <= p_read_5_reg_787_pp0_iter1_reg;
                p_read_5_reg_787_pp0_iter3_reg <= p_read_5_reg_787_pp0_iter2_reg;
                p_read_6_reg_793_pp0_iter2_reg <= p_read_6_reg_793_pp0_iter1_reg;
                p_read_6_reg_793_pp0_iter3_reg <= p_read_6_reg_793_pp0_iter2_reg;
                p_read_reg_761_pp0_iter2_reg <= p_read_reg_761_pp0_iter1_reg;
                p_read_reg_761_pp0_iter3_reg <= p_read_reg_761_pp0_iter2_reg;
                x_assign_23_reg_875 <= x_assign_23_fu_307_p3;
                x_assign_24_reg_881 <= x_assign_24_fu_391_p3;
                xor_ln124_115_reg_887 <= xor_ln124_115_fu_441_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                rk_load_16_reg_840 <= rk_q0;
                rk_load_reg_835 <= rk_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                rk_load_17_reg_825 <= rk_q3;
                rk_load_18_reg_830 <= rk_q2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                z_17_reg_865 <= clefia_s0_q1;
                z_18_reg_870 <= clefia_s1_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln124_64_fu_201_p2 <= std_logic_vector(unsigned(rk_offset) + unsigned(ap_const_lv7_2));
    add_ln124_65_fu_212_p2 <= std_logic_vector(unsigned(rk_offset) + unsigned(ap_const_lv7_3));
    add_ln124_fu_227_p2 <= std_logic_vector(unsigned(rk_offset_read_reg_755) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= p_read83_reg_799_pp0_iter3_reg;
    ap_return_1 <= p_read_6_reg_793_pp0_iter3_reg;
    ap_return_2 <= p_read_5_reg_787_pp0_iter3_reg;
    ap_return_3 <= p_read_4_reg_781_pp0_iter3_reg;
    ap_return_4 <= xor_ln124_117_fu_630_p2;
    ap_return_5 <= xor_ln124_121_fu_651_p2;
    ap_return_6 <= xor_ln124_126_fu_678_p2;
    ap_return_7 <= xor_ln124_131_fu_705_p2;
    clefia_s0_address0 <= zext_ln150_fu_263_p1(8 - 1 downto 0);
    clefia_s0_address1 <= zext_ln152_fu_245_p1(8 - 1 downto 0);

    clefia_s0_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            clefia_s0_ce0 <= ap_const_logic_1;
        else 
            clefia_s0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s0_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            clefia_s0_ce1 <= ap_const_logic_1;
        else 
            clefia_s0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    clefia_s1_address0 <= zext_ln151_fu_268_p1(8 - 1 downto 0);
    clefia_s1_address1 <= zext_ln153_fu_250_p1(8 - 1 downto 0);

    clefia_s1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            clefia_s1_ce0 <= ap_const_logic_1;
        else 
            clefia_s1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            clefia_s1_ce1 <= ap_const_logic_1;
        else 
            clefia_s1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln134_3_fu_433_p3 <= (trunc_ln134_55_fu_421_p1 & tmp_123_fu_425_p3);
    or_ln134_4_fu_565_p3 <= (trunc_ln134_57_fu_553_p1 & tmp_127_fu_557_p3);
    or_ln134_s_fu_349_p3 <= (trunc_ln134_53_fu_337_p1 & tmp_119_fu_341_p3);
    or_ln_fu_607_p3 <= (trunc_ln134_58_fu_595_p1 & tmp_129_fu_599_p3);
    rk_address0 <= zext_ln124_fu_232_p1(8 - 1 downto 0);
    rk_address1 <= rk_offset_cast_fu_223_p1(8 - 1 downto 0);
    rk_address2 <= zext_ln124_68_fu_218_p1(8 - 1 downto 0);
    rk_address3 <= zext_ln124_67_fu_207_p1(8 - 1 downto 0);

    rk_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rk_ce0 <= ap_const_logic_1;
        else 
            rk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rk_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rk_ce1 <= ap_const_logic_1;
        else 
            rk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rk_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rk_ce2 <= ap_const_logic_1;
        else 
            rk_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    rk_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rk_ce3 <= ap_const_logic_1;
        else 
            rk_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    rk_offset_cast_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rk_offset_read_reg_755),64));
    select_ln131_52_fu_287_p3 <= 
        xor_ln132_52_fu_281_p2 when (tmp_116_fu_273_p3(0) = '1') else 
        clefia_s0_q1;
    select_ln131_53_fu_329_p3 <= 
        xor_ln132_53_fu_323_p2 when (tmp_118_fu_315_p3(0) = '1') else 
        x_assign_23_fu_307_p3;
    select_ln131_54_fu_371_p3 <= 
        xor_ln132_54_fu_365_p2 when (tmp_120_fu_357_p3(0) = '1') else 
        clefia_s1_q1;
    select_ln131_55_fu_413_p3 <= 
        xor_ln132_55_fu_407_p2 when (tmp_122_fu_399_p3(0) = '1') else 
        x_assign_24_fu_391_p3;
    select_ln131_56_fu_503_p3 <= 
        xor_ln132_56_fu_497_p2 when (tmp_124_fu_489_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_57_fu_545_p3 <= 
        xor_ln132_57_fu_539_p2 when (tmp_126_fu_531_p3(0) = '1') else 
        x_assign_25_fu_523_p3;
    select_ln131_58_fu_587_p3 <= 
        xor_ln132_58_fu_581_p2 when (tmp_128_fu_573_p3(0) = '1') else 
        x_assign_s_fu_481_p3;
    select_ln131_fu_461_p3 <= 
        xor_ln132_fu_455_p2 when (tmp_fu_447_p3(0) = '1') else 
        clefia_s1_q0;
    tmp_115_fu_473_p3 <= select_ln131_fu_461_p3(7 downto 7);
    tmp_116_fu_273_p3 <= clefia_s0_q1(7 downto 7);
    tmp_117_fu_299_p3 <= select_ln131_52_fu_287_p3(7 downto 7);
    tmp_118_fu_315_p3 <= select_ln131_52_fu_287_p3(6 downto 6);
    tmp_119_fu_341_p3 <= select_ln131_53_fu_329_p3(7 downto 7);
    tmp_120_fu_357_p3 <= clefia_s1_q1(7 downto 7);
    tmp_121_fu_383_p3 <= select_ln131_54_fu_371_p3(7 downto 7);
    tmp_122_fu_399_p3 <= select_ln131_54_fu_371_p3(6 downto 6);
    tmp_123_fu_425_p3 <= select_ln131_55_fu_413_p3(7 downto 7);
    tmp_124_fu_489_p3 <= clefia_s0_q0(7 downto 7);
    tmp_125_fu_515_p3 <= select_ln131_56_fu_503_p3(7 downto 7);
    tmp_126_fu_531_p3 <= select_ln131_56_fu_503_p3(6 downto 6);
    tmp_127_fu_557_p3 <= select_ln131_57_fu_545_p3(7 downto 7);
    tmp_128_fu_573_p3 <= select_ln131_fu_461_p3(6 downto 6);
    tmp_129_fu_599_p3 <= select_ln131_58_fu_587_p3(7 downto 7);
    tmp_fu_447_p3 <= clefia_s1_q0(7 downto 7);
    trunc_ln134_52_fu_295_p1 <= select_ln131_52_fu_287_p3(7 - 1 downto 0);
    trunc_ln134_53_fu_337_p1 <= select_ln131_53_fu_329_p3(7 - 1 downto 0);
    trunc_ln134_54_fu_379_p1 <= select_ln131_54_fu_371_p3(7 - 1 downto 0);
    trunc_ln134_55_fu_421_p1 <= select_ln131_55_fu_413_p3(7 - 1 downto 0);
    trunc_ln134_56_fu_511_p1 <= select_ln131_56_fu_503_p3(7 - 1 downto 0);
    trunc_ln134_57_fu_553_p1 <= select_ln131_57_fu_545_p3(7 - 1 downto 0);
    trunc_ln134_58_fu_595_p1 <= select_ln131_58_fu_587_p3(7 - 1 downto 0);
    trunc_ln134_fu_469_p1 <= select_ln131_fu_461_p3(7 - 1 downto 0);
    x_assign_23_fu_307_p3 <= (trunc_ln134_52_fu_295_p1 & tmp_117_fu_299_p3);
    x_assign_24_fu_391_p3 <= (trunc_ln134_54_fu_379_p1 & tmp_121_fu_383_p3);
    x_assign_25_fu_523_p3 <= (trunc_ln134_56_fu_511_p1 & tmp_125_fu_515_p3);
    x_assign_s_fu_481_p3 <= (trunc_ln134_fu_469_p1 & tmp_115_fu_473_p3);
    xor_ln124_113_fu_615_p2 <= (x_assign_s_fu_481_p3 xor p_read_3_reg_776_pp0_iter3_reg);
    xor_ln124_114_fu_620_p2 <= (xor_ln124_113_fu_615_p2 xor clefia_s0_q0);
    xor_ln124_115_fu_441_p2 <= (or_ln134_s_fu_349_p3 xor or_ln134_3_fu_433_p3);
    xor_ln124_116_fu_626_p2 <= (xor_ln124_115_reg_887 xor x_assign_24_reg_881);
    xor_ln124_117_fu_630_p2 <= (xor_ln124_116_fu_626_p2 xor xor_ln124_114_fu_620_p2);
    xor_ln124_118_fu_636_p2 <= (x_assign_25_fu_523_p3 xor x_assign_23_reg_875);
    xor_ln124_119_fu_641_p2 <= (xor_ln124_118_fu_636_p2 xor clefia_s1_q0);
    xor_ln124_120_fu_647_p2 <= (xor_ln124_115_reg_887 xor p_read_2_reg_771_pp0_iter3_reg);
    xor_ln124_121_fu_651_p2 <= (xor_ln124_120_fu_647_p2 xor xor_ln124_119_fu_641_p2);
    xor_ln124_122_fu_657_p2 <= (x_assign_s_fu_481_p3 xor or_ln134_4_fu_565_p3);
    xor_ln124_123_fu_663_p2 <= (z_17_reg_865 xor xor_ln124_122_fu_657_p2);
    xor_ln124_124_fu_668_p2 <= (x_assign_24_reg_881 xor p_read_1_reg_766_pp0_iter3_reg);
    xor_ln124_125_fu_672_p2 <= (xor_ln124_124_fu_668_p2 xor or_ln_fu_607_p3);
    xor_ln124_126_fu_678_p2 <= (xor_ln124_125_fu_672_p2 xor xor_ln124_123_fu_663_p2);
    xor_ln124_127_fu_684_p2 <= (x_assign_25_fu_523_p3 xor or_ln134_4_fu_565_p3);
    xor_ln124_128_fu_690_p2 <= (z_18_reg_870 xor xor_ln124_127_fu_684_p2);
    xor_ln124_129_fu_695_p2 <= (p_read_reg_761_pp0_iter3_reg xor or_ln_fu_607_p3);
    xor_ln124_130_fu_700_p2 <= (xor_ln124_129_fu_695_p2 xor x_assign_23_reg_875);
    xor_ln124_131_fu_705_p2 <= (xor_ln124_130_fu_700_p2 xor xor_ln124_128_fu_690_p2);
    xor_ln124_38_fu_259_p2 <= (rk_load_16_reg_840 xor p_read_6_reg_793_pp0_iter2_reg);
    xor_ln124_39_fu_237_p2 <= (rk_load_17_reg_825 xor p_read_5_reg_787_pp0_iter1_reg);
    xor_ln124_40_fu_241_p2 <= (rk_load_18_reg_830 xor p_read_4_reg_781_pp0_iter1_reg);
    xor_ln124_fu_255_p2 <= (rk_load_reg_835 xor p_read83_reg_799_pp0_iter2_reg);
    xor_ln132_52_fu_281_p2 <= (clefia_s0_q1 xor ap_const_lv8_E);
    xor_ln132_53_fu_323_p2 <= (x_assign_23_fu_307_p3 xor ap_const_lv8_E);
    xor_ln132_54_fu_365_p2 <= (clefia_s1_q1 xor ap_const_lv8_E);
    xor_ln132_55_fu_407_p2 <= (x_assign_24_fu_391_p3 xor ap_const_lv8_E);
    xor_ln132_56_fu_497_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_57_fu_539_p2 <= (x_assign_25_fu_523_p3 xor ap_const_lv8_E);
    xor_ln132_58_fu_581_p2 <= (x_assign_s_fu_481_p3 xor ap_const_lv8_E);
    xor_ln132_fu_455_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    zext_ln124_67_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_64_fu_201_p2),64));
    zext_ln124_68_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_65_fu_212_p2),64));
    zext_ln124_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_fu_227_p2),64));
    zext_ln150_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_fu_255_p2),64));
    zext_ln151_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_38_fu_259_p2),64));
    zext_ln152_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_39_fu_237_p2),64));
    zext_ln153_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_40_fu_241_p2),64));
end behav;
