-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clefia_ClefiaF0Xor_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    dst_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    dst_ce1 : OUT STD_LOGIC;
    dst_we1 : OUT STD_LOGIC;
    dst_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_offset : IN STD_LOGIC_VECTOR (4 downto 0);
    src_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    src_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    src_ce1 : OUT STD_LOGIC;
    src_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    src_offset : IN STD_LOGIC_VECTOR (4 downto 0);
    rk_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    rk_ce0 : OUT STD_LOGIC;
    rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_offset : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of clefia_ClefiaF0Xor_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal clefia_s0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_ce0 : STD_LOGIC;
    signal clefia_s0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_ce0 : STD_LOGIC;
    signal clefia_s1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_297 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_302_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_308 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal rk_offset_read_reg_966 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal src_offset_read_reg_971 : STD_LOGIC_VECTOR (4 downto 0);
    signal src_offset_read_reg_971_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal dst_offset_read_reg_996 : STD_LOGIC_VECTOR (4 downto 0);
    signal dst_offset_read_reg_996_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal rk_offset_cast_fu_338_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rk_offset_cast_reg_1006 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln124_fu_352_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_reg_1017 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_load_17_reg_1037 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_reg_1052 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_22_fu_472_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_22_reg_1062 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_22_reg_1062_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_50_fu_502_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_50_reg_1068 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_50_reg_1068_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_112_reg_1073 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_112_reg_1073_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln124_40_fu_514_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_40_reg_1078 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_13_reg_1083 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_s_fu_558_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_s_reg_1093 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_51_fu_588_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_51_reg_1099 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_114_reg_1104 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_14_reg_1109 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_20_fu_638_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_20_reg_1119 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_46_fu_668_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_46_reg_1125 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_104_reg_1130 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_15_reg_1135 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_21_fu_720_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_21_reg_1140 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_100_fu_790_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_100_reg_1156 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_port_reg_dst_offset : STD_LOGIC_VECTOR (4 downto 0);
    signal rk_offset_cast1_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal src_offset_cast_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dst_offset_cast_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln124_56_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_57_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_59_fu_373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln117_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_58_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln150_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln117_5_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln117_6_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_60_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln151_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln153_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln162_1_fu_775_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_61_fu_785_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln162_fu_801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_62_fu_832_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_63_fu_842_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_65_fu_873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_64_fu_895_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_66_fu_933_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln124_41_fu_820_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_42_fu_861_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_43_fu_921_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_44_fu_959_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_fu_322_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln124_53_fu_341_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln124_54_fu_358_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln124_56_fu_368_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln117_fu_378_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln124_55_fu_389_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln117_5_fu_403_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln117_6_fu_413_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln124_57_fu_423_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_109_fu_438_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_49_fu_446_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_49_fu_452_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_49_fu_460_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_110_fu_464_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_111_fu_480_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_50_fu_488_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_50_fu_494_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_524_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_fu_532_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_fu_538_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_fu_546_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_100_fu_550_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_fu_566_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_51_fu_574_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_51_fu_580_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_101_fu_604_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_45_fu_612_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_45_fu_618_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_45_fu_626_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_102_fu_630_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_103_fu_646_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_46_fu_654_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_46_fu_660_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_105_fu_686_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_47_fu_694_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_47_fu_700_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_47_fu_708_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_106_fu_712_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_107_fu_728_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_48_fu_736_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_48_fu_742_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_48_fu_750_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_108_fu_754_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln162_1_fu_770_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln124_58_fu_780_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln134_s_fu_680_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_1_fu_762_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln162_fu_796_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln124_98_fu_806_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_101_fu_816_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_99_fu_811_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_59_fu_827_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln124_60_fu_837_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln124_102_fu_847_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_104_fu_857_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_103_fu_852_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_62_fu_868_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln124_61_fu_890_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln124_105_fu_900_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_fu_884_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_107_fu_910_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_2_fu_878_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_108_fu_915_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_106_fu_905_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_63_fu_928_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln124_109_fu_938_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_111_fu_948_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_112_fu_953_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_110_fu_943_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    clefia_s0_U : component clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s0_address0,
        ce0 => clefia_s0_ce0,
        q0 => clefia_s0_q0);

    clefia_s1_U : component clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s1_address0,
        ce0 => clefia_s1_ce0,
        q0 => clefia_s1_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    reg_297 <= src_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    reg_297 <= src_q0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_port_reg_dst_offset <= dst_offset;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_ce))) then
                dst_offset_read_reg_996 <= ap_port_reg_dst_offset;
                dst_offset_read_reg_996_pp0_iter1_reg <= dst_offset_read_reg_996;
                    rk_offset_cast_reg_1006(7 downto 0) <= rk_offset_cast_fu_338_p1(7 downto 0);
                tmp_104_reg_1130 <= select_ln131_46_fu_660_p3(7 downto 7);
                trunc_ln134_46_reg_1125 <= trunc_ln134_46_fu_668_p1;
                x_assign_20_reg_1119 <= x_assign_20_fu_638_p3;
                xor_ln124_reg_1017 <= xor_ln124_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then
                reg_308 <= grp_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                rk_offset_read_reg_966 <= rk_offset;
                src_offset_read_reg_971 <= src_offset;
                src_offset_read_reg_971_pp0_iter1_reg <= src_offset_read_reg_971;
                tmp_114_reg_1104 <= select_ln131_51_fu_580_p3(7 downto 7);
                trunc_ln134_51_reg_1099 <= trunc_ln134_51_fu_588_p1;
                x_assign_s_reg_1093 <= x_assign_s_fu_558_p3;
                xor_ln124_40_reg_1078 <= xor_ln124_40_fu_514_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                src_load_17_reg_1037 <= src_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp_112_reg_1073 <= select_ln131_50_fu_494_p3(7 downto 7);
                tmp_112_reg_1073_pp0_iter1_reg <= tmp_112_reg_1073;
                trunc_ln134_50_reg_1068 <= trunc_ln134_50_fu_502_p1;
                trunc_ln134_50_reg_1068_pp0_iter1_reg <= trunc_ln134_50_reg_1068;
                x_assign_22_reg_1062 <= x_assign_22_fu_472_p3;
                x_assign_22_reg_1062_pp0_iter1_reg <= x_assign_22_reg_1062;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                x_assign_21_reg_1140 <= x_assign_21_fu_720_p3;
                xor_ln124_100_reg_1156 <= xor_ln124_100_fu_790_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                z_13_reg_1083 <= clefia_s1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_ce))) then
                z_14_reg_1109 <= clefia_s0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                z_15_reg_1135 <= clefia_s1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                z_reg_1052 <= clefia_s0_q0;
            end if;
        end if;
    end process;
    rk_offset_cast_reg_1006(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln117_5_fu_403_p2 <= std_logic_vector(unsigned(dst_offset_read_reg_996) + unsigned(ap_const_lv5_2));
    add_ln117_6_fu_413_p2 <= std_logic_vector(unsigned(dst_offset_read_reg_996) + unsigned(ap_const_lv5_3));
    add_ln117_fu_378_p2 <= std_logic_vector(unsigned(ap_port_reg_dst_offset) + unsigned(ap_const_lv5_1));
    add_ln124_53_fu_341_p2 <= std_logic_vector(unsigned(rk_offset_cast_fu_338_p1) + unsigned(ap_const_lv9_1));
    add_ln124_54_fu_358_p2 <= std_logic_vector(unsigned(src_offset_read_reg_971) + unsigned(ap_const_lv5_2));
    add_ln124_55_fu_389_p2 <= std_logic_vector(unsigned(rk_offset_cast_reg_1006) + unsigned(ap_const_lv9_2));
    add_ln124_56_fu_368_p2 <= std_logic_vector(unsigned(src_offset_read_reg_971) + unsigned(ap_const_lv5_3));
    add_ln124_57_fu_423_p2 <= std_logic_vector(unsigned(rk_offset_cast_reg_1006) + unsigned(ap_const_lv9_3));
    add_ln124_58_fu_780_p2 <= std_logic_vector(unsigned(src_offset_read_reg_971_pp0_iter1_reg) + unsigned(ap_const_lv5_5));
    add_ln124_59_fu_827_p2 <= std_logic_vector(unsigned(dst_offset_read_reg_996_pp0_iter1_reg) + unsigned(ap_const_lv5_5));
    add_ln124_60_fu_837_p2 <= std_logic_vector(unsigned(src_offset_read_reg_971_pp0_iter1_reg) + unsigned(ap_const_lv5_6));
    add_ln124_61_fu_890_p2 <= std_logic_vector(unsigned(dst_offset_read_reg_996_pp0_iter1_reg) + unsigned(ap_const_lv5_6));
    add_ln124_62_fu_868_p2 <= std_logic_vector(unsigned(src_offset_read_reg_971_pp0_iter1_reg) + unsigned(ap_const_lv5_7));
    add_ln124_63_fu_928_p2 <= std_logic_vector(unsigned(dst_offset_read_reg_996_pp0_iter1_reg) + unsigned(ap_const_lv5_7));
    add_ln124_fu_322_p2 <= std_logic_vector(unsigned(src_offset) + unsigned(ap_const_lv5_1));
    add_ln162_1_fu_770_p2 <= std_logic_vector(unsigned(src_offset_read_reg_971_pp0_iter1_reg) + unsigned(ap_const_lv5_4));
    add_ln162_fu_796_p2 <= std_logic_vector(unsigned(dst_offset_read_reg_996_pp0_iter1_reg) + unsigned(ap_const_lv5_4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage1_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage2_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage3_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, zext_ln150_fu_399_p1, zext_ln152_fu_519_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            clefia_s0_address0 <= zext_ln152_fu_519_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            clefia_s0_address0 <= zext_ln150_fu_399_p1(8 - 1 downto 0);
        else 
            clefia_s0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_ce, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            clefia_s0_ce0 <= ap_const_logic_1;
        else 
            clefia_s0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s1_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage3, zext_ln151_fu_433_p1, zext_ln153_fu_600_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            clefia_s1_address0 <= zext_ln153_fu_600_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            clefia_s1_address0 <= zext_ln151_fu_433_p1(8 - 1 downto 0);
        else 
            clefia_s1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_ce)))) then 
            clefia_s1_ce0 <= ap_const_logic_1;
        else 
            clefia_s1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln117_fu_384_p1, ap_block_pp0_stage2, zext_ln117_6_fu_418_p1, ap_block_pp0_stage3, zext_ln124_62_fu_832_p1, zext_ln124_66_fu_933_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_address0 <= zext_ln124_66_fu_933_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_address0 <= zext_ln124_62_fu_832_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dst_address0 <= zext_ln117_6_fu_418_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dst_address0 <= zext_ln117_fu_384_p1(5 - 1 downto 0);
        else 
            dst_address0 <= "XXXXX";
        end if; 
    end process;


    dst_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, dst_offset_cast_fu_333_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln117_5_fu_408_p1, ap_block_pp0_stage3, zext_ln162_fu_801_p1, zext_ln124_64_fu_895_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_address1 <= zext_ln124_64_fu_895_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_address1 <= zext_ln162_fu_801_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dst_address1 <= zext_ln117_5_fu_408_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dst_address1 <= dst_offset_cast_fu_333_p1(5 - 1 downto 0);
        else 
            dst_address1 <= "XXXXX";
        end if; 
    end process;


    dst_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_ce)))) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_ce)))) then 
            dst_ce1 <= ap_const_logic_1;
        else 
            dst_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dst_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, src_q0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, xor_ln124_42_fu_861_p2, xor_ln124_44_fu_959_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_d0 <= xor_ln124_44_fu_959_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_d0 <= xor_ln124_42_fu_861_p2;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_d0 <= src_q0;
        else 
            dst_d0 <= "XXXXXXXX";
        end if; 
    end process;


    dst_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, src_q1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, xor_ln124_41_fu_820_p2, xor_ln124_43_fu_921_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_d1 <= xor_ln124_43_fu_921_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dst_d1 <= xor_ln124_41_fu_820_p2;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_d1 <= src_q1;
        else 
            dst_d1 <= "XXXXXXXX";
        end if; 
    end process;

    dst_offset_cast_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_port_reg_dst_offset),64));

    dst_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_ce)))) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_ce)))) then 
            dst_we1 <= ap_const_logic_1;
        else 
            dst_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_302_p2 <= (rk_q0 xor reg_297);
    or_ln134_1_fu_762_p3 <= (trunc_ln134_48_fu_750_p1 & tmp_108_fu_754_p3);
    or_ln134_2_fu_878_p3 <= (trunc_ln134_50_reg_1068_pp0_iter1_reg & tmp_112_reg_1073_pp0_iter1_reg);
    or_ln134_s_fu_680_p3 <= (trunc_ln134_46_reg_1125 & tmp_104_reg_1130);
    or_ln_fu_884_p3 <= (trunc_ln134_51_reg_1099 & tmp_114_reg_1104);

    rk_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, rk_offset_cast1_fu_312_p1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln124_56_fu_347_p1, zext_ln124_58_fu_394_p1, ap_block_pp0_stage2, zext_ln124_60_fu_428_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                rk_address0 <= zext_ln124_60_fu_428_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                rk_address0 <= zext_ln124_58_fu_394_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                rk_address0 <= zext_ln124_56_fu_347_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                rk_address0 <= rk_offset_cast1_fu_312_p1(9 - 1 downto 0);
            else 
                rk_address0 <= "XXXXXXXXX";
            end if;
        else 
            rk_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    rk_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_ce)))) then 
            rk_ce0 <= ap_const_logic_1;
        else 
            rk_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rk_offset_cast1_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rk_offset),64));
    rk_offset_cast_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rk_offset_read_reg_966),9));
    select_ln131_45_fu_618_p3 <= 
        xor_ln132_45_fu_612_p2 when (tmp_101_fu_604_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_46_fu_660_p3 <= 
        xor_ln132_46_fu_654_p2 when (tmp_103_fu_646_p3(0) = '1') else 
        x_assign_20_fu_638_p3;
    select_ln131_47_fu_700_p3 <= 
        xor_ln132_47_fu_694_p2 when (tmp_105_fu_686_p3(0) = '1') else 
        clefia_s1_q0;
    select_ln131_48_fu_742_p3 <= 
        xor_ln132_48_fu_736_p2 when (tmp_107_fu_728_p3(0) = '1') else 
        x_assign_21_fu_720_p3;
    select_ln131_49_fu_452_p3 <= 
        xor_ln132_49_fu_446_p2 when (tmp_109_fu_438_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_50_fu_494_p3 <= 
        xor_ln132_50_fu_488_p2 when (tmp_111_fu_480_p3(0) = '1') else 
        x_assign_22_fu_472_p3;
    select_ln131_51_fu_580_p3 <= 
        xor_ln132_51_fu_574_p2 when (tmp_113_fu_566_p3(0) = '1') else 
        x_assign_s_fu_558_p3;
    select_ln131_fu_538_p3 <= 
        xor_ln132_fu_532_p2 when (tmp_fu_524_p3(0) = '1') else 
        clefia_s1_q0;

    src_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln124_fu_328_p1, ap_block_pp0_stage1, zext_ln124_59_fu_373_p1, ap_block_pp0_stage2, ap_block_pp0_stage3, zext_ln124_61_fu_785_p1, zext_ln124_65_fu_873_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            src_address0 <= zext_ln124_65_fu_873_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            src_address0 <= zext_ln124_61_fu_785_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            src_address0 <= zext_ln124_59_fu_373_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_address0 <= zext_ln124_fu_328_p1(5 - 1 downto 0);
        else 
            src_address0 <= "XXXXX";
        end if; 
    end process;


    src_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, src_offset_cast_fu_317_p1, ap_block_pp0_stage1, zext_ln124_57_fu_363_p1, ap_block_pp0_stage2, ap_block_pp0_stage3, zext_ln162_1_fu_775_p1, zext_ln124_63_fu_842_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            src_address1 <= zext_ln124_63_fu_842_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            src_address1 <= zext_ln162_1_fu_775_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            src_address1 <= zext_ln124_57_fu_363_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_address1 <= src_offset_cast_fu_317_p1(5 - 1 downto 0);
        else 
            src_address1 <= "XXXXX";
        end if; 
    end process;


    src_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_ce)))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_ce)))) then 
            src_ce1 <= ap_const_logic_1;
        else 
            src_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    src_offset_cast_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_offset),64));
    tmp_100_fu_550_p3 <= select_ln131_fu_538_p3(7 downto 7);
    tmp_101_fu_604_p3 <= clefia_s0_q0(7 downto 7);
    tmp_102_fu_630_p3 <= select_ln131_45_fu_618_p3(7 downto 7);
    tmp_103_fu_646_p3 <= select_ln131_45_fu_618_p3(6 downto 6);
    tmp_105_fu_686_p3 <= clefia_s1_q0(7 downto 7);
    tmp_106_fu_712_p3 <= select_ln131_47_fu_700_p3(7 downto 7);
    tmp_107_fu_728_p3 <= select_ln131_47_fu_700_p3(6 downto 6);
    tmp_108_fu_754_p3 <= select_ln131_48_fu_742_p3(7 downto 7);
    tmp_109_fu_438_p3 <= clefia_s0_q0(7 downto 7);
    tmp_110_fu_464_p3 <= select_ln131_49_fu_452_p3(7 downto 7);
    tmp_111_fu_480_p3 <= select_ln131_49_fu_452_p3(6 downto 6);
    tmp_113_fu_566_p3 <= select_ln131_fu_538_p3(6 downto 6);
    tmp_fu_524_p3 <= clefia_s1_q0(7 downto 7);
    trunc_ln134_45_fu_626_p1 <= select_ln131_45_fu_618_p3(7 - 1 downto 0);
    trunc_ln134_46_fu_668_p1 <= select_ln131_46_fu_660_p3(7 - 1 downto 0);
    trunc_ln134_47_fu_708_p1 <= select_ln131_47_fu_700_p3(7 - 1 downto 0);
    trunc_ln134_48_fu_750_p1 <= select_ln131_48_fu_742_p3(7 - 1 downto 0);
    trunc_ln134_49_fu_460_p1 <= select_ln131_49_fu_452_p3(7 - 1 downto 0);
    trunc_ln134_50_fu_502_p1 <= select_ln131_50_fu_494_p3(7 - 1 downto 0);
    trunc_ln134_51_fu_588_p1 <= select_ln131_51_fu_580_p3(7 - 1 downto 0);
    trunc_ln134_fu_546_p1 <= select_ln131_fu_538_p3(7 - 1 downto 0);
    x_assign_20_fu_638_p3 <= (trunc_ln134_45_fu_626_p1 & tmp_102_fu_630_p3);
    x_assign_21_fu_720_p3 <= (trunc_ln134_47_fu_708_p1 & tmp_106_fu_712_p3);
    x_assign_22_fu_472_p3 <= (trunc_ln134_49_fu_460_p1 & tmp_110_fu_464_p3);
    x_assign_s_fu_558_p3 <= (trunc_ln134_fu_546_p1 & tmp_100_fu_550_p3);
    xor_ln124_100_fu_790_p2 <= (or_ln134_s_fu_680_p3 xor or_ln134_1_fu_762_p3);
    xor_ln124_101_fu_816_p2 <= (xor_ln124_100_reg_1156 xor x_assign_21_reg_1140);
    xor_ln124_102_fu_847_p2 <= (x_assign_22_reg_1062 xor src_q0);
    xor_ln124_103_fu_852_p2 <= (z_13_reg_1083 xor xor_ln124_102_fu_847_p2);
    xor_ln124_104_fu_857_p2 <= (xor_ln124_100_reg_1156 xor x_assign_20_reg_1119);
    xor_ln124_105_fu_900_p2 <= (x_assign_s_reg_1093 xor src_q1);
    xor_ln124_106_fu_905_p2 <= (z_14_reg_1109 xor xor_ln124_105_fu_900_p2);
    xor_ln124_107_fu_910_p2 <= (x_assign_21_reg_1140 xor or_ln_fu_884_p3);
    xor_ln124_108_fu_915_p2 <= (xor_ln124_107_fu_910_p2 xor or_ln134_2_fu_878_p3);
    xor_ln124_109_fu_938_p2 <= (x_assign_22_reg_1062_pp0_iter1_reg xor src_q0);
    xor_ln124_110_fu_943_p2 <= (z_15_reg_1135 xor xor_ln124_109_fu_938_p2);
    xor_ln124_111_fu_948_p2 <= (x_assign_20_reg_1119 xor or_ln_fu_884_p3);
    xor_ln124_112_fu_953_p2 <= (xor_ln124_111_fu_948_p2 xor or_ln134_2_fu_878_p3);
    xor_ln124_40_fu_514_p2 <= (src_load_17_reg_1037 xor rk_q0);
    xor_ln124_41_fu_820_p2 <= (xor_ln124_99_fu_811_p2 xor xor_ln124_101_fu_816_p2);
    xor_ln124_42_fu_861_p2 <= (xor_ln124_104_fu_857_p2 xor xor_ln124_103_fu_852_p2);
    xor_ln124_43_fu_921_p2 <= (xor_ln124_108_fu_915_p2 xor xor_ln124_106_fu_905_p2);
    xor_ln124_44_fu_959_p2 <= (xor_ln124_112_fu_953_p2 xor xor_ln124_110_fu_943_p2);
    xor_ln124_98_fu_806_p2 <= (x_assign_s_reg_1093 xor src_q1);
    xor_ln124_99_fu_811_p2 <= (z_reg_1052 xor xor_ln124_98_fu_806_p2);
    xor_ln124_fu_352_p2 <= (src_q1 xor rk_q0);
    xor_ln132_45_fu_612_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_46_fu_654_p2 <= (x_assign_20_fu_638_p3 xor ap_const_lv8_E);
    xor_ln132_47_fu_694_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln132_48_fu_736_p2 <= (x_assign_21_fu_720_p3 xor ap_const_lv8_E);
    xor_ln132_49_fu_446_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_50_fu_488_p2 <= (x_assign_22_fu_472_p3 xor ap_const_lv8_E);
    xor_ln132_51_fu_574_p2 <= (x_assign_s_fu_558_p3 xor ap_const_lv8_E);
    xor_ln132_fu_532_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    zext_ln117_5_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln117_5_fu_403_p2),64));
    zext_ln117_6_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln117_6_fu_413_p2),64));
    zext_ln117_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln117_fu_378_p2),64));
    zext_ln124_56_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_53_fu_341_p2),64));
    zext_ln124_57_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_54_fu_358_p2),64));
    zext_ln124_58_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_55_fu_389_p2),64));
    zext_ln124_59_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_56_fu_368_p2),64));
    zext_ln124_60_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_57_fu_423_p2),64));
    zext_ln124_61_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_58_fu_780_p2),64));
    zext_ln124_62_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_59_fu_827_p2),64));
    zext_ln124_63_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_60_fu_837_p2),64));
    zext_ln124_64_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_61_fu_890_p2),64));
    zext_ln124_65_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_62_fu_868_p2),64));
    zext_ln124_66_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_63_fu_928_p2),64));
    zext_ln124_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_fu_322_p2),64));
    zext_ln150_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_reg_1017),64));
    zext_ln151_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_308),64));
    zext_ln152_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_308),64));
    zext_ln153_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_40_reg_1078),64));
    zext_ln162_1_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln162_1_fu_770_p2),64));
    zext_ln162_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln162_fu_796_p2),64));
end behav;
