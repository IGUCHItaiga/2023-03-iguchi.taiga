-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clefia_ClefiaF1Xor is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_8_read : IN STD_LOGIC_VECTOR (7 downto 0);
    src_9_read : IN STD_LOGIC_VECTOR (7 downto 0);
    src_10_read : IN STD_LOGIC_VECTOR (7 downto 0);
    src_11_read : IN STD_LOGIC_VECTOR (7 downto 0);
    src_12_read : IN STD_LOGIC_VECTOR (7 downto 0);
    src_13_read : IN STD_LOGIC_VECTOR (7 downto 0);
    src_14_read : IN STD_LOGIC_VECTOR (7 downto 0);
    src_15_read : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce0 : OUT STD_LOGIC;
    rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce1 : OUT STD_LOGIC;
    rk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce2 : OUT STD_LOGIC;
    rk_q2 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_address3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce3 : OUT STD_LOGIC;
    rk_q3 : IN STD_LOGIC_VECTOR (7 downto 0);
    rk_offset : IN STD_LOGIC_VECTOR (6 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of clefia_ClefiaF1Xor is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal clefia_s1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_ce0 : STD_LOGIC;
    signal clefia_s1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_ce1 : STD_LOGIC;
    signal clefia_s1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_ce0 : STD_LOGIC;
    signal clefia_s0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_ce1 : STD_LOGIC;
    signal clefia_s0_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_15_read_2_reg_913 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal src_15_read_2_reg_913_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_15_read_2_reg_913_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_15_read_2_reg_913_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_14_read_2_reg_918 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_14_read_2_reg_918_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_14_read_2_reg_918_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_14_read_2_reg_918_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_13_read11_reg_923 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_13_read11_reg_923_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_13_read11_reg_923_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_13_read11_reg_923_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_12_read_2_reg_928 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_12_read_2_reg_928_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_12_read_2_reg_928_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_12_read_2_reg_928_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_11_read_2_reg_933 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_11_read_2_reg_933_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_11_read_2_reg_933_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_11_read_2_reg_933_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_10_read_2_reg_939 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_10_read_2_reg_939_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_10_read_2_reg_939_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_10_read_2_reg_939_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_9_read_2_reg_945 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_9_read_2_reg_945_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_9_read_2_reg_945_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_9_read_2_reg_945_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_8_read_2_reg_951 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_8_read_2_reg_951_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_8_read_2_reg_951_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_8_read_2_reg_951_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_load_reg_977 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_load_10_reg_982 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_load_11_reg_987 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_load_12_reg_992 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_reg_1017 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_10_reg_1022 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_11_reg_1027 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_12_reg_1032 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_35_fu_385_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_35_reg_1037 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_81_reg_1042 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_14_fu_431_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_14_reg_1047 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_15_fu_473_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_15_reg_1053 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_39_fu_545_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_39_reg_1059 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_89_reg_1064 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln134_42_fu_663_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_42_reg_1069 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_95_reg_1074 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln134_44_fu_739_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_44_reg_1079 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_99_reg_1084 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln124_90_fu_751_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_90_reg_1089 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_offset_cast1_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln124_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_54_fu_227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_55_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal rk_offset_cast_fu_206_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_fu_210_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_51_fu_221_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_52_fu_232_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_fu_243_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_31_fu_247_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_32_fu_251_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_33_fu_255_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_279_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_fu_287_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_fu_293_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_fu_301_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_77_fu_305_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_s_fu_313_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_78_fu_321_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_34_fu_329_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_34_fu_335_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_34_fu_343_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_79_fu_347_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_13_fu_355_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_80_fu_363_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_35_fu_371_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_35_fu_377_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_82_fu_397_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_36_fu_405_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_36_fu_411_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_36_fu_419_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_83_fu_423_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_fu_439_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_37_fu_447_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_37_fu_453_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_37_fu_461_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_85_fu_465_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_fu_481_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_38_fu_489_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_38_fu_495_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_38_fu_503_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_87_fu_507_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_16_fu_515_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_88_fu_523_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_39_fu_531_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_39_fu_537_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_90_fu_557_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_40_fu_565_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_40_fu_571_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_40_fu_579_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_91_fu_583_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_17_fu_591_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_92_fu_599_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_41_fu_607_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_41_fu_613_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_41_fu_621_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_93_fu_625_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_18_fu_633_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_94_fu_641_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_42_fu_649_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_42_fu_655_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_96_fu_675_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_43_fu_683_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_43_fu_689_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_43_fu_697_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_97_fu_701_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_19_fu_709_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_98_fu_717_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_44_fu_725_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_44_fu_731_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_80_fu_781_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_fu_757_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_4_fu_763_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_82_fu_790_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_83_fu_796_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_81_fu_785_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_85_fu_807_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_7_fu_769_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_9_fu_775_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_87_fu_816_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_88_fu_822_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_86_fu_811_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_92_fu_837_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_91_fu_833_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_95_fu_852_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_96_fu_857_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_94_fu_848_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_84_fu_801_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_89_fu_827_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_93_fu_842_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_97_fu_863_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clefia_ClefiaF0Xor_121_clefia_s1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaF0Xor_121_clefia_s0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    clefia_s1_U : component clefia_ClefiaF0Xor_121_clefia_s1_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s1_address0,
        ce0 => clefia_s1_ce0,
        q0 => clefia_s1_q0,
        address1 => clefia_s1_address1,
        ce1 => clefia_s1_ce1,
        q1 => clefia_s1_q1);

    clefia_s0_U : component clefia_ClefiaF0Xor_121_clefia_s0_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s0_address0,
        ce0 => clefia_s0_ce0,
        q0 => clefia_s0_q0,
        address1 => clefia_s0_address1,
        ce1 => clefia_s0_ce1,
        q1 => clefia_s0_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                rk_load_10_reg_982 <= rk_q2;
                rk_load_11_reg_987 <= rk_q1;
                rk_load_12_reg_992 <= rk_q0;
                rk_load_reg_977 <= rk_q3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                src_10_read_2_reg_939 <= src_10_read;
                src_10_read_2_reg_939_pp0_iter1_reg <= src_10_read_2_reg_939;
                src_11_read_2_reg_933 <= src_11_read;
                src_11_read_2_reg_933_pp0_iter1_reg <= src_11_read_2_reg_933;
                src_12_read_2_reg_928 <= src_12_read;
                src_12_read_2_reg_928_pp0_iter1_reg <= src_12_read_2_reg_928;
                src_13_read11_reg_923 <= src_13_read;
                src_13_read11_reg_923_pp0_iter1_reg <= src_13_read11_reg_923;
                src_14_read_2_reg_918 <= src_14_read;
                src_14_read_2_reg_918_pp0_iter1_reg <= src_14_read_2_reg_918;
                src_15_read_2_reg_913 <= src_15_read;
                src_15_read_2_reg_913_pp0_iter1_reg <= src_15_read_2_reg_913;
                src_8_read_2_reg_951 <= src_8_read;
                src_8_read_2_reg_951_pp0_iter1_reg <= src_8_read_2_reg_951;
                src_9_read_2_reg_945 <= src_9_read;
                src_9_read_2_reg_945_pp0_iter1_reg <= src_9_read_2_reg_945;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                src_10_read_2_reg_939_pp0_iter2_reg <= src_10_read_2_reg_939_pp0_iter1_reg;
                src_10_read_2_reg_939_pp0_iter3_reg <= src_10_read_2_reg_939_pp0_iter2_reg;
                src_11_read_2_reg_933_pp0_iter2_reg <= src_11_read_2_reg_933_pp0_iter1_reg;
                src_11_read_2_reg_933_pp0_iter3_reg <= src_11_read_2_reg_933_pp0_iter2_reg;
                src_12_read_2_reg_928_pp0_iter2_reg <= src_12_read_2_reg_928_pp0_iter1_reg;
                src_12_read_2_reg_928_pp0_iter3_reg <= src_12_read_2_reg_928_pp0_iter2_reg;
                src_13_read11_reg_923_pp0_iter2_reg <= src_13_read11_reg_923_pp0_iter1_reg;
                src_13_read11_reg_923_pp0_iter3_reg <= src_13_read11_reg_923_pp0_iter2_reg;
                src_14_read_2_reg_918_pp0_iter2_reg <= src_14_read_2_reg_918_pp0_iter1_reg;
                src_14_read_2_reg_918_pp0_iter3_reg <= src_14_read_2_reg_918_pp0_iter2_reg;
                src_15_read_2_reg_913_pp0_iter2_reg <= src_15_read_2_reg_913_pp0_iter1_reg;
                src_15_read_2_reg_913_pp0_iter3_reg <= src_15_read_2_reg_913_pp0_iter2_reg;
                src_8_read_2_reg_951_pp0_iter2_reg <= src_8_read_2_reg_951_pp0_iter1_reg;
                src_8_read_2_reg_951_pp0_iter3_reg <= src_8_read_2_reg_951_pp0_iter2_reg;
                src_9_read_2_reg_945_pp0_iter2_reg <= src_9_read_2_reg_945_pp0_iter1_reg;
                src_9_read_2_reg_945_pp0_iter3_reg <= src_9_read_2_reg_945_pp0_iter2_reg;
                tmp_81_reg_1042 <= select_ln131_35_fu_377_p3(7 downto 7);
                tmp_89_reg_1064 <= select_ln131_39_fu_537_p3(7 downto 7);
                tmp_95_reg_1074 <= select_ln131_42_fu_655_p3(7 downto 7);
                tmp_99_reg_1084 <= select_ln131_44_fu_731_p3(7 downto 7);
                trunc_ln134_35_reg_1037 <= trunc_ln134_35_fu_385_p1;
                trunc_ln134_39_reg_1059 <= trunc_ln134_39_fu_545_p1;
                trunc_ln134_42_reg_1069 <= trunc_ln134_42_fu_663_p1;
                trunc_ln134_44_reg_1079 <= trunc_ln134_44_fu_739_p1;
                x_assign_14_reg_1047 <= x_assign_14_fu_431_p3;
                x_assign_15_reg_1053 <= x_assign_15_fu_473_p3;
                xor_ln124_90_reg_1089 <= xor_ln124_90_fu_751_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                z_10_reg_1022 <= clefia_s0_q1;
                z_11_reg_1027 <= clefia_s1_q0;
                z_12_reg_1032 <= clefia_s0_q0;
                z_reg_1017 <= clefia_s1_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln124_51_fu_221_p2 <= std_logic_vector(unsigned(rk_offset_cast_fu_206_p1) + unsigned(ap_const_lv8_2));
    add_ln124_52_fu_232_p2 <= std_logic_vector(unsigned(rk_offset_cast_fu_206_p1) + unsigned(ap_const_lv8_3));
    add_ln124_fu_210_p2 <= std_logic_vector(unsigned(rk_offset_cast_fu_206_p1) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= src_8_read_2_reg_951_pp0_iter3_reg;
    ap_return_1 <= src_9_read_2_reg_945_pp0_iter3_reg;
    ap_return_2 <= src_10_read_2_reg_939_pp0_iter3_reg;
    ap_return_3 <= src_11_read_2_reg_933_pp0_iter3_reg;
    ap_return_4 <= xor_ln124_84_fu_801_p2;
    ap_return_5 <= xor_ln124_89_fu_827_p2;
    ap_return_6 <= xor_ln124_93_fu_842_p2;
    ap_return_7 <= xor_ln124_97_fu_863_p2;
    clefia_s0_address0 <= zext_ln176_fu_274_p1(8 - 1 downto 0);
    clefia_s0_address1 <= zext_ln174_fu_264_p1(8 - 1 downto 0);

    clefia_s0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            clefia_s0_ce0 <= ap_const_logic_1;
        else 
            clefia_s0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s0_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            clefia_s0_ce1 <= ap_const_logic_1;
        else 
            clefia_s0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    clefia_s1_address0 <= zext_ln175_fu_269_p1(8 - 1 downto 0);
    clefia_s1_address1 <= zext_ln173_fu_259_p1(8 - 1 downto 0);

    clefia_s1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            clefia_s1_ce0 <= ap_const_logic_1;
        else 
            clefia_s1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            clefia_s1_ce1 <= ap_const_logic_1;
        else 
            clefia_s1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln134_4_fu_763_p3 <= (trunc_ln134_39_reg_1059 & tmp_89_reg_1064);
    or_ln134_7_fu_769_p3 <= (trunc_ln134_42_reg_1069 & tmp_95_reg_1074);
    or_ln134_9_fu_775_p3 <= (trunc_ln134_44_reg_1079 & tmp_99_reg_1084);
    or_ln_fu_757_p3 <= (trunc_ln134_35_reg_1037 & tmp_81_reg_1042);
    rk_address0 <= zext_ln124_55_fu_238_p1(8 - 1 downto 0);
    rk_address1 <= zext_ln124_54_fu_227_p1(8 - 1 downto 0);
    rk_address2 <= zext_ln124_fu_216_p1(8 - 1 downto 0);
    rk_address3 <= rk_offset_cast1_fu_201_p1(8 - 1 downto 0);

    rk_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rk_ce0 <= ap_const_logic_1;
        else 
            rk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rk_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rk_ce1 <= ap_const_logic_1;
        else 
            rk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rk_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rk_ce2 <= ap_const_logic_1;
        else 
            rk_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    rk_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rk_ce3 <= ap_const_logic_1;
        else 
            rk_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    rk_offset_cast1_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rk_offset),64));
    rk_offset_cast_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rk_offset),8));
    select_ln131_34_fu_335_p3 <= 
        xor_ln132_34_fu_329_p2 when (tmp_78_fu_321_p3(0) = '1') else 
        x_assign_s_fu_313_p3;
    select_ln131_35_fu_377_p3 <= 
        xor_ln132_35_fu_371_p2 when (tmp_80_fu_363_p3(0) = '1') else 
        x_assign_13_fu_355_p3;
    select_ln131_36_fu_411_p3 <= 
        xor_ln132_36_fu_405_p2 when (tmp_82_fu_397_p3(0) = '1') else 
        clefia_s1_q0;
    select_ln131_37_fu_453_p3 <= 
        xor_ln132_37_fu_447_p2 when (tmp_84_fu_439_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_38_fu_495_p3 <= 
        xor_ln132_38_fu_489_p2 when (tmp_86_fu_481_p3(0) = '1') else 
        x_assign_15_fu_473_p3;
    select_ln131_39_fu_537_p3 <= 
        xor_ln132_39_fu_531_p2 when (tmp_88_fu_523_p3(0) = '1') else 
        x_assign_16_fu_515_p3;
    select_ln131_40_fu_571_p3 <= 
        xor_ln132_40_fu_565_p2 when (tmp_90_fu_557_p3(0) = '1') else 
        clefia_s1_q1;
    select_ln131_41_fu_613_p3 <= 
        xor_ln132_41_fu_607_p2 when (tmp_92_fu_599_p3(0) = '1') else 
        x_assign_17_fu_591_p3;
    select_ln131_42_fu_655_p3 <= 
        xor_ln132_42_fu_649_p2 when (tmp_94_fu_641_p3(0) = '1') else 
        x_assign_18_fu_633_p3;
    select_ln131_43_fu_689_p3 <= 
        xor_ln132_43_fu_683_p2 when (tmp_96_fu_675_p3(0) = '1') else 
        x_assign_14_fu_431_p3;
    select_ln131_44_fu_731_p3 <= 
        xor_ln132_44_fu_725_p2 when (tmp_98_fu_717_p3(0) = '1') else 
        x_assign_19_fu_709_p3;
    select_ln131_fu_293_p3 <= 
        xor_ln132_fu_287_p2 when (tmp_fu_279_p3(0) = '1') else 
        clefia_s0_q1;
    tmp_77_fu_305_p3 <= select_ln131_fu_293_p3(7 downto 7);
    tmp_78_fu_321_p3 <= select_ln131_fu_293_p3(6 downto 6);
    tmp_79_fu_347_p3 <= select_ln131_34_fu_335_p3(7 downto 7);
    tmp_80_fu_363_p3 <= select_ln131_34_fu_335_p3(6 downto 6);
    tmp_82_fu_397_p3 <= clefia_s1_q0(7 downto 7);
    tmp_83_fu_423_p3 <= select_ln131_36_fu_411_p3(7 downto 7);
    tmp_84_fu_439_p3 <= clefia_s0_q0(7 downto 7);
    tmp_85_fu_465_p3 <= select_ln131_37_fu_453_p3(7 downto 7);
    tmp_86_fu_481_p3 <= select_ln131_37_fu_453_p3(6 downto 6);
    tmp_87_fu_507_p3 <= select_ln131_38_fu_495_p3(7 downto 7);
    tmp_88_fu_523_p3 <= select_ln131_38_fu_495_p3(6 downto 6);
    tmp_90_fu_557_p3 <= clefia_s1_q1(7 downto 7);
    tmp_91_fu_583_p3 <= select_ln131_40_fu_571_p3(7 downto 7);
    tmp_92_fu_599_p3 <= select_ln131_40_fu_571_p3(6 downto 6);
    tmp_93_fu_625_p3 <= select_ln131_41_fu_613_p3(7 downto 7);
    tmp_94_fu_641_p3 <= select_ln131_41_fu_613_p3(6 downto 6);
    tmp_96_fu_675_p3 <= select_ln131_36_fu_411_p3(6 downto 6);
    tmp_97_fu_701_p3 <= select_ln131_43_fu_689_p3(7 downto 7);
    tmp_98_fu_717_p3 <= select_ln131_43_fu_689_p3(6 downto 6);
    tmp_fu_279_p3 <= clefia_s0_q1(7 downto 7);
    trunc_ln134_34_fu_343_p1 <= select_ln131_34_fu_335_p3(7 - 1 downto 0);
    trunc_ln134_35_fu_385_p1 <= select_ln131_35_fu_377_p3(7 - 1 downto 0);
    trunc_ln134_36_fu_419_p1 <= select_ln131_36_fu_411_p3(7 - 1 downto 0);
    trunc_ln134_37_fu_461_p1 <= select_ln131_37_fu_453_p3(7 - 1 downto 0);
    trunc_ln134_38_fu_503_p1 <= select_ln131_38_fu_495_p3(7 - 1 downto 0);
    trunc_ln134_39_fu_545_p1 <= select_ln131_39_fu_537_p3(7 - 1 downto 0);
    trunc_ln134_40_fu_579_p1 <= select_ln131_40_fu_571_p3(7 - 1 downto 0);
    trunc_ln134_41_fu_621_p1 <= select_ln131_41_fu_613_p3(7 - 1 downto 0);
    trunc_ln134_42_fu_663_p1 <= select_ln131_42_fu_655_p3(7 - 1 downto 0);
    trunc_ln134_43_fu_697_p1 <= select_ln131_43_fu_689_p3(7 - 1 downto 0);
    trunc_ln134_44_fu_739_p1 <= select_ln131_44_fu_731_p3(7 - 1 downto 0);
    trunc_ln134_fu_301_p1 <= select_ln131_fu_293_p3(7 - 1 downto 0);
    x_assign_13_fu_355_p3 <= (trunc_ln134_34_fu_343_p1 & tmp_79_fu_347_p3);
    x_assign_14_fu_431_p3 <= (trunc_ln134_36_fu_419_p1 & tmp_83_fu_423_p3);
    x_assign_15_fu_473_p3 <= (trunc_ln134_37_fu_461_p1 & tmp_85_fu_465_p3);
    x_assign_16_fu_515_p3 <= (trunc_ln134_38_fu_503_p1 & tmp_87_fu_507_p3);
    x_assign_17_fu_591_p3 <= (trunc_ln134_40_fu_579_p1 & tmp_91_fu_583_p3);
    x_assign_18_fu_633_p3 <= (trunc_ln134_41_fu_621_p1 & tmp_93_fu_625_p3);
    x_assign_19_fu_709_p3 <= (trunc_ln134_43_fu_697_p1 & tmp_97_fu_701_p3);
    x_assign_s_fu_313_p3 <= (trunc_ln134_fu_301_p1 & tmp_77_fu_305_p3);
    xor_ln124_31_fu_247_p2 <= (src_9_read_2_reg_945_pp0_iter1_reg xor rk_load_10_reg_982);
    xor_ln124_32_fu_251_p2 <= (src_10_read_2_reg_939_pp0_iter1_reg xor rk_load_11_reg_987);
    xor_ln124_33_fu_255_p2 <= (src_11_read_2_reg_933_pp0_iter1_reg xor rk_load_12_reg_992);
    xor_ln124_80_fu_781_p2 <= (x_assign_14_reg_1047 xor src_12_read_2_reg_928_pp0_iter3_reg);
    xor_ln124_81_fu_785_p2 <= (z_reg_1017 xor xor_ln124_80_fu_781_p2);
    xor_ln124_82_fu_790_p2 <= (or_ln_fu_757_p3 xor or_ln134_4_fu_763_p3);
    xor_ln124_83_fu_796_p2 <= (xor_ln124_82_fu_790_p2 xor x_assign_15_reg_1053);
    xor_ln124_84_fu_801_p2 <= (xor_ln124_83_fu_796_p2 xor xor_ln124_81_fu_785_p2);
    xor_ln124_85_fu_807_p2 <= (x_assign_15_reg_1053 xor x_assign_14_reg_1047);
    xor_ln124_86_fu_811_p2 <= (z_10_reg_1022 xor xor_ln124_85_fu_807_p2);
    xor_ln124_87_fu_816_p2 <= (or_ln134_9_fu_775_p3 xor or_ln134_7_fu_769_p3);
    xor_ln124_88_fu_822_p2 <= (xor_ln124_87_fu_816_p2 xor src_13_read11_reg_923_pp0_iter3_reg);
    xor_ln124_89_fu_827_p2 <= (xor_ln124_88_fu_822_p2 xor xor_ln124_86_fu_811_p2);
    xor_ln124_90_fu_751_p2 <= (x_assign_s_fu_313_p3 xor x_assign_17_fu_591_p3);
    xor_ln124_91_fu_833_p2 <= (z_11_reg_1027 xor xor_ln124_90_reg_1089);
    xor_ln124_92_fu_837_p2 <= (xor_ln124_82_fu_790_p2 xor src_14_read_2_reg_918_pp0_iter3_reg);
    xor_ln124_93_fu_842_p2 <= (xor_ln124_92_fu_837_p2 xor xor_ln124_91_fu_833_p2);
    xor_ln124_94_fu_848_p2 <= (z_12_reg_1032 xor xor_ln124_90_reg_1089);
    xor_ln124_95_fu_852_p2 <= (src_15_read_2_reg_913_pp0_iter3_reg xor or_ln134_9_fu_775_p3);
    xor_ln124_96_fu_857_p2 <= (xor_ln124_95_fu_852_p2 xor or_ln134_7_fu_769_p3);
    xor_ln124_97_fu_863_p2 <= (xor_ln124_96_fu_857_p2 xor xor_ln124_94_fu_848_p2);
    xor_ln124_fu_243_p2 <= (src_8_read_2_reg_951_pp0_iter1_reg xor rk_load_reg_977);
    xor_ln132_34_fu_329_p2 <= (x_assign_s_fu_313_p3 xor ap_const_lv8_E);
    xor_ln132_35_fu_371_p2 <= (x_assign_13_fu_355_p3 xor ap_const_lv8_E);
    xor_ln132_36_fu_405_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln132_37_fu_447_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_38_fu_489_p2 <= (x_assign_15_fu_473_p3 xor ap_const_lv8_E);
    xor_ln132_39_fu_531_p2 <= (x_assign_16_fu_515_p3 xor ap_const_lv8_E);
    xor_ln132_40_fu_565_p2 <= (clefia_s1_q1 xor ap_const_lv8_E);
    xor_ln132_41_fu_607_p2 <= (x_assign_17_fu_591_p3 xor ap_const_lv8_E);
    xor_ln132_42_fu_649_p2 <= (x_assign_18_fu_633_p3 xor ap_const_lv8_E);
    xor_ln132_43_fu_683_p2 <= (x_assign_14_fu_431_p3 xor ap_const_lv8_E);
    xor_ln132_44_fu_725_p2 <= (x_assign_19_fu_709_p3 xor ap_const_lv8_E);
    xor_ln132_fu_287_p2 <= (clefia_s0_q1 xor ap_const_lv8_E);
    zext_ln124_54_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_51_fu_221_p2),64));
    zext_ln124_55_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_52_fu_232_p2),64));
    zext_ln124_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_fu_210_p2),64));
    zext_ln173_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_fu_243_p2),64));
    zext_ln174_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_31_fu_247_p2),64));
    zext_ln175_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_32_fu_251_p2),64));
    zext_ln176_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_33_fu_255_p2),64));
end behav;
