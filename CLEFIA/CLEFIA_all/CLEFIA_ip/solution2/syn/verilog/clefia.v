// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="clefia_clefia,hls_ip_2022_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.084000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=7753,HLS_SYN_LUT=19538,HLS_VERSION=2022_1}" *)

module clefia (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_state9 = 26'd256;
parameter    ap_ST_fsm_state10 = 26'd512;
parameter    ap_ST_fsm_state11 = 26'd1024;
parameter    ap_ST_fsm_state12 = 26'd2048;
parameter    ap_ST_fsm_state13 = 26'd4096;
parameter    ap_ST_fsm_state14 = 26'd8192;
parameter    ap_ST_fsm_state15 = 26'd16384;
parameter    ap_ST_fsm_state16 = 26'd32768;
parameter    ap_ST_fsm_state17 = 26'd65536;
parameter    ap_ST_fsm_state18 = 26'd131072;
parameter    ap_ST_fsm_state19 = 26'd262144;
parameter    ap_ST_fsm_state20 = 26'd524288;
parameter    ap_ST_fsm_state21 = 26'd1048576;
parameter    ap_ST_fsm_state22 = 26'd2097152;
parameter    ap_ST_fsm_state23 = 26'd4194304;
parameter    ap_ST_fsm_state24 = 26'd8388608;
parameter    ap_ST_fsm_state25 = 26'd16777216;
parameter    ap_ST_fsm_state26 = 26'd33554432;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [7:0] pt_q0;
wire   [31:0] key_bitlen;
reg   [3:0] Clefia_enc_address0;
reg    Clefia_enc_ce0;
reg    Clefia_enc_we0;
wire   [7:0] Clefia_enc_q0;
reg   [31:0] key_bitlen_read_reg_423;
wire   [0:0] icmp_ln395_fu_417_p2;
reg   [0:0] icmp_ln395_reg_429;
wire   [0:0] grp_fu_405_p2;
reg   [0:0] icmp_ln398_reg_433;
wire   [0:0] grp_fu_411_p2;
reg   [0:0] icmp_ln401_reg_437;
wire    ap_CS_fsm_state5;
reg   [7:0] ct_0_reg_446;
wire    ap_CS_fsm_state6;
reg   [7:0] ct_1_reg_456;
wire    ap_CS_fsm_state7;
reg   [7:0] ct_2_reg_466;
wire    ap_CS_fsm_state8;
reg   [7:0] ct_3_reg_476;
wire    ap_CS_fsm_state9;
reg   [7:0] ct_4_reg_486;
wire    ap_CS_fsm_state10;
reg   [7:0] ct_5_reg_496;
wire    ap_CS_fsm_state11;
reg   [7:0] ct_6_reg_506;
wire    ap_CS_fsm_state12;
reg   [7:0] ct_7_reg_516;
wire    ap_CS_fsm_state13;
reg   [7:0] ct_8_reg_526;
wire    ap_CS_fsm_state14;
reg   [7:0] ct_9_reg_536;
wire    ap_CS_fsm_state15;
reg   [7:0] ct_10_reg_546;
wire    ap_CS_fsm_state16;
reg   [7:0] ct_11_reg_556;
wire    ap_CS_fsm_state17;
reg   [7:0] ct_12_reg_566;
wire    ap_CS_fsm_state18;
reg   [7:0] ct_13_reg_576;
wire    ap_CS_fsm_state19;
reg   [7:0] ct_14_reg_586;
wire    ap_CS_fsm_state20;
reg   [7:0] ct_15_reg_596;
wire    ap_CS_fsm_state21;
reg   [7:0] rk_address0;
reg    rk_ce0;
reg    rk_we0;
reg   [7:0] rk_d0;
wire   [7:0] rk_q0;
reg   [7:0] rk_address1;
reg    rk_ce1;
reg    rk_we1;
wire   [7:0] rk_q1;
wire    grp_ClefiaKeySet256_fu_321_ap_start;
wire    grp_ClefiaKeySet256_fu_321_ap_done;
wire    grp_ClefiaKeySet256_fu_321_ap_idle;
wire    grp_ClefiaKeySet256_fu_321_ap_ready;
wire   [7:0] grp_ClefiaKeySet256_fu_321_rk_address0;
wire    grp_ClefiaKeySet256_fu_321_rk_ce0;
wire    grp_ClefiaKeySet256_fu_321_rk_we0;
wire   [7:0] grp_ClefiaKeySet256_fu_321_rk_d0;
wire   [7:0] grp_ClefiaKeySet256_fu_321_rk_address1;
wire    grp_ClefiaKeySet256_fu_321_rk_ce1;
wire    grp_ClefiaKeySet192_fu_335_ap_start;
wire    grp_ClefiaKeySet192_fu_335_ap_done;
wire    grp_ClefiaKeySet192_fu_335_ap_idle;
wire    grp_ClefiaKeySet192_fu_335_ap_ready;
wire   [7:0] grp_ClefiaKeySet192_fu_335_rk_address0;
wire    grp_ClefiaKeySet192_fu_335_rk_ce0;
wire    grp_ClefiaKeySet192_fu_335_rk_we0;
wire   [7:0] grp_ClefiaKeySet192_fu_335_rk_d0;
wire   [7:0] grp_ClefiaKeySet192_fu_335_rk_address1;
wire    grp_ClefiaKeySet192_fu_335_rk_ce1;
wire    grp_ClefiaKeySet128_fu_349_ap_start;
wire    grp_ClefiaKeySet128_fu_349_ap_done;
wire    grp_ClefiaKeySet128_fu_349_ap_idle;
wire    grp_ClefiaKeySet128_fu_349_ap_ready;
wire   [7:0] grp_ClefiaKeySet128_fu_349_rk_address0;
wire    grp_ClefiaKeySet128_fu_349_rk_ce0;
wire    grp_ClefiaKeySet128_fu_349_rk_we0;
wire   [7:0] grp_ClefiaKeySet128_fu_349_rk_d0;
wire   [7:0] grp_ClefiaKeySet128_fu_349_rk_address1;
wire    grp_ClefiaKeySet128_fu_349_rk_ce1;
wire    grp_ClefiaKeySet128_fu_349_rk_we1;
wire   [7:0] grp_ClefiaKeySet128_fu_349_rk_d1;
wire    grp_ClefiaEncrypt_1_fu_361_ap_start;
wire    grp_ClefiaEncrypt_1_fu_361_ap_done;
wire    grp_ClefiaEncrypt_1_fu_361_ap_idle;
wire    grp_ClefiaEncrypt_1_fu_361_ap_ready;
wire   [3:0] grp_ClefiaEncrypt_1_fu_361_Clefia_enc_address0;
wire    grp_ClefiaEncrypt_1_fu_361_Clefia_enc_ce0;
wire    grp_ClefiaEncrypt_1_fu_361_Clefia_enc_we0;
wire   [7:0] grp_ClefiaEncrypt_1_fu_361_Clefia_enc_d0;
wire   [3:0] grp_ClefiaEncrypt_1_fu_361_pt_address0;
wire    grp_ClefiaEncrypt_1_fu_361_pt_ce0;
wire   [7:0] grp_ClefiaEncrypt_1_fu_361_rk_address0;
wire    grp_ClefiaEncrypt_1_fu_361_rk_ce0;
wire   [7:0] grp_ClefiaEncrypt_1_fu_361_rk_address1;
wire    grp_ClefiaEncrypt_1_fu_361_rk_ce1;
wire    grp_ClefiaDecrypt_1_fu_376_ap_start;
wire    grp_ClefiaDecrypt_1_fu_376_ap_done;
wire    grp_ClefiaDecrypt_1_fu_376_ap_idle;
wire    grp_ClefiaDecrypt_1_fu_376_ap_ready;
wire   [3:0] grp_ClefiaDecrypt_1_fu_376_Clefia_dec_address0;
wire    grp_ClefiaDecrypt_1_fu_376_Clefia_dec_ce0;
wire    grp_ClefiaDecrypt_1_fu_376_Clefia_dec_we0;
wire   [7:0] grp_ClefiaDecrypt_1_fu_376_Clefia_dec_d0;
wire   [7:0] grp_ClefiaDecrypt_1_fu_376_rk_address0;
wire    grp_ClefiaDecrypt_1_fu_376_rk_ce0;
wire   [7:0] grp_ClefiaDecrypt_1_fu_376_rk_address1;
wire    grp_ClefiaDecrypt_1_fu_376_rk_ce1;
reg   [4:0] r_reg_277;
wire    ap_CS_fsm_state2;
reg    ap_predicate_op55_call_state2;
reg    ap_predicate_op57_call_state2;
reg    ap_block_state2_on_subcall_done;
reg   [4:0] r_1_reg_299;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state22;
reg    grp_ClefiaKeySet256_fu_321_ap_start_reg;
reg    grp_ClefiaKeySet192_fu_335_ap_start_reg;
reg    grp_ClefiaKeySet128_fu_349_ap_start_reg;
reg    grp_ClefiaEncrypt_1_fu_361_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    grp_ClefiaDecrypt_1_fu_376_ap_start_reg;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
reg   [31:0] grp_fu_405_p0;
reg   [31:0] grp_fu_411_p0;
reg   [25:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
reg    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
reg    ap_ST_fsm_state26_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 26'd1;
#0 grp_ClefiaKeySet256_fu_321_ap_start_reg = 1'b0;
#0 grp_ClefiaKeySet192_fu_335_ap_start_reg = 1'b0;
#0 grp_ClefiaKeySet128_fu_349_ap_start_reg = 1'b0;
#0 grp_ClefiaEncrypt_1_fu_361_ap_start_reg = 1'b0;
#0 grp_ClefiaDecrypt_1_fu_376_ap_start_reg = 1'b0;
end

clefia_rk_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 224 ),
    .AddressWidth( 8 ))
rk_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(rk_address0),
    .ce0(rk_ce0),
    .we0(rk_we0),
    .d0(rk_d0),
    .q0(rk_q0),
    .address1(rk_address1),
    .ce1(rk_ce1),
    .we1(rk_we1),
    .d1(grp_ClefiaKeySet128_fu_349_rk_d1),
    .q1(rk_q1)
);

clefia_ClefiaKeySet256 grp_ClefiaKeySet256_fu_321(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ClefiaKeySet256_fu_321_ap_start),
    .ap_done(grp_ClefiaKeySet256_fu_321_ap_done),
    .ap_idle(grp_ClefiaKeySet256_fu_321_ap_idle),
    .ap_ready(grp_ClefiaKeySet256_fu_321_ap_ready),
    .rk_address0(grp_ClefiaKeySet256_fu_321_rk_address0),
    .rk_ce0(grp_ClefiaKeySet256_fu_321_rk_ce0),
    .rk_we0(grp_ClefiaKeySet256_fu_321_rk_we0),
    .rk_d0(grp_ClefiaKeySet256_fu_321_rk_d0),
    .rk_address1(grp_ClefiaKeySet256_fu_321_rk_address1),
    .rk_ce1(grp_ClefiaKeySet256_fu_321_rk_ce1),
    .rk_q1(rk_q1)
);

clefia_ClefiaKeySet192 grp_ClefiaKeySet192_fu_335(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ClefiaKeySet192_fu_335_ap_start),
    .ap_done(grp_ClefiaKeySet192_fu_335_ap_done),
    .ap_idle(grp_ClefiaKeySet192_fu_335_ap_idle),
    .ap_ready(grp_ClefiaKeySet192_fu_335_ap_ready),
    .rk_address0(grp_ClefiaKeySet192_fu_335_rk_address0),
    .rk_ce0(grp_ClefiaKeySet192_fu_335_rk_ce0),
    .rk_we0(grp_ClefiaKeySet192_fu_335_rk_we0),
    .rk_d0(grp_ClefiaKeySet192_fu_335_rk_d0),
    .rk_address1(grp_ClefiaKeySet192_fu_335_rk_address1),
    .rk_ce1(grp_ClefiaKeySet192_fu_335_rk_ce1),
    .rk_q1(rk_q1)
);

clefia_ClefiaKeySet128 grp_ClefiaKeySet128_fu_349(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ClefiaKeySet128_fu_349_ap_start),
    .ap_done(grp_ClefiaKeySet128_fu_349_ap_done),
    .ap_idle(grp_ClefiaKeySet128_fu_349_ap_idle),
    .ap_ready(grp_ClefiaKeySet128_fu_349_ap_ready),
    .rk_address0(grp_ClefiaKeySet128_fu_349_rk_address0),
    .rk_ce0(grp_ClefiaKeySet128_fu_349_rk_ce0),
    .rk_we0(grp_ClefiaKeySet128_fu_349_rk_we0),
    .rk_d0(grp_ClefiaKeySet128_fu_349_rk_d0),
    .rk_address1(grp_ClefiaKeySet128_fu_349_rk_address1),
    .rk_ce1(grp_ClefiaKeySet128_fu_349_rk_ce1),
    .rk_we1(grp_ClefiaKeySet128_fu_349_rk_we1),
    .rk_d1(grp_ClefiaKeySet128_fu_349_rk_d1)
);

clefia_ClefiaEncrypt_1 grp_ClefiaEncrypt_1_fu_361(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ClefiaEncrypt_1_fu_361_ap_start),
    .ap_done(grp_ClefiaEncrypt_1_fu_361_ap_done),
    .ap_idle(grp_ClefiaEncrypt_1_fu_361_ap_idle),
    .ap_ready(grp_ClefiaEncrypt_1_fu_361_ap_ready),
    .Clefia_enc_address0(grp_ClefiaEncrypt_1_fu_361_Clefia_enc_address0),
    .Clefia_enc_ce0(grp_ClefiaEncrypt_1_fu_361_Clefia_enc_ce0),
    .Clefia_enc_we0(grp_ClefiaEncrypt_1_fu_361_Clefia_enc_we0),
    .Clefia_enc_d0(grp_ClefiaEncrypt_1_fu_361_Clefia_enc_d0),
    .pt_address0(grp_ClefiaEncrypt_1_fu_361_pt_address0),
    .pt_ce0(grp_ClefiaEncrypt_1_fu_361_pt_ce0),
    .pt_q0(pt_q0),
    .rk_address0(grp_ClefiaEncrypt_1_fu_361_rk_address0),
    .rk_ce0(grp_ClefiaEncrypt_1_fu_361_rk_ce0),
    .rk_q0(rk_q0),
    .rk_address1(grp_ClefiaEncrypt_1_fu_361_rk_address1),
    .rk_ce1(grp_ClefiaEncrypt_1_fu_361_rk_ce1),
    .rk_q1(rk_q1),
    .r(r_reg_277)
);

clefia_ClefiaDecrypt_1 grp_ClefiaDecrypt_1_fu_376(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ClefiaDecrypt_1_fu_376_ap_start),
    .ap_done(grp_ClefiaDecrypt_1_fu_376_ap_done),
    .ap_idle(grp_ClefiaDecrypt_1_fu_376_ap_idle),
    .ap_ready(grp_ClefiaDecrypt_1_fu_376_ap_ready),
    .Clefia_dec_address0(grp_ClefiaDecrypt_1_fu_376_Clefia_dec_address0),
    .Clefia_dec_ce0(grp_ClefiaDecrypt_1_fu_376_Clefia_dec_ce0),
    .Clefia_dec_we0(grp_ClefiaDecrypt_1_fu_376_Clefia_dec_we0),
    .Clefia_dec_d0(grp_ClefiaDecrypt_1_fu_376_Clefia_dec_d0),
    .p_read(ct_0_reg_446),
    .p_read1(ct_1_reg_456),
    .p_read2(ct_2_reg_466),
    .p_read3(ct_3_reg_476),
    .p_read4(ct_4_reg_486),
    .p_read5(ct_5_reg_496),
    .p_read6(ct_6_reg_506),
    .p_read7(ct_7_reg_516),
    .p_read8(ct_8_reg_526),
    .p_read9(ct_9_reg_536),
    .p_read10(ct_10_reg_546),
    .p_read11(ct_11_reg_556),
    .p_read12(ct_12_reg_566),
    .p_read13(ct_13_reg_576),
    .p_read14(ct_14_reg_586),
    .p_read15(ct_15_reg_596),
    .rk_address0(grp_ClefiaDecrypt_1_fu_376_rk_address0),
    .rk_ce0(grp_ClefiaDecrypt_1_fu_376_rk_ce0),
    .rk_q0(rk_q0),
    .rk_address1(grp_ClefiaDecrypt_1_fu_376_rk_address1),
    .rk_ce1(grp_ClefiaDecrypt_1_fu_376_rk_ce1),
    .rk_q1(rk_q1),
    .r(r_1_reg_299)
);

clefia_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .pt_address0(grp_ClefiaEncrypt_1_fu_361_pt_address0),
    .pt_ce0(grp_ClefiaEncrypt_1_fu_361_pt_ce0),
    .pt_q0(pt_q0),
    .key_bitlen(key_bitlen),
    .Clefia_enc_address0(Clefia_enc_address0),
    .Clefia_enc_ce0(Clefia_enc_ce0),
    .Clefia_enc_we0(Clefia_enc_we0),
    .Clefia_enc_d0(grp_ClefiaEncrypt_1_fu_361_Clefia_enc_d0),
    .Clefia_enc_q0(Clefia_enc_q0),
    .Clefia_dec_address0(grp_ClefiaDecrypt_1_fu_376_Clefia_dec_address0),
    .Clefia_dec_ce0(grp_ClefiaDecrypt_1_fu_376_Clefia_dec_ce0),
    .Clefia_dec_we0(grp_ClefiaDecrypt_1_fu_376_Clefia_dec_we0),
    .Clefia_dec_d0(grp_ClefiaDecrypt_1_fu_376_Clefia_dec_d0),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ClefiaDecrypt_1_fu_376_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state25)) begin
            grp_ClefiaDecrypt_1_fu_376_ap_start_reg <= 1'b1;
        end else if ((grp_ClefiaDecrypt_1_fu_376_ap_ready == 1'b1)) begin
            grp_ClefiaDecrypt_1_fu_376_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ClefiaEncrypt_1_fu_361_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_ClefiaEncrypt_1_fu_361_ap_start_reg <= 1'b1;
        end else if ((grp_ClefiaEncrypt_1_fu_361_ap_ready == 1'b1)) begin
            grp_ClefiaEncrypt_1_fu_361_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ClefiaKeySet128_fu_349_ap_start_reg <= 1'b0;
    end else begin
        if ((((icmp_ln395_fu_417_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln395_reg_429 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
            grp_ClefiaKeySet128_fu_349_ap_start_reg <= 1'b1;
        end else if ((grp_ClefiaKeySet128_fu_349_ap_ready == 1'b1)) begin
            grp_ClefiaKeySet128_fu_349_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ClefiaKeySet192_fu_335_ap_start_reg <= 1'b0;
    end else begin
        if ((((grp_fu_405_p2 == 1'd1) & (icmp_ln395_fu_417_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((grp_fu_405_p2 == 1'd1) & (icmp_ln395_reg_429 == 1'd0) & (1'b1 == ap_CS_fsm_state21)))) begin
            grp_ClefiaKeySet192_fu_335_ap_start_reg <= 1'b1;
        end else if ((grp_ClefiaKeySet192_fu_335_ap_ready == 1'b1)) begin
            grp_ClefiaKeySet192_fu_335_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ClefiaKeySet256_fu_321_ap_start_reg <= 1'b0;
    end else begin
        if ((((grp_fu_411_p2 == 1'd1) & (grp_fu_405_p2 == 1'd0) & (icmp_ln395_fu_417_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((grp_fu_411_p2 == 1'd1) & (grp_fu_405_p2 == 1'd0) & (icmp_ln395_reg_429 == 1'd0) & (1'b1 == ap_CS_fsm_state21)))) begin
            grp_ClefiaKeySet256_fu_321_ap_start_reg <= 1'b1;
        end else if ((grp_ClefiaKeySet256_fu_321_ap_ready == 1'b1)) begin
            grp_ClefiaKeySet256_fu_321_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_411_p2 == 1'd0) & (grp_fu_405_p2 == 1'd0) & (icmp_ln395_reg_429 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
                r_1_reg_299[1] <= 1'b0;
        r_1_reg_299[2] <= 1'b0;
        r_1_reg_299[3] <= 1'b0;
        r_1_reg_299[4] <= 1'b0;
    end else if (((grp_ClefiaKeySet256_fu_321_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                r_1_reg_299[1] <= 1'b1;
        r_1_reg_299[2] <= 1'b0;
        r_1_reg_299[3] <= 1'b1;
        r_1_reg_299[4] <= 1'b1;
    end else if (((grp_ClefiaKeySet192_fu_335_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                r_1_reg_299[1] <= 1'b1;
        r_1_reg_299[2] <= 1'b1;
        r_1_reg_299[3] <= 1'b0;
        r_1_reg_299[4] <= 1'b1;
    end else if (((grp_ClefiaKeySet128_fu_349_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                r_1_reg_299[1] <= 1'b1;
        r_1_reg_299[2] <= 1'b0;
        r_1_reg_299[3] <= 1'b0;
        r_1_reg_299[4] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_411_p2 == 1'd0) & (grp_fu_405_p2 == 1'd0) & (icmp_ln395_fu_417_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                r_reg_277[1] <= 1'b0;
        r_reg_277[2] <= 1'b0;
        r_reg_277[3] <= 1'b0;
        r_reg_277[4] <= 1'b0;
    end else if (((icmp_ln401_reg_437 == 1'd1) & (icmp_ln398_reg_433 == 1'd0) & (icmp_ln395_reg_429 == 1'd0) & (1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                r_reg_277[1] <= 1'b1;
        r_reg_277[2] <= 1'b0;
        r_reg_277[3] <= 1'b1;
        r_reg_277[4] <= 1'b1;
    end else if (((icmp_ln398_reg_433 == 1'd1) & (icmp_ln395_reg_429 == 1'd0) & (1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                r_reg_277[1] <= 1'b1;
        r_reg_277[2] <= 1'b1;
        r_reg_277[3] <= 1'b0;
        r_reg_277[4] <= 1'b1;
    end else if (((icmp_ln395_reg_429 == 1'd1) & (1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                r_reg_277[1] <= 1'b1;
        r_reg_277[2] <= 1'b0;
        r_reg_277[3] <= 1'b0;
        r_reg_277[4] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ct_0_reg_446 <= Clefia_enc_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ct_10_reg_546 <= Clefia_enc_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ct_11_reg_556 <= Clefia_enc_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ct_12_reg_566 <= Clefia_enc_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ct_13_reg_576 <= Clefia_enc_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ct_14_reg_586 <= Clefia_enc_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        ct_15_reg_596 <= Clefia_enc_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ct_1_reg_456 <= Clefia_enc_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ct_2_reg_466 <= Clefia_enc_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ct_3_reg_476 <= Clefia_enc_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ct_4_reg_486 <= Clefia_enc_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ct_5_reg_496 <= Clefia_enc_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ct_6_reg_506 <= Clefia_enc_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ct_7_reg_516 <= Clefia_enc_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ct_8_reg_526 <= Clefia_enc_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ct_9_reg_536 <= Clefia_enc_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln395_reg_429 <= icmp_ln395_fu_417_p2;
        key_bitlen_read_reg_423 <= key_bitlen;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln395_fu_417_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln398_reg_433 <= grp_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_405_p2 == 1'd0) & (icmp_ln395_fu_417_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln401_reg_437 <= grp_fu_411_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        Clefia_enc_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        Clefia_enc_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        Clefia_enc_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        Clefia_enc_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        Clefia_enc_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        Clefia_enc_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        Clefia_enc_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        Clefia_enc_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        Clefia_enc_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        Clefia_enc_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        Clefia_enc_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        Clefia_enc_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        Clefia_enc_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        Clefia_enc_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Clefia_enc_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        Clefia_enc_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Clefia_enc_address0 = grp_ClefiaEncrypt_1_fu_361_Clefia_enc_address0;
    end else begin
        Clefia_enc_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        Clefia_enc_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Clefia_enc_ce0 = grp_ClefiaEncrypt_1_fu_361_Clefia_enc_ce0;
    end else begin
        Clefia_enc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Clefia_enc_we0 = grp_ClefiaEncrypt_1_fu_361_Clefia_enc_we0;
    end else begin
        Clefia_enc_we0 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

always @ (*) begin
    if ((grp_ClefiaKeySet256_fu_321_ap_done == 1'b0)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_ClefiaKeySet192_fu_335_ap_done == 1'b0)) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_ClefiaKeySet128_fu_349_ap_done == 1'b0)) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

assign ap_ST_fsm_state25_blk = 1'b0;

always @ (*) begin
    if ((grp_ClefiaDecrypt_1_fu_376_ap_done == 1'b0)) begin
        ap_ST_fsm_state26_blk = 1'b1;
    end else begin
        ap_ST_fsm_state26_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_on_subcall_done)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_ClefiaEncrypt_1_fu_361_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((grp_ClefiaDecrypt_1_fu_376_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_ClefiaDecrypt_1_fu_376_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_405_p0 = key_bitlen_read_reg_423;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_405_p0 = key_bitlen;
    end else begin
        grp_fu_405_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_411_p0 = key_bitlen_read_reg_423;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_411_p0 = key_bitlen;
    end else begin
        grp_fu_411_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        rk_address0 = grp_ClefiaDecrypt_1_fu_376_rk_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rk_address0 = grp_ClefiaEncrypt_1_fu_361_rk_address0;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((icmp_ln395_reg_429 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        rk_address0 = grp_ClefiaKeySet128_fu_349_rk_address0;
    end else if (((1'b1 == ap_CS_fsm_state23) | ((ap_predicate_op57_call_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        rk_address0 = grp_ClefiaKeySet192_fu_335_rk_address0;
    end else if (((1'b1 == ap_CS_fsm_state22) | ((ap_predicate_op55_call_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        rk_address0 = grp_ClefiaKeySet256_fu_321_rk_address0;
    end else begin
        rk_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        rk_address1 = grp_ClefiaDecrypt_1_fu_376_rk_address1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rk_address1 = grp_ClefiaEncrypt_1_fu_361_rk_address1;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((icmp_ln395_reg_429 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        rk_address1 = grp_ClefiaKeySet128_fu_349_rk_address1;
    end else if (((1'b1 == ap_CS_fsm_state23) | ((ap_predicate_op57_call_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        rk_address1 = grp_ClefiaKeySet192_fu_335_rk_address1;
    end else if (((1'b1 == ap_CS_fsm_state22) | ((ap_predicate_op55_call_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        rk_address1 = grp_ClefiaKeySet256_fu_321_rk_address1;
    end else begin
        rk_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        rk_ce0 = grp_ClefiaDecrypt_1_fu_376_rk_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rk_ce0 = grp_ClefiaEncrypt_1_fu_361_rk_ce0;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((icmp_ln395_reg_429 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        rk_ce0 = grp_ClefiaKeySet128_fu_349_rk_ce0;
    end else if (((1'b1 == ap_CS_fsm_state23) | ((ap_predicate_op57_call_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        rk_ce0 = grp_ClefiaKeySet192_fu_335_rk_ce0;
    end else if (((1'b1 == ap_CS_fsm_state22) | ((ap_predicate_op55_call_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        rk_ce0 = grp_ClefiaKeySet256_fu_321_rk_ce0;
    end else begin
        rk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        rk_ce1 = grp_ClefiaDecrypt_1_fu_376_rk_ce1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rk_ce1 = grp_ClefiaEncrypt_1_fu_361_rk_ce1;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((icmp_ln395_reg_429 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        rk_ce1 = grp_ClefiaKeySet128_fu_349_rk_ce1;
    end else if (((1'b1 == ap_CS_fsm_state23) | ((ap_predicate_op57_call_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        rk_ce1 = grp_ClefiaKeySet192_fu_335_rk_ce1;
    end else if (((1'b1 == ap_CS_fsm_state22) | ((ap_predicate_op55_call_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        rk_ce1 = grp_ClefiaKeySet256_fu_321_rk_ce1;
    end else begin
        rk_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((icmp_ln395_reg_429 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        rk_d0 = grp_ClefiaKeySet128_fu_349_rk_d0;
    end else if (((1'b1 == ap_CS_fsm_state23) | ((ap_predicate_op57_call_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        rk_d0 = grp_ClefiaKeySet192_fu_335_rk_d0;
    end else if (((1'b1 == ap_CS_fsm_state22) | ((ap_predicate_op55_call_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        rk_d0 = grp_ClefiaKeySet256_fu_321_rk_d0;
    end else begin
        rk_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((icmp_ln395_reg_429 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        rk_we0 = grp_ClefiaKeySet128_fu_349_rk_we0;
    end else if (((1'b1 == ap_CS_fsm_state23) | ((ap_predicate_op57_call_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        rk_we0 = grp_ClefiaKeySet192_fu_335_rk_we0;
    end else if (((1'b1 == ap_CS_fsm_state22) | ((ap_predicate_op55_call_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        rk_we0 = grp_ClefiaKeySet256_fu_321_rk_we0;
    end else begin
        rk_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((icmp_ln395_reg_429 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        rk_we1 = grp_ClefiaKeySet128_fu_349_rk_we1;
    end else begin
        rk_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_ClefiaEncrypt_1_fu_361_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((grp_fu_411_p2 == 1'd0) & (grp_fu_405_p2 == 1'd0) & (icmp_ln395_reg_429 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else if (((grp_fu_411_p2 == 1'd1) & (grp_fu_405_p2 == 1'd0) & (icmp_ln395_reg_429 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else if (((grp_fu_405_p2 == 1'd1) & (icmp_ln395_reg_429 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((grp_ClefiaKeySet256_fu_321_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((grp_ClefiaKeySet192_fu_335_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((grp_ClefiaKeySet128_fu_349_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((grp_ClefiaDecrypt_1_fu_376_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2_on_subcall_done = (((icmp_ln395_reg_429 == 1'd1) & (grp_ClefiaKeySet128_fu_349_ap_done == 1'b0)) | ((ap_predicate_op57_call_state2 == 1'b1) & (grp_ClefiaKeySet192_fu_335_ap_done == 1'b0)) | ((ap_predicate_op55_call_state2 == 1'b1) & (grp_ClefiaKeySet256_fu_321_ap_done == 1'b0)));
end

always @ (*) begin
    ap_predicate_op55_call_state2 = ((icmp_ln401_reg_437 == 1'd1) & (icmp_ln398_reg_433 == 1'd0) & (icmp_ln395_reg_429 == 1'd0));
end

always @ (*) begin
    ap_predicate_op57_call_state2 = ((icmp_ln398_reg_433 == 1'd1) & (icmp_ln395_reg_429 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_ClefiaDecrypt_1_fu_376_ap_start = grp_ClefiaDecrypt_1_fu_376_ap_start_reg;

assign grp_ClefiaEncrypt_1_fu_361_ap_start = grp_ClefiaEncrypt_1_fu_361_ap_start_reg;

assign grp_ClefiaKeySet128_fu_349_ap_start = grp_ClefiaKeySet128_fu_349_ap_start_reg;

assign grp_ClefiaKeySet192_fu_335_ap_start = grp_ClefiaKeySet192_fu_335_ap_start_reg;

assign grp_ClefiaKeySet256_fu_321_ap_start = grp_ClefiaKeySet256_fu_321_ap_start_reg;

assign grp_fu_405_p2 = ((grp_fu_405_p0 == 32'd192) ? 1'b1 : 1'b0);

assign grp_fu_411_p2 = ((grp_fu_411_p0 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln395_fu_417_p2 = ((key_bitlen == 32'd128) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    r_reg_277[0] <= 1'b0;
    r_1_reg_299[0] <= 1'b0;
end

endmodule //clefia
