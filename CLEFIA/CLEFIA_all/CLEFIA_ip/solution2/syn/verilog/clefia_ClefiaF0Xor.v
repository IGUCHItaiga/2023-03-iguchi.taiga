// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clefia_ClefiaF0Xor (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read8,
        p_read23,
        p_read24,
        p_read25,
        p_read26,
        p_read27,
        p_read28,
        p_read29,
        rk_address0,
        rk_ce0,
        rk_q0,
        rk_address1,
        rk_ce1,
        rk_q1,
        rk_offset,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p_read8;
input  [7:0] p_read23;
input  [7:0] p_read24;
input  [7:0] p_read25;
input  [7:0] p_read26;
input  [7:0] p_read27;
input  [7:0] p_read28;
input  [7:0] p_read29;
output  [7:0] rk_address0;
output   rk_ce0;
input  [7:0] rk_q0;
output  [7:0] rk_address1;
output   rk_ce1;
input  [7:0] rk_q1;
input  [7:0] rk_offset;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] rk_address0;
reg rk_ce0;
reg[7:0] rk_address1;
reg rk_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [7:0] clefia_s0_address0;
reg    clefia_s0_ce0;
wire   [7:0] clefia_s0_q0;
reg   [7:0] clefia_s1_address0;
reg    clefia_s1_ce0;
wire   [7:0] clefia_s1_q0;
reg   [7:0] reg_183;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] reg_187;
reg   [7:0] rk_offset_read_reg_749;
reg   [7:0] p_read_reg_765;
reg   [7:0] p_read_reg_765_pp0_iter1_reg;
reg   [7:0] p_read_7_reg_770;
reg   [7:0] p_read_7_reg_770_pp0_iter1_reg;
reg   [7:0] p_read_8_reg_775;
reg   [7:0] p_read_8_reg_775_pp0_iter1_reg;
reg   [7:0] p_read_9_reg_780;
reg   [7:0] p_read_9_reg_780_pp0_iter1_reg;
reg   [7:0] p_read_10_reg_785;
reg   [7:0] p_read_10_reg_785_pp0_iter1_reg;
reg   [7:0] p_read_11_reg_791;
reg   [7:0] p_read_11_reg_791_pp0_iter1_reg;
reg   [7:0] p_read_12_reg_797;
reg   [7:0] p_read_12_reg_797_pp0_iter1_reg;
reg   [7:0] p_read83_reg_803;
reg   [7:0] p_read83_reg_803_pp0_iter1_reg;
reg   [7:0] z_23_reg_839;
reg   [7:0] z_24_reg_844;
wire   [7:0] x_assign_29_fu_301_p3;
reg   [7:0] x_assign_29_reg_849;
wire   [7:0] x_assign_30_fu_385_p3;
reg   [7:0] x_assign_30_reg_855;
wire   [7:0] xor_ln124_149_fu_435_p2;
reg   [7:0] xor_ln124_149_reg_861;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
reg   [7:0] ap_port_reg_p_read8;
reg   [7:0] ap_port_reg_p_read23;
reg   [7:0] ap_port_reg_p_read24;
reg   [7:0] ap_port_reg_p_read25;
reg   [7:0] ap_port_reg_p_read26;
reg   [7:0] ap_port_reg_p_read27;
reg   [7:0] ap_port_reg_p_read28;
reg   [7:0] ap_port_reg_p_read29;
wire   [63:0] zext_ln124_80_fu_197_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln124_81_fu_208_p1;
wire   [63:0] rk_offset_cast_fu_213_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln124_fu_222_p1;
wire   [63:0] zext_ln152_fu_237_p1;
wire   [63:0] zext_ln153_fu_242_p1;
wire   [63:0] zext_ln150_fu_257_p1;
wire   [63:0] zext_ln151_fu_262_p1;
wire   [7:0] add_ln124_77_fu_191_p2;
wire   [7:0] add_ln124_78_fu_202_p2;
wire   [7:0] add_ln124_fu_217_p2;
wire   [7:0] xor_ln124_39_fu_227_p2;
wire   [7:0] xor_ln124_40_fu_232_p2;
wire   [7:0] xor_ln124_fu_247_p2;
wire   [7:0] xor_ln124_38_fu_252_p2;
wire   [0:0] tmp_146_fu_267_p3;
wire   [7:0] xor_ln132_66_fu_275_p2;
wire   [7:0] select_ln131_66_fu_281_p3;
wire   [6:0] trunc_ln134_66_fu_289_p1;
wire   [0:0] tmp_147_fu_293_p3;
wire   [0:0] tmp_148_fu_309_p3;
wire   [7:0] xor_ln132_67_fu_317_p2;
wire   [7:0] select_ln131_67_fu_323_p3;
wire   [6:0] trunc_ln134_67_fu_331_p1;
wire   [0:0] tmp_149_fu_335_p3;
wire   [0:0] tmp_150_fu_351_p3;
wire   [7:0] xor_ln132_68_fu_359_p2;
wire   [7:0] select_ln131_68_fu_365_p3;
wire   [6:0] trunc_ln134_68_fu_373_p1;
wire   [0:0] tmp_151_fu_377_p3;
wire   [0:0] tmp_152_fu_393_p3;
wire   [7:0] xor_ln132_69_fu_401_p2;
wire   [7:0] select_ln131_69_fu_407_p3;
wire   [6:0] trunc_ln134_69_fu_415_p1;
wire   [0:0] tmp_153_fu_419_p3;
wire   [7:0] or_ln134_s_fu_343_p3;
wire   [7:0] or_ln134_7_fu_427_p3;
wire   [0:0] tmp_fu_441_p3;
wire   [7:0] xor_ln132_fu_449_p2;
wire   [7:0] select_ln131_fu_455_p3;
wire   [6:0] trunc_ln134_fu_463_p1;
wire   [0:0] tmp_145_fu_467_p3;
wire   [0:0] tmp_154_fu_483_p3;
wire   [7:0] xor_ln132_70_fu_491_p2;
wire   [7:0] select_ln131_70_fu_497_p3;
wire   [6:0] trunc_ln134_70_fu_505_p1;
wire   [0:0] tmp_155_fu_509_p3;
wire   [7:0] x_assign_31_fu_517_p3;
wire   [0:0] tmp_156_fu_525_p3;
wire   [7:0] xor_ln132_71_fu_533_p2;
wire   [7:0] select_ln131_71_fu_539_p3;
wire   [6:0] trunc_ln134_71_fu_547_p1;
wire   [0:0] tmp_157_fu_551_p3;
wire   [7:0] x_assign_s_fu_475_p3;
wire   [0:0] tmp_158_fu_567_p3;
wire   [7:0] xor_ln132_72_fu_575_p2;
wire   [7:0] select_ln131_72_fu_581_p3;
wire   [6:0] trunc_ln134_72_fu_589_p1;
wire   [0:0] tmp_159_fu_593_p3;
wire   [7:0] xor_ln124_147_fu_609_p2;
wire   [7:0] xor_ln124_150_fu_620_p2;
wire   [7:0] xor_ln124_148_fu_614_p2;
wire   [7:0] xor_ln124_152_fu_630_p2;
wire   [7:0] xor_ln124_154_fu_641_p2;
wire   [7:0] xor_ln124_153_fu_635_p2;
wire   [7:0] or_ln134_8_fu_559_p3;
wire   [7:0] xor_ln124_156_fu_651_p2;
wire   [7:0] xor_ln124_158_fu_662_p2;
wire   [7:0] or_ln_fu_601_p3;
wire   [7:0] xor_ln124_159_fu_666_p2;
wire   [7:0] xor_ln124_157_fu_657_p2;
wire   [7:0] xor_ln124_161_fu_678_p2;
wire   [7:0] xor_ln124_163_fu_689_p2;
wire   [7:0] xor_ln124_164_fu_694_p2;
wire   [7:0] xor_ln124_162_fu_684_p2;
wire   [7:0] xor_ln124_151_fu_624_p2;
wire   [7:0] xor_ln124_155_fu_645_p2;
wire   [7:0] xor_ln124_160_fu_672_p2;
wire   [7:0] xor_ln124_165_fu_699_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to2;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s0_address0),
    .ce0(clefia_s0_ce0),
    .q0(clefia_s0_q0)
);

clefia_ClefiaF0Xor_2_clefia_s1_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s1_address0),
    .ce0(clefia_s1_ce0),
    .q0(clefia_s1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_port_reg_p_read23 <= p_read23;
        ap_port_reg_p_read24 <= p_read24;
        ap_port_reg_p_read25 <= p_read25;
        ap_port_reg_p_read26 <= p_read26;
        ap_port_reg_p_read27 <= p_read27;
        ap_port_reg_p_read28 <= p_read28;
        ap_port_reg_p_read29 <= p_read29;
        ap_port_reg_p_read8 <= p_read8;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_read83_reg_803 <= ap_port_reg_p_read8;
        p_read83_reg_803_pp0_iter1_reg <= p_read83_reg_803;
        p_read_10_reg_785 <= ap_port_reg_p_read25;
        p_read_10_reg_785_pp0_iter1_reg <= p_read_10_reg_785;
        p_read_11_reg_791 <= ap_port_reg_p_read24;
        p_read_11_reg_791_pp0_iter1_reg <= p_read_11_reg_791;
        p_read_12_reg_797 <= ap_port_reg_p_read23;
        p_read_12_reg_797_pp0_iter1_reg <= p_read_12_reg_797;
        p_read_7_reg_770 <= ap_port_reg_p_read28;
        p_read_7_reg_770_pp0_iter1_reg <= p_read_7_reg_770;
        p_read_8_reg_775 <= ap_port_reg_p_read27;
        p_read_8_reg_775_pp0_iter1_reg <= p_read_8_reg_775;
        p_read_9_reg_780 <= ap_port_reg_p_read26;
        p_read_9_reg_780_pp0_iter1_reg <= p_read_9_reg_780;
        p_read_reg_765 <= ap_port_reg_p_read29;
        p_read_reg_765_pp0_iter1_reg <= p_read_reg_765;
        x_assign_29_reg_849 <= x_assign_29_fu_301_p3;
        x_assign_30_reg_855 <= x_assign_30_fu_385_p3;
        xor_ln124_149_reg_861 <= xor_ln124_149_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_183 <= rk_q1;
        reg_187 <= rk_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rk_offset_read_reg_749 <= rk_offset;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        z_23_reg_839 <= clefia_s0_q0;
        z_24_reg_844 <= clefia_s1_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            clefia_s0_address0 = zext_ln150_fu_257_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            clefia_s0_address0 = zext_ln152_fu_237_p1;
        end else begin
            clefia_s0_address0 = 'bx;
        end
    end else begin
        clefia_s0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        clefia_s0_ce0 = 1'b1;
    end else begin
        clefia_s0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            clefia_s1_address0 = zext_ln151_fu_262_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            clefia_s1_address0 = zext_ln153_fu_242_p1;
        end else begin
            clefia_s1_address0 = 'bx;
        end
    end else begin
        clefia_s1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        clefia_s1_ce0 = 1'b1;
    end else begin
        clefia_s1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            rk_address0 = zext_ln124_fu_222_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            rk_address0 = zext_ln124_81_fu_208_p1;
        end else begin
            rk_address0 = 'bx;
        end
    end else begin
        rk_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            rk_address1 = rk_offset_cast_fu_213_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            rk_address1 = zext_ln124_80_fu_197_p1;
        end else begin
            rk_address1 = 'bx;
        end
    end else begin
        rk_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        rk_ce0 = 1'b1;
    end else begin
        rk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        rk_ce1 = 1'b1;
    end else begin
        rk_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln124_77_fu_191_p2 = (rk_offset + 8'd2);

assign add_ln124_78_fu_202_p2 = (rk_offset + 8'd3);

assign add_ln124_fu_217_p2 = (rk_offset_read_reg_749 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = p_read83_reg_803_pp0_iter1_reg;

assign ap_return_1 = p_read_12_reg_797_pp0_iter1_reg;

assign ap_return_2 = p_read_11_reg_791_pp0_iter1_reg;

assign ap_return_3 = p_read_10_reg_785_pp0_iter1_reg;

assign ap_return_4 = xor_ln124_151_fu_624_p2;

assign ap_return_5 = xor_ln124_155_fu_645_p2;

assign ap_return_6 = xor_ln124_160_fu_672_p2;

assign ap_return_7 = xor_ln124_165_fu_699_p2;

assign or_ln134_7_fu_427_p3 = {{trunc_ln134_69_fu_415_p1}, {tmp_153_fu_419_p3}};

assign or_ln134_8_fu_559_p3 = {{trunc_ln134_71_fu_547_p1}, {tmp_157_fu_551_p3}};

assign or_ln134_s_fu_343_p3 = {{trunc_ln134_67_fu_331_p1}, {tmp_149_fu_335_p3}};

assign or_ln_fu_601_p3 = {{trunc_ln134_72_fu_589_p1}, {tmp_159_fu_593_p3}};

assign rk_offset_cast_fu_213_p1 = rk_offset_read_reg_749;

assign select_ln131_66_fu_281_p3 = ((tmp_146_fu_267_p3[0:0] == 1'b1) ? xor_ln132_66_fu_275_p2 : clefia_s0_q0);

assign select_ln131_67_fu_323_p3 = ((tmp_148_fu_309_p3[0:0] == 1'b1) ? xor_ln132_67_fu_317_p2 : x_assign_29_fu_301_p3);

assign select_ln131_68_fu_365_p3 = ((tmp_150_fu_351_p3[0:0] == 1'b1) ? xor_ln132_68_fu_359_p2 : clefia_s1_q0);

assign select_ln131_69_fu_407_p3 = ((tmp_152_fu_393_p3[0:0] == 1'b1) ? xor_ln132_69_fu_401_p2 : x_assign_30_fu_385_p3);

assign select_ln131_70_fu_497_p3 = ((tmp_154_fu_483_p3[0:0] == 1'b1) ? xor_ln132_70_fu_491_p2 : clefia_s0_q0);

assign select_ln131_71_fu_539_p3 = ((tmp_156_fu_525_p3[0:0] == 1'b1) ? xor_ln132_71_fu_533_p2 : x_assign_31_fu_517_p3);

assign select_ln131_72_fu_581_p3 = ((tmp_158_fu_567_p3[0:0] == 1'b1) ? xor_ln132_72_fu_575_p2 : x_assign_s_fu_475_p3);

assign select_ln131_fu_455_p3 = ((tmp_fu_441_p3[0:0] == 1'b1) ? xor_ln132_fu_449_p2 : clefia_s1_q0);

assign tmp_145_fu_467_p3 = select_ln131_fu_455_p3[32'd7];

assign tmp_146_fu_267_p3 = clefia_s0_q0[32'd7];

assign tmp_147_fu_293_p3 = select_ln131_66_fu_281_p3[32'd7];

assign tmp_148_fu_309_p3 = select_ln131_66_fu_281_p3[32'd6];

assign tmp_149_fu_335_p3 = select_ln131_67_fu_323_p3[32'd7];

assign tmp_150_fu_351_p3 = clefia_s1_q0[32'd7];

assign tmp_151_fu_377_p3 = select_ln131_68_fu_365_p3[32'd7];

assign tmp_152_fu_393_p3 = select_ln131_68_fu_365_p3[32'd6];

assign tmp_153_fu_419_p3 = select_ln131_69_fu_407_p3[32'd7];

assign tmp_154_fu_483_p3 = clefia_s0_q0[32'd7];

assign tmp_155_fu_509_p3 = select_ln131_70_fu_497_p3[32'd7];

assign tmp_156_fu_525_p3 = select_ln131_70_fu_497_p3[32'd6];

assign tmp_157_fu_551_p3 = select_ln131_71_fu_539_p3[32'd7];

assign tmp_158_fu_567_p3 = select_ln131_fu_455_p3[32'd6];

assign tmp_159_fu_593_p3 = select_ln131_72_fu_581_p3[32'd7];

assign tmp_fu_441_p3 = clefia_s1_q0[32'd7];

assign trunc_ln134_66_fu_289_p1 = select_ln131_66_fu_281_p3[6:0];

assign trunc_ln134_67_fu_331_p1 = select_ln131_67_fu_323_p3[6:0];

assign trunc_ln134_68_fu_373_p1 = select_ln131_68_fu_365_p3[6:0];

assign trunc_ln134_69_fu_415_p1 = select_ln131_69_fu_407_p3[6:0];

assign trunc_ln134_70_fu_505_p1 = select_ln131_70_fu_497_p3[6:0];

assign trunc_ln134_71_fu_547_p1 = select_ln131_71_fu_539_p3[6:0];

assign trunc_ln134_72_fu_589_p1 = select_ln131_72_fu_581_p3[6:0];

assign trunc_ln134_fu_463_p1 = select_ln131_fu_455_p3[6:0];

assign x_assign_29_fu_301_p3 = {{trunc_ln134_66_fu_289_p1}, {tmp_147_fu_293_p3}};

assign x_assign_30_fu_385_p3 = {{trunc_ln134_68_fu_373_p1}, {tmp_151_fu_377_p3}};

assign x_assign_31_fu_517_p3 = {{trunc_ln134_70_fu_505_p1}, {tmp_155_fu_509_p3}};

assign x_assign_s_fu_475_p3 = {{trunc_ln134_fu_463_p1}, {tmp_145_fu_467_p3}};

assign xor_ln124_147_fu_609_p2 = (x_assign_s_fu_475_p3 ^ p_read_9_reg_780_pp0_iter1_reg);

assign xor_ln124_148_fu_614_p2 = (xor_ln124_147_fu_609_p2 ^ clefia_s0_q0);

assign xor_ln124_149_fu_435_p2 = (or_ln134_s_fu_343_p3 ^ or_ln134_7_fu_427_p3);

assign xor_ln124_150_fu_620_p2 = (xor_ln124_149_reg_861 ^ x_assign_30_reg_855);

assign xor_ln124_151_fu_624_p2 = (xor_ln124_150_fu_620_p2 ^ xor_ln124_148_fu_614_p2);

assign xor_ln124_152_fu_630_p2 = (x_assign_31_fu_517_p3 ^ x_assign_29_reg_849);

assign xor_ln124_153_fu_635_p2 = (xor_ln124_152_fu_630_p2 ^ clefia_s1_q0);

assign xor_ln124_154_fu_641_p2 = (xor_ln124_149_reg_861 ^ p_read_8_reg_775_pp0_iter1_reg);

assign xor_ln124_155_fu_645_p2 = (xor_ln124_154_fu_641_p2 ^ xor_ln124_153_fu_635_p2);

assign xor_ln124_156_fu_651_p2 = (x_assign_s_fu_475_p3 ^ or_ln134_8_fu_559_p3);

assign xor_ln124_157_fu_657_p2 = (z_23_reg_839 ^ xor_ln124_156_fu_651_p2);

assign xor_ln124_158_fu_662_p2 = (x_assign_30_reg_855 ^ p_read_7_reg_770_pp0_iter1_reg);

assign xor_ln124_159_fu_666_p2 = (xor_ln124_158_fu_662_p2 ^ or_ln_fu_601_p3);

assign xor_ln124_160_fu_672_p2 = (xor_ln124_159_fu_666_p2 ^ xor_ln124_157_fu_657_p2);

assign xor_ln124_161_fu_678_p2 = (x_assign_31_fu_517_p3 ^ or_ln134_8_fu_559_p3);

assign xor_ln124_162_fu_684_p2 = (z_24_reg_844 ^ xor_ln124_161_fu_678_p2);

assign xor_ln124_163_fu_689_p2 = (p_read_reg_765_pp0_iter1_reg ^ or_ln_fu_601_p3);

assign xor_ln124_164_fu_694_p2 = (xor_ln124_163_fu_689_p2 ^ x_assign_29_reg_849);

assign xor_ln124_165_fu_699_p2 = (xor_ln124_164_fu_694_p2 ^ xor_ln124_162_fu_684_p2);

assign xor_ln124_38_fu_252_p2 = (reg_187 ^ p_read_12_reg_797);

assign xor_ln124_39_fu_227_p2 = (reg_183 ^ p_read_11_reg_791);

assign xor_ln124_40_fu_232_p2 = (reg_187 ^ p_read_10_reg_785);

assign xor_ln124_fu_247_p2 = (reg_183 ^ p_read83_reg_803);

assign xor_ln132_66_fu_275_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_67_fu_317_p2 = (x_assign_29_fu_301_p3 ^ 8'd14);

assign xor_ln132_68_fu_359_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_69_fu_401_p2 = (x_assign_30_fu_385_p3 ^ 8'd14);

assign xor_ln132_70_fu_491_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_71_fu_533_p2 = (x_assign_31_fu_517_p3 ^ 8'd14);

assign xor_ln132_72_fu_575_p2 = (x_assign_s_fu_475_p3 ^ 8'd14);

assign xor_ln132_fu_449_p2 = (clefia_s1_q0 ^ 8'd14);

assign zext_ln124_80_fu_197_p1 = add_ln124_77_fu_191_p2;

assign zext_ln124_81_fu_208_p1 = add_ln124_78_fu_202_p2;

assign zext_ln124_fu_222_p1 = add_ln124_fu_217_p2;

assign zext_ln150_fu_257_p1 = xor_ln124_fu_247_p2;

assign zext_ln151_fu_262_p1 = xor_ln124_38_fu_252_p2;

assign zext_ln152_fu_237_p1 = xor_ln124_39_fu_227_p2;

assign zext_ln153_fu_242_p1 = xor_ln124_40_fu_232_p2;

endmodule //clefia_ClefiaF0Xor
