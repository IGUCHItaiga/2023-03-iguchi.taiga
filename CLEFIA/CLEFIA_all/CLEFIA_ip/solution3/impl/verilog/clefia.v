// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="clefia_clefia,hls_ip_2022_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.084000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=0,HLS_SYN_FF=3366,HLS_SYN_LUT=16910,HLS_VERSION=2022_1}" *)

module clefia (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 150'd1;
parameter    ap_ST_fsm_state2 = 150'd2;
parameter    ap_ST_fsm_state3 = 150'd4;
parameter    ap_ST_fsm_state4 = 150'd8;
parameter    ap_ST_fsm_state5 = 150'd16;
parameter    ap_ST_fsm_state6 = 150'd32;
parameter    ap_ST_fsm_state7 = 150'd64;
parameter    ap_ST_fsm_state8 = 150'd128;
parameter    ap_ST_fsm_state9 = 150'd256;
parameter    ap_ST_fsm_state10 = 150'd512;
parameter    ap_ST_fsm_state11 = 150'd1024;
parameter    ap_ST_fsm_state12 = 150'd2048;
parameter    ap_ST_fsm_state13 = 150'd4096;
parameter    ap_ST_fsm_state14 = 150'd8192;
parameter    ap_ST_fsm_state15 = 150'd16384;
parameter    ap_ST_fsm_state16 = 150'd32768;
parameter    ap_ST_fsm_state17 = 150'd65536;
parameter    ap_ST_fsm_state18 = 150'd131072;
parameter    ap_ST_fsm_state19 = 150'd262144;
parameter    ap_ST_fsm_state20 = 150'd524288;
parameter    ap_ST_fsm_state21 = 150'd1048576;
parameter    ap_ST_fsm_state22 = 150'd2097152;
parameter    ap_ST_fsm_state23 = 150'd4194304;
parameter    ap_ST_fsm_state24 = 150'd8388608;
parameter    ap_ST_fsm_state25 = 150'd16777216;
parameter    ap_ST_fsm_state26 = 150'd33554432;
parameter    ap_ST_fsm_state27 = 150'd67108864;
parameter    ap_ST_fsm_state28 = 150'd134217728;
parameter    ap_ST_fsm_state29 = 150'd268435456;
parameter    ap_ST_fsm_state30 = 150'd536870912;
parameter    ap_ST_fsm_state31 = 150'd1073741824;
parameter    ap_ST_fsm_state32 = 150'd2147483648;
parameter    ap_ST_fsm_state33 = 150'd4294967296;
parameter    ap_ST_fsm_state34 = 150'd8589934592;
parameter    ap_ST_fsm_state35 = 150'd17179869184;
parameter    ap_ST_fsm_state36 = 150'd34359738368;
parameter    ap_ST_fsm_state37 = 150'd68719476736;
parameter    ap_ST_fsm_state38 = 150'd137438953472;
parameter    ap_ST_fsm_state39 = 150'd274877906944;
parameter    ap_ST_fsm_state40 = 150'd549755813888;
parameter    ap_ST_fsm_state41 = 150'd1099511627776;
parameter    ap_ST_fsm_state42 = 150'd2199023255552;
parameter    ap_ST_fsm_state43 = 150'd4398046511104;
parameter    ap_ST_fsm_state44 = 150'd8796093022208;
parameter    ap_ST_fsm_state45 = 150'd17592186044416;
parameter    ap_ST_fsm_state46 = 150'd35184372088832;
parameter    ap_ST_fsm_state47 = 150'd70368744177664;
parameter    ap_ST_fsm_state48 = 150'd140737488355328;
parameter    ap_ST_fsm_state49 = 150'd281474976710656;
parameter    ap_ST_fsm_state50 = 150'd562949953421312;
parameter    ap_ST_fsm_state51 = 150'd1125899906842624;
parameter    ap_ST_fsm_state52 = 150'd2251799813685248;
parameter    ap_ST_fsm_state53 = 150'd4503599627370496;
parameter    ap_ST_fsm_state54 = 150'd9007199254740992;
parameter    ap_ST_fsm_state55 = 150'd18014398509481984;
parameter    ap_ST_fsm_state56 = 150'd36028797018963968;
parameter    ap_ST_fsm_state57 = 150'd72057594037927936;
parameter    ap_ST_fsm_state58 = 150'd144115188075855872;
parameter    ap_ST_fsm_state59 = 150'd288230376151711744;
parameter    ap_ST_fsm_state60 = 150'd576460752303423488;
parameter    ap_ST_fsm_state61 = 150'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 150'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 150'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 150'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 150'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 150'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 150'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 150'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 150'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 150'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 150'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 150'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 150'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 150'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 150'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 150'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 150'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 150'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 150'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 150'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 150'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 150'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 150'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 150'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 150'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 150'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 150'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 150'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 150'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 150'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 150'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 150'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 150'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 150'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 150'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 150'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 150'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 150'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 150'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 150'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 150'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 150'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 150'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 150'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 150'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 150'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 150'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 150'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 150'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 150'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 150'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 150'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 150'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 150'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 150'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 150'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 150'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 150'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 150'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 150'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 150'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 150'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 150'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 150'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 150'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 150'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 150'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 150'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 150'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 150'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 150'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 150'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 150'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 150'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 150'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 150'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 150'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 150'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 150'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 150'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 150'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 150'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 150'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 150'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 150'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 150'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 150'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 150'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 150'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 150'd713623846352979940529142984724747568191373312;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [149:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    pt_ce0;
wire   [7:0] pt_q0;
wire   [31:0] key_bitlen;
reg   [3:0] Clefia_enc_address0;
reg    Clefia_enc_ce0;
reg    Clefia_enc_we0;
reg   [7:0] Clefia_enc_d0;
wire   [7:0] Clefia_enc_q0;
reg   [3:0] Clefia_dec_address0;
reg    Clefia_dec_ce0;
reg    Clefia_dec_we0;
reg   [7:0] Clefia_dec_d0;
wire   [7:0] Clefia_dec_q0;
reg   [7:0] clefia_s0_address0;
reg    clefia_s0_ce0;
wire   [7:0] clefia_s0_q0;
reg   [7:0] clefia_s1_address0;
reg    clefia_s1_ce0;
wire   [7:0] clefia_s1_q0;
reg   [7:0] clefia_s1_address1;
reg    clefia_s1_ce1;
wire   [7:0] clefia_s1_q1;
wire   [4:0] grp_ClefiaKeySet_fu_347_ap_return;
reg   [4:0] reg_569;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state93;
reg   [7:0] reg_573;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state101;
reg   [7:0] reg_577;
wire    ap_CS_fsm_state31;
reg   [7:0] reg_581;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state108;
reg   [7:0] reg_588;
reg   [7:0] reg_595;
reg   [7:0] reg_600;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state109;
reg   [31:0] key_bitlen_read_reg_1218;
wire    ap_CS_fsm_state16;
wire   [0:0] grp_fu_606_p2;
reg   [0:0] icmp_ln193_reg_1223;
wire    ap_CS_fsm_state23;
wire   [7:0] trunc_ln188_fu_629_p1;
reg   [7:0] trunc_ln188_reg_1244;
wire    ap_CS_fsm_state24;
wire   [7:0] add_ln188_cast_fu_633_p2;
reg   [7:0] add_ln188_cast_reg_1249;
wire    ap_CS_fsm_state27;
wire   [7:0] y_0_fu_678_p2;
reg   [7:0] y_0_reg_1274;
wire    ap_CS_fsm_state28;
wire   [7:0] y_1_fu_703_p2;
reg   [7:0] y_1_reg_1279;
wire   [7:0] y_2_fu_722_p2;
reg   [7:0] y_2_reg_1284;
wire   [7:0] y_3_fu_741_p2;
reg   [7:0] y_3_reg_1289;
wire   [7:0] add_ln195_fu_748_p2;
reg   [7:0] add_ln195_reg_1294;
wire    ap_CS_fsm_state30;
wire   [7:0] y_0_1_fu_792_p2;
reg   [7:0] y_0_1_reg_1319;
wire    ap_CS_fsm_state34;
wire   [7:0] y_1_1_fu_811_p2;
reg   [7:0] y_1_1_reg_1324;
wire   [7:0] y_2_1_fu_836_p2;
reg   [7:0] y_2_1_reg_1329;
wire   [7:0] y_3_1_fu_855_p2;
reg   [7:0] y_3_1_reg_1334;
wire   [31:0] add_ln188_1_fu_865_p2;
reg   [31:0] add_ln188_1_reg_1339;
wire    ap_CS_fsm_state36;
wire   [36:0] add_ln188_fu_871_p2;
reg   [36:0] add_ln188_reg_1345;
wire   [0:0] icmp_ln197_fu_876_p2;
reg   [0:0] icmp_ln197_reg_1350;
wire   [7:0] shl_ln_fu_895_p3;
reg   [7:0] shl_ln_reg_1357;
wire    ap_CS_fsm_state59;
wire   [7:0] shl_ln1_fu_916_p3;
reg   [7:0] shl_ln1_reg_1362;
wire    ap_CS_fsm_state94;
wire   [7:0] add_ln432_fu_924_p2;
reg   [7:0] add_ln432_reg_1368;
wire   [7:0] add_ln433_fu_931_p2;
reg   [7:0] add_ln433_reg_1373;
wire    ap_CS_fsm_state96;
reg   [0:0] icmp_ln230_reg_1378;
wire    ap_CS_fsm_state99;
wire   [7:0] add_ln224_fu_958_p2;
reg   [7:0] add_ln224_reg_1399;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state103;
wire   [7:0] y_0_2_fu_1002_p2;
reg   [7:0] y_0_2_reg_1425;
wire    ap_CS_fsm_state104;
wire   [7:0] y_1_2_fu_1027_p2;
reg   [7:0] y_1_2_reg_1430;
wire   [7:0] y_2_2_fu_1046_p2;
reg   [7:0] y_2_2_reg_1435;
wire   [7:0] y_3_2_fu_1065_p2;
reg   [7:0] y_3_2_reg_1440;
wire   [7:0] or_ln232_fu_1072_p2;
reg   [7:0] or_ln232_reg_1445;
wire    ap_CS_fsm_state106;
reg   [7:0] x_1_3_reg_1450;
wire    ap_CS_fsm_state107;
wire   [7:0] y_0_3_fu_1115_p2;
reg   [7:0] y_0_3_reg_1475;
wire    ap_CS_fsm_state110;
wire   [7:0] y_1_3_fu_1134_p2;
reg   [7:0] y_1_3_reg_1480;
wire   [7:0] y_2_3_fu_1159_p2;
reg   [7:0] y_2_3_reg_1485;
wire   [7:0] y_3_3_fu_1178_p2;
reg   [7:0] y_3_3_reg_1490;
wire   [31:0] add_ln224_1_fu_1188_p2;
reg   [31:0] add_ln224_1_reg_1495;
wire    ap_CS_fsm_state112;
wire   [35:0] add_ln233_fu_1194_p2;
reg   [35:0] add_ln233_reg_1501;
wire   [0:0] icmp_ln234_fu_1199_p2;
reg   [0:0] icmp_ln234_reg_1506;
reg   [3:0] fin_address0;
reg    fin_ce0;
reg    fin_we0;
reg   [7:0] fin_d0;
wire   [7:0] fin_q0;
reg   [3:0] fout_address0;
reg    fout_ce0;
reg    fout_we0;
reg   [7:0] fout_d0;
wire   [7:0] fout_q0;
reg   [3:0] rin_address0;
reg    rin_ce0;
reg    rin_we0;
reg   [7:0] rin_d0;
wire   [7:0] rin_q0;
reg   [3:0] rout_address0;
reg    rout_ce0;
reg    rout_we0;
wire   [7:0] rout_q0;
reg    rout_ce1;
wire   [7:0] rout_q1;
reg   [3:0] fin_1_address0;
reg    fin_1_ce0;
reg    fin_1_we0;
reg   [7:0] fin_1_d0;
wire   [7:0] fin_1_q0;
reg   [3:0] fout_1_address0;
reg    fout_1_ce0;
reg    fout_1_we0;
reg   [7:0] fout_1_d0;
wire   [7:0] fout_1_q0;
reg   [3:0] rin_1_address0;
reg    rin_1_ce0;
reg    rin_1_we0;
reg   [7:0] rin_1_d0;
wire   [7:0] rin_1_q0;
reg   [3:0] rout_1_address0;
reg    rout_1_ce0;
reg    rout_1_we0;
wire   [7:0] rout_1_q0;
reg    rout_1_ce1;
wire   [7:0] rout_1_q1;
reg   [3:0] ct_address0;
reg    ct_ce0;
reg    ct_we0;
wire   [7:0] ct_q0;
reg   [7:0] rk_address0;
reg    rk_ce0;
reg    rk_we0;
wire   [7:0] rk_q0;
reg    rk_ce1;
wire   [7:0] rk_q1;
reg    grp_ByteCpy_1_fu_338_ap_start;
wire    grp_ByteCpy_1_fu_338_ap_done;
wire    grp_ByteCpy_1_fu_338_ap_idle;
wire    grp_ByteCpy_1_fu_338_ap_ready;
reg    grp_ByteCpy_1_fu_338_ap_ce;
wire   [3:0] grp_ByteCpy_1_fu_338_dst_address0;
wire    grp_ByteCpy_1_fu_338_dst_ce0;
wire    grp_ByteCpy_1_fu_338_dst_we0;
wire   [7:0] grp_ByteCpy_1_fu_338_dst_d0;
wire   [3:0] grp_ByteCpy_1_fu_338_pt_address0;
wire    grp_ByteCpy_1_fu_338_pt_ce0;
reg   [7:0] grp_ByteCpy_1_fu_338_pt_q0;
wire    grp_ClefiaKeySet_fu_347_ap_done;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state91;
wire    grp_ClefiaKeySet_fu_347_ap_start;
wire    grp_ClefiaKeySet_fu_347_ap_idle;
wire    grp_ClefiaKeySet_fu_347_ap_ready;
wire   [7:0] grp_ClefiaKeySet_fu_347_rk_address0;
wire    grp_ClefiaKeySet_fu_347_rk_ce0;
wire    grp_ClefiaKeySet_fu_347_rk_we0;
wire   [7:0] grp_ClefiaKeySet_fu_347_rk_d0;
wire    grp_ByteXor_112_2_fu_366_ap_start;
wire    grp_ByteXor_112_2_fu_366_ap_done;
wire    grp_ByteXor_112_2_fu_366_ap_idle;
wire    grp_ByteXor_112_2_fu_366_ap_ready;
wire   [3:0] grp_ByteXor_112_2_fu_366_a_address0;
wire    grp_ByteXor_112_2_fu_366_a_ce0;
wire    grp_ByteXor_112_2_fu_366_a_we0;
wire   [7:0] grp_ByteXor_112_2_fu_366_a_d0;
reg   [7:0] grp_ByteXor_112_2_fu_366_a_q0;
reg   [3:0] grp_ByteXor_112_2_fu_366_a_offset;
wire   [7:0] grp_ByteXor_112_2_fu_366_b_address0;
wire    grp_ByteXor_112_2_fu_366_b_ce0;
reg   [7:0] grp_ByteXor_112_2_fu_366_b_offset;
wire    grp_ByteCpy_11831_fu_378_ap_start;
wire    grp_ByteCpy_11831_fu_378_ap_done;
wire    grp_ByteCpy_11831_fu_378_ap_idle;
wire    grp_ByteCpy_11831_fu_378_ap_ready;
wire   [3:0] grp_ByteCpy_11831_fu_378_dst_address0;
wire    grp_ByteCpy_11831_fu_378_dst_ce0;
wire    grp_ByteCpy_11831_fu_378_dst_we0;
wire   [7:0] grp_ByteCpy_11831_fu_378_dst_d0;
wire   [3:0] grp_ByteCpy_11831_fu_378_src_address0;
wire    grp_ByteCpy_11831_fu_378_src_ce0;
reg   [7:0] grp_ByteCpy_11831_fu_378_src_q0;
wire    grp_ByteXor_11151_fu_384_ap_start;
wire    grp_ByteXor_11151_fu_384_ap_done;
wire    grp_ByteXor_11151_fu_384_ap_idle;
wire    grp_ByteXor_11151_fu_384_ap_ready;
wire   [3:0] grp_ByteXor_11151_fu_384_a_address0;
wire    grp_ByteXor_11151_fu_384_a_ce0;
reg   [7:0] grp_ByteXor_11151_fu_384_a_q0;
reg   [3:0] grp_ByteXor_11151_fu_384_a_offset;
wire   [7:0] grp_ByteXor_11151_fu_384_b_address0;
wire    grp_ByteXor_11151_fu_384_b_ce0;
reg   [7:0] grp_ByteXor_11151_fu_384_b_offset;
wire   [7:0] grp_ByteXor_11151_fu_384_ap_return_0;
wire   [7:0] grp_ByteXor_11151_fu_384_ap_return_1;
wire   [7:0] grp_ByteXor_11151_fu_384_ap_return_2;
wire   [7:0] grp_ByteXor_11151_fu_384_ap_return_3;
wire    grp_ByteCpy_fu_394_ap_start;
wire    grp_ByteCpy_fu_394_ap_done;
wire    grp_ByteCpy_fu_394_ap_idle;
wire    grp_ByteCpy_fu_394_ap_ready;
wire   [3:0] grp_ByteCpy_fu_394_dst_address0;
wire    grp_ByteCpy_fu_394_dst_ce0;
wire    grp_ByteCpy_fu_394_dst_we0;
wire   [7:0] grp_ByteCpy_fu_394_dst_d0;
wire   [3:0] grp_ByteCpy_fu_394_src_address0;
wire    grp_ByteCpy_fu_394_src_ce0;
reg   [7:0] grp_ByteCpy_fu_394_src_q0;
reg   [4:0] grp_ByteCpy_fu_394_bytelen_offset;
wire    grp_ClefiaMul2_fu_403_ap_ready;
reg   [7:0] grp_ClefiaMul2_fu_403_x;
wire   [7:0] grp_ClefiaMul2_fu_403_ap_return;
wire    grp_ClefiaMul2_fu_408_ap_ready;
reg   [7:0] grp_ClefiaMul2_fu_408_x;
wire   [7:0] grp_ClefiaMul2_fu_408_ap_return;
wire    grp_ClefiaMul2_fu_414_ap_ready;
wire   [7:0] grp_ClefiaMul2_fu_414_ap_return;
wire    grp_ClefiaMul2_fu_420_ap_ready;
reg   [7:0] grp_ClefiaMul2_fu_420_x;
wire   [7:0] grp_ClefiaMul2_fu_420_ap_return;
wire    grp_ClefiaMul2_fu_426_ap_ready;
reg   [7:0] grp_ClefiaMul2_fu_426_x;
wire   [7:0] grp_ClefiaMul2_fu_426_ap_return;
wire    grp_ClefiaMul2_fu_432_ap_ready;
reg   [7:0] grp_ClefiaMul2_fu_432_x;
wire   [7:0] grp_ClefiaMul2_fu_432_ap_return;
wire    grp_ClefiaMul2_fu_437_ap_ready;
wire   [7:0] grp_ClefiaMul2_fu_437_ap_return;
wire    grp_ClefiaMul2_fu_443_ap_ready;
reg   [7:0] grp_ClefiaMul2_fu_443_x;
wire   [7:0] grp_ClefiaMul2_fu_443_ap_return;
wire    grp_ClefiaMul2_fu_451_ap_ready;
wire   [7:0] grp_ClefiaMul2_fu_451_ap_return;
wire    grp_ClefiaMul2_fu_457_ap_ready;
wire   [7:0] grp_ClefiaMul2_fu_457_ap_return;
wire    grp_ClefiaMul2_fu_463_ap_ready;
wire   [7:0] grp_ClefiaMul2_fu_463_ap_return;
wire    grp_ClefiaMul2_fu_469_ap_ready;
wire   [7:0] grp_ClefiaMul2_fu_469_ap_return;
wire    grp_ByteXor_143_fu_475_ap_start;
wire    grp_ByteXor_143_fu_475_ap_done;
wire    grp_ByteXor_143_fu_475_ap_idle;
wire    grp_ByteXor_143_fu_475_ap_ready;
wire   [3:0] grp_ByteXor_143_fu_475_dst_address0;
wire    grp_ByteXor_143_fu_475_dst_ce0;
wire    grp_ByteXor_143_fu_475_dst_we0;
wire   [7:0] grp_ByteXor_143_fu_475_dst_d0;
reg   [3:0] grp_ByteXor_143_fu_475_dst_offset;
wire   [3:0] grp_ByteXor_143_fu_475_a_address0;
wire    grp_ByteXor_143_fu_475_a_ce0;
reg   [7:0] grp_ByteXor_143_fu_475_a_q0;
reg   [3:0] grp_ByteXor_143_fu_475_a_offset;
reg   [7:0] grp_ByteXor_143_fu_475_p_read;
reg   [7:0] grp_ByteXor_143_fu_475_p_read1;
reg   [7:0] grp_ByteXor_143_fu_475_p_read2;
reg   [7:0] grp_ByteXor_143_fu_475_p_read3;
wire    grp_ByteCpy_119_fu_491_ap_start;
wire    grp_ByteCpy_119_fu_491_ap_done;
wire    grp_ByteCpy_119_fu_491_ap_idle;
wire    grp_ByteCpy_119_fu_491_ap_ready;
wire   [3:0] grp_ByteCpy_119_fu_491_dst_address0;
wire    grp_ByteCpy_119_fu_491_dst_ce0;
wire    grp_ByteCpy_119_fu_491_dst_we0;
wire   [7:0] grp_ByteCpy_119_fu_491_dst_d0;
reg   [3:0] grp_ByteCpy_119_fu_491_dst_offset;
wire   [3:0] grp_ByteCpy_119_fu_491_src_address0;
wire    grp_ByteCpy_119_fu_491_src_ce0;
reg   [7:0] grp_ByteCpy_119_fu_491_src_q0;
reg   [3:0] grp_ByteCpy_119_fu_491_src_offset;
reg   [3:0] grp_ByteCpy_119_fu_491_bytelen_offset;
wire    grp_ByteCpy_116_fu_510_ap_start;
wire    grp_ByteCpy_116_fu_510_ap_done;
wire    grp_ByteCpy_116_fu_510_ap_idle;
wire    grp_ByteCpy_116_fu_510_ap_ready;
wire   [3:0] grp_ByteCpy_116_fu_510_dst_address0;
wire    grp_ByteCpy_116_fu_510_dst_ce0;
wire    grp_ByteCpy_116_fu_510_dst_we0;
wire   [7:0] grp_ByteCpy_116_fu_510_dst_d0;
wire   [3:0] grp_ByteCpy_116_fu_510_src_address0;
wire    grp_ByteCpy_116_fu_510_src_ce0;
reg   [7:0] grp_ByteCpy_116_fu_510_src_q0;
wire    grp_ByteCpy_2_fu_516_ap_start;
wire    grp_ByteCpy_2_fu_516_ap_done;
wire    grp_ByteCpy_2_fu_516_ap_idle;
wire    grp_ByteCpy_2_fu_516_ap_ready;
wire   [3:0] grp_ByteCpy_2_fu_516_Clefia_enc_address0;
wire    grp_ByteCpy_2_fu_516_Clefia_enc_ce0;
wire    grp_ByteCpy_2_fu_516_Clefia_enc_we0;
wire   [7:0] grp_ByteCpy_2_fu_516_Clefia_enc_d0;
wire   [3:0] grp_ByteCpy_2_fu_516_src_address0;
wire    grp_ByteCpy_2_fu_516_src_ce0;
reg   [7:0] grp_ByteCpy_2_fu_516_src_q0;
wire   [3:0] grp_ByteCpy_2_fu_516_src_address1;
wire    grp_ByteCpy_2_fu_516_src_ce1;
reg   [7:0] grp_ByteCpy_2_fu_516_src_q1;
wire    grp_ByteXor_1_fu_524_ap_start;
wire    grp_ByteXor_1_fu_524_ap_done;
wire    grp_ByteXor_1_fu_524_ap_idle;
wire    grp_ByteXor_1_fu_524_ap_ready;
wire   [3:0] grp_ByteXor_1_fu_524_Clefia_enc_address0;
wire    grp_ByteXor_1_fu_524_Clefia_enc_ce0;
wire    grp_ByteXor_1_fu_524_Clefia_enc_we0;
wire   [7:0] grp_ByteXor_1_fu_524_Clefia_enc_d0;
reg   [7:0] grp_ByteXor_1_fu_524_Clefia_enc_q0;
reg   [3:0] grp_ByteXor_1_fu_524_dst_offset;
reg   [3:0] grp_ByteXor_1_fu_524_a_offset;
wire   [7:0] grp_ByteXor_1_fu_524_b_address0;
wire    grp_ByteXor_1_fu_524_b_ce0;
wire   [7:0] grp_ByteXor_1_fu_524_b_address1;
wire    grp_ByteXor_1_fu_524_b_ce1;
reg   [7:0] grp_ByteXor_1_fu_524_b_offset;
reg    grp_ByteCpy_1_fu_338_ap_start_reg;
wire    ap_CS_fsm_state74;
reg   [149:0] ap_NS_fsm;
wire    ap_NS_fsm_state75;
reg    grp_ClefiaKeySet_fu_347_ap_start_reg;
wire    ap_CS_fsm_state92;
reg    grp_ByteXor_112_2_fu_366_ap_start_reg;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state97;
reg    grp_ByteCpy_11831_fu_378_ap_start_reg;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state98;
reg    grp_ByteXor_11151_fu_384_ap_start_reg;
reg    grp_ByteCpy_fu_394_ap_start_reg;
reg    grp_ByteXor_143_fu_475_ap_start_reg;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state105;
wire    ap_CS_fsm_state111;
reg    grp_ByteCpy_119_fu_491_ap_start_reg;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state114;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state113;
wire    ap_CS_fsm_state115;
reg    grp_ByteCpy_116_fu_510_ap_start_reg;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state116;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state117;
reg    grp_ByteCpy_2_fu_516_ap_start_reg;
wire    ap_NS_fsm_state42;
wire    ap_NS_fsm_state118;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state119;
wire    ap_CS_fsm_state120;
wire    ap_CS_fsm_state121;
wire    ap_CS_fsm_state122;
wire    ap_CS_fsm_state123;
wire    ap_CS_fsm_state124;
wire    ap_CS_fsm_state125;
wire    ap_CS_fsm_state126;
wire    ap_CS_fsm_state127;
wire    ap_CS_fsm_state128;
wire    ap_CS_fsm_state129;
wire    ap_CS_fsm_state130;
wire    ap_CS_fsm_state131;
wire    ap_CS_fsm_state132;
wire    ap_CS_fsm_state133;
wire    ap_CS_fsm_state134;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state118;
reg    grp_ByteXor_1_fu_524_ap_start_reg;
wire    ap_NS_fsm_state59;
wire    ap_CS_fsm_state66;
wire    ap_NS_fsm_state67;
wire    ap_NS_fsm_state135;
wire    ap_CS_fsm_state142;
wire    ap_NS_fsm_state143;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state135;
wire    ap_CS_fsm_state136;
wire    ap_CS_fsm_state137;
wire    ap_CS_fsm_state138;
wire    ap_CS_fsm_state139;
wire    ap_CS_fsm_state140;
wire    ap_CS_fsm_state141;
wire    ap_CS_fsm_state143;
wire    ap_CS_fsm_state144;
wire    ap_CS_fsm_state145;
wire    ap_CS_fsm_state146;
wire    ap_CS_fsm_state147;
wire    ap_CS_fsm_state148;
wire    ap_CS_fsm_state149;
wire    ap_CS_fsm_state150;
wire   [7:0] add_ln422_fu_903_p2;
wire   [7:0] add_ln423_fu_910_p2;
wire   [63:0] zext_ln150_fu_640_p1;
wire   [63:0] zext_ln151_fu_645_p1;
wire   [63:0] zext_ln152_fu_650_p1;
wire   [63:0] zext_ln153_fu_655_p1;
wire   [63:0] zext_ln173_fu_754_p1;
wire   [63:0] zext_ln174_fu_759_p1;
wire   [63:0] zext_ln175_fu_764_p1;
wire   [63:0] zext_ln176_fu_769_p1;
wire   [63:0] zext_ln150_1_fu_964_p1;
wire   [63:0] zext_ln151_1_fu_969_p1;
wire   [63:0] zext_ln152_1_fu_974_p1;
wire   [63:0] zext_ln153_1_fu_979_p1;
wire   [63:0] zext_ln173_1_fu_1078_p1;
wire   [63:0] zext_ln175_1_fu_1083_p1;
wire   [63:0] zext_ln176_1_fu_1088_p1;
wire   [63:0] zext_ln174_1_fu_1093_p1;
reg   [36:0] idx_fu_174;
reg    ap_predicate_op329_call_state39;
reg    ap_block_state39_on_subcall_done;
wire   [0:0] icmp_ln193_1_fu_882_p2;
reg   [31:0] dec12_i_i_in_fu_178;
wire   [31:0] zext_ln460_fu_612_p1;
reg   [35:0] idx34_fu_182;
reg    ap_predicate_op529_call_state115;
reg    ap_block_state115_on_subcall_done;
wire   [0:0] icmp_ln230_1_fu_1205_p2;
reg   [31:0] dec12_i_i14_in_fu_186;
wire   [31:0] zext_ln460_1_fu_937_p1;
wire   [7:0] xor_ln155_1_fu_666_p2;
wire   [7:0] xor_ln155_2_fu_672_p2;
wire   [7:0] xor_ln155_fu_660_p2;
wire   [7:0] xor_ln156_1_fu_691_p2;
wire   [7:0] xor_ln156_2_fu_697_p2;
wire   [7:0] xor_ln156_fu_685_p2;
wire   [7:0] grp_fu_557_p2;
wire   [7:0] xor_ln157_2_fu_716_p2;
wire   [7:0] xor_ln157_fu_710_p2;
wire   [7:0] xor_ln158_1_fu_735_p2;
wire   [7:0] xor_ln158_fu_729_p2;
wire   [7:0] xor_ln178_1_fu_780_p2;
wire   [7:0] xor_ln178_2_fu_786_p2;
wire   [7:0] xor_ln178_fu_774_p2;
wire   [7:0] grp_fu_563_p2;
wire   [7:0] xor_ln179_2_fu_805_p2;
wire   [7:0] xor_ln179_fu_799_p2;
wire   [7:0] xor_ln180_1_fu_824_p2;
wire   [7:0] xor_ln180_2_fu_830_p2;
wire   [7:0] xor_ln180_fu_818_p2;
wire   [7:0] xor_ln181_1_fu_849_p2;
wire   [7:0] xor_ln181_fu_843_p2;
wire   [7:0] trunc_ln224_fu_954_p1;
wire   [7:0] xor_ln155_5_fu_990_p2;
wire   [7:0] xor_ln155_6_fu_996_p2;
wire   [7:0] xor_ln155_4_fu_984_p2;
wire   [7:0] xor_ln156_5_fu_1015_p2;
wire   [7:0] xor_ln156_6_fu_1021_p2;
wire   [7:0] xor_ln156_4_fu_1009_p2;
wire   [7:0] xor_ln157_6_fu_1040_p2;
wire   [7:0] xor_ln157_4_fu_1034_p2;
wire   [7:0] xor_ln158_4_fu_1059_p2;
wire   [7:0] xor_ln158_3_fu_1053_p2;
wire   [7:0] xor_ln178_5_fu_1103_p2;
wire   [7:0] xor_ln178_6_fu_1109_p2;
wire   [7:0] xor_ln178_4_fu_1097_p2;
wire   [7:0] xor_ln179_6_fu_1128_p2;
wire   [7:0] xor_ln179_4_fu_1122_p2;
wire   [7:0] xor_ln180_5_fu_1147_p2;
wire   [7:0] xor_ln180_6_fu_1153_p2;
wire   [7:0] xor_ln180_4_fu_1141_p2;
wire   [7:0] xor_ln181_4_fu_1172_p2;
wire   [7:0] xor_ln181_3_fu_1166_p2;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
reg    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
reg    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
reg    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
reg    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
reg    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
reg    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
reg    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
reg    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
reg    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
wire    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
reg    ap_block_state93_on_subcall_done;
reg    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
reg    ap_ST_fsm_state95_blk;
wire    ap_ST_fsm_state96_blk;
reg    ap_ST_fsm_state97_blk;
wire    ap_ST_fsm_state98_blk;
reg    ap_ST_fsm_state99_blk;
wire    ap_ST_fsm_state100_blk;
reg    ap_ST_fsm_state101_blk;
wire    ap_ST_fsm_state102_blk;
reg    ap_ST_fsm_state103_blk;
wire    ap_ST_fsm_state104_blk;
reg    ap_ST_fsm_state105_blk;
wire    ap_ST_fsm_state106_blk;
reg    ap_ST_fsm_state107_blk;
wire    ap_ST_fsm_state108_blk;
reg    ap_ST_fsm_state109_blk;
wire    ap_ST_fsm_state110_blk;
reg    ap_ST_fsm_state111_blk;
wire    ap_ST_fsm_state112_blk;
reg    ap_ST_fsm_state113_blk;
wire    ap_ST_fsm_state114_blk;
reg    ap_ST_fsm_state115_blk;
wire    ap_ST_fsm_state116_blk;
reg    ap_ST_fsm_state117_blk;
wire    ap_ST_fsm_state118_blk;
wire    ap_ST_fsm_state119_blk;
wire    ap_ST_fsm_state120_blk;
wire    ap_ST_fsm_state121_blk;
wire    ap_ST_fsm_state122_blk;
wire    ap_ST_fsm_state123_blk;
wire    ap_ST_fsm_state124_blk;
wire    ap_ST_fsm_state125_blk;
wire    ap_ST_fsm_state126_blk;
wire    ap_ST_fsm_state127_blk;
wire    ap_ST_fsm_state128_blk;
wire    ap_ST_fsm_state129_blk;
wire    ap_ST_fsm_state130_blk;
wire    ap_ST_fsm_state131_blk;
wire    ap_ST_fsm_state132_blk;
wire    ap_ST_fsm_state133_blk;
wire    ap_ST_fsm_state134_blk;
wire    ap_ST_fsm_state135_blk;
wire    ap_ST_fsm_state136_blk;
wire    ap_ST_fsm_state137_blk;
wire    ap_ST_fsm_state138_blk;
wire    ap_ST_fsm_state139_blk;
wire    ap_ST_fsm_state140_blk;
wire    ap_ST_fsm_state141_blk;
wire    ap_ST_fsm_state142_blk;
wire    ap_ST_fsm_state143_blk;
wire    ap_ST_fsm_state144_blk;
wire    ap_ST_fsm_state145_blk;
wire    ap_ST_fsm_state146_blk;
wire    ap_ST_fsm_state147_blk;
wire    ap_ST_fsm_state148_blk;
wire    ap_ST_fsm_state149_blk;
wire    ap_ST_fsm_state150_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 150'd1;
#0 grp_ByteCpy_1_fu_338_ap_start_reg = 1'b0;
#0 grp_ClefiaKeySet_fu_347_ap_start_reg = 1'b0;
#0 grp_ByteXor_112_2_fu_366_ap_start_reg = 1'b0;
#0 grp_ByteCpy_11831_fu_378_ap_start_reg = 1'b0;
#0 grp_ByteXor_11151_fu_384_ap_start_reg = 1'b0;
#0 grp_ByteCpy_fu_394_ap_start_reg = 1'b0;
#0 grp_ByteXor_143_fu_475_ap_start_reg = 1'b0;
#0 grp_ByteCpy_119_fu_491_ap_start_reg = 1'b0;
#0 grp_ByteCpy_116_fu_510_ap_start_reg = 1'b0;
#0 grp_ByteCpy_2_fu_516_ap_start_reg = 1'b0;
#0 grp_ByteXor_1_fu_524_ap_start_reg = 1'b0;
end

clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(clefia_s0_address0),
    .ce0(clefia_s0_ce0),
    .q0(clefia_s0_q0)
);

clefia_ClefiaF1Xor_1_clefia_s1_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(clefia_s1_address0),
    .ce0(clefia_s1_ce0),
    .q0(clefia_s1_q0),
    .address1(clefia_s1_address1),
    .ce1(clefia_s1_ce1),
    .q1(clefia_s1_q1)
);

clefia_fin_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
fin_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fin_address0),
    .ce0(fin_ce0),
    .we0(fin_we0),
    .d0(fin_d0),
    .q0(fin_q0)
);

clefia_fin_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
fout_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fout_address0),
    .ce0(fout_ce0),
    .we0(fout_we0),
    .d0(fout_d0),
    .q0(fout_q0)
);

clefia_fin_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
rin_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(rin_address0),
    .ce0(rin_ce0),
    .we0(rin_we0),
    .d0(rin_d0),
    .q0(rin_q0)
);

clefia_rout_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
rout_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(rout_address0),
    .ce0(rout_ce0),
    .we0(rout_we0),
    .d0(grp_ByteCpy_116_fu_510_dst_d0),
    .q0(rout_q0),
    .address1(grp_ByteCpy_2_fu_516_src_address1),
    .ce1(rout_ce1),
    .q1(rout_q1)
);

clefia_fin_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
fin_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fin_1_address0),
    .ce0(fin_1_ce0),
    .we0(fin_1_we0),
    .d0(fin_1_d0),
    .q0(fin_1_q0)
);

clefia_fin_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
fout_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fout_1_address0),
    .ce0(fout_1_ce0),
    .we0(fout_1_we0),
    .d0(fout_1_d0),
    .q0(fout_1_q0)
);

clefia_fin_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
rin_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(rin_1_address0),
    .ce0(rin_1_ce0),
    .we0(rin_1_we0),
    .d0(rin_1_d0),
    .q0(rin_1_q0)
);

clefia_rout_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
rout_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(rout_1_address0),
    .ce0(rout_1_ce0),
    .we0(rout_1_we0),
    .d0(grp_ByteCpy_116_fu_510_dst_d0),
    .q0(rout_1_q0),
    .address1(grp_ByteCpy_2_fu_516_src_address1),
    .ce1(rout_1_ce1),
    .q1(rout_1_q1)
);

clefia_fin_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
ct_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ct_address0),
    .ce0(ct_ce0),
    .we0(ct_we0),
    .d0(grp_ByteCpy_1_fu_338_dst_d0),
    .q0(ct_q0)
);

clefia_rk_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 224 ),
    .AddressWidth( 8 ))
rk_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(rk_address0),
    .ce0(rk_ce0),
    .we0(rk_we0),
    .d0(grp_ClefiaKeySet_fu_347_rk_d0),
    .q0(rk_q0),
    .address1(grp_ByteXor_1_fu_524_b_address1),
    .ce1(rk_ce1),
    .q1(rk_q1)
);

clefia_ByteCpy_1 grp_ByteCpy_1_fu_338(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ByteCpy_1_fu_338_ap_start),
    .ap_done(grp_ByteCpy_1_fu_338_ap_done),
    .ap_idle(grp_ByteCpy_1_fu_338_ap_idle),
    .ap_ready(grp_ByteCpy_1_fu_338_ap_ready),
    .ap_ce(grp_ByteCpy_1_fu_338_ap_ce),
    .dst_address0(grp_ByteCpy_1_fu_338_dst_address0),
    .dst_ce0(grp_ByteCpy_1_fu_338_dst_ce0),
    .dst_we0(grp_ByteCpy_1_fu_338_dst_we0),
    .dst_d0(grp_ByteCpy_1_fu_338_dst_d0),
    .pt_address0(grp_ByteCpy_1_fu_338_pt_address0),
    .pt_ce0(grp_ByteCpy_1_fu_338_pt_ce0),
    .pt_q0(grp_ByteCpy_1_fu_338_pt_q0)
);

clefia_ClefiaKeySet grp_ClefiaKeySet_fu_347(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ClefiaKeySet_fu_347_ap_start),
    .ap_done(grp_ClefiaKeySet_fu_347_ap_done),
    .ap_idle(grp_ClefiaKeySet_fu_347_ap_idle),
    .ap_ready(grp_ClefiaKeySet_fu_347_ap_ready),
    .rk_address0(grp_ClefiaKeySet_fu_347_rk_address0),
    .rk_ce0(grp_ClefiaKeySet_fu_347_rk_ce0),
    .rk_we0(grp_ClefiaKeySet_fu_347_rk_we0),
    .rk_d0(grp_ClefiaKeySet_fu_347_rk_d0),
    .rk_q0(rk_q0),
    .key_bitlen(key_bitlen_read_reg_1218),
    .ap_return(grp_ClefiaKeySet_fu_347_ap_return)
);

clefia_ByteXor_112_2 grp_ByteXor_112_2_fu_366(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ByteXor_112_2_fu_366_ap_start),
    .ap_done(grp_ByteXor_112_2_fu_366_ap_done),
    .ap_idle(grp_ByteXor_112_2_fu_366_ap_idle),
    .ap_ready(grp_ByteXor_112_2_fu_366_ap_ready),
    .a_address0(grp_ByteXor_112_2_fu_366_a_address0),
    .a_ce0(grp_ByteXor_112_2_fu_366_a_ce0),
    .a_we0(grp_ByteXor_112_2_fu_366_a_we0),
    .a_d0(grp_ByteXor_112_2_fu_366_a_d0),
    .a_q0(grp_ByteXor_112_2_fu_366_a_q0),
    .a_offset(grp_ByteXor_112_2_fu_366_a_offset),
    .b_address0(grp_ByteXor_112_2_fu_366_b_address0),
    .b_ce0(grp_ByteXor_112_2_fu_366_b_ce0),
    .b_q0(rk_q0),
    .b_offset(grp_ByteXor_112_2_fu_366_b_offset)
);

clefia_ByteCpy_11831 grp_ByteCpy_11831_fu_378(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ByteCpy_11831_fu_378_ap_start),
    .ap_done(grp_ByteCpy_11831_fu_378_ap_done),
    .ap_idle(grp_ByteCpy_11831_fu_378_ap_idle),
    .ap_ready(grp_ByteCpy_11831_fu_378_ap_ready),
    .dst_address0(grp_ByteCpy_11831_fu_378_dst_address0),
    .dst_ce0(grp_ByteCpy_11831_fu_378_dst_ce0),
    .dst_we0(grp_ByteCpy_11831_fu_378_dst_we0),
    .dst_d0(grp_ByteCpy_11831_fu_378_dst_d0),
    .src_address0(grp_ByteCpy_11831_fu_378_src_address0),
    .src_ce0(grp_ByteCpy_11831_fu_378_src_ce0),
    .src_q0(grp_ByteCpy_11831_fu_378_src_q0)
);

clefia_ByteXor_11151 grp_ByteXor_11151_fu_384(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ByteXor_11151_fu_384_ap_start),
    .ap_done(grp_ByteXor_11151_fu_384_ap_done),
    .ap_idle(grp_ByteXor_11151_fu_384_ap_idle),
    .ap_ready(grp_ByteXor_11151_fu_384_ap_ready),
    .a_address0(grp_ByteXor_11151_fu_384_a_address0),
    .a_ce0(grp_ByteXor_11151_fu_384_a_ce0),
    .a_q0(grp_ByteXor_11151_fu_384_a_q0),
    .a_offset(grp_ByteXor_11151_fu_384_a_offset),
    .b_address0(grp_ByteXor_11151_fu_384_b_address0),
    .b_ce0(grp_ByteXor_11151_fu_384_b_ce0),
    .b_q0(rk_q0),
    .b_offset(grp_ByteXor_11151_fu_384_b_offset),
    .ap_return_0(grp_ByteXor_11151_fu_384_ap_return_0),
    .ap_return_1(grp_ByteXor_11151_fu_384_ap_return_1),
    .ap_return_2(grp_ByteXor_11151_fu_384_ap_return_2),
    .ap_return_3(grp_ByteXor_11151_fu_384_ap_return_3)
);

clefia_ByteCpy grp_ByteCpy_fu_394(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ByteCpy_fu_394_ap_start),
    .ap_done(grp_ByteCpy_fu_394_ap_done),
    .ap_idle(grp_ByteCpy_fu_394_ap_idle),
    .ap_ready(grp_ByteCpy_fu_394_ap_ready),
    .dst_address0(grp_ByteCpy_fu_394_dst_address0),
    .dst_ce0(grp_ByteCpy_fu_394_dst_ce0),
    .dst_we0(grp_ByteCpy_fu_394_dst_we0),
    .dst_d0(grp_ByteCpy_fu_394_dst_d0),
    .src_address0(grp_ByteCpy_fu_394_src_address0),
    .src_ce0(grp_ByteCpy_fu_394_src_ce0),
    .src_q0(grp_ByteCpy_fu_394_src_q0),
    .bytelen_offset(grp_ByteCpy_fu_394_bytelen_offset)
);

clefia_ClefiaMul2 grp_ClefiaMul2_fu_403(
    .ap_ready(grp_ClefiaMul2_fu_403_ap_ready),
    .x(grp_ClefiaMul2_fu_403_x),
    .ap_return(grp_ClefiaMul2_fu_403_ap_return)
);

clefia_ClefiaMul2 grp_ClefiaMul2_fu_408(
    .ap_ready(grp_ClefiaMul2_fu_408_ap_ready),
    .x(grp_ClefiaMul2_fu_408_x),
    .ap_return(grp_ClefiaMul2_fu_408_ap_return)
);

clefia_ClefiaMul2 grp_ClefiaMul2_fu_414(
    .ap_ready(grp_ClefiaMul2_fu_414_ap_ready),
    .x(grp_ClefiaMul2_fu_408_ap_return),
    .ap_return(grp_ClefiaMul2_fu_414_ap_return)
);

clefia_ClefiaMul2 grp_ClefiaMul2_fu_420(
    .ap_ready(grp_ClefiaMul2_fu_420_ap_ready),
    .x(grp_ClefiaMul2_fu_420_x),
    .ap_return(grp_ClefiaMul2_fu_420_ap_return)
);

clefia_ClefiaMul2 grp_ClefiaMul2_fu_426(
    .ap_ready(grp_ClefiaMul2_fu_426_ap_ready),
    .x(grp_ClefiaMul2_fu_426_x),
    .ap_return(grp_ClefiaMul2_fu_426_ap_return)
);

clefia_ClefiaMul2 grp_ClefiaMul2_fu_432(
    .ap_ready(grp_ClefiaMul2_fu_432_ap_ready),
    .x(grp_ClefiaMul2_fu_432_x),
    .ap_return(grp_ClefiaMul2_fu_432_ap_return)
);

clefia_ClefiaMul2 grp_ClefiaMul2_fu_437(
    .ap_ready(grp_ClefiaMul2_fu_437_ap_ready),
    .x(grp_ClefiaMul2_fu_432_ap_return),
    .ap_return(grp_ClefiaMul2_fu_437_ap_return)
);

clefia_ClefiaMul2 grp_ClefiaMul2_fu_443(
    .ap_ready(grp_ClefiaMul2_fu_443_ap_ready),
    .x(grp_ClefiaMul2_fu_443_x),
    .ap_return(grp_ClefiaMul2_fu_443_ap_return)
);

clefia_ClefiaMul2 grp_ClefiaMul2_fu_451(
    .ap_ready(grp_ClefiaMul2_fu_451_ap_ready),
    .x(grp_ClefiaMul2_fu_443_ap_return),
    .ap_return(grp_ClefiaMul2_fu_451_ap_return)
);

clefia_ClefiaMul2 grp_ClefiaMul2_fu_457(
    .ap_ready(grp_ClefiaMul2_fu_457_ap_ready),
    .x(grp_ClefiaMul2_fu_451_ap_return),
    .ap_return(grp_ClefiaMul2_fu_457_ap_return)
);

clefia_ClefiaMul2 grp_ClefiaMul2_fu_463(
    .ap_ready(grp_ClefiaMul2_fu_463_ap_ready),
    .x(grp_ClefiaMul2_fu_420_ap_return),
    .ap_return(grp_ClefiaMul2_fu_463_ap_return)
);

clefia_ClefiaMul2 grp_ClefiaMul2_fu_469(
    .ap_ready(grp_ClefiaMul2_fu_469_ap_ready),
    .x(grp_ClefiaMul2_fu_463_ap_return),
    .ap_return(grp_ClefiaMul2_fu_469_ap_return)
);

clefia_ByteXor_143 grp_ByteXor_143_fu_475(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ByteXor_143_fu_475_ap_start),
    .ap_done(grp_ByteXor_143_fu_475_ap_done),
    .ap_idle(grp_ByteXor_143_fu_475_ap_idle),
    .ap_ready(grp_ByteXor_143_fu_475_ap_ready),
    .dst_address0(grp_ByteXor_143_fu_475_dst_address0),
    .dst_ce0(grp_ByteXor_143_fu_475_dst_ce0),
    .dst_we0(grp_ByteXor_143_fu_475_dst_we0),
    .dst_d0(grp_ByteXor_143_fu_475_dst_d0),
    .dst_offset(grp_ByteXor_143_fu_475_dst_offset),
    .a_address0(grp_ByteXor_143_fu_475_a_address0),
    .a_ce0(grp_ByteXor_143_fu_475_a_ce0),
    .a_q0(grp_ByteXor_143_fu_475_a_q0),
    .a_offset(grp_ByteXor_143_fu_475_a_offset),
    .p_read(grp_ByteXor_143_fu_475_p_read),
    .p_read1(grp_ByteXor_143_fu_475_p_read1),
    .p_read2(grp_ByteXor_143_fu_475_p_read2),
    .p_read3(grp_ByteXor_143_fu_475_p_read3)
);

clefia_ByteCpy_119 grp_ByteCpy_119_fu_491(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ByteCpy_119_fu_491_ap_start),
    .ap_done(grp_ByteCpy_119_fu_491_ap_done),
    .ap_idle(grp_ByteCpy_119_fu_491_ap_idle),
    .ap_ready(grp_ByteCpy_119_fu_491_ap_ready),
    .dst_address0(grp_ByteCpy_119_fu_491_dst_address0),
    .dst_ce0(grp_ByteCpy_119_fu_491_dst_ce0),
    .dst_we0(grp_ByteCpy_119_fu_491_dst_we0),
    .dst_d0(grp_ByteCpy_119_fu_491_dst_d0),
    .dst_offset(grp_ByteCpy_119_fu_491_dst_offset),
    .src_address0(grp_ByteCpy_119_fu_491_src_address0),
    .src_ce0(grp_ByteCpy_119_fu_491_src_ce0),
    .src_q0(grp_ByteCpy_119_fu_491_src_q0),
    .src_offset(grp_ByteCpy_119_fu_491_src_offset),
    .bytelen_offset(grp_ByteCpy_119_fu_491_bytelen_offset)
);

clefia_ByteCpy_116 grp_ByteCpy_116_fu_510(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ByteCpy_116_fu_510_ap_start),
    .ap_done(grp_ByteCpy_116_fu_510_ap_done),
    .ap_idle(grp_ByteCpy_116_fu_510_ap_idle),
    .ap_ready(grp_ByteCpy_116_fu_510_ap_ready),
    .dst_address0(grp_ByteCpy_116_fu_510_dst_address0),
    .dst_ce0(grp_ByteCpy_116_fu_510_dst_ce0),
    .dst_we0(grp_ByteCpy_116_fu_510_dst_we0),
    .dst_d0(grp_ByteCpy_116_fu_510_dst_d0),
    .src_address0(grp_ByteCpy_116_fu_510_src_address0),
    .src_ce0(grp_ByteCpy_116_fu_510_src_ce0),
    .src_q0(grp_ByteCpy_116_fu_510_src_q0)
);

clefia_ByteCpy_2 grp_ByteCpy_2_fu_516(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ByteCpy_2_fu_516_ap_start),
    .ap_done(grp_ByteCpy_2_fu_516_ap_done),
    .ap_idle(grp_ByteCpy_2_fu_516_ap_idle),
    .ap_ready(grp_ByteCpy_2_fu_516_ap_ready),
    .ap_ce(1'b1),
    .Clefia_enc_address0(grp_ByteCpy_2_fu_516_Clefia_enc_address0),
    .Clefia_enc_ce0(grp_ByteCpy_2_fu_516_Clefia_enc_ce0),
    .Clefia_enc_we0(grp_ByteCpy_2_fu_516_Clefia_enc_we0),
    .Clefia_enc_d0(grp_ByteCpy_2_fu_516_Clefia_enc_d0),
    .src_address0(grp_ByteCpy_2_fu_516_src_address0),
    .src_ce0(grp_ByteCpy_2_fu_516_src_ce0),
    .src_q0(grp_ByteCpy_2_fu_516_src_q0),
    .src_address1(grp_ByteCpy_2_fu_516_src_address1),
    .src_ce1(grp_ByteCpy_2_fu_516_src_ce1),
    .src_q1(grp_ByteCpy_2_fu_516_src_q1)
);

clefia_ByteXor_1 grp_ByteXor_1_fu_524(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ByteXor_1_fu_524_ap_start),
    .ap_done(grp_ByteXor_1_fu_524_ap_done),
    .ap_idle(grp_ByteXor_1_fu_524_ap_idle),
    .ap_ready(grp_ByteXor_1_fu_524_ap_ready),
    .Clefia_enc_address0(grp_ByteXor_1_fu_524_Clefia_enc_address0),
    .Clefia_enc_ce0(grp_ByteXor_1_fu_524_Clefia_enc_ce0),
    .Clefia_enc_we0(grp_ByteXor_1_fu_524_Clefia_enc_we0),
    .Clefia_enc_d0(grp_ByteXor_1_fu_524_Clefia_enc_d0),
    .Clefia_enc_q0(grp_ByteXor_1_fu_524_Clefia_enc_q0),
    .dst_offset(grp_ByteXor_1_fu_524_dst_offset),
    .a_offset(grp_ByteXor_1_fu_524_a_offset),
    .b_address0(grp_ByteXor_1_fu_524_b_address0),
    .b_ce0(grp_ByteXor_1_fu_524_b_ce0),
    .b_q0(rk_q0),
    .b_address1(grp_ByteXor_1_fu_524_b_address1),
    .b_ce1(grp_ByteXor_1_fu_524_b_ce1),
    .b_q1(rk_q1),
    .b_offset(grp_ByteXor_1_fu_524_b_offset),
    .ap_ce(1'b1)
);

clefia_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .pt_address0(grp_ByteCpy_1_fu_338_pt_address0),
    .pt_ce0(pt_ce0),
    .pt_q0(pt_q0),
    .key_bitlen(key_bitlen),
    .Clefia_enc_address0(Clefia_enc_address0),
    .Clefia_enc_ce0(Clefia_enc_ce0),
    .Clefia_enc_we0(Clefia_enc_we0),
    .Clefia_enc_d0(Clefia_enc_d0),
    .Clefia_enc_q0(Clefia_enc_q0),
    .Clefia_dec_address0(Clefia_dec_address0),
    .Clefia_dec_ce0(Clefia_dec_ce0),
    .Clefia_dec_we0(Clefia_dec_we0),
    .Clefia_dec_d0(Clefia_dec_d0),
    .Clefia_dec_q0(Clefia_dec_q0),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ByteCpy_116_fu_510_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state40))) begin
            grp_ByteCpy_116_fu_510_ap_start_reg <= 1'b1;
        end else if ((grp_ByteCpy_116_fu_510_ap_ready == 1'b1)) begin
            grp_ByteCpy_116_fu_510_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ByteCpy_11831_fu_378_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state22))) begin
            grp_ByteCpy_11831_fu_378_ap_start_reg <= 1'b1;
        end else if ((grp_ByteCpy_11831_fu_378_ap_ready == 1'b1)) begin
            grp_ByteCpy_11831_fu_378_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ByteCpy_119_fu_491_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state38) | ((icmp_ln234_fu_1199_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state112)) | ((icmp_ln197_fu_876_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state36)))) begin
            grp_ByteCpy_119_fu_491_ap_start_reg <= 1'b1;
        end else if ((grp_ByteCpy_119_fu_491_ap_ready == 1'b1)) begin
            grp_ByteCpy_119_fu_491_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ByteCpy_1_fu_338_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state75) & (1'b1 == ap_CS_fsm_state74))) begin
            grp_ByteCpy_1_fu_338_ap_start_reg <= 1'b1;
        end else if ((grp_ByteCpy_1_fu_338_ap_ready == 1'b1)) begin
            grp_ByteCpy_1_fu_338_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ByteCpy_2_fu_516_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_NS_fsm_state118) & (1'b1 == ap_CS_fsm_state117)) | ((1'b1 == ap_NS_fsm_state42) & (1'b1 == ap_CS_fsm_state41)))) begin
            grp_ByteCpy_2_fu_516_ap_start_reg <= 1'b1;
        end else if ((grp_ByteCpy_2_fu_516_ap_ready == 1'b1)) begin
            grp_ByteCpy_2_fu_516_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ByteCpy_fu_394_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state92))) begin
            grp_ByteCpy_fu_394_ap_start_reg <= 1'b1;
        end else if ((grp_ByteCpy_fu_394_ap_ready == 1'b1)) begin
            grp_ByteCpy_fu_394_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ByteXor_11151_fu_384_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state24))) begin
            grp_ByteXor_11151_fu_384_ap_start_reg <= 1'b1;
        end else if ((grp_ByteXor_11151_fu_384_ap_ready == 1'b1)) begin
            grp_ByteXor_11151_fu_384_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ByteXor_112_2_fu_366_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18))) begin
            grp_ByteXor_112_2_fu_366_ap_start_reg <= 1'b1;
        end else if ((grp_ByteXor_112_2_fu_366_ap_ready == 1'b1)) begin
            grp_ByteXor_112_2_fu_366_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ByteXor_143_fu_475_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state28))) begin
            grp_ByteXor_143_fu_475_ap_start_reg <= 1'b1;
        end else if ((grp_ByteXor_143_fu_475_ap_ready == 1'b1)) begin
            grp_ByteXor_143_fu_475_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ByteXor_1_fu_524_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_NS_fsm_state143) & (1'b1 == ap_CS_fsm_state142)) | ((1'b1 == ap_NS_fsm_state135) & (1'b1 == ap_CS_fsm_state134)) | ((1'b1 == ap_NS_fsm_state67) & (1'b1 == ap_CS_fsm_state66)) | ((1'b1 == ap_NS_fsm_state59) & (1'b1 == ap_CS_fsm_state58)))) begin
            grp_ByteXor_1_fu_524_ap_start_reg <= 1'b1;
        end else if ((grp_ByteXor_1_fu_524_ap_ready == 1'b1)) begin
            grp_ByteXor_1_fu_524_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ClefiaKeySet_fu_347_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state92))) begin
            grp_ClefiaKeySet_fu_347_ap_start_reg <= 1'b1;
        end else if ((grp_ClefiaKeySet_fu_347_ap_ready == 1'b1)) begin
            grp_ClefiaKeySet_fu_347_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_ByteCpy_11831_fu_378_ap_done == 1'b1) & (grp_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state99))) begin
        dec12_i_i14_in_fu_186 <= zext_ln460_1_fu_937_p1;
    end else if (((icmp_ln230_reg_1378 == 1'd0) & (1'b1 == ap_CS_fsm_state115) & (icmp_ln230_1_fu_1205_p2 == 1'd1) & (1'b0 == ap_block_state115_on_subcall_done))) begin
        dec12_i_i14_in_fu_186 <= add_ln224_1_reg_1495;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_ByteCpy_11831_fu_378_ap_done == 1'b1) & (grp_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        dec12_i_i_in_fu_178 <= zext_ln460_fu_612_p1;
    end else if (((icmp_ln193_reg_1223 == 1'd0) & (1'b1 == ap_CS_fsm_state39) & (icmp_ln193_1_fu_882_p2 == 1'd1) & (1'b0 == ap_block_state39_on_subcall_done))) begin
        dec12_i_i_in_fu_178 <= add_ln188_1_reg_1339;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_ByteCpy_11831_fu_378_ap_done == 1'b1) & (grp_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state99))) begin
        idx34_fu_182 <= 36'd0;
    end else if (((icmp_ln230_reg_1378 == 1'd0) & (1'b1 == ap_CS_fsm_state115) & (icmp_ln230_1_fu_1205_p2 == 1'd1) & (1'b0 == ap_block_state115_on_subcall_done))) begin
        idx34_fu_182 <= add_ln233_reg_1501;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_ByteCpy_11831_fu_378_ap_done == 1'b1) & (grp_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        idx_fu_174 <= 37'd0;
    end else if (((icmp_ln193_reg_1223 == 1'd0) & (1'b1 == ap_CS_fsm_state39) & (icmp_ln193_1_fu_882_p2 == 1'd1) & (1'b0 == ap_block_state39_on_subcall_done))) begin
        idx_fu_174 <= add_ln188_reg_1345;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state32))) begin
        reg_588 <= clefia_s1_q1;
    end else if (((1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state26))) begin
        reg_588 <= clefia_s1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        add_ln188_1_reg_1339 <= add_ln188_1_fu_865_p2;
        add_ln188_reg_1345 <= add_ln188_fu_871_p2;
        icmp_ln197_reg_1350 <= icmp_ln197_fu_876_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        add_ln188_cast_reg_1249 <= add_ln188_cast_fu_633_p2;
        trunc_ln188_reg_1244 <= trunc_ln188_fu_629_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        add_ln195_reg_1294 <= add_ln195_fu_748_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        add_ln224_1_reg_1495 <= add_ln224_1_fu_1188_p2;
        add_ln233_reg_1501 <= add_ln233_fu_1194_p2;
        icmp_ln234_reg_1506 <= icmp_ln234_fu_1199_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        add_ln224_reg_1399 <= add_ln224_fu_958_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        add_ln432_reg_1368[7 : 3] <= add_ln432_fu_924_p2[7 : 3];
        shl_ln1_reg_1362[7 : 3] <= shl_ln1_fu_916_p3[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        add_ln433_reg_1373[7 : 3] <= add_ln433_fu_931_p2[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        icmp_ln193_reg_1223 <= grp_fu_606_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        icmp_ln230_reg_1378 <= grp_fu_606_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        key_bitlen_read_reg_1218 <= key_bitlen;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        or_ln232_reg_1445[1 : 0] <= or_ln232_fu_1072_p2[1 : 0];
or_ln232_reg_1445[7 : 3] <= or_ln232_fu_1072_p2[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_569 <= grp_ClefiaKeySet_fu_347_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state25))) begin
        reg_573 <= grp_ByteXor_11151_fu_384_ap_return_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state25))) begin
        reg_577 <= grp_ByteXor_11151_fu_384_ap_return_3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state26))) begin
        reg_581 <= clefia_s0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state32))) begin
        reg_595 <= clefia_s1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state33))) begin
        reg_600 <= clefia_s0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        shl_ln_reg_1357[7 : 3] <= shl_ln_fu_895_p3[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        x_1_3_reg_1450 <= grp_ByteXor_11151_fu_384_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        y_0_1_reg_1319 <= y_0_1_fu_792_p2;
        y_1_1_reg_1324 <= y_1_1_fu_811_p2;
        y_2_1_reg_1329 <= y_2_1_fu_836_p2;
        y_3_1_reg_1334 <= y_3_1_fu_855_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        y_0_2_reg_1425 <= y_0_2_fu_1002_p2;
        y_1_2_reg_1430 <= y_1_2_fu_1027_p2;
        y_2_2_reg_1435 <= y_2_2_fu_1046_p2;
        y_3_2_reg_1440 <= y_3_2_fu_1065_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        y_0_3_reg_1475 <= y_0_3_fu_1115_p2;
        y_1_3_reg_1480 <= y_1_3_fu_1134_p2;
        y_2_3_reg_1485 <= y_2_3_fu_1159_p2;
        y_3_3_reg_1490 <= y_3_3_fu_1178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        y_0_reg_1274 <= y_0_fu_678_p2;
        y_1_reg_1279 <= y_1_fu_703_p2;
        y_2_reg_1284 <= y_2_fu_722_p2;
        y_3_reg_1289 <= y_3_fu_741_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state145) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state142))) begin
        Clefia_dec_address0 = grp_ByteXor_1_fu_524_Clefia_enc_address0;
    end else if (((1'b1 == ap_CS_fsm_state134) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119))) begin
        Clefia_dec_address0 = grp_ByteCpy_2_fu_516_Clefia_enc_address0;
    end else begin
        Clefia_dec_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state145) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state142))) begin
        Clefia_dec_ce0 = grp_ByteXor_1_fu_524_Clefia_enc_ce0;
    end else if (((1'b1 == ap_CS_fsm_state134) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119))) begin
        Clefia_dec_ce0 = grp_ByteCpy_2_fu_516_Clefia_enc_ce0;
    end else begin
        Clefia_dec_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state145) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state142))) begin
        Clefia_dec_d0 = grp_ByteXor_1_fu_524_Clefia_enc_d0;
    end else if (((1'b1 == ap_CS_fsm_state134) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119))) begin
        Clefia_dec_d0 = grp_ByteCpy_2_fu_516_Clefia_enc_d0;
    end else begin
        Clefia_dec_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state145) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state142))) begin
        Clefia_dec_we0 = grp_ByteXor_1_fu_524_Clefia_enc_we0;
    end else if (((1'b1 == ap_CS_fsm_state134) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119))) begin
        Clefia_dec_we0 = grp_ByteCpy_2_fu_516_Clefia_enc_we0;
    end else begin
        Clefia_dec_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state74))) begin
        Clefia_enc_address0 = grp_ByteXor_1_fu_524_Clefia_enc_address0;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43))) begin
        Clefia_enc_address0 = grp_ByteCpy_2_fu_516_Clefia_enc_address0;
    end else if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75))) begin
        Clefia_enc_address0 = grp_ByteCpy_1_fu_338_pt_address0;
    end else begin
        Clefia_enc_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state74))) begin
        Clefia_enc_ce0 = grp_ByteXor_1_fu_524_Clefia_enc_ce0;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43))) begin
        Clefia_enc_ce0 = grp_ByteCpy_2_fu_516_Clefia_enc_ce0;
    end else if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75))) begin
        Clefia_enc_ce0 = grp_ByteCpy_1_fu_338_pt_ce0;
    end else begin
        Clefia_enc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state74))) begin
        Clefia_enc_d0 = grp_ByteXor_1_fu_524_Clefia_enc_d0;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43))) begin
        Clefia_enc_d0 = grp_ByteCpy_2_fu_516_Clefia_enc_d0;
    end else begin
        Clefia_enc_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state74))) begin
        Clefia_enc_we0 = grp_ByteXor_1_fu_524_Clefia_enc_we0;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43))) begin
        Clefia_enc_we0 = grp_ByteCpy_2_fu_516_Clefia_enc_we0;
    end else begin
        Clefia_enc_we0 = 1'b0;
    end
end

assign ap_ST_fsm_state100_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteXor_11151_fu_384_ap_done == 1'b0)) begin
        ap_ST_fsm_state101_blk = 1'b1;
    end else begin
        ap_ST_fsm_state101_blk = 1'b0;
    end
end

assign ap_ST_fsm_state102_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteCpy_fu_394_ap_done == 1'b0)) begin
        ap_ST_fsm_state103_blk = 1'b1;
    end else begin
        ap_ST_fsm_state103_blk = 1'b0;
    end
end

assign ap_ST_fsm_state104_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteXor_143_fu_475_ap_done == 1'b0)) begin
        ap_ST_fsm_state105_blk = 1'b1;
    end else begin
        ap_ST_fsm_state105_blk = 1'b0;
    end
end

assign ap_ST_fsm_state106_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteXor_11151_fu_384_ap_done == 1'b0)) begin
        ap_ST_fsm_state107_blk = 1'b1;
    end else begin
        ap_ST_fsm_state107_blk = 1'b0;
    end
end

assign ap_ST_fsm_state108_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteCpy_119_fu_491_ap_done == 1'b0)) begin
        ap_ST_fsm_state109_blk = 1'b1;
    end else begin
        ap_ST_fsm_state109_blk = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state110_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteXor_143_fu_475_ap_done == 1'b0)) begin
        ap_ST_fsm_state111_blk = 1'b1;
    end else begin
        ap_ST_fsm_state111_blk = 1'b0;
    end
end

assign ap_ST_fsm_state112_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteCpy_119_fu_491_ap_done == 1'b0)) begin
        ap_ST_fsm_state113_blk = 1'b1;
    end else begin
        ap_ST_fsm_state113_blk = 1'b0;
    end
end

assign ap_ST_fsm_state114_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state115_on_subcall_done)) begin
        ap_ST_fsm_state115_blk = 1'b1;
    end else begin
        ap_ST_fsm_state115_blk = 1'b0;
    end
end

assign ap_ST_fsm_state116_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteCpy_116_fu_510_ap_done == 1'b0)) begin
        ap_ST_fsm_state117_blk = 1'b1;
    end else begin
        ap_ST_fsm_state117_blk = 1'b0;
    end
end

assign ap_ST_fsm_state118_blk = 1'b0;

assign ap_ST_fsm_state119_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state120_blk = 1'b0;

assign ap_ST_fsm_state121_blk = 1'b0;

assign ap_ST_fsm_state122_blk = 1'b0;

assign ap_ST_fsm_state123_blk = 1'b0;

assign ap_ST_fsm_state124_blk = 1'b0;

assign ap_ST_fsm_state125_blk = 1'b0;

assign ap_ST_fsm_state126_blk = 1'b0;

assign ap_ST_fsm_state127_blk = 1'b0;

assign ap_ST_fsm_state128_blk = 1'b0;

assign ap_ST_fsm_state129_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state130_blk = 1'b0;

assign ap_ST_fsm_state131_blk = 1'b0;

assign ap_ST_fsm_state132_blk = 1'b0;

assign ap_ST_fsm_state133_blk = 1'b0;

assign ap_ST_fsm_state134_blk = 1'b0;

assign ap_ST_fsm_state135_blk = 1'b0;

assign ap_ST_fsm_state136_blk = 1'b0;

assign ap_ST_fsm_state137_blk = 1'b0;

assign ap_ST_fsm_state138_blk = 1'b0;

assign ap_ST_fsm_state139_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state140_blk = 1'b0;

assign ap_ST_fsm_state141_blk = 1'b0;

assign ap_ST_fsm_state142_blk = 1'b0;

assign ap_ST_fsm_state143_blk = 1'b0;

assign ap_ST_fsm_state144_blk = 1'b0;

assign ap_ST_fsm_state145_blk = 1'b0;

assign ap_ST_fsm_state146_blk = 1'b0;

assign ap_ST_fsm_state147_blk = 1'b0;

assign ap_ST_fsm_state148_blk = 1'b0;

assign ap_ST_fsm_state149_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state150_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((grp_ClefiaKeySet_fu_347_ap_done == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

assign ap_ST_fsm_state18_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteXor_112_2_fu_366_ap_done == 1'b0)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteXor_112_2_fu_366_ap_done == 1'b0)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

assign ap_ST_fsm_state22_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteCpy_11831_fu_378_ap_done == 1'b0)) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

assign ap_ST_fsm_state24_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteXor_11151_fu_384_ap_done == 1'b0)) begin
        ap_ST_fsm_state25_blk = 1'b1;
    end else begin
        ap_ST_fsm_state25_blk = 1'b0;
    end
end

assign ap_ST_fsm_state26_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteCpy_fu_394_ap_done == 1'b0)) begin
        ap_ST_fsm_state27_blk = 1'b1;
    end else begin
        ap_ST_fsm_state27_blk = 1'b0;
    end
end

assign ap_ST_fsm_state28_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteXor_143_fu_475_ap_done == 1'b0)) begin
        ap_ST_fsm_state29_blk = 1'b1;
    end else begin
        ap_ST_fsm_state29_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteXor_11151_fu_384_ap_done == 1'b0)) begin
        ap_ST_fsm_state31_blk = 1'b1;
    end else begin
        ap_ST_fsm_state31_blk = 1'b0;
    end
end

assign ap_ST_fsm_state32_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteCpy_119_fu_491_ap_done == 1'b0)) begin
        ap_ST_fsm_state33_blk = 1'b1;
    end else begin
        ap_ST_fsm_state33_blk = 1'b0;
    end
end

assign ap_ST_fsm_state34_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteXor_143_fu_475_ap_done == 1'b0)) begin
        ap_ST_fsm_state35_blk = 1'b1;
    end else begin
        ap_ST_fsm_state35_blk = 1'b0;
    end
end

assign ap_ST_fsm_state36_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteCpy_119_fu_491_ap_done == 1'b0)) begin
        ap_ST_fsm_state37_blk = 1'b1;
    end else begin
        ap_ST_fsm_state37_blk = 1'b0;
    end
end

assign ap_ST_fsm_state38_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state39_on_subcall_done)) begin
        ap_ST_fsm_state39_blk = 1'b1;
    end else begin
        ap_ST_fsm_state39_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteCpy_116_fu_510_ap_done == 1'b0)) begin
        ap_ST_fsm_state41_blk = 1'b1;
    end else begin
        ap_ST_fsm_state41_blk = 1'b0;
    end
end

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state90_blk = 1'b0;

assign ap_ST_fsm_state91_blk = 1'b0;

assign ap_ST_fsm_state92_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state93_on_subcall_done)) begin
        ap_ST_fsm_state93_blk = 1'b1;
    end else begin
        ap_ST_fsm_state93_blk = 1'b0;
    end
end

assign ap_ST_fsm_state94_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteXor_112_2_fu_366_ap_done == 1'b0)) begin
        ap_ST_fsm_state95_blk = 1'b1;
    end else begin
        ap_ST_fsm_state95_blk = 1'b0;
    end
end

assign ap_ST_fsm_state96_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteXor_112_2_fu_366_ap_done == 1'b0)) begin
        ap_ST_fsm_state97_blk = 1'b1;
    end else begin
        ap_ST_fsm_state97_blk = 1'b0;
    end
end

assign ap_ST_fsm_state98_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteCpy_11831_fu_378_ap_done == 1'b0)) begin
        ap_ST_fsm_state99_blk = 1'b1;
    end else begin
        ap_ST_fsm_state99_blk = 1'b0;
    end
end

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state150)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state150)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        clefia_s0_address0 = zext_ln174_1_fu_1093_p1;
    end else if ((1'b1 == ap_CS_fsm_state107)) begin
        clefia_s0_address0 = zext_ln176_1_fu_1088_p1;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        clefia_s0_address0 = zext_ln152_1_fu_974_p1;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        clefia_s0_address0 = zext_ln150_1_fu_964_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        clefia_s0_address0 = zext_ln176_fu_769_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        clefia_s0_address0 = zext_ln174_fu_759_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        clefia_s0_address0 = zext_ln152_fu_650_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        clefia_s0_address0 = zext_ln150_fu_640_p1;
    end else if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state17))) begin
        clefia_s0_address0 = 8'd0;
    end else begin
        clefia_s0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state32) | ((grp_ByteCpy_fu_394_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state103)) | ((grp_ByteCpy_fu_394_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((grp_ByteXor_11151_fu_384_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state107)) | ((grp_ByteXor_11151_fu_384_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((grp_ByteXor_11151_fu_384_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state101)) | ((grp_ByteXor_11151_fu_384_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25)))) begin
        clefia_s0_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state17))) begin
        clefia_s0_ce0 = 1'b0;
    end else begin
        clefia_s0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        clefia_s1_address0 = zext_ln175_1_fu_1083_p1;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        clefia_s1_address0 = zext_ln153_1_fu_979_p1;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        clefia_s1_address0 = zext_ln151_1_fu_969_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        clefia_s1_address0 = zext_ln175_fu_764_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        clefia_s1_address0 = zext_ln153_fu_655_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        clefia_s1_address0 = zext_ln151_fu_645_p1;
    end else if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state17))) begin
        clefia_s1_address0 = 8'd0;
    end else begin
        clefia_s1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        clefia_s1_address1 = zext_ln173_1_fu_1078_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        clefia_s1_address1 = zext_ln173_fu_754_p1;
    end else if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state17))) begin
        clefia_s1_address1 = 8'd0;
    end else begin
        clefia_s1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((grp_ByteCpy_fu_394_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state103)) | ((grp_ByteCpy_fu_394_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((grp_ByteXor_11151_fu_384_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state107)) | ((grp_ByteXor_11151_fu_384_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((grp_ByteXor_11151_fu_384_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state101)) | ((grp_ByteXor_11151_fu_384_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25)))) begin
        clefia_s1_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state17))) begin
        clefia_s1_ce0 = 1'b0;
    end else begin
        clefia_s1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_ByteXor_11151_fu_384_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state107)) | ((grp_ByteXor_11151_fu_384_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state31)))) begin
        clefia_s1_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state17))) begin
        clefia_s1_ce1 = 1'b0;
    end else begin
        clefia_s1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        ct_address0 = grp_ByteCpy_fu_394_src_address0;
    end else if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76))) begin
        ct_address0 = grp_ByteCpy_1_fu_338_dst_address0;
    end else begin
        ct_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        ct_ce0 = grp_ByteCpy_fu_394_src_ce0;
    end else if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76))) begin
        ct_ce0 = grp_ByteCpy_1_fu_338_dst_ce0;
    end else begin
        ct_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76))) begin
        ct_we0 = grp_ByteCpy_1_fu_338_dst_we0;
    end else begin
        ct_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        fin_1_address0 = grp_ByteCpy_119_fu_491_src_address0;
    end else if (((1'b1 == ap_CS_fsm_state37) | ((icmp_ln197_reg_1350 == 1'd0) & (icmp_ln193_reg_1223 == 1'd0) & (1'b1 == ap_CS_fsm_state39)))) begin
        fin_1_address0 = grp_ByteCpy_119_fu_491_dst_address0;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state29))) begin
        fin_1_address0 = grp_ByteXor_143_fu_475_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        fin_1_address0 = grp_ByteCpy_fu_394_src_address0;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25))) begin
        fin_1_address0 = grp_ByteXor_11151_fu_384_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        fin_1_address0 = grp_ByteCpy_11831_fu_378_dst_address0;
    end else begin
        fin_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        fin_1_ce0 = grp_ByteCpy_119_fu_491_src_ce0;
    end else if (((1'b1 == ap_CS_fsm_state37) | ((icmp_ln197_reg_1350 == 1'd0) & (icmp_ln193_reg_1223 == 1'd0) & (1'b1 == ap_CS_fsm_state39)))) begin
        fin_1_ce0 = grp_ByteCpy_119_fu_491_dst_ce0;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state29))) begin
        fin_1_ce0 = grp_ByteXor_143_fu_475_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        fin_1_ce0 = grp_ByteCpy_fu_394_src_ce0;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25))) begin
        fin_1_ce0 = grp_ByteXor_11151_fu_384_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        fin_1_ce0 = grp_ByteCpy_11831_fu_378_dst_ce0;
    end else begin
        fin_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | ((icmp_ln197_reg_1350 == 1'd0) & (icmp_ln193_reg_1223 == 1'd0) & (1'b1 == ap_CS_fsm_state39)))) begin
        fin_1_d0 = grp_ByteCpy_119_fu_491_dst_d0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        fin_1_d0 = grp_ByteCpy_11831_fu_378_dst_d0;
    end else begin
        fin_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | ((icmp_ln197_reg_1350 == 1'd0) & (icmp_ln193_reg_1223 == 1'd0) & (1'b1 == ap_CS_fsm_state39)))) begin
        fin_1_we0 = grp_ByteCpy_119_fu_491_dst_we0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        fin_1_we0 = grp_ByteCpy_11831_fu_378_dst_we0;
    end else begin
        fin_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        fin_address0 = grp_ByteCpy_119_fu_491_src_address0;
    end else if (((1'b1 == ap_CS_fsm_state113) | ((icmp_ln234_reg_1506 == 1'd0) & (icmp_ln230_reg_1378 == 1'd0) & (1'b1 == ap_CS_fsm_state115)))) begin
        fin_address0 = grp_ByteCpy_119_fu_491_dst_address0;
    end else if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state105))) begin
        fin_address0 = grp_ByteXor_143_fu_475_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        fin_address0 = grp_ByteCpy_fu_394_src_address0;
    end else if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state101))) begin
        fin_address0 = grp_ByteXor_11151_fu_384_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        fin_address0 = grp_ByteCpy_11831_fu_378_dst_address0;
    end else begin
        fin_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        fin_ce0 = grp_ByteCpy_119_fu_491_src_ce0;
    end else if (((1'b1 == ap_CS_fsm_state113) | ((icmp_ln234_reg_1506 == 1'd0) & (icmp_ln230_reg_1378 == 1'd0) & (1'b1 == ap_CS_fsm_state115)))) begin
        fin_ce0 = grp_ByteCpy_119_fu_491_dst_ce0;
    end else if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state105))) begin
        fin_ce0 = grp_ByteXor_143_fu_475_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        fin_ce0 = grp_ByteCpy_fu_394_src_ce0;
    end else if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state101))) begin
        fin_ce0 = grp_ByteXor_11151_fu_384_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        fin_ce0 = grp_ByteCpy_11831_fu_378_dst_ce0;
    end else begin
        fin_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state113) | ((icmp_ln234_reg_1506 == 1'd0) & (icmp_ln230_reg_1378 == 1'd0) & (1'b1 == ap_CS_fsm_state115)))) begin
        fin_d0 = grp_ByteCpy_119_fu_491_dst_d0;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        fin_d0 = grp_ByteCpy_11831_fu_378_dst_d0;
    end else begin
        fin_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state113) | ((icmp_ln234_reg_1506 == 1'd0) & (icmp_ln230_reg_1378 == 1'd0) & (1'b1 == ap_CS_fsm_state115)))) begin
        fin_we0 = grp_ByteCpy_119_fu_491_dst_we0;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        fin_we0 = grp_ByteCpy_11831_fu_378_dst_we0;
    end else begin
        fin_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        fout_1_address0 = grp_ByteCpy_116_fu_510_src_address0;
    end else if (((1'b1 == ap_CS_fsm_state37) | ((icmp_ln197_reg_1350 == 1'd0) & (icmp_ln193_reg_1223 == 1'd0) & (1'b1 == ap_CS_fsm_state39)))) begin
        fout_1_address0 = grp_ByteCpy_119_fu_491_src_address0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        fout_1_address0 = grp_ByteCpy_119_fu_491_dst_address0;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state29))) begin
        fout_1_address0 = grp_ByteXor_143_fu_475_dst_address0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        fout_1_address0 = grp_ByteCpy_fu_394_dst_address0;
    end else begin
        fout_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        fout_1_ce0 = grp_ByteCpy_116_fu_510_src_ce0;
    end else if (((1'b1 == ap_CS_fsm_state37) | ((icmp_ln197_reg_1350 == 1'd0) & (icmp_ln193_reg_1223 == 1'd0) & (1'b1 == ap_CS_fsm_state39)))) begin
        fout_1_ce0 = grp_ByteCpy_119_fu_491_src_ce0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        fout_1_ce0 = grp_ByteCpy_119_fu_491_dst_ce0;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state29))) begin
        fout_1_ce0 = grp_ByteXor_143_fu_475_dst_ce0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        fout_1_ce0 = grp_ByteCpy_fu_394_dst_ce0;
    end else begin
        fout_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        fout_1_d0 = grp_ByteCpy_119_fu_491_dst_d0;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state29))) begin
        fout_1_d0 = grp_ByteXor_143_fu_475_dst_d0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        fout_1_d0 = grp_ByteCpy_fu_394_dst_d0;
    end else begin
        fout_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        fout_1_we0 = grp_ByteCpy_119_fu_491_dst_we0;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state29))) begin
        fout_1_we0 = grp_ByteXor_143_fu_475_dst_we0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        fout_1_we0 = grp_ByteCpy_fu_394_dst_we0;
    end else begin
        fout_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        fout_address0 = grp_ByteCpy_116_fu_510_src_address0;
    end else if (((1'b1 == ap_CS_fsm_state113) | ((icmp_ln234_reg_1506 == 1'd0) & (icmp_ln230_reg_1378 == 1'd0) & (1'b1 == ap_CS_fsm_state115)))) begin
        fout_address0 = grp_ByteCpy_119_fu_491_src_address0;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        fout_address0 = grp_ByteCpy_119_fu_491_dst_address0;
    end else if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state105))) begin
        fout_address0 = grp_ByteXor_143_fu_475_dst_address0;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        fout_address0 = grp_ByteCpy_fu_394_dst_address0;
    end else begin
        fout_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        fout_ce0 = grp_ByteCpy_116_fu_510_src_ce0;
    end else if (((1'b1 == ap_CS_fsm_state113) | ((icmp_ln234_reg_1506 == 1'd0) & (icmp_ln230_reg_1378 == 1'd0) & (1'b1 == ap_CS_fsm_state115)))) begin
        fout_ce0 = grp_ByteCpy_119_fu_491_src_ce0;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        fout_ce0 = grp_ByteCpy_119_fu_491_dst_ce0;
    end else if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state105))) begin
        fout_ce0 = grp_ByteXor_143_fu_475_dst_ce0;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        fout_ce0 = grp_ByteCpy_fu_394_dst_ce0;
    end else begin
        fout_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        fout_d0 = grp_ByteCpy_119_fu_491_dst_d0;
    end else if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state105))) begin
        fout_d0 = grp_ByteXor_143_fu_475_dst_d0;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        fout_d0 = grp_ByteCpy_fu_394_dst_d0;
    end else begin
        fout_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        fout_we0 = grp_ByteCpy_119_fu_491_dst_we0;
    end else if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state105))) begin
        fout_we0 = grp_ByteXor_143_fu_475_dst_we0;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        fout_we0 = grp_ByteCpy_fu_394_dst_we0;
    end else begin
        fout_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        grp_ByteCpy_116_fu_510_src_q0 = fout_q0;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_ByteCpy_116_fu_510_src_q0 = fout_1_q0;
    end else begin
        grp_ByteCpy_116_fu_510_src_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        grp_ByteCpy_11831_fu_378_src_q0 = rin_q0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_ByteCpy_11831_fu_378_src_q0 = rin_1_q0;
    end else begin
        grp_ByteCpy_11831_fu_378_src_q0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | ((icmp_ln234_reg_1506 == 1'd0) & (icmp_ln230_reg_1378 == 1'd0) & (1'b1 == ap_CS_fsm_state115)))) begin
        grp_ByteCpy_119_fu_491_bytelen_offset = 4'd12;
    end else if (((1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state113) | ((icmp_ln197_reg_1350 == 1'd0) & (icmp_ln193_reg_1223 == 1'd0) & (1'b1 == ap_CS_fsm_state39)))) begin
        grp_ByteCpy_119_fu_491_bytelen_offset = 4'd4;
    end else begin
        grp_ByteCpy_119_fu_491_bytelen_offset = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln234_reg_1506 == 1'd0) & (icmp_ln230_reg_1378 == 1'd0) & (1'b1 == ap_CS_fsm_state115))) begin
        grp_ByteCpy_119_fu_491_dst_offset = 4'd4;
    end else if (((icmp_ln197_reg_1350 == 1'd0) & (icmp_ln193_reg_1223 == 1'd0) & (1'b1 == ap_CS_fsm_state39))) begin
        grp_ByteCpy_119_fu_491_dst_offset = 4'd12;
    end else if (((1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state37))) begin
        grp_ByteCpy_119_fu_491_dst_offset = 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_ByteCpy_119_fu_491_dst_offset = 4'd8;
    end else begin
        grp_ByteCpy_119_fu_491_dst_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        grp_ByteCpy_119_fu_491_src_offset = 4'd12;
    end else if ((((icmp_ln234_reg_1506 == 1'd0) & (icmp_ln230_reg_1378 == 1'd0) & (1'b1 == ap_CS_fsm_state115)) | ((icmp_ln197_reg_1350 == 1'd0) & (icmp_ln193_reg_1223 == 1'd0) & (1'b1 == ap_CS_fsm_state39)))) begin
        grp_ByteCpy_119_fu_491_src_offset = 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_ByteCpy_119_fu_491_src_offset = 4'd4;
    end else if (((1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_ByteCpy_119_fu_491_src_offset = 4'd8;
    end else begin
        grp_ByteCpy_119_fu_491_src_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state113) | ((icmp_ln234_reg_1506 == 1'd0) & (icmp_ln230_reg_1378 == 1'd0) & (1'b1 == ap_CS_fsm_state115)))) begin
        grp_ByteCpy_119_fu_491_src_q0 = fout_q0;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        grp_ByteCpy_119_fu_491_src_q0 = fin_q0;
    end else if (((1'b1 == ap_CS_fsm_state37) | ((icmp_ln197_reg_1350 == 1'd0) & (icmp_ln193_reg_1223 == 1'd0) & (1'b1 == ap_CS_fsm_state39)))) begin
        grp_ByteCpy_119_fu_491_src_q0 = fout_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_ByteCpy_119_fu_491_src_q0 = fin_1_q0;
    end else begin
        grp_ByteCpy_119_fu_491_src_q0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | ((grp_ClefiaKeySet_fu_347_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        grp_ByteCpy_1_fu_338_ap_ce = 1'b1;
    end else begin
        grp_ByteCpy_1_fu_338_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        grp_ByteCpy_1_fu_338_ap_start = 1'b1;
    end else begin
        grp_ByteCpy_1_fu_338_ap_start = grp_ByteCpy_1_fu_338_ap_start_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76))) begin
        grp_ByteCpy_1_fu_338_pt_q0 = Clefia_enc_q0;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_ByteCpy_1_fu_338_pt_q0 = pt_q0;
    end else begin
        grp_ByteCpy_1_fu_338_pt_q0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119))) begin
        grp_ByteCpy_2_fu_516_src_q0 = rout_q0;
    end else if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43))) begin
        grp_ByteCpy_2_fu_516_src_q0 = rout_1_q0;
    end else begin
        grp_ByteCpy_2_fu_516_src_q0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119))) begin
        grp_ByteCpy_2_fu_516_src_q1 = rout_q1;
    end else if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43))) begin
        grp_ByteCpy_2_fu_516_src_q1 = rout_1_q1;
    end else begin
        grp_ByteCpy_2_fu_516_src_q1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        grp_ByteCpy_fu_394_bytelen_offset = 5'd16;
    end else if (((1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state27))) begin
        grp_ByteCpy_fu_394_bytelen_offset = 5'd4;
    end else begin
        grp_ByteCpy_fu_394_bytelen_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        grp_ByteCpy_fu_394_src_q0 = fin_q0;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        grp_ByteCpy_fu_394_src_q0 = ct_q0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_ByteCpy_fu_394_src_q0 = fin_1_q0;
    end else begin
        grp_ByteCpy_fu_394_src_q0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state31))) begin
        grp_ByteXor_11151_fu_384_a_offset = 4'd8;
    end else if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state25))) begin
        grp_ByteXor_11151_fu_384_a_offset = 4'd0;
    end else begin
        grp_ByteXor_11151_fu_384_a_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state101))) begin
        grp_ByteXor_11151_fu_384_a_q0 = fin_q0;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25))) begin
        grp_ByteXor_11151_fu_384_a_q0 = fin_1_q0;
    end else begin
        grp_ByteXor_11151_fu_384_a_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        grp_ByteXor_11151_fu_384_b_offset = or_ln232_reg_1445;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        grp_ByteXor_11151_fu_384_b_offset = add_ln224_reg_1399;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_ByteXor_11151_fu_384_b_offset = add_ln195_reg_1294;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_ByteXor_11151_fu_384_b_offset = add_ln188_cast_reg_1249;
    end else begin
        grp_ByteXor_11151_fu_384_b_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_ByteXor_112_2_fu_366_a_offset = 4'd12;
    end else if (((1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_ByteXor_112_2_fu_366_a_offset = 4'd4;
    end else begin
        grp_ByteXor_112_2_fu_366_a_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state95))) begin
        grp_ByteXor_112_2_fu_366_a_q0 = rin_q0;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_ByteXor_112_2_fu_366_a_q0 = rin_1_q0;
    end else begin
        grp_ByteXor_112_2_fu_366_a_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        grp_ByteXor_112_2_fu_366_b_offset = add_ln433_reg_1373;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        grp_ByteXor_112_2_fu_366_b_offset = add_ln432_reg_1368;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_ByteXor_112_2_fu_366_b_offset = 8'd4;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_ByteXor_112_2_fu_366_b_offset = 8'd0;
    end else begin
        grp_ByteXor_112_2_fu_366_b_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state35))) begin
        grp_ByteXor_143_fu_475_a_offset = 4'd12;
    end else if (((1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_ByteXor_143_fu_475_a_offset = 4'd4;
    end else begin
        grp_ByteXor_143_fu_475_a_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state105))) begin
        grp_ByteXor_143_fu_475_a_q0 = fin_q0;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_ByteXor_143_fu_475_a_q0 = fin_1_q0;
    end else begin
        grp_ByteXor_143_fu_475_a_q0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state35))) begin
        grp_ByteXor_143_fu_475_dst_offset = 4'd12;
    end else if (((1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_ByteXor_143_fu_475_dst_offset = 4'd4;
    end else begin
        grp_ByteXor_143_fu_475_dst_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        grp_ByteXor_143_fu_475_p_read = y_0_3_reg_1475;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        grp_ByteXor_143_fu_475_p_read = y_0_2_reg_1425;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_ByteXor_143_fu_475_p_read = y_0_1_reg_1319;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_ByteXor_143_fu_475_p_read = y_0_reg_1274;
    end else begin
        grp_ByteXor_143_fu_475_p_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        grp_ByteXor_143_fu_475_p_read1 = y_1_3_reg_1480;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        grp_ByteXor_143_fu_475_p_read1 = y_1_2_reg_1430;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_ByteXor_143_fu_475_p_read1 = y_1_1_reg_1324;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_ByteXor_143_fu_475_p_read1 = y_1_reg_1279;
    end else begin
        grp_ByteXor_143_fu_475_p_read1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        grp_ByteXor_143_fu_475_p_read2 = y_2_3_reg_1485;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        grp_ByteXor_143_fu_475_p_read2 = y_2_2_reg_1435;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_ByteXor_143_fu_475_p_read2 = y_2_1_reg_1329;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_ByteXor_143_fu_475_p_read2 = y_2_reg_1284;
    end else begin
        grp_ByteXor_143_fu_475_p_read2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        grp_ByteXor_143_fu_475_p_read3 = y_3_3_reg_1490;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        grp_ByteXor_143_fu_475_p_read3 = y_3_2_reg_1440;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_ByteXor_143_fu_475_p_read3 = y_3_1_reg_1334;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_ByteXor_143_fu_475_p_read3 = y_3_reg_1289;
    end else begin
        grp_ByteXor_143_fu_475_p_read3 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state145) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state142))) begin
        grp_ByteXor_1_fu_524_Clefia_enc_q0 = Clefia_dec_q0;
    end else if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state74))) begin
        grp_ByteXor_1_fu_524_Clefia_enc_q0 = Clefia_enc_q0;
    end else begin
        grp_ByteXor_1_fu_524_Clefia_enc_q0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state67))) begin
        grp_ByteXor_1_fu_524_a_offset = 4'd12;
    end else if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state135))) begin
        grp_ByteXor_1_fu_524_a_offset = 4'd4;
    end else begin
        grp_ByteXor_1_fu_524_a_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        grp_ByteXor_1_fu_524_b_offset = 8'd4;
    end else if ((1'b1 == ap_CS_fsm_state135)) begin
        grp_ByteXor_1_fu_524_b_offset = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_ByteXor_1_fu_524_b_offset = add_ln423_fu_910_p2;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_ByteXor_1_fu_524_b_offset = add_ln422_fu_903_p2;
    end else begin
        grp_ByteXor_1_fu_524_b_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state67))) begin
        grp_ByteXor_1_fu_524_dst_offset = 4'd12;
    end else if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state135))) begin
        grp_ByteXor_1_fu_524_dst_offset = 4'd4;
    end else begin
        grp_ByteXor_1_fu_524_dst_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        grp_ClefiaMul2_fu_403_x = reg_600;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_ClefiaMul2_fu_403_x = reg_581;
    end else if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_ClefiaMul2_fu_403_x = reg_588;
    end else begin
        grp_ClefiaMul2_fu_403_x = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state34))) begin
        grp_ClefiaMul2_fu_408_x = grp_ClefiaMul2_fu_403_ap_return;
    end else if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_ClefiaMul2_fu_408_x = clefia_s0_q0;
    end else begin
        grp_ClefiaMul2_fu_408_x = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state34))) begin
        grp_ClefiaMul2_fu_420_x = reg_595;
    end else if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_ClefiaMul2_fu_420_x = clefia_s1_q0;
    end else begin
        grp_ClefiaMul2_fu_420_x = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        grp_ClefiaMul2_fu_426_x = reg_581;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_ClefiaMul2_fu_426_x = reg_600;
    end else if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_ClefiaMul2_fu_426_x = grp_ClefiaMul2_fu_420_ap_return;
    end else begin
        grp_ClefiaMul2_fu_426_x = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state34))) begin
        grp_ClefiaMul2_fu_432_x = grp_ClefiaMul2_fu_426_ap_return;
    end else if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_ClefiaMul2_fu_432_x = reg_581;
    end else begin
        grp_ClefiaMul2_fu_432_x = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state34))) begin
        grp_ClefiaMul2_fu_443_x = reg_588;
    end else if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_ClefiaMul2_fu_443_x = grp_ClefiaMul2_fu_403_ap_return;
    end else begin
        grp_ClefiaMul2_fu_443_x = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state1))) begin
        pt_ce0 = grp_ByteCpy_1_fu_338_pt_ce0;
    end else begin
        pt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        rin_1_address0 = grp_ByteCpy_11831_fu_378_src_address0;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19))) begin
        rin_1_address0 = grp_ByteXor_112_2_fu_366_a_address0;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17))) begin
        rin_1_address0 = grp_ByteCpy_1_fu_338_dst_address0;
    end else begin
        rin_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        rin_1_ce0 = grp_ByteCpy_11831_fu_378_src_ce0;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19))) begin
        rin_1_ce0 = grp_ByteXor_112_2_fu_366_a_ce0;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17))) begin
        rin_1_ce0 = grp_ByteCpy_1_fu_338_dst_ce0;
    end else begin
        rin_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19))) begin
        rin_1_d0 = grp_ByteXor_112_2_fu_366_a_d0;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17))) begin
        rin_1_d0 = grp_ByteCpy_1_fu_338_dst_d0;
    end else begin
        rin_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19))) begin
        rin_1_we0 = grp_ByteXor_112_2_fu_366_a_we0;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17))) begin
        rin_1_we0 = grp_ByteCpy_1_fu_338_dst_we0;
    end else begin
        rin_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        rin_address0 = grp_ByteCpy_fu_394_dst_address0;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        rin_address0 = grp_ByteCpy_11831_fu_378_src_address0;
    end else if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state95))) begin
        rin_address0 = grp_ByteXor_112_2_fu_366_a_address0;
    end else begin
        rin_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        rin_ce0 = grp_ByteCpy_fu_394_dst_ce0;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        rin_ce0 = grp_ByteCpy_11831_fu_378_src_ce0;
    end else if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state95))) begin
        rin_ce0 = grp_ByteXor_112_2_fu_366_a_ce0;
    end else begin
        rin_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        rin_d0 = grp_ByteCpy_fu_394_dst_d0;
    end else if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state95))) begin
        rin_d0 = grp_ByteXor_112_2_fu_366_a_d0;
    end else begin
        rin_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        rin_we0 = grp_ByteCpy_fu_394_dst_we0;
    end else if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state95))) begin
        rin_we0 = grp_ByteXor_112_2_fu_366_a_we0;
    end else begin
        rin_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state145) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60))) begin
        rk_address0 = grp_ByteXor_1_fu_524_b_address0;
    end else if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state25))) begin
        rk_address0 = grp_ByteXor_11151_fu_384_b_address0;
    end else if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19))) begin
        rk_address0 = grp_ByteXor_112_2_fu_366_b_address0;
    end else if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state17))) begin
        rk_address0 = grp_ClefiaKeySet_fu_347_rk_address0;
    end else begin
        rk_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state145) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60))) begin
        rk_ce0 = grp_ByteXor_1_fu_524_b_ce0;
    end else if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state25))) begin
        rk_ce0 = grp_ByteXor_11151_fu_384_b_ce0;
    end else if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19))) begin
        rk_ce0 = grp_ByteXor_112_2_fu_366_b_ce0;
    end else if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state17))) begin
        rk_ce0 = grp_ClefiaKeySet_fu_347_rk_ce0;
    end else begin
        rk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state145) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60))) begin
        rk_ce1 = grp_ByteXor_1_fu_524_b_ce1;
    end else begin
        rk_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state17))) begin
        rk_we0 = grp_ClefiaKeySet_fu_347_rk_we0;
    end else begin
        rk_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43))) begin
        rout_1_address0 = grp_ByteCpy_2_fu_516_src_address0;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        rout_1_address0 = grp_ByteCpy_116_fu_510_dst_address0;
    end else begin
        rout_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43))) begin
        rout_1_ce0 = grp_ByteCpy_2_fu_516_src_ce0;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        rout_1_ce0 = grp_ByteCpy_116_fu_510_dst_ce0;
    end else begin
        rout_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43))) begin
        rout_1_ce1 = grp_ByteCpy_2_fu_516_src_ce1;
    end else begin
        rout_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        rout_1_we0 = grp_ByteCpy_116_fu_510_dst_we0;
    end else begin
        rout_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119))) begin
        rout_address0 = grp_ByteCpy_2_fu_516_src_address0;
    end else if ((1'b1 == ap_CS_fsm_state117)) begin
        rout_address0 = grp_ByteCpy_116_fu_510_dst_address0;
    end else begin
        rout_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119))) begin
        rout_ce0 = grp_ByteCpy_2_fu_516_src_ce0;
    end else if ((1'b1 == ap_CS_fsm_state117)) begin
        rout_ce0 = grp_ByteCpy_116_fu_510_dst_ce0;
    end else begin
        rout_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119))) begin
        rout_ce1 = grp_ByteCpy_2_fu_516_src_ce1;
    end else begin
        rout_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        rout_we0 = grp_ByteCpy_116_fu_510_dst_we0;
    end else begin
        rout_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((grp_ClefiaKeySet_fu_347_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((grp_ByteXor_112_2_fu_366_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((grp_ByteXor_112_2_fu_366_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((grp_ByteCpy_11831_fu_378_ap_done == 1'b1) & (grp_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else if (((grp_ByteCpy_11831_fu_378_ap_done == 1'b1) & (grp_fu_606_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((grp_ByteXor_11151_fu_384_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((grp_ByteCpy_fu_394_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((grp_ByteXor_143_fu_475_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((grp_ByteXor_11151_fu_384_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((grp_ByteCpy_119_fu_491_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((grp_ByteXor_143_fu_475_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((icmp_ln197_fu_876_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((grp_ByteCpy_119_fu_491_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == ap_CS_fsm_state39) & (1'b0 == ap_block_state39_on_subcall_done) & ((icmp_ln193_reg_1223 == 1'd1) | (icmp_ln193_1_fu_882_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else if (((icmp_ln193_reg_1223 == 1'd0) & (1'b1 == ap_CS_fsm_state39) & (icmp_ln193_1_fu_882_p2 == 1'd1) & (1'b0 == ap_block_state39_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((grp_ByteCpy_116_fu_510_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            if (((1'b1 == ap_CS_fsm_state93) & (1'b0 == ap_block_state93_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            if (((grp_ByteXor_112_2_fu_366_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state95))) begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            if (((grp_ByteXor_112_2_fu_366_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state97))) begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            if (((grp_ByteCpy_11831_fu_378_ap_done == 1'b1) & (grp_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state99))) begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end else if (((grp_ByteCpy_11831_fu_378_ap_done == 1'b1) & (grp_fu_606_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state99))) begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            if (((grp_ByteXor_11151_fu_384_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state101))) begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            if (((grp_ByteCpy_fu_394_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state103))) begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            if (((grp_ByteXor_143_fu_475_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state105))) begin
                ap_NS_fsm = ap_ST_fsm_state106;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state105;
            end
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            if (((grp_ByteXor_11151_fu_384_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state107))) begin
                ap_NS_fsm = ap_ST_fsm_state108;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state107;
            end
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            if (((grp_ByteCpy_119_fu_491_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state109))) begin
                ap_NS_fsm = ap_ST_fsm_state110;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state109;
            end
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            if (((grp_ByteXor_143_fu_475_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state111))) begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state111;
            end
        end
        ap_ST_fsm_state112 : begin
            if (((icmp_ln234_fu_1199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state112))) begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state113;
            end
        end
        ap_ST_fsm_state113 : begin
            if (((grp_ByteCpy_119_fu_491_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state113))) begin
                ap_NS_fsm = ap_ST_fsm_state114;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state113;
            end
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            if (((1'b1 == ap_CS_fsm_state115) & (1'b0 == ap_block_state115_on_subcall_done) & ((icmp_ln230_reg_1378 == 1'd1) | (icmp_ln230_1_fu_1205_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end else if (((icmp_ln230_reg_1378 == 1'd0) & (1'b1 == ap_CS_fsm_state115) & (icmp_ln230_1_fu_1205_p2 == 1'd1) & (1'b0 == ap_block_state115_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            if (((grp_ByteCpy_116_fu_510_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state117))) begin
                ap_NS_fsm = ap_ST_fsm_state118;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state117;
            end
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln188_1_fu_865_p2 = ($signed(dec12_i_i_in_fu_178) + $signed(32'd4294967295));

assign add_ln188_cast_fu_633_p2 = (trunc_ln188_fu_629_p1 + 8'd8);

assign add_ln188_fu_871_p2 = (idx_fu_174 + 37'd8);

assign add_ln195_fu_748_p2 = (trunc_ln188_reg_1244 + 8'd12);

assign add_ln224_1_fu_1188_p2 = ($signed(dec12_i_i14_in_fu_186) + $signed(32'd4294967295));

assign add_ln224_fu_958_p2 = (shl_ln1_reg_1362 + trunc_ln224_fu_954_p1);

assign add_ln233_fu_1194_p2 = ($signed(idx34_fu_182) + $signed(36'd68719476728));

assign add_ln422_fu_903_p2 = (shl_ln_fu_895_p3 + 8'd8);

assign add_ln423_fu_910_p2 = (shl_ln_reg_1357 + 8'd12);

assign add_ln432_fu_924_p2 = (shl_ln1_fu_916_p3 + 8'd8);

assign add_ln433_fu_931_p2 = (shl_ln1_reg_1362 + 8'd12);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_state132 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state136 = ap_CS_fsm[32'd135];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd136];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd138];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state140 = ap_CS_fsm[32'd139];

assign ap_CS_fsm_state141 = ap_CS_fsm[32'd140];

assign ap_CS_fsm_state142 = ap_CS_fsm[32'd141];

assign ap_CS_fsm_state143 = ap_CS_fsm[32'd142];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state145 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state146 = ap_CS_fsm[32'd145];

assign ap_CS_fsm_state147 = ap_CS_fsm[32'd146];

assign ap_CS_fsm_state148 = ap_CS_fsm[32'd147];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign ap_NS_fsm_state118 = ap_NS_fsm[32'd117];

assign ap_NS_fsm_state135 = ap_NS_fsm[32'd134];

assign ap_NS_fsm_state143 = ap_NS_fsm[32'd142];

assign ap_NS_fsm_state42 = ap_NS_fsm[32'd41];

assign ap_NS_fsm_state59 = ap_NS_fsm[32'd58];

assign ap_NS_fsm_state67 = ap_NS_fsm[32'd66];

assign ap_NS_fsm_state75 = ap_NS_fsm[32'd74];

always @ (*) begin
    ap_block_state115_on_subcall_done = ((grp_ByteCpy_119_fu_491_ap_done == 1'b0) & (ap_predicate_op529_call_state115 == 1'b1));
end

always @ (*) begin
    ap_block_state39_on_subcall_done = ((grp_ByteCpy_119_fu_491_ap_done == 1'b0) & (ap_predicate_op329_call_state39 == 1'b1));
end

always @ (*) begin
    ap_block_state93_on_subcall_done = ((grp_ByteCpy_fu_394_ap_done == 1'b0) | (grp_ClefiaKeySet_fu_347_ap_done == 1'b0));
end

always @ (*) begin
    ap_predicate_op329_call_state39 = ((icmp_ln197_reg_1350 == 1'd0) & (icmp_ln193_reg_1223 == 1'd0));
end

always @ (*) begin
    ap_predicate_op529_call_state115 = ((icmp_ln234_reg_1506 == 1'd0) & (icmp_ln230_reg_1378 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_ByteCpy_116_fu_510_ap_start = grp_ByteCpy_116_fu_510_ap_start_reg;

assign grp_ByteCpy_11831_fu_378_ap_start = grp_ByteCpy_11831_fu_378_ap_start_reg;

assign grp_ByteCpy_119_fu_491_ap_start = grp_ByteCpy_119_fu_491_ap_start_reg;

assign grp_ByteCpy_2_fu_516_ap_start = grp_ByteCpy_2_fu_516_ap_start_reg;

assign grp_ByteCpy_fu_394_ap_start = grp_ByteCpy_fu_394_ap_start_reg;

assign grp_ByteXor_11151_fu_384_ap_start = grp_ByteXor_11151_fu_384_ap_start_reg;

assign grp_ByteXor_112_2_fu_366_ap_start = grp_ByteXor_112_2_fu_366_ap_start_reg;

assign grp_ByteXor_143_fu_475_ap_start = grp_ByteXor_143_fu_475_ap_start_reg;

assign grp_ByteXor_1_fu_524_ap_start = grp_ByteXor_1_fu_524_ap_start_reg;

assign grp_ClefiaKeySet_fu_347_ap_start = grp_ClefiaKeySet_fu_347_ap_start_reg;

assign grp_fu_557_p2 = (grp_ClefiaMul2_fu_443_ap_return ^ grp_ClefiaMul2_fu_437_ap_return);

assign grp_fu_563_p2 = (grp_ClefiaMul2_fu_469_ap_return ^ grp_ClefiaMul2_fu_457_ap_return);

assign grp_fu_606_p2 = ((reg_569 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln193_1_fu_882_p2 = (($signed(add_ln188_1_reg_1339) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln197_fu_876_p2 = ((add_ln188_1_fu_865_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln230_1_fu_1205_p2 = (($signed(add_ln224_1_reg_1495) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln234_fu_1199_p2 = ((add_ln224_1_fu_1188_p2 == 32'd0) ? 1'b1 : 1'b0);

assign or_ln232_fu_1072_p2 = (8'd4 | add_ln224_reg_1399);

assign shl_ln1_fu_916_p3 = {{reg_569}, {3'd0}};

assign shl_ln_fu_895_p3 = {{reg_569}, {3'd0}};

assign trunc_ln188_fu_629_p1 = idx_fu_174[7:0];

assign trunc_ln224_fu_954_p1 = idx34_fu_182[7:0];

assign xor_ln155_1_fu_666_p2 = (grp_ClefiaMul2_fu_426_ap_return ^ grp_ClefiaMul2_fu_420_ap_return);

assign xor_ln155_2_fu_672_p2 = (xor_ln155_1_fu_666_p2 ^ grp_ClefiaMul2_fu_414_ap_return);

assign xor_ln155_4_fu_984_p2 = (reg_581 ^ grp_ClefiaMul2_fu_403_ap_return);

assign xor_ln155_5_fu_990_p2 = (grp_ClefiaMul2_fu_426_ap_return ^ grp_ClefiaMul2_fu_420_ap_return);

assign xor_ln155_6_fu_996_p2 = (xor_ln155_5_fu_990_p2 ^ grp_ClefiaMul2_fu_414_ap_return);

assign xor_ln155_fu_660_p2 = (reg_581 ^ grp_ClefiaMul2_fu_403_ap_return);

assign xor_ln156_1_fu_691_p2 = (grp_ClefiaMul2_fu_432_ap_return ^ grp_ClefiaMul2_fu_426_ap_return);

assign xor_ln156_2_fu_697_p2 = (xor_ln156_1_fu_691_p2 ^ grp_ClefiaMul2_fu_414_ap_return);

assign xor_ln156_4_fu_1009_p2 = (reg_588 ^ grp_ClefiaMul2_fu_408_ap_return);

assign xor_ln156_5_fu_1015_p2 = (grp_ClefiaMul2_fu_432_ap_return ^ grp_ClefiaMul2_fu_426_ap_return);

assign xor_ln156_6_fu_1021_p2 = (xor_ln156_5_fu_1015_p2 ^ grp_ClefiaMul2_fu_414_ap_return);

assign xor_ln156_fu_685_p2 = (reg_588 ^ grp_ClefiaMul2_fu_408_ap_return);

assign xor_ln157_2_fu_716_p2 = (grp_fu_557_p2 ^ grp_ClefiaMul2_fu_420_ap_return);

assign xor_ln157_4_fu_1034_p2 = (grp_ClefiaMul2_fu_403_ap_return ^ clefia_s0_q0);

assign xor_ln157_6_fu_1040_p2 = (grp_fu_557_p2 ^ grp_ClefiaMul2_fu_420_ap_return);

assign xor_ln157_fu_710_p2 = (grp_ClefiaMul2_fu_403_ap_return ^ clefia_s0_q0);

assign xor_ln158_1_fu_735_p2 = (grp_fu_557_p2 ^ grp_ClefiaMul2_fu_432_ap_return);

assign xor_ln158_3_fu_1053_p2 = (grp_ClefiaMul2_fu_408_ap_return ^ clefia_s1_q0);

assign xor_ln158_4_fu_1059_p2 = (grp_fu_557_p2 ^ grp_ClefiaMul2_fu_432_ap_return);

assign xor_ln158_fu_729_p2 = (grp_ClefiaMul2_fu_408_ap_return ^ clefia_s1_q0);

assign xor_ln178_1_fu_780_p2 = (grp_ClefiaMul2_fu_437_ap_return ^ grp_ClefiaMul2_fu_426_ap_return);

assign xor_ln178_2_fu_786_p2 = (xor_ln178_1_fu_780_p2 ^ grp_ClefiaMul2_fu_420_ap_return);

assign xor_ln178_4_fu_1097_p2 = (reg_588 ^ grp_ClefiaMul2_fu_414_ap_return);

assign xor_ln178_5_fu_1103_p2 = (grp_ClefiaMul2_fu_437_ap_return ^ grp_ClefiaMul2_fu_426_ap_return);

assign xor_ln178_6_fu_1109_p2 = (xor_ln178_5_fu_1103_p2 ^ grp_ClefiaMul2_fu_420_ap_return);

assign xor_ln178_fu_774_p2 = (reg_588 ^ grp_ClefiaMul2_fu_414_ap_return);

assign xor_ln179_2_fu_805_p2 = (grp_fu_563_p2 ^ grp_ClefiaMul2_fu_426_ap_return);

assign xor_ln179_4_fu_1122_p2 = (reg_600 ^ grp_ClefiaMul2_fu_420_ap_return);

assign xor_ln179_6_fu_1128_p2 = (grp_fu_563_p2 ^ grp_ClefiaMul2_fu_426_ap_return);

assign xor_ln179_fu_799_p2 = (reg_581 ^ grp_ClefiaMul2_fu_420_ap_return);

assign xor_ln180_1_fu_824_p2 = (grp_ClefiaMul2_fu_443_ap_return ^ grp_ClefiaMul2_fu_437_ap_return);

assign xor_ln180_2_fu_830_p2 = (xor_ln180_1_fu_824_p2 ^ grp_ClefiaMul2_fu_414_ap_return);

assign xor_ln180_4_fu_1141_p2 = (reg_595 ^ grp_ClefiaMul2_fu_403_ap_return);

assign xor_ln180_5_fu_1147_p2 = (grp_ClefiaMul2_fu_443_ap_return ^ grp_ClefiaMul2_fu_437_ap_return);

assign xor_ln180_6_fu_1153_p2 = (xor_ln180_5_fu_1147_p2 ^ grp_ClefiaMul2_fu_414_ap_return);

assign xor_ln180_fu_818_p2 = (reg_595 ^ grp_ClefiaMul2_fu_403_ap_return);

assign xor_ln181_1_fu_849_p2 = (grp_fu_563_p2 ^ grp_ClefiaMul2_fu_443_ap_return);

assign xor_ln181_3_fu_1166_p2 = (reg_581 ^ grp_ClefiaMul2_fu_403_ap_return);

assign xor_ln181_4_fu_1172_p2 = (grp_fu_563_p2 ^ grp_ClefiaMul2_fu_443_ap_return);

assign xor_ln181_fu_843_p2 = (reg_600 ^ grp_ClefiaMul2_fu_403_ap_return);

assign y_0_1_fu_792_p2 = (xor_ln178_fu_774_p2 ^ xor_ln178_2_fu_786_p2);

assign y_0_2_fu_1002_p2 = (xor_ln155_6_fu_996_p2 ^ xor_ln155_4_fu_984_p2);

assign y_0_3_fu_1115_p2 = (xor_ln178_6_fu_1109_p2 ^ xor_ln178_4_fu_1097_p2);

assign y_0_fu_678_p2 = (xor_ln155_fu_660_p2 ^ xor_ln155_2_fu_672_p2);

assign y_1_1_fu_811_p2 = (xor_ln179_fu_799_p2 ^ xor_ln179_2_fu_805_p2);

assign y_1_2_fu_1027_p2 = (xor_ln156_6_fu_1021_p2 ^ xor_ln156_4_fu_1009_p2);

assign y_1_3_fu_1134_p2 = (xor_ln179_6_fu_1128_p2 ^ xor_ln179_4_fu_1122_p2);

assign y_1_fu_703_p2 = (xor_ln156_fu_685_p2 ^ xor_ln156_2_fu_697_p2);

assign y_2_1_fu_836_p2 = (xor_ln180_fu_818_p2 ^ xor_ln180_2_fu_830_p2);

assign y_2_2_fu_1046_p2 = (xor_ln157_6_fu_1040_p2 ^ xor_ln157_4_fu_1034_p2);

assign y_2_3_fu_1159_p2 = (xor_ln180_6_fu_1153_p2 ^ xor_ln180_4_fu_1141_p2);

assign y_2_fu_722_p2 = (xor_ln157_fu_710_p2 ^ xor_ln157_2_fu_716_p2);

assign y_3_1_fu_855_p2 = (xor_ln181_fu_843_p2 ^ xor_ln181_1_fu_849_p2);

assign y_3_2_fu_1065_p2 = (xor_ln158_4_fu_1059_p2 ^ xor_ln158_3_fu_1053_p2);

assign y_3_3_fu_1178_p2 = (xor_ln181_4_fu_1172_p2 ^ xor_ln181_3_fu_1166_p2);

assign y_3_fu_741_p2 = (xor_ln158_fu_729_p2 ^ xor_ln158_1_fu_735_p2);

assign zext_ln150_1_fu_964_p1 = grp_ByteXor_11151_fu_384_ap_return_0;

assign zext_ln150_fu_640_p1 = grp_ByteXor_11151_fu_384_ap_return_0;

assign zext_ln151_1_fu_969_p1 = grp_ByteXor_11151_fu_384_ap_return_1;

assign zext_ln151_fu_645_p1 = grp_ByteXor_11151_fu_384_ap_return_1;

assign zext_ln152_1_fu_974_p1 = reg_573;

assign zext_ln152_fu_650_p1 = reg_573;

assign zext_ln153_1_fu_979_p1 = reg_577;

assign zext_ln153_fu_655_p1 = reg_577;

assign zext_ln173_1_fu_1078_p1 = grp_ByteXor_11151_fu_384_ap_return_0;

assign zext_ln173_fu_754_p1 = grp_ByteXor_11151_fu_384_ap_return_0;

assign zext_ln174_1_fu_1093_p1 = x_1_3_reg_1450;

assign zext_ln174_fu_759_p1 = grp_ByteXor_11151_fu_384_ap_return_1;

assign zext_ln175_1_fu_1083_p1 = grp_ByteXor_11151_fu_384_ap_return_2;

assign zext_ln175_fu_764_p1 = grp_ByteXor_11151_fu_384_ap_return_2;

assign zext_ln176_1_fu_1088_p1 = grp_ByteXor_11151_fu_384_ap_return_3;

assign zext_ln176_fu_769_p1 = reg_577;

assign zext_ln460_1_fu_937_p1 = reg_569;

assign zext_ln460_fu_612_p1 = reg_569;

always @ (posedge ap_clk) begin
    shl_ln_reg_1357[2:0] <= 3'b000;
    shl_ln1_reg_1362[2:0] <= 3'b000;
    add_ln432_reg_1368[2:0] <= 3'b000;
    add_ln433_reg_1373[2:0] <= 3'b100;
    or_ln232_reg_1445[2] <= 1'b1;
end

endmodule //clefia
