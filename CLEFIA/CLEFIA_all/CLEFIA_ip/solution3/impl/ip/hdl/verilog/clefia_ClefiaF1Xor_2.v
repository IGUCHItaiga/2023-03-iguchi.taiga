// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clefia_ClefiaF1Xor_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0,
        src_address0,
        src_ce0,
        src_q0,
        rk_address0,
        rk_ce0,
        rk_q0,
        rk_offset
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [7:0] dst_d0;
output  [3:0] src_address0;
output   src_ce0;
input  [7:0] src_q0;
output  [7:0] rk_address0;
output   rk_ce0;
input  [7:0] rk_q0;
input  [6:0] rk_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] dst_address0;
reg dst_ce0;
reg dst_we0;
reg[7:0] dst_d0;
reg[3:0] src_address0;
reg src_ce0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] clefia_s1_address0;
reg    clefia_s1_ce0;
wire   [7:0] clefia_s1_q0;
wire   [7:0] clefia_s1_address1;
reg    clefia_s1_ce1;
wire   [7:0] clefia_s1_q1;
reg   [7:0] clefia_s0_address0;
reg    clefia_s0_ce0;
wire   [7:0] clefia_s0_q0;
reg   [7:0] x_1_reg_322;
wire    ap_CS_fsm_state2;
reg   [7:0] z_reg_342;
wire    ap_CS_fsm_state3;
reg   [7:0] z_17_reg_353;
reg   [7:0] z_18_reg_359;
reg   [7:0] z_16_reg_365;
wire    ap_CS_fsm_state4;
wire   [7:0] y_0_fu_244_p2;
reg   [7:0] y_0_reg_371;
wire    ap_CS_fsm_state5;
wire   [7:0] y_1_fu_268_p2;
reg   [7:0] y_1_reg_376;
wire   [7:0] y_2_fu_292_p2;
reg   [7:0] y_2_reg_381;
wire   [7:0] y_3_fu_310_p2;
reg   [7:0] y_3_reg_386;
wire    grp_ByteXor_11152_fu_82_ap_start;
wire    grp_ByteXor_11152_fu_82_ap_done;
wire    grp_ByteXor_11152_fu_82_ap_idle;
wire    grp_ByteXor_11152_fu_82_ap_ready;
wire   [3:0] grp_ByteXor_11152_fu_82_a_address0;
wire    grp_ByteXor_11152_fu_82_a_ce0;
wire   [7:0] grp_ByteXor_11152_fu_82_b_address0;
wire    grp_ByteXor_11152_fu_82_b_ce0;
wire   [7:0] grp_ByteXor_11152_fu_82_ap_return_0;
wire   [7:0] grp_ByteXor_11152_fu_82_ap_return_1;
wire   [7:0] grp_ByteXor_11152_fu_82_ap_return_2;
wire   [7:0] grp_ByteXor_11152_fu_82_ap_return_3;
wire    grp_ByteCpy_119_fu_94_ap_start;
wire    grp_ByteCpy_119_fu_94_ap_done;
wire    grp_ByteCpy_119_fu_94_ap_idle;
wire    grp_ByteCpy_119_fu_94_ap_ready;
wire   [3:0] grp_ByteCpy_119_fu_94_dst_address0;
wire    grp_ByteCpy_119_fu_94_dst_ce0;
wire    grp_ByteCpy_119_fu_94_dst_we0;
wire   [7:0] grp_ByteCpy_119_fu_94_dst_d0;
wire   [3:0] grp_ByteCpy_119_fu_94_src_address0;
wire    grp_ByteCpy_119_fu_94_src_ce0;
wire    tmp_ClefiaMul2_fu_108_ap_ready;
wire   [7:0] tmp_ClefiaMul2_fu_108_ap_return;
wire    tmp_1_ClefiaMul2_fu_113_ap_ready;
wire   [7:0] tmp_1_ClefiaMul2_fu_113_ap_return;
wire    tmp_2_ClefiaMul2_fu_119_ap_ready;
wire   [7:0] tmp_2_ClefiaMul2_fu_119_ap_return;
wire    tmp_3_ClefiaMul2_fu_125_ap_ready;
wire   [7:0] tmp_3_ClefiaMul2_fu_125_ap_return;
wire    tmp_4_ClefiaMul2_fu_130_ap_ready;
wire   [7:0] tmp_4_ClefiaMul2_fu_130_ap_return;
wire    tmp_5_ClefiaMul2_fu_135_ap_ready;
wire   [7:0] tmp_5_ClefiaMul2_fu_135_ap_return;
wire    tmp_6_ClefiaMul2_fu_141_ap_ready;
wire   [7:0] tmp_6_ClefiaMul2_fu_141_ap_return;
wire    tmp_7_ClefiaMul2_fu_147_ap_ready;
wire   [7:0] tmp_7_ClefiaMul2_fu_147_ap_return;
wire    tmp_8_ClefiaMul2_fu_152_ap_ready;
wire   [7:0] tmp_8_ClefiaMul2_fu_152_ap_return;
wire    tmp_9_ClefiaMul2_fu_158_ap_ready;
wire   [7:0] tmp_9_ClefiaMul2_fu_158_ap_return;
wire    tmp_s_ClefiaMul2_fu_164_ap_ready;
wire   [7:0] tmp_s_ClefiaMul2_fu_164_ap_return;
wire    tmp_10_ClefiaMul2_fu_170_ap_ready;
wire   [7:0] tmp_10_ClefiaMul2_fu_170_ap_return;
wire    grp_ByteXor_143_fu_176_ap_start;
wire    grp_ByteXor_143_fu_176_ap_done;
wire    grp_ByteXor_143_fu_176_ap_idle;
wire    grp_ByteXor_143_fu_176_ap_ready;
wire   [3:0] grp_ByteXor_143_fu_176_dst_address0;
wire    grp_ByteXor_143_fu_176_dst_ce0;
wire    grp_ByteXor_143_fu_176_dst_we0;
wire   [7:0] grp_ByteXor_143_fu_176_dst_d0;
wire   [3:0] grp_ByteXor_143_fu_176_a_address0;
wire    grp_ByteXor_143_fu_176_a_ce0;
reg    grp_ByteXor_11152_fu_82_ap_start_reg;
reg    grp_ByteCpy_119_fu_94_ap_start_reg;
reg    grp_ByteXor_143_fu_176_ap_start_reg;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln173_fu_208_p1;
wire   [63:0] zext_ln175_fu_213_p1;
wire   [63:0] zext_ln176_fu_218_p1;
wire   [63:0] zext_ln174_fu_223_p1;
wire   [7:0] xor_ln178_8_fu_232_p2;
wire   [7:0] xor_ln178_9_fu_238_p2;
wire   [7:0] xor_ln178_fu_227_p2;
wire   [7:0] xor_ln179_8_fu_256_p2;
wire   [7:0] xor_ln179_9_fu_262_p2;
wire   [7:0] xor_ln179_fu_251_p2;
wire   [7:0] xor_ln180_8_fu_280_p2;
wire   [7:0] xor_ln180_9_fu_286_p2;
wire   [7:0] xor_ln180_fu_275_p2;
wire   [7:0] xor_ln181_6_fu_304_p2;
wire   [7:0] xor_ln181_fu_299_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_ByteXor_11152_fu_82_ap_start_reg = 1'b0;
#0 grp_ByteCpy_119_fu_94_ap_start_reg = 1'b0;
#0 grp_ByteXor_143_fu_176_ap_start_reg = 1'b0;
end

clefia_ClefiaF1Xor_1_clefia_s1_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s1_address0),
    .ce0(clefia_s1_ce0),
    .q0(clefia_s1_q0),
    .address1(clefia_s1_address1),
    .ce1(clefia_s1_ce1),
    .q1(clefia_s1_q1)
);

clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s0_address0),
    .ce0(clefia_s0_ce0),
    .q0(clefia_s0_q0)
);

clefia_ByteXor_11152 grp_ByteXor_11152_fu_82(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_ByteXor_11152_fu_82_ap_start),
    .ap_done(grp_ByteXor_11152_fu_82_ap_done),
    .ap_idle(grp_ByteXor_11152_fu_82_ap_idle),
    .ap_ready(grp_ByteXor_11152_fu_82_ap_ready),
    .a_address0(grp_ByteXor_11152_fu_82_a_address0),
    .a_ce0(grp_ByteXor_11152_fu_82_a_ce0),
    .a_q0(src_q0),
    .a_offset(4'd8),
    .b_address0(grp_ByteXor_11152_fu_82_b_address0),
    .b_ce0(grp_ByteXor_11152_fu_82_b_ce0),
    .b_q0(rk_q0),
    .b_offset(rk_offset),
    .ap_return_0(grp_ByteXor_11152_fu_82_ap_return_0),
    .ap_return_1(grp_ByteXor_11152_fu_82_ap_return_1),
    .ap_return_2(grp_ByteXor_11152_fu_82_ap_return_2),
    .ap_return_3(grp_ByteXor_11152_fu_82_ap_return_3)
);

clefia_ByteCpy_119 grp_ByteCpy_119_fu_94(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_ByteCpy_119_fu_94_ap_start),
    .ap_done(grp_ByteCpy_119_fu_94_ap_done),
    .ap_idle(grp_ByteCpy_119_fu_94_ap_idle),
    .ap_ready(grp_ByteCpy_119_fu_94_ap_ready),
    .dst_address0(grp_ByteCpy_119_fu_94_dst_address0),
    .dst_ce0(grp_ByteCpy_119_fu_94_dst_ce0),
    .dst_we0(grp_ByteCpy_119_fu_94_dst_we0),
    .dst_d0(grp_ByteCpy_119_fu_94_dst_d0),
    .dst_offset(4'd8),
    .src_address0(grp_ByteCpy_119_fu_94_src_address0),
    .src_ce0(grp_ByteCpy_119_fu_94_src_ce0),
    .src_q0(src_q0),
    .src_offset(4'd8),
    .bytelen_offset(4'd4)
);

clefia_ClefiaMul2 tmp_ClefiaMul2_fu_108(
    .ap_ready(tmp_ClefiaMul2_fu_108_ap_ready),
    .x(z_16_reg_365),
    .ap_return(tmp_ClefiaMul2_fu_108_ap_return)
);

clefia_ClefiaMul2 tmp_1_ClefiaMul2_fu_113(
    .ap_ready(tmp_1_ClefiaMul2_fu_113_ap_ready),
    .x(tmp_ClefiaMul2_fu_108_ap_return),
    .ap_return(tmp_1_ClefiaMul2_fu_113_ap_return)
);

clefia_ClefiaMul2 tmp_2_ClefiaMul2_fu_119(
    .ap_ready(tmp_2_ClefiaMul2_fu_119_ap_ready),
    .x(tmp_1_ClefiaMul2_fu_113_ap_return),
    .ap_return(tmp_2_ClefiaMul2_fu_119_ap_return)
);

clefia_ClefiaMul2 tmp_3_ClefiaMul2_fu_125(
    .ap_ready(tmp_3_ClefiaMul2_fu_125_ap_ready),
    .x(z_17_reg_353),
    .ap_return(tmp_3_ClefiaMul2_fu_125_ap_return)
);

clefia_ClefiaMul2 tmp_4_ClefiaMul2_fu_130(
    .ap_ready(tmp_4_ClefiaMul2_fu_130_ap_ready),
    .x(z_18_reg_359),
    .ap_return(tmp_4_ClefiaMul2_fu_130_ap_return)
);

clefia_ClefiaMul2 tmp_5_ClefiaMul2_fu_135(
    .ap_ready(tmp_5_ClefiaMul2_fu_135_ap_ready),
    .x(tmp_4_ClefiaMul2_fu_130_ap_return),
    .ap_return(tmp_5_ClefiaMul2_fu_135_ap_return)
);

clefia_ClefiaMul2 tmp_6_ClefiaMul2_fu_141(
    .ap_ready(tmp_6_ClefiaMul2_fu_141_ap_ready),
    .x(tmp_5_ClefiaMul2_fu_135_ap_return),
    .ap_return(tmp_6_ClefiaMul2_fu_141_ap_return)
);

clefia_ClefiaMul2 tmp_7_ClefiaMul2_fu_147(
    .ap_ready(tmp_7_ClefiaMul2_fu_147_ap_ready),
    .x(z_reg_342),
    .ap_return(tmp_7_ClefiaMul2_fu_147_ap_return)
);

clefia_ClefiaMul2 tmp_8_ClefiaMul2_fu_152(
    .ap_ready(tmp_8_ClefiaMul2_fu_152_ap_ready),
    .x(tmp_7_ClefiaMul2_fu_147_ap_return),
    .ap_return(tmp_8_ClefiaMul2_fu_152_ap_return)
);

clefia_ClefiaMul2 tmp_9_ClefiaMul2_fu_158(
    .ap_ready(tmp_9_ClefiaMul2_fu_158_ap_ready),
    .x(tmp_8_ClefiaMul2_fu_152_ap_return),
    .ap_return(tmp_9_ClefiaMul2_fu_158_ap_return)
);

clefia_ClefiaMul2 tmp_s_ClefiaMul2_fu_164(
    .ap_ready(tmp_s_ClefiaMul2_fu_164_ap_ready),
    .x(tmp_3_ClefiaMul2_fu_125_ap_return),
    .ap_return(tmp_s_ClefiaMul2_fu_164_ap_return)
);

clefia_ClefiaMul2 tmp_10_ClefiaMul2_fu_170(
    .ap_ready(tmp_10_ClefiaMul2_fu_170_ap_ready),
    .x(tmp_s_ClefiaMul2_fu_164_ap_return),
    .ap_return(tmp_10_ClefiaMul2_fu_170_ap_return)
);

clefia_ByteXor_143 grp_ByteXor_143_fu_176(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_ByteXor_143_fu_176_ap_start),
    .ap_done(grp_ByteXor_143_fu_176_ap_done),
    .ap_idle(grp_ByteXor_143_fu_176_ap_idle),
    .ap_ready(grp_ByteXor_143_fu_176_ap_ready),
    .dst_address0(grp_ByteXor_143_fu_176_dst_address0),
    .dst_ce0(grp_ByteXor_143_fu_176_dst_ce0),
    .dst_we0(grp_ByteXor_143_fu_176_dst_we0),
    .dst_d0(grp_ByteXor_143_fu_176_dst_d0),
    .dst_offset(4'd12),
    .a_address0(grp_ByteXor_143_fu_176_a_address0),
    .a_ce0(grp_ByteXor_143_fu_176_a_ce0),
    .a_q0(src_q0),
    .a_offset(4'd12),
    .p_read(y_0_reg_371),
    .p_read1(y_1_reg_376),
    .p_read2(y_2_reg_381),
    .p_read3(y_3_reg_386)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_ByteCpy_119_fu_94_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_ByteCpy_119_fu_94_ap_start_reg <= 1'b1;
        end else if ((grp_ByteCpy_119_fu_94_ap_ready == 1'b1)) begin
            grp_ByteCpy_119_fu_94_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_ByteXor_11152_fu_82_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_ByteXor_11152_fu_82_ap_start_reg <= 1'b1;
        end else if ((grp_ByteXor_11152_fu_82_ap_ready == 1'b1)) begin
            grp_ByteXor_11152_fu_82_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_ByteXor_143_fu_176_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_ByteXor_143_fu_176_ap_start_reg <= 1'b1;
        end else if ((grp_ByteXor_143_fu_176_ap_ready == 1'b1)) begin
            grp_ByteXor_143_fu_176_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_1_reg_322 <= grp_ByteXor_11152_fu_82_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        y_0_reg_371 <= y_0_fu_244_p2;
        y_1_reg_376 <= y_1_fu_268_p2;
        y_2_reg_381 <= y_2_fu_292_p2;
        y_3_reg_386 <= y_3_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        z_16_reg_365 <= clefia_s0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        z_17_reg_353 <= clefia_s1_q0;
        z_18_reg_359 <= clefia_s0_q0;
        z_reg_342 <= clefia_s1_q1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_ByteXor_11152_fu_82_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteCpy_119_fu_94_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_ByteXor_143_fu_176_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_state6) & (grp_ByteXor_143_fu_176_ap_done == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_ByteXor_143_fu_176_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        clefia_s0_address0 = zext_ln174_fu_223_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        clefia_s0_address0 = zext_ln176_fu_218_p1;
    end else begin
        clefia_s0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state2) & (grp_ByteXor_11152_fu_82_ap_done == 1'b1)))) begin
        clefia_s0_ce0 = 1'b1;
    end else begin
        clefia_s0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_ByteXor_11152_fu_82_ap_done == 1'b1))) begin
        clefia_s1_ce0 = 1'b1;
    end else begin
        clefia_s1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_ByteXor_11152_fu_82_ap_done == 1'b1))) begin
        clefia_s1_ce1 = 1'b1;
    end else begin
        clefia_s1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_address0 = grp_ByteXor_143_fu_176_dst_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_address0 = grp_ByteCpy_119_fu_94_dst_address0;
    end else begin
        dst_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_ce0 = grp_ByteXor_143_fu_176_dst_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_ce0 = grp_ByteCpy_119_fu_94_dst_ce0;
    end else begin
        dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_d0 = grp_ByteXor_143_fu_176_dst_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_d0 = grp_ByteCpy_119_fu_94_dst_d0;
    end else begin
        dst_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_we0 = grp_ByteXor_143_fu_176_dst_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_we0 = grp_ByteCpy_119_fu_94_dst_we0;
    end else begin
        dst_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        src_address0 = grp_ByteXor_143_fu_176_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        src_address0 = grp_ByteCpy_119_fu_94_src_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        src_address0 = grp_ByteXor_11152_fu_82_a_address0;
    end else begin
        src_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        src_ce0 = grp_ByteXor_143_fu_176_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        src_ce0 = grp_ByteCpy_119_fu_94_src_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        src_ce0 = grp_ByteXor_11152_fu_82_a_ce0;
    end else begin
        src_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_ByteXor_11152_fu_82_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_ByteCpy_119_fu_94_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_ByteXor_143_fu_176_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign clefia_s1_address0 = zext_ln175_fu_213_p1;

assign clefia_s1_address1 = zext_ln173_fu_208_p1;

assign grp_ByteCpy_119_fu_94_ap_start = grp_ByteCpy_119_fu_94_ap_start_reg;

assign grp_ByteXor_11152_fu_82_ap_start = grp_ByteXor_11152_fu_82_ap_start_reg;

assign grp_ByteXor_143_fu_176_ap_start = grp_ByteXor_143_fu_176_ap_start_reg;

assign rk_address0 = grp_ByteXor_11152_fu_82_b_address0;

assign rk_ce0 = grp_ByteXor_11152_fu_82_b_ce0;

assign xor_ln178_8_fu_232_p2 = (tmp_6_ClefiaMul2_fu_141_ap_return ^ tmp_4_ClefiaMul2_fu_130_ap_return);

assign xor_ln178_9_fu_238_p2 = (xor_ln178_8_fu_232_p2 ^ tmp_3_ClefiaMul2_fu_125_ap_return);

assign xor_ln178_fu_227_p2 = (z_reg_342 ^ tmp_2_ClefiaMul2_fu_119_ap_return);

assign xor_ln179_8_fu_256_p2 = (tmp_9_ClefiaMul2_fu_158_ap_return ^ tmp_10_ClefiaMul2_fu_170_ap_return);

assign xor_ln179_9_fu_262_p2 = (xor_ln179_8_fu_256_p2 ^ tmp_4_ClefiaMul2_fu_130_ap_return);

assign xor_ln179_fu_251_p2 = (z_16_reg_365 ^ tmp_3_ClefiaMul2_fu_125_ap_return);

assign xor_ln180_8_fu_280_p2 = (tmp_7_ClefiaMul2_fu_147_ap_return ^ tmp_6_ClefiaMul2_fu_141_ap_return);

assign xor_ln180_9_fu_286_p2 = (xor_ln180_8_fu_280_p2 ^ tmp_2_ClefiaMul2_fu_119_ap_return);

assign xor_ln180_fu_275_p2 = (z_17_reg_353 ^ tmp_ClefiaMul2_fu_108_ap_return);

assign xor_ln181_6_fu_304_p2 = (xor_ln179_8_fu_256_p2 ^ tmp_7_ClefiaMul2_fu_147_ap_return);

assign xor_ln181_fu_299_p2 = (z_18_reg_359 ^ tmp_ClefiaMul2_fu_108_ap_return);

assign y_0_fu_244_p2 = (xor_ln178_fu_227_p2 ^ xor_ln178_9_fu_238_p2);

assign y_1_fu_268_p2 = (xor_ln179_fu_251_p2 ^ xor_ln179_9_fu_262_p2);

assign y_2_fu_292_p2 = (xor_ln180_fu_275_p2 ^ xor_ln180_9_fu_286_p2);

assign y_3_fu_310_p2 = (xor_ln181_fu_299_p2 ^ xor_ln181_6_fu_304_p2);

assign zext_ln173_fu_208_p1 = grp_ByteXor_11152_fu_82_ap_return_0;

assign zext_ln174_fu_223_p1 = x_1_reg_322;

assign zext_ln175_fu_213_p1 = grp_ByteXor_11152_fu_82_ap_return_2;

assign zext_ln176_fu_218_p1 = grp_ByteXor_11152_fu_82_ap_return_3;

endmodule //clefia_ClefiaF1Xor_2
