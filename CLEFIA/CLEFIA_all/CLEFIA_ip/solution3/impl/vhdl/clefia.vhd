-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clefia is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of clefia is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "clefia_clefia,hls_ip_2022_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.084000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=0,HLS_SYN_FF=3366,HLS_SYN_LUT=16910,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (149 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (149 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (149 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (149 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (149 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (149 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (149 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (149 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (149 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (149 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state148 : STD_LOGIC_VECTOR (149 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state149 : STD_LOGIC_VECTOR (149 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state150 : STD_LOGIC_VECTOR (149 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_85 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000101";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_8D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001101";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_91 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010001";
    constant ap_const_lv32_92 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010010";
    constant ap_const_lv32_93 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010011";
    constant ap_const_lv32_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010100";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv37_0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv37_8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv36_FFFFFFFF8 : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111111111111000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (149 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal pt_ce0 : STD_LOGIC;
    signal pt_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_bitlen : STD_LOGIC_VECTOR (31 downto 0);
    signal Clefia_enc_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Clefia_enc_ce0 : STD_LOGIC;
    signal Clefia_enc_we0 : STD_LOGIC;
    signal Clefia_enc_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Clefia_enc_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Clefia_dec_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Clefia_dec_ce0 : STD_LOGIC;
    signal Clefia_dec_we0 : STD_LOGIC;
    signal Clefia_dec_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Clefia_dec_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_ce0 : STD_LOGIC;
    signal clefia_s0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_ce0 : STD_LOGIC;
    signal clefia_s1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_ce1 : STD_LOGIC;
    signal clefia_s1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet_fu_347_ap_return : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_569 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal reg_573 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal reg_577 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal reg_581 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal reg_588 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_595 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_600 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal key_bitlen_read_reg_1218 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln193_reg_1223 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal trunc_ln188_fu_629_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln188_reg_1244 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal add_ln188_cast_fu_633_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln188_cast_reg_1249 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal y_0_fu_678_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_0_reg_1274 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal y_1_fu_703_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_1_reg_1279 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_2_fu_722_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_2_reg_1284 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_3_fu_741_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_3_reg_1289 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln195_fu_748_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln195_reg_1294 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal y_0_1_fu_792_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_0_1_reg_1319 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal y_1_1_fu_811_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_1_1_reg_1324 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_2_1_fu_836_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_2_1_reg_1329 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_3_1_fu_855_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_3_1_reg_1334 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln188_1_fu_865_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln188_1_reg_1339 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal add_ln188_fu_871_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal add_ln188_reg_1345 : STD_LOGIC_VECTOR (36 downto 0);
    signal icmp_ln197_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln197_reg_1350 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_895_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_1357 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal shl_ln1_fu_916_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1_reg_1362 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal add_ln432_fu_924_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln432_reg_1368 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln433_fu_931_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln433_reg_1373 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal icmp_ln230_reg_1378 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal add_ln224_fu_958_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln224_reg_1399 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal y_0_2_fu_1002_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_0_2_reg_1425 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal y_1_2_fu_1027_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_1_2_reg_1430 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_2_2_fu_1046_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_2_2_reg_1435 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_3_2_fu_1065_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_3_2_reg_1440 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln232_fu_1072_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln232_reg_1445 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal x_1_3_reg_1450 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal y_0_3_fu_1115_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_0_3_reg_1475 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal y_1_3_fu_1134_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_1_3_reg_1480 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_2_3_fu_1159_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_2_3_reg_1485 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_3_3_fu_1178_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_3_3_reg_1490 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln224_1_fu_1188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln224_1_reg_1495 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal add_ln233_fu_1194_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln233_reg_1501 : STD_LOGIC_VECTOR (35 downto 0);
    signal icmp_ln234_fu_1199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln234_reg_1506 : STD_LOGIC_VECTOR (0 downto 0);
    signal fin_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fin_ce0 : STD_LOGIC;
    signal fin_we0 : STD_LOGIC;
    signal fin_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fout_ce0 : STD_LOGIC;
    signal fout_we0 : STD_LOGIC;
    signal fout_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal rin_ce0 : STD_LOGIC;
    signal rin_we0 : STD_LOGIC;
    signal rin_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rout_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal rout_ce0 : STD_LOGIC;
    signal rout_we0 : STD_LOGIC;
    signal rout_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rout_ce1 : STD_LOGIC;
    signal rout_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fin_1_ce0 : STD_LOGIC;
    signal fin_1_we0 : STD_LOGIC;
    signal fin_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fout_1_ce0 : STD_LOGIC;
    signal fout_1_we0 : STD_LOGIC;
    signal fout_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fout_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal rin_1_ce0 : STD_LOGIC;
    signal rin_1_we0 : STD_LOGIC;
    signal rin_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rin_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rout_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal rout_1_ce0 : STD_LOGIC;
    signal rout_1_we0 : STD_LOGIC;
    signal rout_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rout_1_ce1 : STD_LOGIC;
    signal rout_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ct_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ct_ce0 : STD_LOGIC;
    signal ct_we0 : STD_LOGIC;
    signal ct_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_ce0 : STD_LOGIC;
    signal rk_we0 : STD_LOGIC;
    signal rk_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rk_ce1 : STD_LOGIC;
    signal rk_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteCpy_1_fu_338_ap_start : STD_LOGIC;
    signal grp_ByteCpy_1_fu_338_ap_done : STD_LOGIC;
    signal grp_ByteCpy_1_fu_338_ap_idle : STD_LOGIC;
    signal grp_ByteCpy_1_fu_338_ap_ready : STD_LOGIC;
    signal grp_ByteCpy_1_fu_338_ap_ce : STD_LOGIC;
    signal grp_ByteCpy_1_fu_338_dst_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteCpy_1_fu_338_dst_ce0 : STD_LOGIC;
    signal grp_ByteCpy_1_fu_338_dst_we0 : STD_LOGIC;
    signal grp_ByteCpy_1_fu_338_dst_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteCpy_1_fu_338_pt_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteCpy_1_fu_338_pt_ce0 : STD_LOGIC;
    signal grp_ByteCpy_1_fu_338_pt_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet_fu_347_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal grp_ClefiaKeySet_fu_347_ap_start : STD_LOGIC;
    signal grp_ClefiaKeySet_fu_347_ap_idle : STD_LOGIC;
    signal grp_ClefiaKeySet_fu_347_ap_ready : STD_LOGIC;
    signal grp_ClefiaKeySet_fu_347_rk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaKeySet_fu_347_rk_ce0 : STD_LOGIC;
    signal grp_ClefiaKeySet_fu_347_rk_we0 : STD_LOGIC;
    signal grp_ClefiaKeySet_fu_347_rk_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_112_2_fu_366_ap_start : STD_LOGIC;
    signal grp_ByteXor_112_2_fu_366_ap_done : STD_LOGIC;
    signal grp_ByteXor_112_2_fu_366_ap_idle : STD_LOGIC;
    signal grp_ByteXor_112_2_fu_366_ap_ready : STD_LOGIC;
    signal grp_ByteXor_112_2_fu_366_a_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteXor_112_2_fu_366_a_ce0 : STD_LOGIC;
    signal grp_ByteXor_112_2_fu_366_a_we0 : STD_LOGIC;
    signal grp_ByteXor_112_2_fu_366_a_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_112_2_fu_366_a_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_112_2_fu_366_a_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteXor_112_2_fu_366_b_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_112_2_fu_366_b_ce0 : STD_LOGIC;
    signal grp_ByteXor_112_2_fu_366_b_offset : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteCpy_11831_fu_378_ap_start : STD_LOGIC;
    signal grp_ByteCpy_11831_fu_378_ap_done : STD_LOGIC;
    signal grp_ByteCpy_11831_fu_378_ap_idle : STD_LOGIC;
    signal grp_ByteCpy_11831_fu_378_ap_ready : STD_LOGIC;
    signal grp_ByteCpy_11831_fu_378_dst_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteCpy_11831_fu_378_dst_ce0 : STD_LOGIC;
    signal grp_ByteCpy_11831_fu_378_dst_we0 : STD_LOGIC;
    signal grp_ByteCpy_11831_fu_378_dst_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteCpy_11831_fu_378_src_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteCpy_11831_fu_378_src_ce0 : STD_LOGIC;
    signal grp_ByteCpy_11831_fu_378_src_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_11151_fu_384_ap_start : STD_LOGIC;
    signal grp_ByteXor_11151_fu_384_ap_done : STD_LOGIC;
    signal grp_ByteXor_11151_fu_384_ap_idle : STD_LOGIC;
    signal grp_ByteXor_11151_fu_384_ap_ready : STD_LOGIC;
    signal grp_ByteXor_11151_fu_384_a_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteXor_11151_fu_384_a_ce0 : STD_LOGIC;
    signal grp_ByteXor_11151_fu_384_a_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_11151_fu_384_a_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteXor_11151_fu_384_b_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_11151_fu_384_b_ce0 : STD_LOGIC;
    signal grp_ByteXor_11151_fu_384_b_offset : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_11151_fu_384_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_11151_fu_384_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_11151_fu_384_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_11151_fu_384_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteCpy_fu_394_ap_start : STD_LOGIC;
    signal grp_ByteCpy_fu_394_ap_done : STD_LOGIC;
    signal grp_ByteCpy_fu_394_ap_idle : STD_LOGIC;
    signal grp_ByteCpy_fu_394_ap_ready : STD_LOGIC;
    signal grp_ByteCpy_fu_394_dst_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteCpy_fu_394_dst_ce0 : STD_LOGIC;
    signal grp_ByteCpy_fu_394_dst_we0 : STD_LOGIC;
    signal grp_ByteCpy_fu_394_dst_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteCpy_fu_394_src_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteCpy_fu_394_src_ce0 : STD_LOGIC;
    signal grp_ByteCpy_fu_394_src_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteCpy_fu_394_bytelen_offset : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_ClefiaMul2_fu_403_ap_ready : STD_LOGIC;
    signal grp_ClefiaMul2_fu_403_x : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaMul2_fu_403_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaMul2_fu_408_ap_ready : STD_LOGIC;
    signal grp_ClefiaMul2_fu_408_x : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaMul2_fu_408_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaMul2_fu_414_ap_ready : STD_LOGIC;
    signal grp_ClefiaMul2_fu_414_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaMul2_fu_420_ap_ready : STD_LOGIC;
    signal grp_ClefiaMul2_fu_420_x : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaMul2_fu_420_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaMul2_fu_426_ap_ready : STD_LOGIC;
    signal grp_ClefiaMul2_fu_426_x : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaMul2_fu_426_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaMul2_fu_432_ap_ready : STD_LOGIC;
    signal grp_ClefiaMul2_fu_432_x : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaMul2_fu_432_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaMul2_fu_437_ap_ready : STD_LOGIC;
    signal grp_ClefiaMul2_fu_437_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaMul2_fu_443_ap_ready : STD_LOGIC;
    signal grp_ClefiaMul2_fu_443_x : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaMul2_fu_443_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaMul2_fu_451_ap_ready : STD_LOGIC;
    signal grp_ClefiaMul2_fu_451_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaMul2_fu_457_ap_ready : STD_LOGIC;
    signal grp_ClefiaMul2_fu_457_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaMul2_fu_463_ap_ready : STD_LOGIC;
    signal grp_ClefiaMul2_fu_463_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ClefiaMul2_fu_469_ap_ready : STD_LOGIC;
    signal grp_ClefiaMul2_fu_469_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_143_fu_475_ap_start : STD_LOGIC;
    signal grp_ByteXor_143_fu_475_ap_done : STD_LOGIC;
    signal grp_ByteXor_143_fu_475_ap_idle : STD_LOGIC;
    signal grp_ByteXor_143_fu_475_ap_ready : STD_LOGIC;
    signal grp_ByteXor_143_fu_475_dst_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteXor_143_fu_475_dst_ce0 : STD_LOGIC;
    signal grp_ByteXor_143_fu_475_dst_we0 : STD_LOGIC;
    signal grp_ByteXor_143_fu_475_dst_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_143_fu_475_dst_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteXor_143_fu_475_a_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteXor_143_fu_475_a_ce0 : STD_LOGIC;
    signal grp_ByteXor_143_fu_475_a_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_143_fu_475_a_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteXor_143_fu_475_p_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_143_fu_475_p_read1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_143_fu_475_p_read2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_143_fu_475_p_read3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteCpy_119_fu_491_ap_start : STD_LOGIC;
    signal grp_ByteCpy_119_fu_491_ap_done : STD_LOGIC;
    signal grp_ByteCpy_119_fu_491_ap_idle : STD_LOGIC;
    signal grp_ByteCpy_119_fu_491_ap_ready : STD_LOGIC;
    signal grp_ByteCpy_119_fu_491_dst_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteCpy_119_fu_491_dst_ce0 : STD_LOGIC;
    signal grp_ByteCpy_119_fu_491_dst_we0 : STD_LOGIC;
    signal grp_ByteCpy_119_fu_491_dst_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteCpy_119_fu_491_dst_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteCpy_119_fu_491_src_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteCpy_119_fu_491_src_ce0 : STD_LOGIC;
    signal grp_ByteCpy_119_fu_491_src_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteCpy_119_fu_491_src_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteCpy_119_fu_491_bytelen_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteCpy_116_fu_510_ap_start : STD_LOGIC;
    signal grp_ByteCpy_116_fu_510_ap_done : STD_LOGIC;
    signal grp_ByteCpy_116_fu_510_ap_idle : STD_LOGIC;
    signal grp_ByteCpy_116_fu_510_ap_ready : STD_LOGIC;
    signal grp_ByteCpy_116_fu_510_dst_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteCpy_116_fu_510_dst_ce0 : STD_LOGIC;
    signal grp_ByteCpy_116_fu_510_dst_we0 : STD_LOGIC;
    signal grp_ByteCpy_116_fu_510_dst_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteCpy_116_fu_510_src_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteCpy_116_fu_510_src_ce0 : STD_LOGIC;
    signal grp_ByteCpy_116_fu_510_src_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteCpy_2_fu_516_ap_start : STD_LOGIC;
    signal grp_ByteCpy_2_fu_516_ap_done : STD_LOGIC;
    signal grp_ByteCpy_2_fu_516_ap_idle : STD_LOGIC;
    signal grp_ByteCpy_2_fu_516_ap_ready : STD_LOGIC;
    signal grp_ByteCpy_2_fu_516_Clefia_enc_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteCpy_2_fu_516_Clefia_enc_ce0 : STD_LOGIC;
    signal grp_ByteCpy_2_fu_516_Clefia_enc_we0 : STD_LOGIC;
    signal grp_ByteCpy_2_fu_516_Clefia_enc_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteCpy_2_fu_516_src_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteCpy_2_fu_516_src_ce0 : STD_LOGIC;
    signal grp_ByteCpy_2_fu_516_src_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteCpy_2_fu_516_src_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteCpy_2_fu_516_src_ce1 : STD_LOGIC;
    signal grp_ByteCpy_2_fu_516_src_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_1_fu_524_ap_start : STD_LOGIC;
    signal grp_ByteXor_1_fu_524_ap_done : STD_LOGIC;
    signal grp_ByteXor_1_fu_524_ap_idle : STD_LOGIC;
    signal grp_ByteXor_1_fu_524_ap_ready : STD_LOGIC;
    signal grp_ByteXor_1_fu_524_Clefia_enc_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteXor_1_fu_524_Clefia_enc_ce0 : STD_LOGIC;
    signal grp_ByteXor_1_fu_524_Clefia_enc_we0 : STD_LOGIC;
    signal grp_ByteXor_1_fu_524_Clefia_enc_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_1_fu_524_Clefia_enc_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_1_fu_524_dst_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteXor_1_fu_524_a_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ByteXor_1_fu_524_b_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_1_fu_524_b_ce0 : STD_LOGIC;
    signal grp_ByteXor_1_fu_524_b_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteXor_1_fu_524_b_ce1 : STD_LOGIC;
    signal grp_ByteXor_1_fu_524_b_offset : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ByteCpy_1_fu_338_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (149 downto 0);
    signal ap_NS_fsm_state75 : STD_LOGIC;
    signal grp_ClefiaKeySet_fu_347_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal grp_ByteXor_112_2_fu_366_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal grp_ByteCpy_11831_fu_378_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal grp_ByteXor_11151_fu_384_ap_start_reg : STD_LOGIC := '0';
    signal grp_ByteCpy_fu_394_ap_start_reg : STD_LOGIC := '0';
    signal grp_ByteXor_143_fu_475_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal grp_ByteCpy_119_fu_491_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal grp_ByteCpy_116_fu_510_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal grp_ByteCpy_2_fu_516_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm_state42 : STD_LOGIC;
    signal ap_NS_fsm_state118 : STD_LOGIC;
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal ap_CS_fsm_state121 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state121 : signal is "none";
    signal ap_CS_fsm_state122 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state122 : signal is "none";
    signal ap_CS_fsm_state123 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal ap_CS_fsm_state124 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state124 : signal is "none";
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal ap_CS_fsm_state128 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state128 : signal is "none";
    signal ap_CS_fsm_state129 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state129 : signal is "none";
    signal ap_CS_fsm_state130 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state130 : signal is "none";
    signal ap_CS_fsm_state131 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state131 : signal is "none";
    signal ap_CS_fsm_state132 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state132 : signal is "none";
    signal ap_CS_fsm_state133 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state133 : signal is "none";
    signal ap_CS_fsm_state134 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state134 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal grp_ByteXor_1_fu_524_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm_state59 : STD_LOGIC;
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_NS_fsm_state67 : STD_LOGIC;
    signal ap_NS_fsm_state135 : STD_LOGIC;
    signal ap_CS_fsm_state142 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state142 : signal is "none";
    signal ap_NS_fsm_state143 : STD_LOGIC;
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state135 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state135 : signal is "none";
    signal ap_CS_fsm_state136 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state136 : signal is "none";
    signal ap_CS_fsm_state137 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state137 : signal is "none";
    signal ap_CS_fsm_state138 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state138 : signal is "none";
    signal ap_CS_fsm_state139 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state139 : signal is "none";
    signal ap_CS_fsm_state140 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state140 : signal is "none";
    signal ap_CS_fsm_state141 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state141 : signal is "none";
    signal ap_CS_fsm_state143 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state143 : signal is "none";
    signal ap_CS_fsm_state144 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state144 : signal is "none";
    signal ap_CS_fsm_state145 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state145 : signal is "none";
    signal ap_CS_fsm_state146 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state146 : signal is "none";
    signal ap_CS_fsm_state147 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state147 : signal is "none";
    signal ap_CS_fsm_state148 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state148 : signal is "none";
    signal ap_CS_fsm_state149 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state149 : signal is "none";
    signal ap_CS_fsm_state150 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state150 : signal is "none";
    signal add_ln422_fu_903_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln423_fu_910_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln150_fu_640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln151_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln153_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_fu_754_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_fu_759_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_fu_764_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_1_fu_964_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln151_1_fu_969_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_1_fu_974_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln153_1_fu_979_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_1_fu_1078_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_1_fu_1083_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_1_fu_1088_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_1_fu_1093_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idx_fu_174 : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_predicate_op329_call_state39 : BOOLEAN;
    signal ap_block_state39_on_subcall_done : BOOLEAN;
    signal icmp_ln193_1_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dec12_i_i_in_fu_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln460_fu_612_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx34_fu_182 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_predicate_op529_call_state115 : BOOLEAN;
    signal ap_block_state115_on_subcall_done : BOOLEAN;
    signal icmp_ln230_1_fu_1205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dec12_i_i14_in_fu_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln460_1_fu_937_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln155_1_fu_666_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln155_2_fu_672_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln155_fu_660_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln156_1_fu_691_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln156_2_fu_697_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln156_fu_685_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_557_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln157_2_fu_716_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln157_fu_710_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln158_1_fu_735_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln158_fu_729_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln178_1_fu_780_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln178_2_fu_786_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln178_fu_774_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_563_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln179_2_fu_805_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln179_fu_799_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln180_1_fu_824_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln180_2_fu_830_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln180_fu_818_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln181_1_fu_849_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln181_fu_843_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln224_fu_954_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln155_5_fu_990_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln155_6_fu_996_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln155_4_fu_984_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln156_5_fu_1015_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln156_6_fu_1021_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln156_4_fu_1009_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln157_6_fu_1040_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln157_4_fu_1034_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln158_4_fu_1059_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln158_3_fu_1053_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln178_5_fu_1103_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln178_6_fu_1109_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln178_4_fu_1097_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln179_6_fu_1128_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln179_4_fu_1122_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln180_5_fu_1147_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln180_6_fu_1153_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln180_4_fu_1141_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln181_4_fu_1172_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln181_3_fu_1166_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_block_state93_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ST_fsm_state104_blk : STD_LOGIC;
    signal ap_ST_fsm_state105_blk : STD_LOGIC;
    signal ap_ST_fsm_state106_blk : STD_LOGIC;
    signal ap_ST_fsm_state107_blk : STD_LOGIC;
    signal ap_ST_fsm_state108_blk : STD_LOGIC;
    signal ap_ST_fsm_state109_blk : STD_LOGIC;
    signal ap_ST_fsm_state110_blk : STD_LOGIC;
    signal ap_ST_fsm_state111_blk : STD_LOGIC;
    signal ap_ST_fsm_state112_blk : STD_LOGIC;
    signal ap_ST_fsm_state113_blk : STD_LOGIC;
    signal ap_ST_fsm_state114_blk : STD_LOGIC;
    signal ap_ST_fsm_state115_blk : STD_LOGIC;
    signal ap_ST_fsm_state116_blk : STD_LOGIC;
    signal ap_ST_fsm_state117_blk : STD_LOGIC;
    signal ap_ST_fsm_state118_blk : STD_LOGIC;
    signal ap_ST_fsm_state119_blk : STD_LOGIC;
    signal ap_ST_fsm_state120_blk : STD_LOGIC;
    signal ap_ST_fsm_state121_blk : STD_LOGIC;
    signal ap_ST_fsm_state122_blk : STD_LOGIC;
    signal ap_ST_fsm_state123_blk : STD_LOGIC;
    signal ap_ST_fsm_state124_blk : STD_LOGIC;
    signal ap_ST_fsm_state125_blk : STD_LOGIC;
    signal ap_ST_fsm_state126_blk : STD_LOGIC;
    signal ap_ST_fsm_state127_blk : STD_LOGIC;
    signal ap_ST_fsm_state128_blk : STD_LOGIC;
    signal ap_ST_fsm_state129_blk : STD_LOGIC;
    signal ap_ST_fsm_state130_blk : STD_LOGIC;
    signal ap_ST_fsm_state131_blk : STD_LOGIC;
    signal ap_ST_fsm_state132_blk : STD_LOGIC;
    signal ap_ST_fsm_state133_blk : STD_LOGIC;
    signal ap_ST_fsm_state134_blk : STD_LOGIC;
    signal ap_ST_fsm_state135_blk : STD_LOGIC;
    signal ap_ST_fsm_state136_blk : STD_LOGIC;
    signal ap_ST_fsm_state137_blk : STD_LOGIC;
    signal ap_ST_fsm_state138_blk : STD_LOGIC;
    signal ap_ST_fsm_state139_blk : STD_LOGIC;
    signal ap_ST_fsm_state140_blk : STD_LOGIC;
    signal ap_ST_fsm_state141_blk : STD_LOGIC;
    signal ap_ST_fsm_state142_blk : STD_LOGIC;
    signal ap_ST_fsm_state143_blk : STD_LOGIC;
    signal ap_ST_fsm_state144_blk : STD_LOGIC;
    signal ap_ST_fsm_state145_blk : STD_LOGIC;
    signal ap_ST_fsm_state146_blk : STD_LOGIC;
    signal ap_ST_fsm_state147_blk : STD_LOGIC;
    signal ap_ST_fsm_state148_blk : STD_LOGIC;
    signal ap_ST_fsm_state149_blk : STD_LOGIC;
    signal ap_ST_fsm_state150_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clefia_ByteCpy_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        dst_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pt_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        pt_ce0 : OUT STD_LOGIC;
        pt_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaKeySet IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_ce0 : OUT STD_LOGIC;
        rk_we0 : OUT STD_LOGIC;
        rk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_bitlen : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component clefia_ByteXor_112_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_we0 : OUT STD_LOGIC;
        a_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        a_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        b_offset : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ByteCpy_11831 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dst_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        src_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ByteXor_11151 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        a_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        b_offset : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ByteCpy IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dst_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        src_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bytelen_offset : IN STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component clefia_ClefiaMul2 IS
    port (
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ByteXor_143 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dst_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        a_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ByteCpy_119 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dst_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        src_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        src_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        bytelen_offset : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component clefia_ByteCpy_116 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dst_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        src_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ByteCpy_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        Clefia_enc_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Clefia_enc_ce0 : OUT STD_LOGIC;
        Clefia_enc_we0 : OUT STD_LOGIC;
        Clefia_enc_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        src_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        src_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        src_ce1 : OUT STD_LOGIC;
        src_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ByteXor_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Clefia_enc_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Clefia_enc_ce0 : OUT STD_LOGIC;
        Clefia_enc_we0 : OUT STD_LOGIC;
        Clefia_enc_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        Clefia_enc_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        dst_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        a_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        b_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_ce1 : OUT STD_LOGIC;
        b_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        b_offset : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_ClefiaF1Xor_1_clefia_s1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_fin_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_rout_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_rk_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        pt_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        pt_ce0 : IN STD_LOGIC;
        pt_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        key_bitlen : OUT STD_LOGIC_VECTOR (31 downto 0);
        Clefia_enc_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        Clefia_enc_ce0 : IN STD_LOGIC;
        Clefia_enc_we0 : IN STD_LOGIC;
        Clefia_enc_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        Clefia_enc_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        Clefia_dec_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        Clefia_dec_ce0 : IN STD_LOGIC;
        Clefia_dec_we0 : IN STD_LOGIC;
        Clefia_dec_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        Clefia_dec_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    clefia_s0_U : component clefia_ClefiaF0Xor_2_clefia_s0_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => clefia_s0_address0,
        ce0 => clefia_s0_ce0,
        q0 => clefia_s0_q0);

    clefia_s1_U : component clefia_ClefiaF1Xor_1_clefia_s1_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => clefia_s1_address0,
        ce0 => clefia_s1_ce0,
        q0 => clefia_s1_q0,
        address1 => clefia_s1_address1,
        ce1 => clefia_s1_ce1,
        q1 => clefia_s1_q1);

    fin_U : component clefia_fin_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fin_address0,
        ce0 => fin_ce0,
        we0 => fin_we0,
        d0 => fin_d0,
        q0 => fin_q0);

    fout_U : component clefia_fin_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fout_address0,
        ce0 => fout_ce0,
        we0 => fout_we0,
        d0 => fout_d0,
        q0 => fout_q0);

    rin_U : component clefia_fin_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => rin_address0,
        ce0 => rin_ce0,
        we0 => rin_we0,
        d0 => rin_d0,
        q0 => rin_q0);

    rout_U : component clefia_rout_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => rout_address0,
        ce0 => rout_ce0,
        we0 => rout_we0,
        d0 => grp_ByteCpy_116_fu_510_dst_d0,
        q0 => rout_q0,
        address1 => grp_ByteCpy_2_fu_516_src_address1,
        ce1 => rout_ce1,
        q1 => rout_q1);

    fin_1_U : component clefia_fin_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fin_1_address0,
        ce0 => fin_1_ce0,
        we0 => fin_1_we0,
        d0 => fin_1_d0,
        q0 => fin_1_q0);

    fout_1_U : component clefia_fin_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fout_1_address0,
        ce0 => fout_1_ce0,
        we0 => fout_1_we0,
        d0 => fout_1_d0,
        q0 => fout_1_q0);

    rin_1_U : component clefia_fin_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => rin_1_address0,
        ce0 => rin_1_ce0,
        we0 => rin_1_we0,
        d0 => rin_1_d0,
        q0 => rin_1_q0);

    rout_1_U : component clefia_rout_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => rout_1_address0,
        ce0 => rout_1_ce0,
        we0 => rout_1_we0,
        d0 => grp_ByteCpy_116_fu_510_dst_d0,
        q0 => rout_1_q0,
        address1 => grp_ByteCpy_2_fu_516_src_address1,
        ce1 => rout_1_ce1,
        q1 => rout_1_q1);

    ct_U : component clefia_fin_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ct_address0,
        ce0 => ct_ce0,
        we0 => ct_we0,
        d0 => grp_ByteCpy_1_fu_338_dst_d0,
        q0 => ct_q0);

    rk_U : component clefia_rk_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 224,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => rk_address0,
        ce0 => rk_ce0,
        we0 => rk_we0,
        d0 => grp_ClefiaKeySet_fu_347_rk_d0,
        q0 => rk_q0,
        address1 => grp_ByteXor_1_fu_524_b_address1,
        ce1 => rk_ce1,
        q1 => rk_q1);

    grp_ByteCpy_1_fu_338 : component clefia_ByteCpy_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ByteCpy_1_fu_338_ap_start,
        ap_done => grp_ByteCpy_1_fu_338_ap_done,
        ap_idle => grp_ByteCpy_1_fu_338_ap_idle,
        ap_ready => grp_ByteCpy_1_fu_338_ap_ready,
        ap_ce => grp_ByteCpy_1_fu_338_ap_ce,
        dst_address0 => grp_ByteCpy_1_fu_338_dst_address0,
        dst_ce0 => grp_ByteCpy_1_fu_338_dst_ce0,
        dst_we0 => grp_ByteCpy_1_fu_338_dst_we0,
        dst_d0 => grp_ByteCpy_1_fu_338_dst_d0,
        pt_address0 => grp_ByteCpy_1_fu_338_pt_address0,
        pt_ce0 => grp_ByteCpy_1_fu_338_pt_ce0,
        pt_q0 => grp_ByteCpy_1_fu_338_pt_q0);

    grp_ClefiaKeySet_fu_347 : component clefia_ClefiaKeySet
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ClefiaKeySet_fu_347_ap_start,
        ap_done => grp_ClefiaKeySet_fu_347_ap_done,
        ap_idle => grp_ClefiaKeySet_fu_347_ap_idle,
        ap_ready => grp_ClefiaKeySet_fu_347_ap_ready,
        rk_address0 => grp_ClefiaKeySet_fu_347_rk_address0,
        rk_ce0 => grp_ClefiaKeySet_fu_347_rk_ce0,
        rk_we0 => grp_ClefiaKeySet_fu_347_rk_we0,
        rk_d0 => grp_ClefiaKeySet_fu_347_rk_d0,
        rk_q0 => rk_q0,
        key_bitlen => key_bitlen_read_reg_1218,
        ap_return => grp_ClefiaKeySet_fu_347_ap_return);

    grp_ByteXor_112_2_fu_366 : component clefia_ByteXor_112_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ByteXor_112_2_fu_366_ap_start,
        ap_done => grp_ByteXor_112_2_fu_366_ap_done,
        ap_idle => grp_ByteXor_112_2_fu_366_ap_idle,
        ap_ready => grp_ByteXor_112_2_fu_366_ap_ready,
        a_address0 => grp_ByteXor_112_2_fu_366_a_address0,
        a_ce0 => grp_ByteXor_112_2_fu_366_a_ce0,
        a_we0 => grp_ByteXor_112_2_fu_366_a_we0,
        a_d0 => grp_ByteXor_112_2_fu_366_a_d0,
        a_q0 => grp_ByteXor_112_2_fu_366_a_q0,
        a_offset => grp_ByteXor_112_2_fu_366_a_offset,
        b_address0 => grp_ByteXor_112_2_fu_366_b_address0,
        b_ce0 => grp_ByteXor_112_2_fu_366_b_ce0,
        b_q0 => rk_q0,
        b_offset => grp_ByteXor_112_2_fu_366_b_offset);

    grp_ByteCpy_11831_fu_378 : component clefia_ByteCpy_11831
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ByteCpy_11831_fu_378_ap_start,
        ap_done => grp_ByteCpy_11831_fu_378_ap_done,
        ap_idle => grp_ByteCpy_11831_fu_378_ap_idle,
        ap_ready => grp_ByteCpy_11831_fu_378_ap_ready,
        dst_address0 => grp_ByteCpy_11831_fu_378_dst_address0,
        dst_ce0 => grp_ByteCpy_11831_fu_378_dst_ce0,
        dst_we0 => grp_ByteCpy_11831_fu_378_dst_we0,
        dst_d0 => grp_ByteCpy_11831_fu_378_dst_d0,
        src_address0 => grp_ByteCpy_11831_fu_378_src_address0,
        src_ce0 => grp_ByteCpy_11831_fu_378_src_ce0,
        src_q0 => grp_ByteCpy_11831_fu_378_src_q0);

    grp_ByteXor_11151_fu_384 : component clefia_ByteXor_11151
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ByteXor_11151_fu_384_ap_start,
        ap_done => grp_ByteXor_11151_fu_384_ap_done,
        ap_idle => grp_ByteXor_11151_fu_384_ap_idle,
        ap_ready => grp_ByteXor_11151_fu_384_ap_ready,
        a_address0 => grp_ByteXor_11151_fu_384_a_address0,
        a_ce0 => grp_ByteXor_11151_fu_384_a_ce0,
        a_q0 => grp_ByteXor_11151_fu_384_a_q0,
        a_offset => grp_ByteXor_11151_fu_384_a_offset,
        b_address0 => grp_ByteXor_11151_fu_384_b_address0,
        b_ce0 => grp_ByteXor_11151_fu_384_b_ce0,
        b_q0 => rk_q0,
        b_offset => grp_ByteXor_11151_fu_384_b_offset,
        ap_return_0 => grp_ByteXor_11151_fu_384_ap_return_0,
        ap_return_1 => grp_ByteXor_11151_fu_384_ap_return_1,
        ap_return_2 => grp_ByteXor_11151_fu_384_ap_return_2,
        ap_return_3 => grp_ByteXor_11151_fu_384_ap_return_3);

    grp_ByteCpy_fu_394 : component clefia_ByteCpy
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ByteCpy_fu_394_ap_start,
        ap_done => grp_ByteCpy_fu_394_ap_done,
        ap_idle => grp_ByteCpy_fu_394_ap_idle,
        ap_ready => grp_ByteCpy_fu_394_ap_ready,
        dst_address0 => grp_ByteCpy_fu_394_dst_address0,
        dst_ce0 => grp_ByteCpy_fu_394_dst_ce0,
        dst_we0 => grp_ByteCpy_fu_394_dst_we0,
        dst_d0 => grp_ByteCpy_fu_394_dst_d0,
        src_address0 => grp_ByteCpy_fu_394_src_address0,
        src_ce0 => grp_ByteCpy_fu_394_src_ce0,
        src_q0 => grp_ByteCpy_fu_394_src_q0,
        bytelen_offset => grp_ByteCpy_fu_394_bytelen_offset);

    grp_ClefiaMul2_fu_403 : component clefia_ClefiaMul2
    port map (
        ap_ready => grp_ClefiaMul2_fu_403_ap_ready,
        x => grp_ClefiaMul2_fu_403_x,
        ap_return => grp_ClefiaMul2_fu_403_ap_return);

    grp_ClefiaMul2_fu_408 : component clefia_ClefiaMul2
    port map (
        ap_ready => grp_ClefiaMul2_fu_408_ap_ready,
        x => grp_ClefiaMul2_fu_408_x,
        ap_return => grp_ClefiaMul2_fu_408_ap_return);

    grp_ClefiaMul2_fu_414 : component clefia_ClefiaMul2
    port map (
        ap_ready => grp_ClefiaMul2_fu_414_ap_ready,
        x => grp_ClefiaMul2_fu_408_ap_return,
        ap_return => grp_ClefiaMul2_fu_414_ap_return);

    grp_ClefiaMul2_fu_420 : component clefia_ClefiaMul2
    port map (
        ap_ready => grp_ClefiaMul2_fu_420_ap_ready,
        x => grp_ClefiaMul2_fu_420_x,
        ap_return => grp_ClefiaMul2_fu_420_ap_return);

    grp_ClefiaMul2_fu_426 : component clefia_ClefiaMul2
    port map (
        ap_ready => grp_ClefiaMul2_fu_426_ap_ready,
        x => grp_ClefiaMul2_fu_426_x,
        ap_return => grp_ClefiaMul2_fu_426_ap_return);

    grp_ClefiaMul2_fu_432 : component clefia_ClefiaMul2
    port map (
        ap_ready => grp_ClefiaMul2_fu_432_ap_ready,
        x => grp_ClefiaMul2_fu_432_x,
        ap_return => grp_ClefiaMul2_fu_432_ap_return);

    grp_ClefiaMul2_fu_437 : component clefia_ClefiaMul2
    port map (
        ap_ready => grp_ClefiaMul2_fu_437_ap_ready,
        x => grp_ClefiaMul2_fu_432_ap_return,
        ap_return => grp_ClefiaMul2_fu_437_ap_return);

    grp_ClefiaMul2_fu_443 : component clefia_ClefiaMul2
    port map (
        ap_ready => grp_ClefiaMul2_fu_443_ap_ready,
        x => grp_ClefiaMul2_fu_443_x,
        ap_return => grp_ClefiaMul2_fu_443_ap_return);

    grp_ClefiaMul2_fu_451 : component clefia_ClefiaMul2
    port map (
        ap_ready => grp_ClefiaMul2_fu_451_ap_ready,
        x => grp_ClefiaMul2_fu_443_ap_return,
        ap_return => grp_ClefiaMul2_fu_451_ap_return);

    grp_ClefiaMul2_fu_457 : component clefia_ClefiaMul2
    port map (
        ap_ready => grp_ClefiaMul2_fu_457_ap_ready,
        x => grp_ClefiaMul2_fu_451_ap_return,
        ap_return => grp_ClefiaMul2_fu_457_ap_return);

    grp_ClefiaMul2_fu_463 : component clefia_ClefiaMul2
    port map (
        ap_ready => grp_ClefiaMul2_fu_463_ap_ready,
        x => grp_ClefiaMul2_fu_420_ap_return,
        ap_return => grp_ClefiaMul2_fu_463_ap_return);

    grp_ClefiaMul2_fu_469 : component clefia_ClefiaMul2
    port map (
        ap_ready => grp_ClefiaMul2_fu_469_ap_ready,
        x => grp_ClefiaMul2_fu_463_ap_return,
        ap_return => grp_ClefiaMul2_fu_469_ap_return);

    grp_ByteXor_143_fu_475 : component clefia_ByteXor_143
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ByteXor_143_fu_475_ap_start,
        ap_done => grp_ByteXor_143_fu_475_ap_done,
        ap_idle => grp_ByteXor_143_fu_475_ap_idle,
        ap_ready => grp_ByteXor_143_fu_475_ap_ready,
        dst_address0 => grp_ByteXor_143_fu_475_dst_address0,
        dst_ce0 => grp_ByteXor_143_fu_475_dst_ce0,
        dst_we0 => grp_ByteXor_143_fu_475_dst_we0,
        dst_d0 => grp_ByteXor_143_fu_475_dst_d0,
        dst_offset => grp_ByteXor_143_fu_475_dst_offset,
        a_address0 => grp_ByteXor_143_fu_475_a_address0,
        a_ce0 => grp_ByteXor_143_fu_475_a_ce0,
        a_q0 => grp_ByteXor_143_fu_475_a_q0,
        a_offset => grp_ByteXor_143_fu_475_a_offset,
        p_read => grp_ByteXor_143_fu_475_p_read,
        p_read1 => grp_ByteXor_143_fu_475_p_read1,
        p_read2 => grp_ByteXor_143_fu_475_p_read2,
        p_read3 => grp_ByteXor_143_fu_475_p_read3);

    grp_ByteCpy_119_fu_491 : component clefia_ByteCpy_119
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ByteCpy_119_fu_491_ap_start,
        ap_done => grp_ByteCpy_119_fu_491_ap_done,
        ap_idle => grp_ByteCpy_119_fu_491_ap_idle,
        ap_ready => grp_ByteCpy_119_fu_491_ap_ready,
        dst_address0 => grp_ByteCpy_119_fu_491_dst_address0,
        dst_ce0 => grp_ByteCpy_119_fu_491_dst_ce0,
        dst_we0 => grp_ByteCpy_119_fu_491_dst_we0,
        dst_d0 => grp_ByteCpy_119_fu_491_dst_d0,
        dst_offset => grp_ByteCpy_119_fu_491_dst_offset,
        src_address0 => grp_ByteCpy_119_fu_491_src_address0,
        src_ce0 => grp_ByteCpy_119_fu_491_src_ce0,
        src_q0 => grp_ByteCpy_119_fu_491_src_q0,
        src_offset => grp_ByteCpy_119_fu_491_src_offset,
        bytelen_offset => grp_ByteCpy_119_fu_491_bytelen_offset);

    grp_ByteCpy_116_fu_510 : component clefia_ByteCpy_116
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ByteCpy_116_fu_510_ap_start,
        ap_done => grp_ByteCpy_116_fu_510_ap_done,
        ap_idle => grp_ByteCpy_116_fu_510_ap_idle,
        ap_ready => grp_ByteCpy_116_fu_510_ap_ready,
        dst_address0 => grp_ByteCpy_116_fu_510_dst_address0,
        dst_ce0 => grp_ByteCpy_116_fu_510_dst_ce0,
        dst_we0 => grp_ByteCpy_116_fu_510_dst_we0,
        dst_d0 => grp_ByteCpy_116_fu_510_dst_d0,
        src_address0 => grp_ByteCpy_116_fu_510_src_address0,
        src_ce0 => grp_ByteCpy_116_fu_510_src_ce0,
        src_q0 => grp_ByteCpy_116_fu_510_src_q0);

    grp_ByteCpy_2_fu_516 : component clefia_ByteCpy_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ByteCpy_2_fu_516_ap_start,
        ap_done => grp_ByteCpy_2_fu_516_ap_done,
        ap_idle => grp_ByteCpy_2_fu_516_ap_idle,
        ap_ready => grp_ByteCpy_2_fu_516_ap_ready,
        ap_ce => ap_const_logic_1,
        Clefia_enc_address0 => grp_ByteCpy_2_fu_516_Clefia_enc_address0,
        Clefia_enc_ce0 => grp_ByteCpy_2_fu_516_Clefia_enc_ce0,
        Clefia_enc_we0 => grp_ByteCpy_2_fu_516_Clefia_enc_we0,
        Clefia_enc_d0 => grp_ByteCpy_2_fu_516_Clefia_enc_d0,
        src_address0 => grp_ByteCpy_2_fu_516_src_address0,
        src_ce0 => grp_ByteCpy_2_fu_516_src_ce0,
        src_q0 => grp_ByteCpy_2_fu_516_src_q0,
        src_address1 => grp_ByteCpy_2_fu_516_src_address1,
        src_ce1 => grp_ByteCpy_2_fu_516_src_ce1,
        src_q1 => grp_ByteCpy_2_fu_516_src_q1);

    grp_ByteXor_1_fu_524 : component clefia_ByteXor_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ByteXor_1_fu_524_ap_start,
        ap_done => grp_ByteXor_1_fu_524_ap_done,
        ap_idle => grp_ByteXor_1_fu_524_ap_idle,
        ap_ready => grp_ByteXor_1_fu_524_ap_ready,
        Clefia_enc_address0 => grp_ByteXor_1_fu_524_Clefia_enc_address0,
        Clefia_enc_ce0 => grp_ByteXor_1_fu_524_Clefia_enc_ce0,
        Clefia_enc_we0 => grp_ByteXor_1_fu_524_Clefia_enc_we0,
        Clefia_enc_d0 => grp_ByteXor_1_fu_524_Clefia_enc_d0,
        Clefia_enc_q0 => grp_ByteXor_1_fu_524_Clefia_enc_q0,
        dst_offset => grp_ByteXor_1_fu_524_dst_offset,
        a_offset => grp_ByteXor_1_fu_524_a_offset,
        b_address0 => grp_ByteXor_1_fu_524_b_address0,
        b_ce0 => grp_ByteXor_1_fu_524_b_ce0,
        b_q0 => rk_q0,
        b_address1 => grp_ByteXor_1_fu_524_b_address1,
        b_ce1 => grp_ByteXor_1_fu_524_b_ce1,
        b_q1 => rk_q1,
        b_offset => grp_ByteXor_1_fu_524_b_offset,
        ap_ce => ap_const_logic_1);

    control_s_axi_U : component clefia_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        pt_address0 => grp_ByteCpy_1_fu_338_pt_address0,
        pt_ce0 => pt_ce0,
        pt_q0 => pt_q0,
        key_bitlen => key_bitlen,
        Clefia_enc_address0 => Clefia_enc_address0,
        Clefia_enc_ce0 => Clefia_enc_ce0,
        Clefia_enc_we0 => Clefia_enc_we0,
        Clefia_enc_d0 => Clefia_enc_d0,
        Clefia_enc_q0 => Clefia_enc_q0,
        Clefia_dec_address0 => Clefia_dec_address0,
        Clefia_dec_ce0 => Clefia_dec_ce0,
        Clefia_dec_we0 => Clefia_dec_we0,
        Clefia_dec_d0 => Clefia_dec_d0,
        Clefia_dec_q0 => Clefia_dec_q0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_ByteCpy_116_fu_510_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ByteCpy_116_fu_510_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                    grp_ByteCpy_116_fu_510_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ByteCpy_116_fu_510_ap_ready = ap_const_logic_1)) then 
                    grp_ByteCpy_116_fu_510_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ByteCpy_11831_fu_378_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ByteCpy_11831_fu_378_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    grp_ByteCpy_11831_fu_378_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ByteCpy_11831_fu_378_ap_ready = ap_const_logic_1)) then 
                    grp_ByteCpy_11831_fu_378_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ByteCpy_119_fu_491_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ByteCpy_119_fu_491_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state38) or ((icmp_ln234_fu_1199_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state112)) or ((icmp_ln197_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36)))) then 
                    grp_ByteCpy_119_fu_491_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ByteCpy_119_fu_491_ap_ready = ap_const_logic_1)) then 
                    grp_ByteCpy_119_fu_491_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ByteCpy_1_fu_338_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ByteCpy_1_fu_338_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state75) and (ap_const_logic_1 = ap_CS_fsm_state74))) then 
                    grp_ByteCpy_1_fu_338_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ByteCpy_1_fu_338_ap_ready = ap_const_logic_1)) then 
                    grp_ByteCpy_1_fu_338_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ByteCpy_2_fu_516_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ByteCpy_2_fu_516_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_NS_fsm_state118) and (ap_const_logic_1 = ap_CS_fsm_state117)) or ((ap_const_logic_1 = ap_NS_fsm_state42) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then 
                    grp_ByteCpy_2_fu_516_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ByteCpy_2_fu_516_ap_ready = ap_const_logic_1)) then 
                    grp_ByteCpy_2_fu_516_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ByteCpy_fu_394_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ByteCpy_fu_394_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state92))) then 
                    grp_ByteCpy_fu_394_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ByteCpy_fu_394_ap_ready = ap_const_logic_1)) then 
                    grp_ByteCpy_fu_394_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ByteXor_11151_fu_384_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ByteXor_11151_fu_384_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                    grp_ByteXor_11151_fu_384_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ByteXor_11151_fu_384_ap_ready = ap_const_logic_1)) then 
                    grp_ByteXor_11151_fu_384_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ByteXor_112_2_fu_366_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ByteXor_112_2_fu_366_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                    grp_ByteXor_112_2_fu_366_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ByteXor_112_2_fu_366_ap_ready = ap_const_logic_1)) then 
                    grp_ByteXor_112_2_fu_366_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ByteXor_143_fu_475_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ByteXor_143_fu_475_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                    grp_ByteXor_143_fu_475_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ByteXor_143_fu_475_ap_ready = ap_const_logic_1)) then 
                    grp_ByteXor_143_fu_475_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ByteXor_1_fu_524_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ByteXor_1_fu_524_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_NS_fsm_state143) and (ap_const_logic_1 = ap_CS_fsm_state142)) or ((ap_const_logic_1 = ap_NS_fsm_state135) and (ap_const_logic_1 = ap_CS_fsm_state134)) or ((ap_const_logic_1 = ap_NS_fsm_state67) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((ap_const_logic_1 = ap_NS_fsm_state59) and (ap_const_logic_1 = ap_CS_fsm_state58)))) then 
                    grp_ByteXor_1_fu_524_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ByteXor_1_fu_524_ap_ready = ap_const_logic_1)) then 
                    grp_ByteXor_1_fu_524_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ClefiaKeySet_fu_347_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ClefiaKeySet_fu_347_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state92))) then 
                    grp_ClefiaKeySet_fu_347_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ClefiaKeySet_fu_347_ap_ready = ap_const_logic_1)) then 
                    grp_ClefiaKeySet_fu_347_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dec12_i_i14_in_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ByteCpy_11831_fu_378_ap_done = ap_const_logic_1) and (grp_fu_606_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state99))) then 
                dec12_i_i14_in_fu_186 <= zext_ln460_1_fu_937_p1;
            elsif (((icmp_ln230_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115) and (icmp_ln230_1_fu_1205_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state115_on_subcall_done))) then 
                dec12_i_i14_in_fu_186 <= add_ln224_1_reg_1495;
            end if; 
        end if;
    end process;

    dec12_i_i_in_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ByteCpy_11831_fu_378_ap_done = ap_const_logic_1) and (grp_fu_606_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                dec12_i_i_in_fu_178 <= zext_ln460_fu_612_p1;
            elsif (((icmp_ln193_reg_1223 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39) and (icmp_ln193_1_fu_882_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state39_on_subcall_done))) then 
                dec12_i_i_in_fu_178 <= add_ln188_1_reg_1339;
            end if; 
        end if;
    end process;

    idx34_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ByteCpy_11831_fu_378_ap_done = ap_const_logic_1) and (grp_fu_606_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state99))) then 
                idx34_fu_182 <= ap_const_lv36_0;
            elsif (((icmp_ln230_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115) and (icmp_ln230_1_fu_1205_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state115_on_subcall_done))) then 
                idx34_fu_182 <= add_ln233_reg_1501;
            end if; 
        end if;
    end process;

    idx_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ByteCpy_11831_fu_378_ap_done = ap_const_logic_1) and (grp_fu_606_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                idx_fu_174 <= ap_const_lv37_0;
            elsif (((icmp_ln193_reg_1223 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39) and (icmp_ln193_1_fu_882_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state39_on_subcall_done))) then 
                idx_fu_174 <= add_ln188_reg_1345;
            end if; 
        end if;
    end process;

    reg_588_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                reg_588 <= clefia_s1_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                reg_588 <= clefia_s1_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                add_ln188_1_reg_1339 <= add_ln188_1_fu_865_p2;
                add_ln188_reg_1345 <= add_ln188_fu_871_p2;
                icmp_ln197_reg_1350 <= icmp_ln197_fu_876_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                add_ln188_cast_reg_1249 <= add_ln188_cast_fu_633_p2;
                trunc_ln188_reg_1244 <= trunc_ln188_fu_629_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                add_ln195_reg_1294 <= add_ln195_fu_748_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state112)) then
                add_ln224_1_reg_1495 <= add_ln224_1_fu_1188_p2;
                add_ln233_reg_1501 <= add_ln233_fu_1194_p2;
                icmp_ln234_reg_1506 <= icmp_ln234_fu_1199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state100)) then
                add_ln224_reg_1399 <= add_ln224_fu_958_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then
                    add_ln432_reg_1368(7 downto 3) <= add_ln432_fu_924_p2(7 downto 3);
                    shl_ln1_reg_1362(7 downto 3) <= shl_ln1_fu_916_p3(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state96)) then
                    add_ln433_reg_1373(7 downto 3) <= add_ln433_fu_931_p2(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                icmp_ln193_reg_1223 <= grp_fu_606_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state99)) then
                icmp_ln230_reg_1378 <= grp_fu_606_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                key_bitlen_read_reg_1218 <= key_bitlen;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state106)) then
                    or_ln232_reg_1445(1 downto 0) <= or_ln232_fu_1072_p2(1 downto 0);    or_ln232_reg_1445(7 downto 3) <= or_ln232_fu_1072_p2(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_569 <= grp_ClefiaKeySet_fu_347_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state25))) then
                reg_573 <= grp_ByteXor_11151_fu_384_ap_return_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state25))) then
                reg_577 <= grp_ByteXor_11151_fu_384_ap_return_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26))) then
                reg_581 <= clefia_s0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
                reg_595 <= clefia_s1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state33))) then
                reg_600 <= clefia_s0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                    shl_ln_reg_1357(7 downto 3) <= shl_ln_fu_895_p3(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state107)) then
                x_1_3_reg_1450 <= grp_ByteXor_11151_fu_384_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                y_0_1_reg_1319 <= y_0_1_fu_792_p2;
                y_1_1_reg_1324 <= y_1_1_fu_811_p2;
                y_2_1_reg_1329 <= y_2_1_fu_836_p2;
                y_3_1_reg_1334 <= y_3_1_fu_855_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state104)) then
                y_0_2_reg_1425 <= y_0_2_fu_1002_p2;
                y_1_2_reg_1430 <= y_1_2_fu_1027_p2;
                y_2_2_reg_1435 <= y_2_2_fu_1046_p2;
                y_3_2_reg_1440 <= y_3_2_fu_1065_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state110)) then
                y_0_3_reg_1475 <= y_0_3_fu_1115_p2;
                y_1_3_reg_1480 <= y_1_3_fu_1134_p2;
                y_2_3_reg_1485 <= y_2_3_fu_1159_p2;
                y_3_3_reg_1490 <= y_3_3_fu_1178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                y_0_reg_1274 <= y_0_fu_678_p2;
                y_1_reg_1279 <= y_1_fu_703_p2;
                y_2_reg_1284 <= y_2_fu_722_p2;
                y_3_reg_1289 <= y_3_fu_741_p2;
            end if;
        end if;
    end process;
    shl_ln_reg_1357(2 downto 0) <= "000";
    shl_ln1_reg_1362(2 downto 0) <= "000";
    add_ln432_reg_1368(2 downto 0) <= "000";
    add_ln433_reg_1373(2 downto 0) <= "100";
    or_ln232_reg_1445(2) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state17, ap_CS_fsm_state93, ap_CS_fsm_state25, ap_CS_fsm_state101, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state109, grp_fu_606_p2, icmp_ln193_reg_1223, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state36, icmp_ln197_fu_876_p2, icmp_ln230_reg_1378, ap_CS_fsm_state99, ap_CS_fsm_state103, ap_CS_fsm_state107, ap_CS_fsm_state112, icmp_ln234_fu_1199_p2, grp_ClefiaKeySet_fu_347_ap_done, grp_ByteXor_112_2_fu_366_ap_done, grp_ByteCpy_11831_fu_378_ap_done, grp_ByteXor_11151_fu_384_ap_done, grp_ByteCpy_fu_394_ap_done, grp_ByteXor_143_fu_475_ap_done, grp_ByteCpy_119_fu_491_ap_done, grp_ByteCpy_116_fu_510_ap_done, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state29, ap_CS_fsm_state35, ap_CS_fsm_state105, ap_CS_fsm_state111, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state113, ap_CS_fsm_state115, ap_CS_fsm_state41, ap_CS_fsm_state117, ap_block_state39_on_subcall_done, icmp_ln193_1_fu_882_p2, ap_block_state115_on_subcall_done, icmp_ln230_1_fu_1205_p2, ap_block_state93_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_ClefiaKeySet_fu_347_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_ByteXor_112_2_fu_366_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_ByteXor_112_2_fu_366_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((grp_ByteCpy_11831_fu_378_ap_done = ap_const_logic_1) and (grp_fu_606_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                elsif (((grp_ByteCpy_11831_fu_378_ap_done = ap_const_logic_1) and (grp_fu_606_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((grp_ByteXor_11151_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((grp_ByteCpy_fu_394_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((grp_ByteXor_143_fu_475_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((grp_ByteXor_11151_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((grp_ByteCpy_119_fu_491_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((grp_ByteXor_143_fu_475_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if (((icmp_ln197_fu_876_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                if (((grp_ByteCpy_119_fu_491_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (ap_const_boolean_0 = ap_block_state39_on_subcall_done) and ((icmp_ln193_reg_1223 = ap_const_lv1_1) or (icmp_ln193_1_fu_882_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                elsif (((icmp_ln193_reg_1223 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39) and (icmp_ln193_1_fu_882_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state39_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((grp_ByteCpy_116_fu_510_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state93) and (ap_const_boolean_0 = ap_block_state93_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state93;
                end if;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                if (((grp_ByteXor_112_2_fu_366_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state95))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                if (((grp_ByteXor_112_2_fu_366_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                if (((grp_ByteCpy_11831_fu_378_ap_done = ap_const_logic_1) and (grp_fu_606_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state99))) then
                    ap_NS_fsm <= ap_ST_fsm_state100;
                elsif (((grp_ByteCpy_11831_fu_378_ap_done = ap_const_logic_1) and (grp_fu_606_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state99))) then
                    ap_NS_fsm <= ap_ST_fsm_state115;
                else
                    ap_NS_fsm <= ap_ST_fsm_state99;
                end if;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                if (((grp_ByteXor_11151_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state101))) then
                    ap_NS_fsm <= ap_ST_fsm_state102;
                else
                    ap_NS_fsm <= ap_ST_fsm_state101;
                end if;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                if (((grp_ByteCpy_fu_394_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state103))) then
                    ap_NS_fsm <= ap_ST_fsm_state104;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                if (((grp_ByteXor_143_fu_475_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state105))) then
                    ap_NS_fsm <= ap_ST_fsm_state106;
                else
                    ap_NS_fsm <= ap_ST_fsm_state105;
                end if;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                if (((grp_ByteXor_11151_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state107))) then
                    ap_NS_fsm <= ap_ST_fsm_state108;
                else
                    ap_NS_fsm <= ap_ST_fsm_state107;
                end if;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                if (((grp_ByteCpy_119_fu_491_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state109))) then
                    ap_NS_fsm <= ap_ST_fsm_state110;
                else
                    ap_NS_fsm <= ap_ST_fsm_state109;
                end if;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                if (((grp_ByteXor_143_fu_475_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state111))) then
                    ap_NS_fsm <= ap_ST_fsm_state112;
                else
                    ap_NS_fsm <= ap_ST_fsm_state111;
                end if;
            when ap_ST_fsm_state112 => 
                if (((icmp_ln234_fu_1199_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state112))) then
                    ap_NS_fsm <= ap_ST_fsm_state115;
                else
                    ap_NS_fsm <= ap_ST_fsm_state113;
                end if;
            when ap_ST_fsm_state113 => 
                if (((grp_ByteCpy_119_fu_491_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state113))) then
                    ap_NS_fsm <= ap_ST_fsm_state114;
                else
                    ap_NS_fsm <= ap_ST_fsm_state113;
                end if;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state115) and (ap_const_boolean_0 = ap_block_state115_on_subcall_done) and ((icmp_ln230_reg_1378 = ap_const_lv1_1) or (icmp_ln230_1_fu_1205_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state116;
                elsif (((icmp_ln230_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115) and (icmp_ln230_1_fu_1205_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state115_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state100;
                else
                    ap_NS_fsm <= ap_ST_fsm_state115;
                end if;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                if (((grp_ByteCpy_116_fu_510_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state117))) then
                    ap_NS_fsm <= ap_ST_fsm_state118;
                else
                    ap_NS_fsm <= ap_ST_fsm_state117;
                end if;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state147;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state148;
            when ap_ST_fsm_state148 => 
                ap_NS_fsm <= ap_ST_fsm_state149;
            when ap_ST_fsm_state149 => 
                ap_NS_fsm <= ap_ST_fsm_state150;
            when ap_ST_fsm_state150 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Clefia_dec_address0_assign_proc : process(grp_ByteCpy_2_fu_516_Clefia_enc_address0, grp_ByteXor_1_fu_524_Clefia_enc_address0, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state127, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131, ap_CS_fsm_state132, ap_CS_fsm_state133, ap_CS_fsm_state134, ap_CS_fsm_state142, ap_CS_fsm_state135, ap_CS_fsm_state136, ap_CS_fsm_state137, ap_CS_fsm_state138, ap_CS_fsm_state139, ap_CS_fsm_state140, ap_CS_fsm_state141, ap_CS_fsm_state143, ap_CS_fsm_state144, ap_CS_fsm_state145, ap_CS_fsm_state146, ap_CS_fsm_state147, ap_CS_fsm_state148, ap_CS_fsm_state149, ap_CS_fsm_state150)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state150) or (ap_const_logic_1 = ap_CS_fsm_state149) or (ap_const_logic_1 = ap_CS_fsm_state148) or (ap_const_logic_1 = ap_CS_fsm_state147) or (ap_const_logic_1 = ap_CS_fsm_state146) or (ap_const_logic_1 = ap_CS_fsm_state145) or (ap_const_logic_1 = ap_CS_fsm_state144) or (ap_const_logic_1 = ap_CS_fsm_state143) or (ap_const_logic_1 = ap_CS_fsm_state141) or (ap_const_logic_1 = ap_CS_fsm_state140) or (ap_const_logic_1 = ap_CS_fsm_state139) or (ap_const_logic_1 = ap_CS_fsm_state138) or (ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state142))) then 
            Clefia_dec_address0 <= grp_ByteXor_1_fu_524_Clefia_enc_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state134) or (ap_const_logic_1 = ap_CS_fsm_state133) or (ap_const_logic_1 = ap_CS_fsm_state132) or (ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state127) or (ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119))) then 
            Clefia_dec_address0 <= grp_ByteCpy_2_fu_516_Clefia_enc_address0;
        else 
            Clefia_dec_address0 <= "XXXX";
        end if; 
    end process;


    Clefia_dec_ce0_assign_proc : process(grp_ByteCpy_2_fu_516_Clefia_enc_ce0, grp_ByteXor_1_fu_524_Clefia_enc_ce0, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state127, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131, ap_CS_fsm_state132, ap_CS_fsm_state133, ap_CS_fsm_state134, ap_CS_fsm_state142, ap_CS_fsm_state135, ap_CS_fsm_state136, ap_CS_fsm_state137, ap_CS_fsm_state138, ap_CS_fsm_state139, ap_CS_fsm_state140, ap_CS_fsm_state141, ap_CS_fsm_state143, ap_CS_fsm_state144, ap_CS_fsm_state145, ap_CS_fsm_state146, ap_CS_fsm_state147, ap_CS_fsm_state148, ap_CS_fsm_state149, ap_CS_fsm_state150)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state150) or (ap_const_logic_1 = ap_CS_fsm_state149) or (ap_const_logic_1 = ap_CS_fsm_state148) or (ap_const_logic_1 = ap_CS_fsm_state147) or (ap_const_logic_1 = ap_CS_fsm_state146) or (ap_const_logic_1 = ap_CS_fsm_state145) or (ap_const_logic_1 = ap_CS_fsm_state144) or (ap_const_logic_1 = ap_CS_fsm_state143) or (ap_const_logic_1 = ap_CS_fsm_state141) or (ap_const_logic_1 = ap_CS_fsm_state140) or (ap_const_logic_1 = ap_CS_fsm_state139) or (ap_const_logic_1 = ap_CS_fsm_state138) or (ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state142))) then 
            Clefia_dec_ce0 <= grp_ByteXor_1_fu_524_Clefia_enc_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state134) or (ap_const_logic_1 = ap_CS_fsm_state133) or (ap_const_logic_1 = ap_CS_fsm_state132) or (ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state127) or (ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119))) then 
            Clefia_dec_ce0 <= grp_ByteCpy_2_fu_516_Clefia_enc_ce0;
        else 
            Clefia_dec_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Clefia_dec_d0_assign_proc : process(grp_ByteCpy_2_fu_516_Clefia_enc_d0, grp_ByteXor_1_fu_524_Clefia_enc_d0, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state127, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131, ap_CS_fsm_state132, ap_CS_fsm_state133, ap_CS_fsm_state134, ap_CS_fsm_state142, ap_CS_fsm_state135, ap_CS_fsm_state136, ap_CS_fsm_state137, ap_CS_fsm_state138, ap_CS_fsm_state139, ap_CS_fsm_state140, ap_CS_fsm_state141, ap_CS_fsm_state143, ap_CS_fsm_state144, ap_CS_fsm_state145, ap_CS_fsm_state146, ap_CS_fsm_state147, ap_CS_fsm_state148, ap_CS_fsm_state149, ap_CS_fsm_state150)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state150) or (ap_const_logic_1 = ap_CS_fsm_state149) or (ap_const_logic_1 = ap_CS_fsm_state148) or (ap_const_logic_1 = ap_CS_fsm_state147) or (ap_const_logic_1 = ap_CS_fsm_state146) or (ap_const_logic_1 = ap_CS_fsm_state145) or (ap_const_logic_1 = ap_CS_fsm_state144) or (ap_const_logic_1 = ap_CS_fsm_state143) or (ap_const_logic_1 = ap_CS_fsm_state141) or (ap_const_logic_1 = ap_CS_fsm_state140) or (ap_const_logic_1 = ap_CS_fsm_state139) or (ap_const_logic_1 = ap_CS_fsm_state138) or (ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state142))) then 
            Clefia_dec_d0 <= grp_ByteXor_1_fu_524_Clefia_enc_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state134) or (ap_const_logic_1 = ap_CS_fsm_state133) or (ap_const_logic_1 = ap_CS_fsm_state132) or (ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state127) or (ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119))) then 
            Clefia_dec_d0 <= grp_ByteCpy_2_fu_516_Clefia_enc_d0;
        else 
            Clefia_dec_d0 <= "XXXXXXXX";
        end if; 
    end process;


    Clefia_dec_we0_assign_proc : process(grp_ByteCpy_2_fu_516_Clefia_enc_we0, grp_ByteXor_1_fu_524_Clefia_enc_we0, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state127, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131, ap_CS_fsm_state132, ap_CS_fsm_state133, ap_CS_fsm_state134, ap_CS_fsm_state142, ap_CS_fsm_state135, ap_CS_fsm_state136, ap_CS_fsm_state137, ap_CS_fsm_state138, ap_CS_fsm_state139, ap_CS_fsm_state140, ap_CS_fsm_state141, ap_CS_fsm_state143, ap_CS_fsm_state144, ap_CS_fsm_state145, ap_CS_fsm_state146, ap_CS_fsm_state147, ap_CS_fsm_state148, ap_CS_fsm_state149, ap_CS_fsm_state150)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state150) or (ap_const_logic_1 = ap_CS_fsm_state149) or (ap_const_logic_1 = ap_CS_fsm_state148) or (ap_const_logic_1 = ap_CS_fsm_state147) or (ap_const_logic_1 = ap_CS_fsm_state146) or (ap_const_logic_1 = ap_CS_fsm_state145) or (ap_const_logic_1 = ap_CS_fsm_state144) or (ap_const_logic_1 = ap_CS_fsm_state143) or (ap_const_logic_1 = ap_CS_fsm_state141) or (ap_const_logic_1 = ap_CS_fsm_state140) or (ap_const_logic_1 = ap_CS_fsm_state139) or (ap_const_logic_1 = ap_CS_fsm_state138) or (ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state142))) then 
            Clefia_dec_we0 <= grp_ByteXor_1_fu_524_Clefia_enc_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state134) or (ap_const_logic_1 = ap_CS_fsm_state133) or (ap_const_logic_1 = ap_CS_fsm_state132) or (ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state127) or (ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119))) then 
            Clefia_dec_we0 <= grp_ByteCpy_2_fu_516_Clefia_enc_we0;
        else 
            Clefia_dec_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Clefia_enc_address0_assign_proc : process(ap_CS_fsm_state59, grp_ByteCpy_1_fu_338_pt_address0, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, grp_ByteCpy_2_fu_516_Clefia_enc_address0, grp_ByteXor_1_fu_524_Clefia_enc_address0, ap_CS_fsm_state74, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state66, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            Clefia_enc_address0 <= grp_ByteXor_1_fu_524_Clefia_enc_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            Clefia_enc_address0 <= grp_ByteCpy_2_fu_516_Clefia_enc_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            Clefia_enc_address0 <= grp_ByteCpy_1_fu_338_pt_address0;
        else 
            Clefia_enc_address0 <= "XXXX";
        end if; 
    end process;


    Clefia_enc_ce0_assign_proc : process(ap_CS_fsm_state59, grp_ByteCpy_1_fu_338_pt_ce0, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, grp_ByteCpy_2_fu_516_Clefia_enc_ce0, grp_ByteXor_1_fu_524_Clefia_enc_ce0, ap_CS_fsm_state74, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state66, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            Clefia_enc_ce0 <= grp_ByteXor_1_fu_524_Clefia_enc_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            Clefia_enc_ce0 <= grp_ByteCpy_2_fu_516_Clefia_enc_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            Clefia_enc_ce0 <= grp_ByteCpy_1_fu_338_pt_ce0;
        else 
            Clefia_enc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Clefia_enc_d0_assign_proc : process(ap_CS_fsm_state59, grp_ByteCpy_2_fu_516_Clefia_enc_d0, grp_ByteXor_1_fu_524_Clefia_enc_d0, ap_CS_fsm_state74, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state66, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            Clefia_enc_d0 <= grp_ByteXor_1_fu_524_Clefia_enc_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            Clefia_enc_d0 <= grp_ByteCpy_2_fu_516_Clefia_enc_d0;
        else 
            Clefia_enc_d0 <= "XXXXXXXX";
        end if; 
    end process;


    Clefia_enc_we0_assign_proc : process(ap_CS_fsm_state59, grp_ByteCpy_2_fu_516_Clefia_enc_we0, grp_ByteXor_1_fu_524_Clefia_enc_we0, ap_CS_fsm_state74, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state66, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            Clefia_enc_we0 <= grp_ByteXor_1_fu_524_Clefia_enc_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            Clefia_enc_we0 <= grp_ByteCpy_2_fu_516_Clefia_enc_we0;
        else 
            Clefia_enc_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln188_1_fu_865_p2 <= std_logic_vector(unsigned(dec12_i_i_in_fu_178) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln188_cast_fu_633_p2 <= std_logic_vector(unsigned(trunc_ln188_fu_629_p1) + unsigned(ap_const_lv8_8));
    add_ln188_fu_871_p2 <= std_logic_vector(unsigned(idx_fu_174) + unsigned(ap_const_lv37_8));
    add_ln195_fu_748_p2 <= std_logic_vector(unsigned(trunc_ln188_reg_1244) + unsigned(ap_const_lv8_C));
    add_ln224_1_fu_1188_p2 <= std_logic_vector(unsigned(dec12_i_i14_in_fu_186) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln224_fu_958_p2 <= std_logic_vector(unsigned(shl_ln1_reg_1362) + unsigned(trunc_ln224_fu_954_p1));
    add_ln233_fu_1194_p2 <= std_logic_vector(unsigned(idx34_fu_182) + unsigned(ap_const_lv36_FFFFFFFF8));
    add_ln422_fu_903_p2 <= std_logic_vector(unsigned(shl_ln_fu_895_p3) + unsigned(ap_const_lv8_8));
    add_ln423_fu_910_p2 <= std_logic_vector(unsigned(shl_ln_reg_1357) + unsigned(ap_const_lv8_C));
    add_ln432_fu_924_p2 <= std_logic_vector(unsigned(shl_ln1_fu_916_p3) + unsigned(ap_const_lv8_8));
    add_ln433_fu_931_p2 <= std_logic_vector(unsigned(shl_ln1_reg_1362) + unsigned(ap_const_lv8_C));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state119 <= ap_CS_fsm(118);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state120 <= ap_CS_fsm(119);
    ap_CS_fsm_state121 <= ap_CS_fsm(120);
    ap_CS_fsm_state122 <= ap_CS_fsm(121);
    ap_CS_fsm_state123 <= ap_CS_fsm(122);
    ap_CS_fsm_state124 <= ap_CS_fsm(123);
    ap_CS_fsm_state125 <= ap_CS_fsm(124);
    ap_CS_fsm_state126 <= ap_CS_fsm(125);
    ap_CS_fsm_state127 <= ap_CS_fsm(126);
    ap_CS_fsm_state128 <= ap_CS_fsm(127);
    ap_CS_fsm_state129 <= ap_CS_fsm(128);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state130 <= ap_CS_fsm(129);
    ap_CS_fsm_state131 <= ap_CS_fsm(130);
    ap_CS_fsm_state132 <= ap_CS_fsm(131);
    ap_CS_fsm_state133 <= ap_CS_fsm(132);
    ap_CS_fsm_state134 <= ap_CS_fsm(133);
    ap_CS_fsm_state135 <= ap_CS_fsm(134);
    ap_CS_fsm_state136 <= ap_CS_fsm(135);
    ap_CS_fsm_state137 <= ap_CS_fsm(136);
    ap_CS_fsm_state138 <= ap_CS_fsm(137);
    ap_CS_fsm_state139 <= ap_CS_fsm(138);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state140 <= ap_CS_fsm(139);
    ap_CS_fsm_state141 <= ap_CS_fsm(140);
    ap_CS_fsm_state142 <= ap_CS_fsm(141);
    ap_CS_fsm_state143 <= ap_CS_fsm(142);
    ap_CS_fsm_state144 <= ap_CS_fsm(143);
    ap_CS_fsm_state145 <= ap_CS_fsm(144);
    ap_CS_fsm_state146 <= ap_CS_fsm(145);
    ap_CS_fsm_state147 <= ap_CS_fsm(146);
    ap_CS_fsm_state148 <= ap_CS_fsm(147);
    ap_CS_fsm_state149 <= ap_CS_fsm(148);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state150 <= ap_CS_fsm(149);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);
    ap_NS_fsm_state118 <= ap_NS_fsm(117);
    ap_NS_fsm_state135 <= ap_NS_fsm(134);
    ap_NS_fsm_state143 <= ap_NS_fsm(142);
    ap_NS_fsm_state42 <= ap_NS_fsm(41);
    ap_NS_fsm_state59 <= ap_NS_fsm(58);
    ap_NS_fsm_state67 <= ap_NS_fsm(66);
    ap_NS_fsm_state75 <= ap_NS_fsm(74);
    ap_ST_fsm_state100_blk <= ap_const_logic_0;

    ap_ST_fsm_state101_blk_assign_proc : process(grp_ByteXor_11151_fu_384_ap_done)
    begin
        if ((grp_ByteXor_11151_fu_384_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state101_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state101_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state102_blk <= ap_const_logic_0;

    ap_ST_fsm_state103_blk_assign_proc : process(grp_ByteCpy_fu_394_ap_done)
    begin
        if ((grp_ByteCpy_fu_394_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state103_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state103_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state104_blk <= ap_const_logic_0;

    ap_ST_fsm_state105_blk_assign_proc : process(grp_ByteXor_143_fu_475_ap_done)
    begin
        if ((grp_ByteXor_143_fu_475_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state105_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state105_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state106_blk <= ap_const_logic_0;

    ap_ST_fsm_state107_blk_assign_proc : process(grp_ByteXor_11151_fu_384_ap_done)
    begin
        if ((grp_ByteXor_11151_fu_384_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state107_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state107_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state108_blk <= ap_const_logic_0;

    ap_ST_fsm_state109_blk_assign_proc : process(grp_ByteCpy_119_fu_491_ap_done)
    begin
        if ((grp_ByteCpy_119_fu_491_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state109_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state109_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state110_blk <= ap_const_logic_0;

    ap_ST_fsm_state111_blk_assign_proc : process(grp_ByteXor_143_fu_475_ap_done)
    begin
        if ((grp_ByteXor_143_fu_475_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state111_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state111_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state112_blk <= ap_const_logic_0;

    ap_ST_fsm_state113_blk_assign_proc : process(grp_ByteCpy_119_fu_491_ap_done)
    begin
        if ((grp_ByteCpy_119_fu_491_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state113_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state113_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state114_blk <= ap_const_logic_0;

    ap_ST_fsm_state115_blk_assign_proc : process(ap_block_state115_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state115_on_subcall_done)) then 
            ap_ST_fsm_state115_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state115_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state116_blk <= ap_const_logic_0;

    ap_ST_fsm_state117_blk_assign_proc : process(grp_ByteCpy_116_fu_510_ap_done)
    begin
        if ((grp_ByteCpy_116_fu_510_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state117_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state117_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state118_blk <= ap_const_logic_0;
    ap_ST_fsm_state119_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state120_blk <= ap_const_logic_0;
    ap_ST_fsm_state121_blk <= ap_const_logic_0;
    ap_ST_fsm_state122_blk <= ap_const_logic_0;
    ap_ST_fsm_state123_blk <= ap_const_logic_0;
    ap_ST_fsm_state124_blk <= ap_const_logic_0;
    ap_ST_fsm_state125_blk <= ap_const_logic_0;
    ap_ST_fsm_state126_blk <= ap_const_logic_0;
    ap_ST_fsm_state127_blk <= ap_const_logic_0;
    ap_ST_fsm_state128_blk <= ap_const_logic_0;
    ap_ST_fsm_state129_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state130_blk <= ap_const_logic_0;
    ap_ST_fsm_state131_blk <= ap_const_logic_0;
    ap_ST_fsm_state132_blk <= ap_const_logic_0;
    ap_ST_fsm_state133_blk <= ap_const_logic_0;
    ap_ST_fsm_state134_blk <= ap_const_logic_0;
    ap_ST_fsm_state135_blk <= ap_const_logic_0;
    ap_ST_fsm_state136_blk <= ap_const_logic_0;
    ap_ST_fsm_state137_blk <= ap_const_logic_0;
    ap_ST_fsm_state138_blk <= ap_const_logic_0;
    ap_ST_fsm_state139_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state140_blk <= ap_const_logic_0;
    ap_ST_fsm_state141_blk <= ap_const_logic_0;
    ap_ST_fsm_state142_blk <= ap_const_logic_0;
    ap_ST_fsm_state143_blk <= ap_const_logic_0;
    ap_ST_fsm_state144_blk <= ap_const_logic_0;
    ap_ST_fsm_state145_blk <= ap_const_logic_0;
    ap_ST_fsm_state146_blk <= ap_const_logic_0;
    ap_ST_fsm_state147_blk <= ap_const_logic_0;
    ap_ST_fsm_state148_blk <= ap_const_logic_0;
    ap_ST_fsm_state149_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state150_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state17_blk_assign_proc : process(grp_ClefiaKeySet_fu_347_ap_done)
    begin
        if ((grp_ClefiaKeySet_fu_347_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state18_blk <= ap_const_logic_0;

    ap_ST_fsm_state19_blk_assign_proc : process(grp_ByteXor_112_2_fu_366_ap_done)
    begin
        if ((grp_ByteXor_112_2_fu_366_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;

    ap_ST_fsm_state21_blk_assign_proc : process(grp_ByteXor_112_2_fu_366_ap_done)
    begin
        if ((grp_ByteXor_112_2_fu_366_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state22_blk <= ap_const_logic_0;

    ap_ST_fsm_state23_blk_assign_proc : process(grp_ByteCpy_11831_fu_378_ap_done)
    begin
        if ((grp_ByteCpy_11831_fu_378_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state24_blk <= ap_const_logic_0;

    ap_ST_fsm_state25_blk_assign_proc : process(grp_ByteXor_11151_fu_384_ap_done)
    begin
        if ((grp_ByteXor_11151_fu_384_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state25_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state25_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state26_blk <= ap_const_logic_0;

    ap_ST_fsm_state27_blk_assign_proc : process(grp_ByteCpy_fu_394_ap_done)
    begin
        if ((grp_ByteCpy_fu_394_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state27_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state27_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state28_blk <= ap_const_logic_0;

    ap_ST_fsm_state29_blk_assign_proc : process(grp_ByteXor_143_fu_475_ap_done)
    begin
        if ((grp_ByteXor_143_fu_475_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state29_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state29_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;

    ap_ST_fsm_state31_blk_assign_proc : process(grp_ByteXor_11151_fu_384_ap_done)
    begin
        if ((grp_ByteXor_11151_fu_384_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state31_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state31_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state32_blk <= ap_const_logic_0;

    ap_ST_fsm_state33_blk_assign_proc : process(grp_ByteCpy_119_fu_491_ap_done)
    begin
        if ((grp_ByteCpy_119_fu_491_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state33_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state33_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state34_blk <= ap_const_logic_0;

    ap_ST_fsm_state35_blk_assign_proc : process(grp_ByteXor_143_fu_475_ap_done)
    begin
        if ((grp_ByteXor_143_fu_475_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state35_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state35_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state36_blk <= ap_const_logic_0;

    ap_ST_fsm_state37_blk_assign_proc : process(grp_ByteCpy_119_fu_491_ap_done)
    begin
        if ((grp_ByteCpy_119_fu_491_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state37_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state37_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state38_blk <= ap_const_logic_0;

    ap_ST_fsm_state39_blk_assign_proc : process(ap_block_state39_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state39_on_subcall_done)) then 
            ap_ST_fsm_state39_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state39_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;

    ap_ST_fsm_state41_blk_assign_proc : process(grp_ByteCpy_116_fu_510_ap_done)
    begin
        if ((grp_ByteCpy_116_fu_510_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state41_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state41_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;
    ap_ST_fsm_state87_blk <= ap_const_logic_0;
    ap_ST_fsm_state88_blk <= ap_const_logic_0;
    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;
    ap_ST_fsm_state92_blk <= ap_const_logic_0;

    ap_ST_fsm_state93_blk_assign_proc : process(ap_block_state93_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state93_on_subcall_done)) then 
            ap_ST_fsm_state93_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state93_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state94_blk <= ap_const_logic_0;

    ap_ST_fsm_state95_blk_assign_proc : process(grp_ByteXor_112_2_fu_366_ap_done)
    begin
        if ((grp_ByteXor_112_2_fu_366_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state95_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state95_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state96_blk <= ap_const_logic_0;

    ap_ST_fsm_state97_blk_assign_proc : process(grp_ByteXor_112_2_fu_366_ap_done)
    begin
        if ((grp_ByteXor_112_2_fu_366_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state97_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state97_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state98_blk <= ap_const_logic_0;

    ap_ST_fsm_state99_blk_assign_proc : process(grp_ByteCpy_11831_fu_378_ap_done)
    begin
        if ((grp_ByteCpy_11831_fu_378_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state99_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state99_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state115_on_subcall_done_assign_proc : process(grp_ByteCpy_119_fu_491_ap_done, ap_predicate_op529_call_state115)
    begin
                ap_block_state115_on_subcall_done <= ((grp_ByteCpy_119_fu_491_ap_done = ap_const_logic_0) and (ap_predicate_op529_call_state115 = ap_const_boolean_1));
    end process;


    ap_block_state39_on_subcall_done_assign_proc : process(grp_ByteCpy_119_fu_491_ap_done, ap_predicate_op329_call_state39)
    begin
                ap_block_state39_on_subcall_done <= ((grp_ByteCpy_119_fu_491_ap_done = ap_const_logic_0) and (ap_predicate_op329_call_state39 = ap_const_boolean_1));
    end process;


    ap_block_state93_on_subcall_done_assign_proc : process(grp_ClefiaKeySet_fu_347_ap_done, grp_ByteCpy_fu_394_ap_done)
    begin
                ap_block_state93_on_subcall_done <= ((grp_ByteCpy_fu_394_ap_done = ap_const_logic_0) or (grp_ClefiaKeySet_fu_347_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state150)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state150)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op329_call_state39_assign_proc : process(icmp_ln193_reg_1223, icmp_ln197_reg_1350)
    begin
                ap_predicate_op329_call_state39 <= ((icmp_ln197_reg_1350 = ap_const_lv1_0) and (icmp_ln193_reg_1223 = ap_const_lv1_0));
    end process;


    ap_predicate_op529_call_state115_assign_proc : process(icmp_ln230_reg_1378, icmp_ln234_reg_1506)
    begin
                ap_predicate_op529_call_state115 <= ((icmp_ln234_reg_1506 = ap_const_lv1_0) and (icmp_ln230_reg_1378 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state150)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state150)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    clefia_s0_address0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state93, ap_CS_fsm_state25, ap_CS_fsm_state101, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state108, ap_CS_fsm_state27, ap_CS_fsm_state103, ap_CS_fsm_state107, zext_ln150_fu_640_p1, zext_ln152_fu_650_p1, zext_ln174_fu_759_p1, zext_ln176_fu_769_p1, zext_ln150_1_fu_964_p1, zext_ln152_1_fu_974_p1, zext_ln176_1_fu_1088_p1, zext_ln174_1_fu_1093_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            clefia_s0_address0 <= zext_ln174_1_fu_1093_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            clefia_s0_address0 <= zext_ln176_1_fu_1088_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            clefia_s0_address0 <= zext_ln152_1_fu_974_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            clefia_s0_address0 <= zext_ln150_1_fu_964_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            clefia_s0_address0 <= zext_ln176_fu_769_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            clefia_s0_address0 <= zext_ln174_fu_759_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            clefia_s0_address0 <= zext_ln152_fu_650_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            clefia_s0_address0 <= zext_ln150_fu_640_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            clefia_s0_address0 <= ap_const_lv8_0;
        else 
            clefia_s0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s0_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state93, ap_CS_fsm_state25, ap_CS_fsm_state101, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state108, ap_CS_fsm_state27, ap_CS_fsm_state103, ap_CS_fsm_state107, grp_ByteXor_11151_fu_384_ap_done, grp_ByteCpy_fu_394_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state32) or ((grp_ByteCpy_fu_394_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state103)) or ((grp_ByteCpy_fu_394_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((grp_ByteXor_11151_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state107)) or ((grp_ByteXor_11151_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((grp_ByteXor_11151_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state101)) or ((grp_ByteXor_11151_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            clefia_s0_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            clefia_s0_ce0 <= ap_const_logic_0;
        else 
            clefia_s0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s1_address0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state93, ap_CS_fsm_state25, ap_CS_fsm_state101, ap_CS_fsm_state31, ap_CS_fsm_state27, ap_CS_fsm_state103, ap_CS_fsm_state107, zext_ln151_fu_645_p1, zext_ln153_fu_655_p1, zext_ln175_fu_764_p1, zext_ln151_1_fu_969_p1, zext_ln153_1_fu_979_p1, zext_ln175_1_fu_1083_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            clefia_s1_address0 <= zext_ln175_1_fu_1083_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            clefia_s1_address0 <= zext_ln153_1_fu_979_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            clefia_s1_address0 <= zext_ln151_1_fu_969_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            clefia_s1_address0 <= zext_ln175_fu_764_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            clefia_s1_address0 <= zext_ln153_fu_655_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            clefia_s1_address0 <= zext_ln151_fu_645_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            clefia_s1_address0 <= ap_const_lv8_0;
        else 
            clefia_s1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s1_address1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state93, ap_CS_fsm_state31, ap_CS_fsm_state107, zext_ln173_fu_754_p1, zext_ln173_1_fu_1078_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            clefia_s1_address1 <= zext_ln173_1_fu_1078_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            clefia_s1_address1 <= zext_ln173_fu_754_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            clefia_s1_address1 <= ap_const_lv8_0;
        else 
            clefia_s1_address1 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s1_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state93, ap_CS_fsm_state25, ap_CS_fsm_state101, ap_CS_fsm_state31, ap_CS_fsm_state27, ap_CS_fsm_state103, ap_CS_fsm_state107, grp_ByteXor_11151_fu_384_ap_done, grp_ByteCpy_fu_394_ap_done)
    begin
        if ((((grp_ByteCpy_fu_394_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state103)) or ((grp_ByteCpy_fu_394_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((grp_ByteXor_11151_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state107)) or ((grp_ByteXor_11151_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((grp_ByteXor_11151_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state101)) or ((grp_ByteXor_11151_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            clefia_s1_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            clefia_s1_ce0 <= ap_const_logic_0;
        else 
            clefia_s1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s1_ce1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state93, ap_CS_fsm_state31, ap_CS_fsm_state107, grp_ByteXor_11151_fu_384_ap_done)
    begin
        if ((((grp_ByteXor_11151_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state107)) or ((grp_ByteXor_11151_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)))) then 
            clefia_s1_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            clefia_s1_ce1 <= ap_const_logic_0;
        else 
            clefia_s1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ct_address0_assign_proc : process(ap_CS_fsm_state93, grp_ByteCpy_1_fu_338_dst_address0, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, grp_ByteCpy_fu_394_src_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            ct_address0 <= grp_ByteCpy_fu_394_src_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            ct_address0 <= grp_ByteCpy_1_fu_338_dst_address0;
        else 
            ct_address0 <= "XXXX";
        end if; 
    end process;


    ct_ce0_assign_proc : process(ap_CS_fsm_state93, grp_ByteCpy_1_fu_338_dst_ce0, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, grp_ByteCpy_fu_394_src_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            ct_ce0 <= grp_ByteCpy_fu_394_src_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            ct_ce0 <= grp_ByteCpy_1_fu_338_dst_ce0;
        else 
            ct_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ct_we0_assign_proc : process(grp_ByteCpy_1_fu_338_dst_we0, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            ct_we0 <= grp_ByteCpy_1_fu_338_dst_we0;
        else 
            ct_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fin_1_address0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state33, icmp_ln193_reg_1223, ap_CS_fsm_state23, ap_CS_fsm_state27, icmp_ln197_reg_1350, grp_ByteCpy_11831_fu_378_dst_address0, grp_ByteXor_11151_fu_384_a_address0, grp_ByteCpy_fu_394_src_address0, grp_ByteXor_143_fu_475_a_address0, grp_ByteCpy_119_fu_491_dst_address0, grp_ByteCpy_119_fu_491_src_address0, ap_CS_fsm_state29, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            fin_1_address0 <= grp_ByteCpy_119_fu_491_src_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or ((icmp_ln197_reg_1350 = ap_const_lv1_0) and (icmp_ln193_reg_1223 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            fin_1_address0 <= grp_ByteCpy_119_fu_491_dst_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            fin_1_address0 <= grp_ByteXor_143_fu_475_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            fin_1_address0 <= grp_ByteCpy_fu_394_src_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            fin_1_address0 <= grp_ByteXor_11151_fu_384_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            fin_1_address0 <= grp_ByteCpy_11831_fu_378_dst_address0;
        else 
            fin_1_address0 <= "XXXX";
        end if; 
    end process;


    fin_1_ce0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state33, icmp_ln193_reg_1223, ap_CS_fsm_state23, ap_CS_fsm_state27, icmp_ln197_reg_1350, grp_ByteCpy_11831_fu_378_dst_ce0, grp_ByteXor_11151_fu_384_a_ce0, grp_ByteCpy_fu_394_src_ce0, grp_ByteXor_143_fu_475_a_ce0, grp_ByteCpy_119_fu_491_dst_ce0, grp_ByteCpy_119_fu_491_src_ce0, ap_CS_fsm_state29, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            fin_1_ce0 <= grp_ByteCpy_119_fu_491_src_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or ((icmp_ln197_reg_1350 = ap_const_lv1_0) and (icmp_ln193_reg_1223 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            fin_1_ce0 <= grp_ByteCpy_119_fu_491_dst_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            fin_1_ce0 <= grp_ByteXor_143_fu_475_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            fin_1_ce0 <= grp_ByteCpy_fu_394_src_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            fin_1_ce0 <= grp_ByteXor_11151_fu_384_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            fin_1_ce0 <= grp_ByteCpy_11831_fu_378_dst_ce0;
        else 
            fin_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fin_1_d0_assign_proc : process(icmp_ln193_reg_1223, ap_CS_fsm_state23, icmp_ln197_reg_1350, grp_ByteCpy_11831_fu_378_dst_d0, grp_ByteCpy_119_fu_491_dst_d0, ap_CS_fsm_state37, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or ((icmp_ln197_reg_1350 = ap_const_lv1_0) and (icmp_ln193_reg_1223 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            fin_1_d0 <= grp_ByteCpy_119_fu_491_dst_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            fin_1_d0 <= grp_ByteCpy_11831_fu_378_dst_d0;
        else 
            fin_1_d0 <= "XXXXXXXX";
        end if; 
    end process;


    fin_1_we0_assign_proc : process(icmp_ln193_reg_1223, ap_CS_fsm_state23, icmp_ln197_reg_1350, grp_ByteCpy_11831_fu_378_dst_we0, grp_ByteCpy_119_fu_491_dst_we0, ap_CS_fsm_state37, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or ((icmp_ln197_reg_1350 = ap_const_lv1_0) and (icmp_ln193_reg_1223 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            fin_1_we0 <= grp_ByteCpy_119_fu_491_dst_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            fin_1_we0 <= grp_ByteCpy_11831_fu_378_dst_we0;
        else 
            fin_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fin_address0_assign_proc : process(ap_CS_fsm_state101, ap_CS_fsm_state109, icmp_ln230_reg_1378, ap_CS_fsm_state99, ap_CS_fsm_state103, ap_CS_fsm_state107, icmp_ln234_reg_1506, grp_ByteCpy_11831_fu_378_dst_address0, grp_ByteXor_11151_fu_384_a_address0, grp_ByteCpy_fu_394_src_address0, grp_ByteXor_143_fu_475_a_address0, grp_ByteCpy_119_fu_491_dst_address0, grp_ByteCpy_119_fu_491_src_address0, ap_CS_fsm_state105, ap_CS_fsm_state111, ap_CS_fsm_state113, ap_CS_fsm_state115)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            fin_address0 <= grp_ByteCpy_119_fu_491_src_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) or ((icmp_ln234_reg_1506 = ap_const_lv1_0) and (icmp_ln230_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115)))) then 
            fin_address0 <= grp_ByteCpy_119_fu_491_dst_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            fin_address0 <= grp_ByteXor_143_fu_475_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            fin_address0 <= grp_ByteCpy_fu_394_src_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state101))) then 
            fin_address0 <= grp_ByteXor_11151_fu_384_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            fin_address0 <= grp_ByteCpy_11831_fu_378_dst_address0;
        else 
            fin_address0 <= "XXXX";
        end if; 
    end process;


    fin_ce0_assign_proc : process(ap_CS_fsm_state101, ap_CS_fsm_state109, icmp_ln230_reg_1378, ap_CS_fsm_state99, ap_CS_fsm_state103, ap_CS_fsm_state107, icmp_ln234_reg_1506, grp_ByteCpy_11831_fu_378_dst_ce0, grp_ByteXor_11151_fu_384_a_ce0, grp_ByteCpy_fu_394_src_ce0, grp_ByteXor_143_fu_475_a_ce0, grp_ByteCpy_119_fu_491_dst_ce0, grp_ByteCpy_119_fu_491_src_ce0, ap_CS_fsm_state105, ap_CS_fsm_state111, ap_CS_fsm_state113, ap_CS_fsm_state115)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            fin_ce0 <= grp_ByteCpy_119_fu_491_src_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) or ((icmp_ln234_reg_1506 = ap_const_lv1_0) and (icmp_ln230_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115)))) then 
            fin_ce0 <= grp_ByteCpy_119_fu_491_dst_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            fin_ce0 <= grp_ByteXor_143_fu_475_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            fin_ce0 <= grp_ByteCpy_fu_394_src_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state101))) then 
            fin_ce0 <= grp_ByteXor_11151_fu_384_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            fin_ce0 <= grp_ByteCpy_11831_fu_378_dst_ce0;
        else 
            fin_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fin_d0_assign_proc : process(icmp_ln230_reg_1378, ap_CS_fsm_state99, icmp_ln234_reg_1506, grp_ByteCpy_11831_fu_378_dst_d0, grp_ByteCpy_119_fu_491_dst_d0, ap_CS_fsm_state113, ap_CS_fsm_state115)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state113) or ((icmp_ln234_reg_1506 = ap_const_lv1_0) and (icmp_ln230_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115)))) then 
            fin_d0 <= grp_ByteCpy_119_fu_491_dst_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            fin_d0 <= grp_ByteCpy_11831_fu_378_dst_d0;
        else 
            fin_d0 <= "XXXXXXXX";
        end if; 
    end process;


    fin_we0_assign_proc : process(icmp_ln230_reg_1378, ap_CS_fsm_state99, icmp_ln234_reg_1506, grp_ByteCpy_11831_fu_378_dst_we0, grp_ByteCpy_119_fu_491_dst_we0, ap_CS_fsm_state113, ap_CS_fsm_state115)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state113) or ((icmp_ln234_reg_1506 = ap_const_lv1_0) and (icmp_ln230_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115)))) then 
            fin_we0 <= grp_ByteCpy_119_fu_491_dst_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            fin_we0 <= grp_ByteCpy_11831_fu_378_dst_we0;
        else 
            fin_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fout_1_address0_assign_proc : process(ap_CS_fsm_state33, icmp_ln193_reg_1223, ap_CS_fsm_state27, icmp_ln197_reg_1350, grp_ByteCpy_fu_394_dst_address0, grp_ByteXor_143_fu_475_dst_address0, grp_ByteCpy_119_fu_491_dst_address0, grp_ByteCpy_119_fu_491_src_address0, grp_ByteCpy_116_fu_510_src_address0, ap_CS_fsm_state29, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            fout_1_address0 <= grp_ByteCpy_116_fu_510_src_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or ((icmp_ln197_reg_1350 = ap_const_lv1_0) and (icmp_ln193_reg_1223 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            fout_1_address0 <= grp_ByteCpy_119_fu_491_src_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            fout_1_address0 <= grp_ByteCpy_119_fu_491_dst_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            fout_1_address0 <= grp_ByteXor_143_fu_475_dst_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            fout_1_address0 <= grp_ByteCpy_fu_394_dst_address0;
        else 
            fout_1_address0 <= "XXXX";
        end if; 
    end process;


    fout_1_ce0_assign_proc : process(ap_CS_fsm_state33, icmp_ln193_reg_1223, ap_CS_fsm_state27, icmp_ln197_reg_1350, grp_ByteCpy_fu_394_dst_ce0, grp_ByteXor_143_fu_475_dst_ce0, grp_ByteCpy_119_fu_491_dst_ce0, grp_ByteCpy_119_fu_491_src_ce0, grp_ByteCpy_116_fu_510_src_ce0, ap_CS_fsm_state29, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            fout_1_ce0 <= grp_ByteCpy_116_fu_510_src_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or ((icmp_ln197_reg_1350 = ap_const_lv1_0) and (icmp_ln193_reg_1223 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            fout_1_ce0 <= grp_ByteCpy_119_fu_491_src_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            fout_1_ce0 <= grp_ByteCpy_119_fu_491_dst_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            fout_1_ce0 <= grp_ByteXor_143_fu_475_dst_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            fout_1_ce0 <= grp_ByteCpy_fu_394_dst_ce0;
        else 
            fout_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fout_1_d0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state27, grp_ByteCpy_fu_394_dst_d0, grp_ByteXor_143_fu_475_dst_d0, grp_ByteCpy_119_fu_491_dst_d0, ap_CS_fsm_state29, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            fout_1_d0 <= grp_ByteCpy_119_fu_491_dst_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            fout_1_d0 <= grp_ByteXor_143_fu_475_dst_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            fout_1_d0 <= grp_ByteCpy_fu_394_dst_d0;
        else 
            fout_1_d0 <= "XXXXXXXX";
        end if; 
    end process;


    fout_1_we0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state27, grp_ByteCpy_fu_394_dst_we0, grp_ByteXor_143_fu_475_dst_we0, grp_ByteCpy_119_fu_491_dst_we0, ap_CS_fsm_state29, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            fout_1_we0 <= grp_ByteCpy_119_fu_491_dst_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            fout_1_we0 <= grp_ByteXor_143_fu_475_dst_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            fout_1_we0 <= grp_ByteCpy_fu_394_dst_we0;
        else 
            fout_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fout_address0_assign_proc : process(ap_CS_fsm_state109, icmp_ln230_reg_1378, ap_CS_fsm_state103, icmp_ln234_reg_1506, grp_ByteCpy_fu_394_dst_address0, grp_ByteXor_143_fu_475_dst_address0, grp_ByteCpy_119_fu_491_dst_address0, grp_ByteCpy_119_fu_491_src_address0, grp_ByteCpy_116_fu_510_src_address0, ap_CS_fsm_state105, ap_CS_fsm_state111, ap_CS_fsm_state113, ap_CS_fsm_state115, ap_CS_fsm_state117)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            fout_address0 <= grp_ByteCpy_116_fu_510_src_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) or ((icmp_ln234_reg_1506 = ap_const_lv1_0) and (icmp_ln230_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115)))) then 
            fout_address0 <= grp_ByteCpy_119_fu_491_src_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            fout_address0 <= grp_ByteCpy_119_fu_491_dst_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            fout_address0 <= grp_ByteXor_143_fu_475_dst_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            fout_address0 <= grp_ByteCpy_fu_394_dst_address0;
        else 
            fout_address0 <= "XXXX";
        end if; 
    end process;


    fout_ce0_assign_proc : process(ap_CS_fsm_state109, icmp_ln230_reg_1378, ap_CS_fsm_state103, icmp_ln234_reg_1506, grp_ByteCpy_fu_394_dst_ce0, grp_ByteXor_143_fu_475_dst_ce0, grp_ByteCpy_119_fu_491_dst_ce0, grp_ByteCpy_119_fu_491_src_ce0, grp_ByteCpy_116_fu_510_src_ce0, ap_CS_fsm_state105, ap_CS_fsm_state111, ap_CS_fsm_state113, ap_CS_fsm_state115, ap_CS_fsm_state117)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            fout_ce0 <= grp_ByteCpy_116_fu_510_src_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) or ((icmp_ln234_reg_1506 = ap_const_lv1_0) and (icmp_ln230_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115)))) then 
            fout_ce0 <= grp_ByteCpy_119_fu_491_src_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            fout_ce0 <= grp_ByteCpy_119_fu_491_dst_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            fout_ce0 <= grp_ByteXor_143_fu_475_dst_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            fout_ce0 <= grp_ByteCpy_fu_394_dst_ce0;
        else 
            fout_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fout_d0_assign_proc : process(ap_CS_fsm_state109, ap_CS_fsm_state103, grp_ByteCpy_fu_394_dst_d0, grp_ByteXor_143_fu_475_dst_d0, grp_ByteCpy_119_fu_491_dst_d0, ap_CS_fsm_state105, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            fout_d0 <= grp_ByteCpy_119_fu_491_dst_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            fout_d0 <= grp_ByteXor_143_fu_475_dst_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            fout_d0 <= grp_ByteCpy_fu_394_dst_d0;
        else 
            fout_d0 <= "XXXXXXXX";
        end if; 
    end process;


    fout_we0_assign_proc : process(ap_CS_fsm_state109, ap_CS_fsm_state103, grp_ByteCpy_fu_394_dst_we0, grp_ByteXor_143_fu_475_dst_we0, grp_ByteCpy_119_fu_491_dst_we0, ap_CS_fsm_state105, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            fout_we0 <= grp_ByteCpy_119_fu_491_dst_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            fout_we0 <= grp_ByteXor_143_fu_475_dst_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            fout_we0 <= grp_ByteCpy_fu_394_dst_we0;
        else 
            fout_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_ByteCpy_116_fu_510_ap_start <= grp_ByteCpy_116_fu_510_ap_start_reg;

    grp_ByteCpy_116_fu_510_src_q0_assign_proc : process(fout_q0, fout_1_q0, ap_CS_fsm_state41, ap_CS_fsm_state117)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            grp_ByteCpy_116_fu_510_src_q0 <= fout_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_ByteCpy_116_fu_510_src_q0 <= fout_1_q0;
        else 
            grp_ByteCpy_116_fu_510_src_q0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_ByteCpy_11831_fu_378_ap_start <= grp_ByteCpy_11831_fu_378_ap_start_reg;

    grp_ByteCpy_11831_fu_378_src_q0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state99, rin_q0, rin_1_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            grp_ByteCpy_11831_fu_378_src_q0 <= rin_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_ByteCpy_11831_fu_378_src_q0 <= rin_1_q0;
        else 
            grp_ByteCpy_11831_fu_378_src_q0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_ByteCpy_119_fu_491_ap_start <= grp_ByteCpy_119_fu_491_ap_start_reg;

    grp_ByteCpy_119_fu_491_bytelen_offset_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state109, icmp_ln193_reg_1223, icmp_ln197_reg_1350, icmp_ln230_reg_1378, icmp_ln234_reg_1506, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state113, ap_CS_fsm_state115)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or ((icmp_ln234_reg_1506 = ap_const_lv1_0) and (icmp_ln230_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115)))) then 
            grp_ByteCpy_119_fu_491_bytelen_offset <= ap_const_lv4_C;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state113) or ((icmp_ln197_reg_1350 = ap_const_lv1_0) and (icmp_ln193_reg_1223 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            grp_ByteCpy_119_fu_491_bytelen_offset <= ap_const_lv4_4;
        else 
            grp_ByteCpy_119_fu_491_bytelen_offset <= "XXXX";
        end if; 
    end process;


    grp_ByteCpy_119_fu_491_dst_offset_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state109, icmp_ln193_reg_1223, icmp_ln197_reg_1350, icmp_ln230_reg_1378, icmp_ln234_reg_1506, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state113, ap_CS_fsm_state115)
    begin
        if (((icmp_ln234_reg_1506 = ap_const_lv1_0) and (icmp_ln230_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115))) then 
            grp_ByteCpy_119_fu_491_dst_offset <= ap_const_lv4_4;
        elsif (((icmp_ln197_reg_1350 = ap_const_lv1_0) and (icmp_ln193_reg_1223 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            grp_ByteCpy_119_fu_491_dst_offset <= ap_const_lv4_C;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            grp_ByteCpy_119_fu_491_dst_offset <= ap_const_lv4_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_ByteCpy_119_fu_491_dst_offset <= ap_const_lv4_8;
        else 
            grp_ByteCpy_119_fu_491_dst_offset <= "XXXX";
        end if; 
    end process;


    grp_ByteCpy_119_fu_491_src_offset_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state109, icmp_ln193_reg_1223, icmp_ln197_reg_1350, icmp_ln230_reg_1378, icmp_ln234_reg_1506, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state113, ap_CS_fsm_state115)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            grp_ByteCpy_119_fu_491_src_offset <= ap_const_lv4_C;
        elsif ((((icmp_ln234_reg_1506 = ap_const_lv1_0) and (icmp_ln230_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115)) or ((icmp_ln197_reg_1350 = ap_const_lv1_0) and (icmp_ln193_reg_1223 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            grp_ByteCpy_119_fu_491_src_offset <= ap_const_lv4_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_ByteCpy_119_fu_491_src_offset <= ap_const_lv4_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_ByteCpy_119_fu_491_src_offset <= ap_const_lv4_8;
        else 
            grp_ByteCpy_119_fu_491_src_offset <= "XXXX";
        end if; 
    end process;


    grp_ByteCpy_119_fu_491_src_q0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state109, icmp_ln193_reg_1223, icmp_ln197_reg_1350, icmp_ln230_reg_1378, icmp_ln234_reg_1506, fin_q0, fout_q0, fin_1_q0, fout_1_q0, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state113, ap_CS_fsm_state115)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state113) or ((icmp_ln234_reg_1506 = ap_const_lv1_0) and (icmp_ln230_reg_1378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115)))) then 
            grp_ByteCpy_119_fu_491_src_q0 <= fout_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            grp_ByteCpy_119_fu_491_src_q0 <= fin_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state37) or ((icmp_ln197_reg_1350 = ap_const_lv1_0) and (icmp_ln193_reg_1223 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            grp_ByteCpy_119_fu_491_src_q0 <= fout_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_ByteCpy_119_fu_491_src_q0 <= fin_1_q0;
        else 
            grp_ByteCpy_119_fu_491_src_q0 <= "XXXXXXXX";
        end if; 
    end process;


    grp_ByteCpy_1_fu_338_ap_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state17, ap_CS_fsm_state16, grp_ClefiaKeySet_fu_347_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((grp_ClefiaKeySet_fu_347_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            grp_ByteCpy_1_fu_338_ap_ce <= ap_const_logic_1;
        else 
            grp_ByteCpy_1_fu_338_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_ByteCpy_1_fu_338_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_ByteCpy_1_fu_338_ap_start_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_ByteCpy_1_fu_338_ap_start <= ap_const_logic_1;
        else 
            grp_ByteCpy_1_fu_338_ap_start <= grp_ByteCpy_1_fu_338_ap_start_reg;
        end if; 
    end process;


    grp_ByteCpy_1_fu_338_pt_q0_assign_proc : process(pt_q0, Clefia_enc_q0, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            grp_ByteCpy_1_fu_338_pt_q0 <= Clefia_enc_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_ByteCpy_1_fu_338_pt_q0 <= pt_q0;
        else 
            grp_ByteCpy_1_fu_338_pt_q0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_ByteCpy_2_fu_516_ap_start <= grp_ByteCpy_2_fu_516_ap_start_reg;

    grp_ByteCpy_2_fu_516_src_q0_assign_proc : process(rout_q0, rout_1_q0, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119))) then 
            grp_ByteCpy_2_fu_516_src_q0 <= rout_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            grp_ByteCpy_2_fu_516_src_q0 <= rout_1_q0;
        else 
            grp_ByteCpy_2_fu_516_src_q0 <= "XXXXXXXX";
        end if; 
    end process;


    grp_ByteCpy_2_fu_516_src_q1_assign_proc : process(rout_q1, rout_1_q1, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119))) then 
            grp_ByteCpy_2_fu_516_src_q1 <= rout_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            grp_ByteCpy_2_fu_516_src_q1 <= rout_1_q1;
        else 
            grp_ByteCpy_2_fu_516_src_q1 <= "XXXXXXXX";
        end if; 
    end process;

    grp_ByteCpy_fu_394_ap_start <= grp_ByteCpy_fu_394_ap_start_reg;

    grp_ByteCpy_fu_394_bytelen_offset_assign_proc : process(ap_CS_fsm_state93, ap_CS_fsm_state27, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_ByteCpy_fu_394_bytelen_offset <= ap_const_lv5_10;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            grp_ByteCpy_fu_394_bytelen_offset <= ap_const_lv5_4;
        else 
            grp_ByteCpy_fu_394_bytelen_offset <= "XXXXX";
        end if; 
    end process;


    grp_ByteCpy_fu_394_src_q0_assign_proc : process(ap_CS_fsm_state93, ap_CS_fsm_state27, ap_CS_fsm_state103, fin_q0, fin_1_q0, ct_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            grp_ByteCpy_fu_394_src_q0 <= fin_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_ByteCpy_fu_394_src_q0 <= ct_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_ByteCpy_fu_394_src_q0 <= fin_1_q0;
        else 
            grp_ByteCpy_fu_394_src_q0 <= "XXXXXXXX";
        end if; 
    end process;


    grp_ByteXor_11151_fu_384_a_offset_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state101, ap_CS_fsm_state31, ap_CS_fsm_state107)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_ByteXor_11151_fu_384_a_offset <= ap_const_lv4_8;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_ByteXor_11151_fu_384_a_offset <= ap_const_lv4_0;
        else 
            grp_ByteXor_11151_fu_384_a_offset <= "XXXX";
        end if; 
    end process;


    grp_ByteXor_11151_fu_384_a_q0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state101, ap_CS_fsm_state31, ap_CS_fsm_state107, fin_q0, fin_1_q0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state101))) then 
            grp_ByteXor_11151_fu_384_a_q0 <= fin_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_ByteXor_11151_fu_384_a_q0 <= fin_1_q0;
        else 
            grp_ByteXor_11151_fu_384_a_q0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_ByteXor_11151_fu_384_ap_start <= grp_ByteXor_11151_fu_384_ap_start_reg;

    grp_ByteXor_11151_fu_384_b_offset_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state101, ap_CS_fsm_state31, add_ln188_cast_reg_1249, add_ln195_reg_1294, add_ln224_reg_1399, or_ln232_reg_1445, ap_CS_fsm_state107)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            grp_ByteXor_11151_fu_384_b_offset <= or_ln232_reg_1445;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_ByteXor_11151_fu_384_b_offset <= add_ln224_reg_1399;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_ByteXor_11151_fu_384_b_offset <= add_ln195_reg_1294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_ByteXor_11151_fu_384_b_offset <= add_ln188_cast_reg_1249;
        else 
            grp_ByteXor_11151_fu_384_b_offset <= "XXXXXXXX";
        end if; 
    end process;


    grp_ByteXor_112_2_fu_366_a_offset_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state95, ap_CS_fsm_state97)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_ByteXor_112_2_fu_366_a_offset <= ap_const_lv4_C;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_ByteXor_112_2_fu_366_a_offset <= ap_const_lv4_4;
        else 
            grp_ByteXor_112_2_fu_366_a_offset <= "XXXX";
        end if; 
    end process;


    grp_ByteXor_112_2_fu_366_a_q0_assign_proc : process(rin_q0, rin_1_q0, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state95, ap_CS_fsm_state97)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            grp_ByteXor_112_2_fu_366_a_q0 <= rin_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_ByteXor_112_2_fu_366_a_q0 <= rin_1_q0;
        else 
            grp_ByteXor_112_2_fu_366_a_q0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_ByteXor_112_2_fu_366_ap_start <= grp_ByteXor_112_2_fu_366_ap_start_reg;

    grp_ByteXor_112_2_fu_366_b_offset_assign_proc : process(add_ln432_reg_1368, add_ln433_reg_1373, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state95, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            grp_ByteXor_112_2_fu_366_b_offset <= add_ln433_reg_1373;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            grp_ByteXor_112_2_fu_366_b_offset <= add_ln432_reg_1368;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_ByteXor_112_2_fu_366_b_offset <= ap_const_lv8_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_ByteXor_112_2_fu_366_b_offset <= ap_const_lv8_0;
        else 
            grp_ByteXor_112_2_fu_366_b_offset <= "XXXXXXXX";
        end if; 
    end process;


    grp_ByteXor_143_fu_475_a_offset_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state35, ap_CS_fsm_state105, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            grp_ByteXor_143_fu_475_a_offset <= ap_const_lv4_C;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_ByteXor_143_fu_475_a_offset <= ap_const_lv4_4;
        else 
            grp_ByteXor_143_fu_475_a_offset <= "XXXX";
        end if; 
    end process;


    grp_ByteXor_143_fu_475_a_q0_assign_proc : process(fin_q0, fin_1_q0, ap_CS_fsm_state29, ap_CS_fsm_state35, ap_CS_fsm_state105, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            grp_ByteXor_143_fu_475_a_q0 <= fin_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_ByteXor_143_fu_475_a_q0 <= fin_1_q0;
        else 
            grp_ByteXor_143_fu_475_a_q0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_ByteXor_143_fu_475_ap_start <= grp_ByteXor_143_fu_475_ap_start_reg;

    grp_ByteXor_143_fu_475_dst_offset_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state35, ap_CS_fsm_state105, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            grp_ByteXor_143_fu_475_dst_offset <= ap_const_lv4_C;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_ByteXor_143_fu_475_dst_offset <= ap_const_lv4_4;
        else 
            grp_ByteXor_143_fu_475_dst_offset <= "XXXX";
        end if; 
    end process;


    grp_ByteXor_143_fu_475_p_read_assign_proc : process(y_0_reg_1274, y_0_1_reg_1319, y_0_2_reg_1425, y_0_3_reg_1475, ap_CS_fsm_state29, ap_CS_fsm_state35, ap_CS_fsm_state105, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_ByteXor_143_fu_475_p_read <= y_0_3_reg_1475;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            grp_ByteXor_143_fu_475_p_read <= y_0_2_reg_1425;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_ByteXor_143_fu_475_p_read <= y_0_1_reg_1319;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_ByteXor_143_fu_475_p_read <= y_0_reg_1274;
        else 
            grp_ByteXor_143_fu_475_p_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_ByteXor_143_fu_475_p_read1_assign_proc : process(y_1_reg_1279, y_1_1_reg_1324, y_1_2_reg_1430, y_1_3_reg_1480, ap_CS_fsm_state29, ap_CS_fsm_state35, ap_CS_fsm_state105, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_ByteXor_143_fu_475_p_read1 <= y_1_3_reg_1480;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            grp_ByteXor_143_fu_475_p_read1 <= y_1_2_reg_1430;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_ByteXor_143_fu_475_p_read1 <= y_1_1_reg_1324;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_ByteXor_143_fu_475_p_read1 <= y_1_reg_1279;
        else 
            grp_ByteXor_143_fu_475_p_read1 <= "XXXXXXXX";
        end if; 
    end process;


    grp_ByteXor_143_fu_475_p_read2_assign_proc : process(y_2_reg_1284, y_2_1_reg_1329, y_2_2_reg_1435, y_2_3_reg_1485, ap_CS_fsm_state29, ap_CS_fsm_state35, ap_CS_fsm_state105, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_ByteXor_143_fu_475_p_read2 <= y_2_3_reg_1485;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            grp_ByteXor_143_fu_475_p_read2 <= y_2_2_reg_1435;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_ByteXor_143_fu_475_p_read2 <= y_2_1_reg_1329;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_ByteXor_143_fu_475_p_read2 <= y_2_reg_1284;
        else 
            grp_ByteXor_143_fu_475_p_read2 <= "XXXXXXXX";
        end if; 
    end process;


    grp_ByteXor_143_fu_475_p_read3_assign_proc : process(y_3_reg_1289, y_3_1_reg_1334, y_3_2_reg_1440, y_3_3_reg_1490, ap_CS_fsm_state29, ap_CS_fsm_state35, ap_CS_fsm_state105, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_ByteXor_143_fu_475_p_read3 <= y_3_3_reg_1490;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            grp_ByteXor_143_fu_475_p_read3 <= y_3_2_reg_1440;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_ByteXor_143_fu_475_p_read3 <= y_3_1_reg_1334;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_ByteXor_143_fu_475_p_read3 <= y_3_reg_1289;
        else 
            grp_ByteXor_143_fu_475_p_read3 <= "XXXXXXXX";
        end if; 
    end process;


    grp_ByteXor_1_fu_524_Clefia_enc_q0_assign_proc : process(Clefia_enc_q0, Clefia_dec_q0, ap_CS_fsm_state59, ap_CS_fsm_state74, ap_CS_fsm_state66, ap_CS_fsm_state142, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state135, ap_CS_fsm_state136, ap_CS_fsm_state137, ap_CS_fsm_state138, ap_CS_fsm_state139, ap_CS_fsm_state140, ap_CS_fsm_state141, ap_CS_fsm_state143, ap_CS_fsm_state144, ap_CS_fsm_state145, ap_CS_fsm_state146, ap_CS_fsm_state147, ap_CS_fsm_state148, ap_CS_fsm_state149, ap_CS_fsm_state150)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state150) or (ap_const_logic_1 = ap_CS_fsm_state149) or (ap_const_logic_1 = ap_CS_fsm_state148) or (ap_const_logic_1 = ap_CS_fsm_state147) or (ap_const_logic_1 = ap_CS_fsm_state146) or (ap_const_logic_1 = ap_CS_fsm_state145) or (ap_const_logic_1 = ap_CS_fsm_state144) or (ap_const_logic_1 = ap_CS_fsm_state143) or (ap_const_logic_1 = ap_CS_fsm_state141) or (ap_const_logic_1 = ap_CS_fsm_state140) or (ap_const_logic_1 = ap_CS_fsm_state139) or (ap_const_logic_1 = ap_CS_fsm_state138) or (ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state142))) then 
            grp_ByteXor_1_fu_524_Clefia_enc_q0 <= Clefia_dec_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            grp_ByteXor_1_fu_524_Clefia_enc_q0 <= Clefia_enc_q0;
        else 
            grp_ByteXor_1_fu_524_Clefia_enc_q0 <= "XXXXXXXX";
        end if; 
    end process;


    grp_ByteXor_1_fu_524_a_offset_assign_proc : process(ap_CS_fsm_state59, ap_CS_fsm_state67, ap_CS_fsm_state135, ap_CS_fsm_state143)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state143) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            grp_ByteXor_1_fu_524_a_offset <= ap_const_lv4_C;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state135))) then 
            grp_ByteXor_1_fu_524_a_offset <= ap_const_lv4_4;
        else 
            grp_ByteXor_1_fu_524_a_offset <= "XXXX";
        end if; 
    end process;

    grp_ByteXor_1_fu_524_ap_start <= grp_ByteXor_1_fu_524_ap_start_reg;

    grp_ByteXor_1_fu_524_b_offset_assign_proc : process(ap_CS_fsm_state59, ap_CS_fsm_state67, ap_CS_fsm_state135, ap_CS_fsm_state143, add_ln422_fu_903_p2, add_ln423_fu_910_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state143)) then 
            grp_ByteXor_1_fu_524_b_offset <= ap_const_lv8_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state135)) then 
            grp_ByteXor_1_fu_524_b_offset <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_ByteXor_1_fu_524_b_offset <= add_ln423_fu_910_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_ByteXor_1_fu_524_b_offset <= add_ln422_fu_903_p2;
        else 
            grp_ByteXor_1_fu_524_b_offset <= "XXXXXXXX";
        end if; 
    end process;


    grp_ByteXor_1_fu_524_dst_offset_assign_proc : process(ap_CS_fsm_state59, ap_CS_fsm_state67, ap_CS_fsm_state135, ap_CS_fsm_state143)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state143) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            grp_ByteXor_1_fu_524_dst_offset <= ap_const_lv4_C;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state135))) then 
            grp_ByteXor_1_fu_524_dst_offset <= ap_const_lv4_4;
        else 
            grp_ByteXor_1_fu_524_dst_offset <= "XXXX";
        end if; 
    end process;

    grp_ClefiaKeySet_fu_347_ap_start <= grp_ClefiaKeySet_fu_347_ap_start_reg;

    grp_ClefiaMul2_fu_403_x_assign_proc : process(reg_581, reg_588, reg_600, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state104, ap_CS_fsm_state110)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            grp_ClefiaMul2_fu_403_x <= reg_600;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_ClefiaMul2_fu_403_x <= reg_581;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_ClefiaMul2_fu_403_x <= reg_588;
        else 
            grp_ClefiaMul2_fu_403_x <= "XXXXXXXX";
        end if; 
    end process;


    grp_ClefiaMul2_fu_408_x_assign_proc : process(clefia_s0_q0, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state104, ap_CS_fsm_state110, grp_ClefiaMul2_fu_403_ap_return)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_ClefiaMul2_fu_408_x <= grp_ClefiaMul2_fu_403_ap_return;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_ClefiaMul2_fu_408_x <= clefia_s0_q0;
        else 
            grp_ClefiaMul2_fu_408_x <= "XXXXXXXX";
        end if; 
    end process;


    grp_ClefiaMul2_fu_420_x_assign_proc : process(clefia_s1_q0, reg_595, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state104, ap_CS_fsm_state110)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_ClefiaMul2_fu_420_x <= reg_595;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_ClefiaMul2_fu_420_x <= clefia_s1_q0;
        else 
            grp_ClefiaMul2_fu_420_x <= "XXXXXXXX";
        end if; 
    end process;


    grp_ClefiaMul2_fu_426_x_assign_proc : process(reg_581, reg_600, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state104, ap_CS_fsm_state110, grp_ClefiaMul2_fu_420_ap_return)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            grp_ClefiaMul2_fu_426_x <= reg_581;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_ClefiaMul2_fu_426_x <= reg_600;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_ClefiaMul2_fu_426_x <= grp_ClefiaMul2_fu_420_ap_return;
        else 
            grp_ClefiaMul2_fu_426_x <= "XXXXXXXX";
        end if; 
    end process;


    grp_ClefiaMul2_fu_432_x_assign_proc : process(reg_581, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state104, ap_CS_fsm_state110, grp_ClefiaMul2_fu_426_ap_return)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_ClefiaMul2_fu_432_x <= grp_ClefiaMul2_fu_426_ap_return;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_ClefiaMul2_fu_432_x <= reg_581;
        else 
            grp_ClefiaMul2_fu_432_x <= "XXXXXXXX";
        end if; 
    end process;


    grp_ClefiaMul2_fu_443_x_assign_proc : process(reg_588, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state104, ap_CS_fsm_state110, grp_ClefiaMul2_fu_403_ap_return)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_ClefiaMul2_fu_443_x <= reg_588;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_ClefiaMul2_fu_443_x <= grp_ClefiaMul2_fu_403_ap_return;
        else 
            grp_ClefiaMul2_fu_443_x <= "XXXXXXXX";
        end if; 
    end process;

    grp_fu_557_p2 <= (grp_ClefiaMul2_fu_443_ap_return xor grp_ClefiaMul2_fu_437_ap_return);
    grp_fu_563_p2 <= (grp_ClefiaMul2_fu_469_ap_return xor grp_ClefiaMul2_fu_457_ap_return);
    grp_fu_606_p2 <= "1" when (reg_569 = ap_const_lv5_0) else "0";
    icmp_ln193_1_fu_882_p2 <= "1" when (signed(add_ln188_1_reg_1339) > signed(ap_const_lv32_0)) else "0";
    icmp_ln197_fu_876_p2 <= "1" when (add_ln188_1_fu_865_p2 = ap_const_lv32_0) else "0";
    icmp_ln230_1_fu_1205_p2 <= "1" when (signed(add_ln224_1_reg_1495) > signed(ap_const_lv32_0)) else "0";
    icmp_ln234_fu_1199_p2 <= "1" when (add_ln224_1_fu_1188_p2 = ap_const_lv32_0) else "0";
    or_ln232_fu_1072_p2 <= (ap_const_lv8_4 or add_ln224_reg_1399);

    pt_ce0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state17, ap_CS_fsm_state16, grp_ByteCpy_1_fu_338_pt_ce0, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pt_ce0 <= grp_ByteCpy_1_fu_338_pt_ce0;
        else 
            pt_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rin_1_address0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state23, grp_ByteCpy_1_fu_338_dst_address0, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, grp_ByteXor_112_2_fu_366_a_address0, grp_ByteCpy_11831_fu_378_src_address0, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            rin_1_address0 <= grp_ByteCpy_11831_fu_378_src_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            rin_1_address0 <= grp_ByteXor_112_2_fu_366_a_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            rin_1_address0 <= grp_ByteCpy_1_fu_338_dst_address0;
        else 
            rin_1_address0 <= "XXXX";
        end if; 
    end process;


    rin_1_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state23, grp_ByteCpy_1_fu_338_dst_ce0, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, grp_ByteXor_112_2_fu_366_a_ce0, grp_ByteCpy_11831_fu_378_src_ce0, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            rin_1_ce0 <= grp_ByteCpy_11831_fu_378_src_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            rin_1_ce0 <= grp_ByteXor_112_2_fu_366_a_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            rin_1_ce0 <= grp_ByteCpy_1_fu_338_dst_ce0;
        else 
            rin_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rin_1_d0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state16, grp_ByteCpy_1_fu_338_dst_d0, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, grp_ByteXor_112_2_fu_366_a_d0, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            rin_1_d0 <= grp_ByteXor_112_2_fu_366_a_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            rin_1_d0 <= grp_ByteCpy_1_fu_338_dst_d0;
        else 
            rin_1_d0 <= "XXXXXXXX";
        end if; 
    end process;


    rin_1_we0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state16, grp_ByteCpy_1_fu_338_dst_we0, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, grp_ByteXor_112_2_fu_366_a_we0, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            rin_1_we0 <= grp_ByteXor_112_2_fu_366_a_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            rin_1_we0 <= grp_ByteCpy_1_fu_338_dst_we0;
        else 
            rin_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rin_address0_assign_proc : process(ap_CS_fsm_state93, ap_CS_fsm_state99, grp_ByteXor_112_2_fu_366_a_address0, grp_ByteCpy_11831_fu_378_src_address0, grp_ByteCpy_fu_394_dst_address0, ap_CS_fsm_state95, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            rin_address0 <= grp_ByteCpy_fu_394_dst_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            rin_address0 <= grp_ByteCpy_11831_fu_378_src_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            rin_address0 <= grp_ByteXor_112_2_fu_366_a_address0;
        else 
            rin_address0 <= "XXXX";
        end if; 
    end process;


    rin_ce0_assign_proc : process(ap_CS_fsm_state93, ap_CS_fsm_state99, grp_ByteXor_112_2_fu_366_a_ce0, grp_ByteCpy_11831_fu_378_src_ce0, grp_ByteCpy_fu_394_dst_ce0, ap_CS_fsm_state95, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            rin_ce0 <= grp_ByteCpy_fu_394_dst_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            rin_ce0 <= grp_ByteCpy_11831_fu_378_src_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            rin_ce0 <= grp_ByteXor_112_2_fu_366_a_ce0;
        else 
            rin_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rin_d0_assign_proc : process(ap_CS_fsm_state93, grp_ByteXor_112_2_fu_366_a_d0, grp_ByteCpy_fu_394_dst_d0, ap_CS_fsm_state95, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            rin_d0 <= grp_ByteCpy_fu_394_dst_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            rin_d0 <= grp_ByteXor_112_2_fu_366_a_d0;
        else 
            rin_d0 <= "XXXXXXXX";
        end if; 
    end process;


    rin_we0_assign_proc : process(ap_CS_fsm_state93, grp_ByteXor_112_2_fu_366_a_we0, grp_ByteCpy_fu_394_dst_we0, ap_CS_fsm_state95, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            rin_we0 <= grp_ByteCpy_fu_394_dst_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            rin_we0 <= grp_ByteXor_112_2_fu_366_a_we0;
        else 
            rin_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rk_address0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state93, ap_CS_fsm_state25, ap_CS_fsm_state101, ap_CS_fsm_state31, ap_CS_fsm_state59, ap_CS_fsm_state107, grp_ClefiaKeySet_fu_347_rk_address0, grp_ByteXor_112_2_fu_366_b_address0, grp_ByteXor_11151_fu_384_b_address0, grp_ByteXor_1_fu_524_b_address0, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state135, ap_CS_fsm_state136, ap_CS_fsm_state137, ap_CS_fsm_state143, ap_CS_fsm_state144, ap_CS_fsm_state145)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state145) or (ap_const_logic_1 = ap_CS_fsm_state144) or (ap_const_logic_1 = ap_CS_fsm_state143) or (ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            rk_address0 <= grp_ByteXor_1_fu_524_b_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            rk_address0 <= grp_ByteXor_11151_fu_384_b_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            rk_address0 <= grp_ByteXor_112_2_fu_366_b_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            rk_address0 <= grp_ClefiaKeySet_fu_347_rk_address0;
        else 
            rk_address0 <= "XXXXXXXX";
        end if; 
    end process;


    rk_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state93, ap_CS_fsm_state25, ap_CS_fsm_state101, ap_CS_fsm_state31, ap_CS_fsm_state59, ap_CS_fsm_state107, grp_ClefiaKeySet_fu_347_rk_ce0, grp_ByteXor_112_2_fu_366_b_ce0, grp_ByteXor_11151_fu_384_b_ce0, grp_ByteXor_1_fu_524_b_ce0, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state135, ap_CS_fsm_state136, ap_CS_fsm_state137, ap_CS_fsm_state143, ap_CS_fsm_state144, ap_CS_fsm_state145)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state145) or (ap_const_logic_1 = ap_CS_fsm_state144) or (ap_const_logic_1 = ap_CS_fsm_state143) or (ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            rk_ce0 <= grp_ByteXor_1_fu_524_b_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            rk_ce0 <= grp_ByteXor_11151_fu_384_b_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            rk_ce0 <= grp_ByteXor_112_2_fu_366_b_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            rk_ce0 <= grp_ClefiaKeySet_fu_347_rk_ce0;
        else 
            rk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rk_ce1_assign_proc : process(ap_CS_fsm_state59, grp_ByteXor_1_fu_524_b_ce1, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state135, ap_CS_fsm_state136, ap_CS_fsm_state137, ap_CS_fsm_state143, ap_CS_fsm_state144, ap_CS_fsm_state145)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state145) or (ap_const_logic_1 = ap_CS_fsm_state144) or (ap_const_logic_1 = ap_CS_fsm_state143) or (ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            rk_ce1 <= grp_ByteXor_1_fu_524_b_ce1;
        else 
            rk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rk_we0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state93, grp_ClefiaKeySet_fu_347_rk_we0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            rk_we0 <= grp_ClefiaKeySet_fu_347_rk_we0;
        else 
            rk_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rout_1_address0_assign_proc : process(grp_ByteCpy_116_fu_510_dst_address0, grp_ByteCpy_2_fu_516_src_address0, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            rout_1_address0 <= grp_ByteCpy_2_fu_516_src_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            rout_1_address0 <= grp_ByteCpy_116_fu_510_dst_address0;
        else 
            rout_1_address0 <= "XXXX";
        end if; 
    end process;


    rout_1_ce0_assign_proc : process(grp_ByteCpy_116_fu_510_dst_ce0, grp_ByteCpy_2_fu_516_src_ce0, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            rout_1_ce0 <= grp_ByteCpy_2_fu_516_src_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            rout_1_ce0 <= grp_ByteCpy_116_fu_510_dst_ce0;
        else 
            rout_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rout_1_ce1_assign_proc : process(grp_ByteCpy_2_fu_516_src_ce1, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            rout_1_ce1 <= grp_ByteCpy_2_fu_516_src_ce1;
        else 
            rout_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rout_1_we0_assign_proc : process(grp_ByteCpy_116_fu_510_dst_we0, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            rout_1_we0 <= grp_ByteCpy_116_fu_510_dst_we0;
        else 
            rout_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rout_address0_assign_proc : process(grp_ByteCpy_116_fu_510_dst_address0, grp_ByteCpy_2_fu_516_src_address0, ap_CS_fsm_state117, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state118)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119))) then 
            rout_address0 <= grp_ByteCpy_2_fu_516_src_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            rout_address0 <= grp_ByteCpy_116_fu_510_dst_address0;
        else 
            rout_address0 <= "XXXX";
        end if; 
    end process;


    rout_ce0_assign_proc : process(grp_ByteCpy_116_fu_510_dst_ce0, grp_ByteCpy_2_fu_516_src_ce0, ap_CS_fsm_state117, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state118)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119))) then 
            rout_ce0 <= grp_ByteCpy_2_fu_516_src_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            rout_ce0 <= grp_ByteCpy_116_fu_510_dst_ce0;
        else 
            rout_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rout_ce1_assign_proc : process(grp_ByteCpy_2_fu_516_src_ce1, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state118)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119))) then 
            rout_ce1 <= grp_ByteCpy_2_fu_516_src_ce1;
        else 
            rout_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rout_we0_assign_proc : process(grp_ByteCpy_116_fu_510_dst_we0, ap_CS_fsm_state117)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            rout_we0 <= grp_ByteCpy_116_fu_510_dst_we0;
        else 
            rout_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln1_fu_916_p3 <= (reg_569 & ap_const_lv3_0);
    shl_ln_fu_895_p3 <= (reg_569 & ap_const_lv3_0);
    trunc_ln188_fu_629_p1 <= idx_fu_174(8 - 1 downto 0);
    trunc_ln224_fu_954_p1 <= idx34_fu_182(8 - 1 downto 0);
    xor_ln155_1_fu_666_p2 <= (grp_ClefiaMul2_fu_426_ap_return xor grp_ClefiaMul2_fu_420_ap_return);
    xor_ln155_2_fu_672_p2 <= (xor_ln155_1_fu_666_p2 xor grp_ClefiaMul2_fu_414_ap_return);
    xor_ln155_4_fu_984_p2 <= (reg_581 xor grp_ClefiaMul2_fu_403_ap_return);
    xor_ln155_5_fu_990_p2 <= (grp_ClefiaMul2_fu_426_ap_return xor grp_ClefiaMul2_fu_420_ap_return);
    xor_ln155_6_fu_996_p2 <= (xor_ln155_5_fu_990_p2 xor grp_ClefiaMul2_fu_414_ap_return);
    xor_ln155_fu_660_p2 <= (reg_581 xor grp_ClefiaMul2_fu_403_ap_return);
    xor_ln156_1_fu_691_p2 <= (grp_ClefiaMul2_fu_432_ap_return xor grp_ClefiaMul2_fu_426_ap_return);
    xor_ln156_2_fu_697_p2 <= (xor_ln156_1_fu_691_p2 xor grp_ClefiaMul2_fu_414_ap_return);
    xor_ln156_4_fu_1009_p2 <= (reg_588 xor grp_ClefiaMul2_fu_408_ap_return);
    xor_ln156_5_fu_1015_p2 <= (grp_ClefiaMul2_fu_432_ap_return xor grp_ClefiaMul2_fu_426_ap_return);
    xor_ln156_6_fu_1021_p2 <= (xor_ln156_5_fu_1015_p2 xor grp_ClefiaMul2_fu_414_ap_return);
    xor_ln156_fu_685_p2 <= (reg_588 xor grp_ClefiaMul2_fu_408_ap_return);
    xor_ln157_2_fu_716_p2 <= (grp_fu_557_p2 xor grp_ClefiaMul2_fu_420_ap_return);
    xor_ln157_4_fu_1034_p2 <= (grp_ClefiaMul2_fu_403_ap_return xor clefia_s0_q0);
    xor_ln157_6_fu_1040_p2 <= (grp_fu_557_p2 xor grp_ClefiaMul2_fu_420_ap_return);
    xor_ln157_fu_710_p2 <= (grp_ClefiaMul2_fu_403_ap_return xor clefia_s0_q0);
    xor_ln158_1_fu_735_p2 <= (grp_fu_557_p2 xor grp_ClefiaMul2_fu_432_ap_return);
    xor_ln158_3_fu_1053_p2 <= (grp_ClefiaMul2_fu_408_ap_return xor clefia_s1_q0);
    xor_ln158_4_fu_1059_p2 <= (grp_fu_557_p2 xor grp_ClefiaMul2_fu_432_ap_return);
    xor_ln158_fu_729_p2 <= (grp_ClefiaMul2_fu_408_ap_return xor clefia_s1_q0);
    xor_ln178_1_fu_780_p2 <= (grp_ClefiaMul2_fu_437_ap_return xor grp_ClefiaMul2_fu_426_ap_return);
    xor_ln178_2_fu_786_p2 <= (xor_ln178_1_fu_780_p2 xor grp_ClefiaMul2_fu_420_ap_return);
    xor_ln178_4_fu_1097_p2 <= (reg_588 xor grp_ClefiaMul2_fu_414_ap_return);
    xor_ln178_5_fu_1103_p2 <= (grp_ClefiaMul2_fu_437_ap_return xor grp_ClefiaMul2_fu_426_ap_return);
    xor_ln178_6_fu_1109_p2 <= (xor_ln178_5_fu_1103_p2 xor grp_ClefiaMul2_fu_420_ap_return);
    xor_ln178_fu_774_p2 <= (reg_588 xor grp_ClefiaMul2_fu_414_ap_return);
    xor_ln179_2_fu_805_p2 <= (grp_fu_563_p2 xor grp_ClefiaMul2_fu_426_ap_return);
    xor_ln179_4_fu_1122_p2 <= (reg_600 xor grp_ClefiaMul2_fu_420_ap_return);
    xor_ln179_6_fu_1128_p2 <= (grp_fu_563_p2 xor grp_ClefiaMul2_fu_426_ap_return);
    xor_ln179_fu_799_p2 <= (reg_581 xor grp_ClefiaMul2_fu_420_ap_return);
    xor_ln180_1_fu_824_p2 <= (grp_ClefiaMul2_fu_443_ap_return xor grp_ClefiaMul2_fu_437_ap_return);
    xor_ln180_2_fu_830_p2 <= (xor_ln180_1_fu_824_p2 xor grp_ClefiaMul2_fu_414_ap_return);
    xor_ln180_4_fu_1141_p2 <= (reg_595 xor grp_ClefiaMul2_fu_403_ap_return);
    xor_ln180_5_fu_1147_p2 <= (grp_ClefiaMul2_fu_443_ap_return xor grp_ClefiaMul2_fu_437_ap_return);
    xor_ln180_6_fu_1153_p2 <= (xor_ln180_5_fu_1147_p2 xor grp_ClefiaMul2_fu_414_ap_return);
    xor_ln180_fu_818_p2 <= (reg_595 xor grp_ClefiaMul2_fu_403_ap_return);
    xor_ln181_1_fu_849_p2 <= (grp_fu_563_p2 xor grp_ClefiaMul2_fu_443_ap_return);
    xor_ln181_3_fu_1166_p2 <= (reg_581 xor grp_ClefiaMul2_fu_403_ap_return);
    xor_ln181_4_fu_1172_p2 <= (grp_fu_563_p2 xor grp_ClefiaMul2_fu_443_ap_return);
    xor_ln181_fu_843_p2 <= (reg_600 xor grp_ClefiaMul2_fu_403_ap_return);
    y_0_1_fu_792_p2 <= (xor_ln178_fu_774_p2 xor xor_ln178_2_fu_786_p2);
    y_0_2_fu_1002_p2 <= (xor_ln155_6_fu_996_p2 xor xor_ln155_4_fu_984_p2);
    y_0_3_fu_1115_p2 <= (xor_ln178_6_fu_1109_p2 xor xor_ln178_4_fu_1097_p2);
    y_0_fu_678_p2 <= (xor_ln155_fu_660_p2 xor xor_ln155_2_fu_672_p2);
    y_1_1_fu_811_p2 <= (xor_ln179_fu_799_p2 xor xor_ln179_2_fu_805_p2);
    y_1_2_fu_1027_p2 <= (xor_ln156_6_fu_1021_p2 xor xor_ln156_4_fu_1009_p2);
    y_1_3_fu_1134_p2 <= (xor_ln179_6_fu_1128_p2 xor xor_ln179_4_fu_1122_p2);
    y_1_fu_703_p2 <= (xor_ln156_fu_685_p2 xor xor_ln156_2_fu_697_p2);
    y_2_1_fu_836_p2 <= (xor_ln180_fu_818_p2 xor xor_ln180_2_fu_830_p2);
    y_2_2_fu_1046_p2 <= (xor_ln157_6_fu_1040_p2 xor xor_ln157_4_fu_1034_p2);
    y_2_3_fu_1159_p2 <= (xor_ln180_6_fu_1153_p2 xor xor_ln180_4_fu_1141_p2);
    y_2_fu_722_p2 <= (xor_ln157_fu_710_p2 xor xor_ln157_2_fu_716_p2);
    y_3_1_fu_855_p2 <= (xor_ln181_fu_843_p2 xor xor_ln181_1_fu_849_p2);
    y_3_2_fu_1065_p2 <= (xor_ln158_4_fu_1059_p2 xor xor_ln158_3_fu_1053_p2);
    y_3_3_fu_1178_p2 <= (xor_ln181_4_fu_1172_p2 xor xor_ln181_3_fu_1166_p2);
    y_3_fu_741_p2 <= (xor_ln158_fu_729_p2 xor xor_ln158_1_fu_735_p2);
    zext_ln150_1_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_ByteXor_11151_fu_384_ap_return_0),64));
    zext_ln150_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_ByteXor_11151_fu_384_ap_return_0),64));
    zext_ln151_1_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_ByteXor_11151_fu_384_ap_return_1),64));
    zext_ln151_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_ByteXor_11151_fu_384_ap_return_1),64));
    zext_ln152_1_fu_974_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_573),64));
    zext_ln152_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_573),64));
    zext_ln153_1_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_577),64));
    zext_ln153_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_577),64));
    zext_ln173_1_fu_1078_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_ByteXor_11151_fu_384_ap_return_0),64));
    zext_ln173_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_ByteXor_11151_fu_384_ap_return_0),64));
    zext_ln174_1_fu_1093_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1_3_reg_1450),64));
    zext_ln174_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_ByteXor_11151_fu_384_ap_return_1),64));
    zext_ln175_1_fu_1083_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_ByteXor_11151_fu_384_ap_return_2),64));
    zext_ln175_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_ByteXor_11151_fu_384_ap_return_2),64));
    zext_ln176_1_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_ByteXor_11151_fu_384_ap_return_3),64));
    zext_ln176_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_577),64));
    zext_ln460_1_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_569),32));
    zext_ln460_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_569),32));
end behav;
