-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clefia_ByteXor_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Clefia_enc_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Clefia_enc_ce0 : OUT STD_LOGIC;
    Clefia_enc_we0 : OUT STD_LOGIC;
    Clefia_enc_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Clefia_enc_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    dst_offset : IN STD_LOGIC_VECTOR (3 downto 0);
    a_offset : IN STD_LOGIC_VECTOR (3 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_ce1 : OUT STD_LOGIC;
    b_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_offset : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of clefia_ByteXor_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal b_offset_read_reg_307 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_offset_read_reg_313 : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_offset_read_reg_335 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal b_load_1_reg_342 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal b_load_2_reg_362 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_load_3_reg_367 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_port_reg_dst_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal b_offset_cast_fu_176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_offset_cast_fu_181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dst_offset_cast_fu_197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_37_fu_214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_40_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_35_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_36_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln124_38_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_39_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln124_41_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_42_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal xor_ln124_fu_202_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_1_fu_249_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_2_fu_275_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_3_fu_301_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_26_fu_186_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_27_fu_209_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_28_fu_219_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln124_fu_229_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln124_1_fu_239_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln124_2_fu_255_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln124_3_fu_265_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln124_4_fu_281_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln124_5_fu_291_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                a_offset_read_reg_313 <= a_offset;
                b_offset_read_reg_307 <= b_offset;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                ap_port_reg_dst_offset <= dst_offset;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                b_load_1_reg_342 <= b_q0;
                dst_offset_read_reg_335 <= ap_port_reg_dst_offset;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                b_load_2_reg_362 <= b_q1;
                b_load_3_reg_367 <= b_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    Clefia_enc_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, a_offset_cast_fu_181_p1, dst_offset_cast_fu_197_p1, zext_ln124_35_fu_234_p1, zext_ln124_36_fu_244_p1, ap_CS_fsm_state4, zext_ln124_38_fu_260_p1, zext_ln124_39_fu_270_p1, ap_CS_fsm_state6, zext_ln124_41_fu_286_p1, zext_ln124_42_fu_296_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Clefia_enc_address0 <= zext_ln124_42_fu_296_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Clefia_enc_address0 <= zext_ln124_41_fu_286_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Clefia_enc_address0 <= zext_ln124_39_fu_270_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Clefia_enc_address0 <= zext_ln124_38_fu_260_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Clefia_enc_address0 <= zext_ln124_36_fu_244_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Clefia_enc_address0 <= zext_ln124_35_fu_234_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Clefia_enc_address0 <= dst_offset_cast_fu_197_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            Clefia_enc_address0 <= a_offset_cast_fu_181_p1(4 - 1 downto 0);
        else 
            Clefia_enc_address0 <= "XXXX";
        end if; 
    end process;


    Clefia_enc_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            Clefia_enc_ce0 <= ap_const_logic_1;
        else 
            Clefia_enc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Clefia_enc_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, xor_ln124_fu_202_p2, xor_ln124_1_fu_249_p2, xor_ln124_2_fu_275_p2, xor_ln124_3_fu_301_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Clefia_enc_d0 <= xor_ln124_3_fu_301_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Clefia_enc_d0 <= xor_ln124_2_fu_275_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Clefia_enc_d0 <= xor_ln124_1_fu_249_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Clefia_enc_d0 <= xor_ln124_fu_202_p2;
        else 
            Clefia_enc_d0 <= "XXXXXXXX";
        end if; 
    end process;


    Clefia_enc_we0_assign_proc : process(ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            Clefia_enc_we0 <= ap_const_logic_1;
        else 
            Clefia_enc_we0 <= ap_const_logic_0;
        end if; 
    end process;

    a_offset_cast_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_offset),64));
    add_ln124_1_fu_239_p2 <= std_logic_vector(unsigned(dst_offset_read_reg_335) + unsigned(ap_const_lv4_1));
    add_ln124_26_fu_186_p2 <= std_logic_vector(unsigned(b_offset) + unsigned(ap_const_lv8_1));
    add_ln124_27_fu_209_p2 <= std_logic_vector(unsigned(b_offset_read_reg_307) + unsigned(ap_const_lv8_2));
    add_ln124_28_fu_219_p2 <= std_logic_vector(unsigned(b_offset_read_reg_307) + unsigned(ap_const_lv8_3));
    add_ln124_2_fu_255_p2 <= std_logic_vector(unsigned(a_offset_read_reg_313) + unsigned(ap_const_lv4_2));
    add_ln124_3_fu_265_p2 <= std_logic_vector(unsigned(dst_offset_read_reg_335) + unsigned(ap_const_lv4_2));
    add_ln124_4_fu_281_p2 <= std_logic_vector(unsigned(a_offset_read_reg_313) + unsigned(ap_const_lv4_3));
    add_ln124_5_fu_291_p2 <= std_logic_vector(unsigned(dst_offset_read_reg_335) + unsigned(ap_const_lv4_3));
    add_ln124_fu_229_p2 <= std_logic_vector(unsigned(a_offset_read_reg_313) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_ce)
    begin
        if (((ap_const_logic_0 = ap_ce) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state8)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln124_fu_192_p1, zext_ln124_40_fu_224_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_address0 <= zext_ln124_40_fu_224_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            b_address0 <= zext_ln124_fu_192_p1(8 - 1 downto 0);
        else 
            b_address0 <= "XXXXXXXX";
        end if; 
    end process;


    b_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, b_offset_cast_fu_176_p1, zext_ln124_37_fu_214_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_address1 <= zext_ln124_37_fu_214_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            b_address1 <= b_offset_cast_fu_176_p1(8 - 1 downto 0);
        else 
            b_address1 <= "XXXXXXXX";
        end if; 
    end process;


    b_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            b_ce1 <= ap_const_logic_1;
        else 
            b_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    b_offset_cast_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_offset),64));
    dst_offset_cast_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_port_reg_dst_offset),64));
    xor_ln124_1_fu_249_p2 <= (b_load_1_reg_342 xor Clefia_enc_q0);
    xor_ln124_2_fu_275_p2 <= (b_load_2_reg_362 xor Clefia_enc_q0);
    xor_ln124_3_fu_301_p2 <= (b_load_3_reg_367 xor Clefia_enc_q0);
    xor_ln124_fu_202_p2 <= (b_q1 xor Clefia_enc_q0);
    zext_ln124_35_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_fu_229_p2),64));
    zext_ln124_36_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_1_fu_239_p2),64));
    zext_ln124_37_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_27_fu_209_p2),64));
    zext_ln124_38_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_2_fu_255_p2),64));
    zext_ln124_39_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_3_fu_265_p2),64));
    zext_ln124_40_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_28_fu_219_p2),64));
    zext_ln124_41_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_4_fu_281_p2),64));
    zext_ln124_42_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_5_fu_291_p2),64));
    zext_ln124_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_26_fu_186_p2),64));
end behav;
