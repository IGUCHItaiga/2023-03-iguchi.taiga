// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clefia_ByteXor_112_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_we0,
        a_d0,
        a_q0,
        a_offset,
        b_address0,
        b_ce0,
        b_q0,
        b_offset
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] a_address0;
output   a_ce0;
output   a_we0;
output  [7:0] a_d0;
input  [7:0] a_q0;
input  [7:0] a_offset;
output  [4:0] b_address0;
output   b_ce0;
input  [7:0] b_q0;
input  [4:0] b_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] a_address0;
reg a_ce0;
reg a_we0;
reg b_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln123_fu_80_p2;
reg   [7:0] a_addr_reg_152;
wire   [7:0] xor_ln124_fu_121_p2;
reg   [7:0] xor_ln124_reg_157;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln124_14_fu_101_p1;
wire   [63:0] zext_ln124_15_fu_111_p1;
reg   [4:0] idx_fu_30;
wire   [4:0] add_ln124_fu_86_p2;
wire    ap_CS_fsm_state4;
wire   [4:0] add_ln124_11_fu_96_p2;
wire   [7:0] zext_ln124_fu_92_p1;
wire   [7:0] add_ln124_12_fu_106_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        idx_fu_30 <= 5'd0;
    end else if (((icmp_ln123_fu_80_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        idx_fu_30 <= add_ln124_fu_86_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_80_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_addr_reg_152 <= zext_ln124_15_fu_111_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xor_ln124_reg_157 <= xor_ln124_fu_121_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address0 = a_addr_reg_152;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_address0 = zext_ln124_15_fu_111_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln123_fu_80_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln123_fu_80_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln123_fu_80_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_d0 = xor_ln124_reg_157;

assign add_ln124_11_fu_96_p2 = (idx_fu_30 + b_offset);

assign add_ln124_12_fu_106_p2 = (zext_ln124_fu_92_p1 + a_offset);

assign add_ln124_fu_86_p2 = (idx_fu_30 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign b_address0 = zext_ln124_14_fu_101_p1;

assign icmp_ln123_fu_80_p2 = ((idx_fu_30 == 5'd16) ? 1'b1 : 1'b0);

assign xor_ln124_fu_121_p2 = (b_q0 ^ a_q0);

assign zext_ln124_14_fu_101_p1 = add_ln124_11_fu_96_p2;

assign zext_ln124_15_fu_111_p1 = add_ln124_12_fu_106_p2;

assign zext_ln124_fu_92_p1 = idx_fu_30;

endmodule //clefia_ByteXor_112_1
