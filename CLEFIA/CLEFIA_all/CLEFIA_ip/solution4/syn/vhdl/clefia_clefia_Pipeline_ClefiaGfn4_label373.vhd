-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clefia_clefia_Pipeline_ClefiaGfn4_label373 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fin_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    fin_4_ce0 : OUT STD_LOGIC;
    fin_4_we0 : OUT STD_LOGIC;
    fin_4_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    fin_4_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    fin_4_ce1 : OUT STD_LOGIC;
    fin_4_we1 : OUT STD_LOGIC;
    fin_4_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_4_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    fin_4_load_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_4_load_out_ap_vld : OUT STD_LOGIC;
    fin_4_load_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_4_load_1_out_ap_vld : OUT STD_LOGIC;
    fin_4_load_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_4_load_2_out_ap_vld : OUT STD_LOGIC;
    fin_4_load_3_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_4_load_3_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_268_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_268_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_269_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_269_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_270_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_270_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_271_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_271_out_ap_vld : OUT STD_LOGIC;
    fin_4_load_8_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_4_load_8_out_ap_vld : OUT STD_LOGIC;
    fin_4_load_9_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_4_load_9_out_ap_vld : OUT STD_LOGIC;
    fin_4_load_10_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_4_load_10_out_ap_vld : OUT STD_LOGIC;
    fin_4_load_11_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_4_load_11_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_276_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_276_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_277_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_277_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_278_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_278_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_279_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_279_out_ap_vld : OUT STD_LOGIC;
    con128_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    con128_ce0 : OUT STD_LOGIC;
    con128_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    clefia_s0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    clefia_s0_ce0 : OUT STD_LOGIC;
    clefia_s0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    clefia_s1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    clefia_s1_ce0 : OUT STD_LOGIC;
    clefia_s1_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of clefia_clefia_Pipeline_ClefiaGfn4_label373 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal icmp_ln197_reg_2021 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage12 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_540 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal reg_544 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal reg_548 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal reg_552 : STD_LOGIC_VECTOR (7 downto 0);
    signal idx38_i102_load_reg_1805 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal fin_4_addr_14_reg_1817 : STD_LOGIC_VECTOR (3 downto 0);
    signal fin_4_addr_15_reg_1822 : STD_LOGIC_VECTOR (3 downto 0);
    signal fin_4_addr_12_reg_1832 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal fin_4_addr_13_reg_1837 : STD_LOGIC_VECTOR (3 downto 0);
    signal fin_4_load_reg_1842 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_264_fu_574_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_264_reg_1848 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_4_load_1_reg_1858 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal xor_ln124_265_fu_590_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_265_reg_1877 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_4_load_2_reg_1887 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_4_load_3_reg_1894 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_4_addr_4_reg_1906 : STD_LOGIC_VECTOR (3 downto 0);
    signal fin_4_addr_5_reg_1911 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln124_266_fu_609_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_266_reg_1916 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_72_fu_662_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_72_reg_1931 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_162_fu_692_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_162_reg_1937 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_394_reg_1942 : STD_LOGIC_VECTOR (0 downto 0);
    signal fin_4_load_8_reg_1947 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_4_load_9_reg_1954 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_assign_7_load_reg_1961 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln124_267_fu_707_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_267_reg_1976 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_s_fu_750_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_s_reg_1986 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_163_fu_780_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_163_reg_1992 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_396_reg_1997 : STD_LOGIC_VECTOR (0 downto 0);
    signal fin_4_load_10_reg_2007 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_4_load_11_reg_2014 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln197_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_62_reg_2035 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_70_fu_846_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_70_reg_2045 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_158_fu_876_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_158_reg_2051 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_386_reg_2056 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln124_272_fu_888_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_272_reg_2061 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal xor_ln124_268_fu_1028_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_268_reg_2081 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_269_fu_1056_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_269_reg_2087 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_270_fu_1084_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_270_reg_2093 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_271_fu_1112_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_271_reg_2099 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_273_fu_1118_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_273_reg_2105 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_274_fu_1137_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_274_reg_2130 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_78_fu_1190_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_78_reg_2145 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_173_fu_1262_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_173_reg_2150 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_416_reg_2155 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln124_275_fu_1274_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_275_reg_2160 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_166_fu_1389_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_166_reg_2170 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_402_reg_2175 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln180_fu_1401_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln180_reg_2180 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_4_load_14_reg_2186 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_4_load_15_reg_2191 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_66_reg_2196 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal x_assign_75_fu_1444_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_75_reg_2206 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_175_fu_1516_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_175_reg_2212 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_420_reg_2217 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_76_fu_1562_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_76_reg_2222 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal trunc_ln134_170_fu_1634_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_170_reg_2227 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_410_reg_2232 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln124_277_fu_1681_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_277_reg_2237 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_279_fu_1703_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_279_reg_2243 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_276_fu_1744_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_276_reg_2248 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal xor_ln124_278_fu_1766_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_278_reg_2253 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln196_fu_1772_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln196_reg_2259 : STD_LOGIC_VECTOR (6 downto 0);
    signal idx38_i102_cast_fu_569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_fu_585_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_231_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_fu_605_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_232_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln151_fu_624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_fu_712_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_233_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln153_fu_808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_234_fu_898_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_235_fu_1128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_fu_1133_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_236_fu_1147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_fu_1152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_fu_1279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_fu_1406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idx38_i102_fu_124 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_idx38_i102_load : STD_LOGIC_VECTOR (6 downto 0);
    signal r_assign_7_fu_128 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln193_fu_1777_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln121_58_fu_580_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln121_59_fu_595_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln121_60_fu_614_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_391_fu_628_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_122_fu_636_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_122_fu_642_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_161_fu_650_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_392_fu_654_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_393_fu_670_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_123_fu_678_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_123_fu_684_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_716_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_fu_724_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_fu_730_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_fu_738_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_382_fu_742_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_395_fu_758_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_124_fu_766_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_124_fu_772_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln195_fu_792_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_383_fu_812_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_118_fu_820_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_118_fu_826_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_157_fu_834_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_384_fu_838_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_385_fu_854_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_119_fu_862_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_119_fu_868_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln121_61_fu_893_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_387_fu_909_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_120_fu_917_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_120_fu_923_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_159_fu_931_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_388_fu_935_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_71_fu_943_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_389_fu_951_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_121_fu_959_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_121_fu_965_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_160_fu_973_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_390_fu_977_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln124_fu_1005_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_s_fu_903_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_486_fu_1017_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_46_fu_985_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_487_fu_1022_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_485_fu_1011_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_488_fu_1034_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_490_fu_1046_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_491_fu_1050_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_489_fu_1040_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_48_fu_999_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_492_fu_1062_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_47_fu_993_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_494_fu_1073_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_495_fu_1078_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_493_fu_1068_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_496_fu_1090_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_498_fu_1102_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_499_fu_1107_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_497_fu_1096_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln121_62_fu_1123_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln121_63_fu_1142_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_411_fu_1156_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_132_fu_1164_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_132_fu_1170_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_171_fu_1178_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_412_fu_1182_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_413_fu_1198_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_133_fu_1206_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_133_fu_1212_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_172_fu_1220_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_414_fu_1224_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_79_fu_1232_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_415_fu_1240_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_134_fu_1248_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_134_fu_1254_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_397_fu_1283_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_125_fu_1291_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_125_fu_1297_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_164_fu_1305_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_398_fu_1309_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_73_fu_1317_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_399_fu_1325_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_126_fu_1333_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_126_fu_1339_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_165_fu_1347_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_400_fu_1351_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_74_fu_1359_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_401_fu_1367_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_127_fu_1375_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_127_fu_1381_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_403_fu_1410_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_128_fu_1418_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_128_fu_1424_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_167_fu_1432_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_404_fu_1436_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_417_fu_1452_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_135_fu_1460_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_135_fu_1466_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_174_fu_1474_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_418_fu_1478_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_80_fu_1486_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_419_fu_1494_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_136_fu_1502_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_136_fu_1508_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_405_fu_1528_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_129_fu_1536_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_129_fu_1542_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_168_fu_1550_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_406_fu_1554_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_407_fu_1570_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_130_fu_1578_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_130_fu_1584_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_169_fu_1592_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_408_fu_1596_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_77_fu_1604_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_409_fu_1612_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_131_fu_1620_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_131_fu_1626_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_504_fu_1658_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_51_fu_1646_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_506_fu_1670_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_52_fu_1652_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_507_fu_1675_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_505_fu_1664_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_512_fu_1692_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_513_fu_1697_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_511_fu_1687_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_500_fu_1722_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_49_fu_1710_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_502_fu_1733_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_50_fu_1716_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_503_fu_1738_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_501_fu_1727_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_509_fu_1755_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_510_fu_1760_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_508_fu_1751_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clefia_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component clefia_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage12,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    idx38_i102_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                idx38_i102_fu_124 <= ap_const_lv7_0;
            elsif (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                idx38_i102_fu_124 <= add_ln196_reg_2259;
            end if; 
        end if;
    end process;

    r_assign_7_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                r_assign_7_fu_128 <= ap_const_lv4_B;
            elsif (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                r_assign_7_fu_128 <= add_ln193_fu_1777_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln196_reg_2259 <= add_ln196_fu_1772_p2;
                xor_ln124_276_reg_2248 <= xor_ln124_276_fu_1744_p2;
                xor_ln124_278_reg_2253 <= xor_ln124_278_fu_1766_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                fin_4_load_10_reg_2007 <= fin_4_q1;
                fin_4_load_11_reg_2014 <= fin_4_q0;
                icmp_ln197_reg_2021 <= icmp_ln197_fu_802_p2;
                r_assign_7_load_reg_1961 <= r_assign_7_fu_128;
                tmp_396_reg_1997 <= select_ln131_124_fu_772_p3(7 downto 7);
                trunc_ln134_163_reg_1992 <= trunc_ln134_163_fu_780_p1;
                x_assign_s_reg_1986 <= x_assign_s_fu_750_p3;
                xor_ln124_267_reg_1976 <= xor_ln124_267_fu_707_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                fin_4_load_14_reg_2186 <= fin_4_q1;
                fin_4_load_15_reg_2191 <= fin_4_q0;
                tmp_402_reg_2175 <= select_ln131_127_fu_1381_p3(7 downto 7);
                trunc_ln134_166_reg_2170 <= trunc_ln134_166_fu_1389_p1;
                xor_ln124_275_reg_2160 <= xor_ln124_275_fu_1274_p2;
                xor_ln180_reg_2180 <= xor_ln180_fu_1401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                fin_4_load_1_reg_1858 <= fin_4_q0;
                fin_4_load_reg_1842 <= fin_4_q1;
                xor_ln124_264_reg_1848 <= xor_ln124_264_fu_574_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                fin_4_load_2_reg_1887 <= fin_4_q1;
                fin_4_load_3_reg_1894 <= fin_4_q0;
                xor_ln124_265_reg_1877 <= xor_ln124_265_fu_590_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                fin_4_load_8_reg_1947 <= fin_4_q1;
                fin_4_load_9_reg_1954 <= fin_4_q0;
                tmp_394_reg_1942 <= select_ln131_123_fu_684_p3(7 downto 7);
                trunc_ln134_162_reg_1937 <= trunc_ln134_162_fu_692_p1;
                x_assign_72_reg_1931 <= x_assign_72_fu_662_p3;
                xor_ln124_266_reg_1916 <= xor_ln124_266_fu_609_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                idx38_i102_load_reg_1805 <= ap_sig_allocacmp_idx38_i102_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_540 <= clefia_s0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_544 <= clefia_s1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_548 <= fin_4_q1;
                reg_552 <= fin_4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_386_reg_2056 <= select_ln131_119_fu_868_p3(7 downto 7);
                trunc_ln134_158_reg_2051 <= trunc_ln134_158_fu_876_p1;
                x_assign_70_reg_2045 <= x_assign_70_fu_846_p3;
                xor_ln124_272_reg_2061 <= xor_ln124_272_fu_888_p2;
                z_62_reg_2035 <= clefia_s0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_410_reg_2232 <= select_ln131_131_fu_1626_p3(7 downto 7);
                trunc_ln134_170_reg_2227 <= trunc_ln134_170_fu_1634_p1;
                x_assign_76_reg_2222 <= x_assign_76_fu_1562_p3;
                xor_ln124_277_reg_2237 <= xor_ln124_277_fu_1681_p2;
                xor_ln124_279_reg_2243 <= xor_ln124_279_fu_1703_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_416_reg_2155 <= select_ln131_134_fu_1254_p3(7 downto 7);
                trunc_ln134_173_reg_2150 <= trunc_ln134_173_fu_1262_p1;
                x_assign_78_reg_2145 <= x_assign_78_fu_1190_p3;
                xor_ln124_274_reg_2130 <= xor_ln124_274_fu_1137_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_420_reg_2217 <= select_ln131_136_fu_1508_p3(7 downto 7);
                trunc_ln134_175_reg_2212 <= trunc_ln134_175_fu_1516_p1;
                x_assign_75_reg_2206 <= x_assign_75_fu_1444_p3;
                z_66_reg_2196 <= clefia_s1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                xor_ln124_268_reg_2081 <= xor_ln124_268_fu_1028_p2;
                xor_ln124_269_reg_2087 <= xor_ln124_269_fu_1056_p2;
                xor_ln124_270_reg_2093 <= xor_ln124_270_fu_1084_p2;
                xor_ln124_271_reg_2099 <= xor_ln124_271_fu_1112_p2;
                xor_ln124_273_reg_2105 <= xor_ln124_273_fu_1118_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state13, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln193_fu_1777_p2 <= std_logic_vector(unsigned(r_assign_7_load_reg_1961) + unsigned(ap_const_lv4_F));
    add_ln196_fu_1772_p2 <= std_logic_vector(unsigned(idx38_i102_load_reg_1805) + unsigned(ap_const_lv7_8));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage12_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2021)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_condition_exit_pp0_iter0_stage12 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state13, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage12;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_idx38_i102_load_assign_proc : process(ap_CS_fsm_state1, idx38_i102_fu_124, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_idx38_i102_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_idx38_i102_load <= idx38_i102_fu_124;
        end if; 
    end process;


    clefia_s0_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state10, zext_ln150_fu_605_p1, zext_ln152_fu_712_p1, zext_ln174_fu_1152_p1, zext_ln176_fu_1406_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            clefia_s0_address0 <= zext_ln176_fu_1406_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            clefia_s0_address0 <= zext_ln174_fu_1152_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            clefia_s0_address0 <= zext_ln152_fu_712_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            clefia_s0_address0 <= zext_ln150_fu_605_p1(8 - 1 downto 0);
        else 
            clefia_s0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s0_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            clefia_s0_ce0 <= ap_const_logic_1;
        else 
            clefia_s0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s1_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln151_fu_624_p1, zext_ln153_fu_808_p1, zext_ln173_fu_1133_p1, zext_ln175_fu_1279_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            clefia_s1_address0 <= zext_ln175_fu_1279_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            clefia_s1_address0 <= zext_ln173_fu_1133_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            clefia_s1_address0 <= zext_ln153_fu_808_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            clefia_s1_address0 <= zext_ln151_fu_624_p1(8 - 1 downto 0);
        else 
            clefia_s1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s1_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            clefia_s1_ce0 <= ap_const_logic_1;
        else 
            clefia_s1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    con128_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state7, idx38_i102_cast_fu_569_p1, zext_ln121_fu_585_p1, zext_ln121_231_fu_600_p1, zext_ln121_232_fu_619_p1, zext_ln121_233_fu_797_p1, zext_ln121_234_fu_898_p1, zext_ln121_235_fu_1128_p1, zext_ln121_236_fu_1147_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            con128_address0 <= zext_ln121_236_fu_1147_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            con128_address0 <= zext_ln121_235_fu_1128_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            con128_address0 <= zext_ln121_234_fu_898_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            con128_address0 <= zext_ln121_233_fu_797_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            con128_address0 <= zext_ln121_232_fu_619_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            con128_address0 <= zext_ln121_231_fu_600_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            con128_address0 <= zext_ln121_fu_585_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            con128_address0 <= idx38_i102_cast_fu_569_p1(8 - 1 downto 0);
        else 
            con128_address0 <= "XXXXXXXX";
        end if; 
    end process;


    con128_ce0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            con128_ce0 <= ap_const_logic_1;
        else 
            con128_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fin_4_addr_12_reg_1832 <= ap_const_lv64_3(4 - 1 downto 0);
    fin_4_addr_13_reg_1837 <= ap_const_lv64_2(4 - 1 downto 0);
    fin_4_addr_14_reg_1817 <= ap_const_lv64_1(4 - 1 downto 0);
    fin_4_addr_15_reg_1822 <= ap_const_lv64_0(4 - 1 downto 0);
    fin_4_addr_4_reg_1906 <= ap_const_lv64_B(4 - 1 downto 0);
    fin_4_addr_5_reg_1911 <= ap_const_lv64_A(4 - 1 downto 0);

    fin_4_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln197_reg_2021, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, fin_4_addr_14_reg_1817, fin_4_addr_12_reg_1832, ap_CS_fsm_state2, ap_CS_fsm_state3, fin_4_addr_4_reg_1906, icmp_ln197_fu_802_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            fin_4_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            fin_4_address0 <= fin_4_addr_4_reg_1906;
        elsif (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            fin_4_address0 <= fin_4_addr_12_reg_1832;
        elsif (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            fin_4_address0 <= fin_4_addr_14_reg_1817;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            fin_4_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            fin_4_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            fin_4_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln197_fu_802_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            fin_4_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fin_4_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fin_4_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fin_4_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            fin_4_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            fin_4_address0 <= "XXXX";
        end if; 
    end process;


    fin_4_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, icmp_ln197_reg_2021, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, fin_4_addr_15_reg_1822, ap_CS_fsm_state2, fin_4_addr_13_reg_1837, ap_CS_fsm_state3, fin_4_addr_5_reg_1911, icmp_ln197_fu_802_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_4_address1 <= fin_4_addr_5_reg_1911;
        elsif (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            fin_4_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            fin_4_address1 <= fin_4_addr_13_reg_1837;
        elsif (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            fin_4_address1 <= fin_4_addr_15_reg_1822;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            fin_4_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            fin_4_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            fin_4_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln197_fu_802_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            fin_4_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fin_4_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fin_4_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fin_4_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            fin_4_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            fin_4_address1 <= "XXXX";
        end if; 
    end process;


    fin_4_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln197_reg_2021, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln197_fu_802_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln197_fu_802_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            fin_4_ce0 <= ap_const_logic_1;
        else 
            fin_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fin_4_ce1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, icmp_ln197_reg_2021, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln197_fu_802_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln197_fu_802_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            fin_4_ce1 <= ap_const_logic_1;
        else 
            fin_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    fin_4_d0_assign_proc : process(icmp_ln197_reg_2021, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, fin_4_load_1_reg_1858, fin_4_load_3_reg_1894, fin_4_load_9_reg_1954, fin_4_load_11_reg_2014, icmp_ln197_fu_802_p2, ap_CS_fsm_state7, xor_ln124_269_reg_2087, xor_ln124_271_reg_2099, ap_CS_fsm_state10, ap_CS_fsm_state11, xor_ln124_279_fu_1703_p2, xor_ln124_276_fu_1744_p2, ap_CS_fsm_state12)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            fin_4_d0 <= xor_ln124_276_fu_1744_p2;
        elsif (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            fin_4_d0 <= xor_ln124_279_fu_1703_p2;
        elsif (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            fin_4_d0 <= xor_ln124_271_reg_2099;
        elsif (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            fin_4_d0 <= xor_ln124_269_reg_2087;
        elsif (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            fin_4_d0 <= fin_4_load_3_reg_1894;
        elsif (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            fin_4_d0 <= fin_4_load_1_reg_1858;
        elsif (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            fin_4_d0 <= fin_4_load_11_reg_2014;
        elsif (((icmp_ln197_fu_802_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            fin_4_d0 <= fin_4_load_9_reg_1954;
        else 
            fin_4_d0 <= "XXXXXXXX";
        end if; 
    end process;


    fin_4_d1_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2021, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, fin_4_load_reg_1842, fin_4_load_2_reg_1887, fin_4_load_8_reg_1947, fin_4_load_10_reg_2007, icmp_ln197_fu_802_p2, ap_CS_fsm_state7, xor_ln124_268_reg_2081, xor_ln124_270_reg_2093, ap_CS_fsm_state10, xor_ln124_277_reg_2237, ap_CS_fsm_state12, xor_ln124_278_reg_2253)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_4_d1 <= xor_ln124_278_reg_2253;
        elsif (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            fin_4_d1 <= xor_ln124_277_reg_2237;
        elsif (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            fin_4_d1 <= xor_ln124_270_reg_2093;
        elsif (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            fin_4_d1 <= xor_ln124_268_reg_2081;
        elsif (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            fin_4_d1 <= fin_4_load_2_reg_1887;
        elsif (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            fin_4_d1 <= fin_4_load_reg_1842;
        elsif (((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            fin_4_d1 <= fin_4_load_10_reg_2007;
        elsif (((icmp_ln197_fu_802_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            fin_4_d1 <= fin_4_load_8_reg_1947;
        else 
            fin_4_d1 <= "XXXXXXXX";
        end if; 
    end process;

    fin_4_load_10_out <= fin_4_load_10_reg_2007;

    fin_4_load_10_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2021)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_4_load_10_out_ap_vld <= ap_const_logic_1;
        else 
            fin_4_load_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_4_load_11_out <= fin_4_load_11_reg_2014;

    fin_4_load_11_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2021)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_4_load_11_out_ap_vld <= ap_const_logic_1;
        else 
            fin_4_load_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_4_load_1_out <= fin_4_load_1_reg_1858;

    fin_4_load_1_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2021)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_4_load_1_out_ap_vld <= ap_const_logic_1;
        else 
            fin_4_load_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_4_load_2_out <= fin_4_load_2_reg_1887;

    fin_4_load_2_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2021)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_4_load_2_out_ap_vld <= ap_const_logic_1;
        else 
            fin_4_load_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_4_load_3_out <= fin_4_load_3_reg_1894;

    fin_4_load_3_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2021)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_4_load_3_out_ap_vld <= ap_const_logic_1;
        else 
            fin_4_load_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_4_load_8_out <= fin_4_load_8_reg_1947;

    fin_4_load_8_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2021)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_4_load_8_out_ap_vld <= ap_const_logic_1;
        else 
            fin_4_load_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_4_load_9_out <= fin_4_load_9_reg_1954;

    fin_4_load_9_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2021)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_4_load_9_out_ap_vld <= ap_const_logic_1;
        else 
            fin_4_load_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_4_load_out <= fin_4_load_reg_1842;

    fin_4_load_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2021)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_4_load_out_ap_vld <= ap_const_logic_1;
        else 
            fin_4_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    fin_4_we0_assign_proc : process(icmp_ln197_reg_2021, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, icmp_ln197_fu_802_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((((icmp_ln197_fu_802_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            fin_4_we0 <= ap_const_logic_1;
        else 
            fin_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fin_4_we1_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2021, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, icmp_ln197_fu_802_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((((icmp_ln197_fu_802_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln197_reg_2021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            fin_4_we1 <= ap_const_logic_1;
        else 
            fin_4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln197_fu_802_p2 <= "1" when (r_assign_7_fu_128 = ap_const_lv4_0) else "0";
    idx38_i102_cast_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_idx38_i102_load),64));
    or_ln121_58_fu_580_p2 <= (idx38_i102_load_reg_1805 or ap_const_lv7_1);
    or_ln121_59_fu_595_p2 <= (idx38_i102_load_reg_1805 or ap_const_lv7_2);
    or_ln121_60_fu_614_p2 <= (idx38_i102_load_reg_1805 or ap_const_lv7_3);
    or_ln121_61_fu_893_p2 <= (idx38_i102_load_reg_1805 or ap_const_lv7_5);
    or_ln121_62_fu_1123_p2 <= (idx38_i102_load_reg_1805 or ap_const_lv7_6);
    or_ln121_63_fu_1142_p2 <= (idx38_i102_load_reg_1805 or ap_const_lv7_7);
    or_ln134_46_fu_985_p3 <= (trunc_ln134_160_fu_973_p1 & tmp_390_fu_977_p3);
    or_ln134_47_fu_993_p3 <= (trunc_ln134_162_reg_1937 & tmp_394_reg_1942);
    or_ln134_48_fu_999_p3 <= (trunc_ln134_163_reg_1992 & tmp_396_reg_1997);
    or_ln134_49_fu_1710_p3 <= (trunc_ln134_166_reg_2170 & tmp_402_reg_2175);
    or_ln134_50_fu_1716_p3 <= (trunc_ln134_170_reg_2227 & tmp_410_reg_2232);
    or_ln134_51_fu_1646_p3 <= (trunc_ln134_173_reg_2150 & tmp_416_reg_2155);
    or_ln134_52_fu_1652_p3 <= (trunc_ln134_175_reg_2212 & tmp_420_reg_2217);
    or_ln134_s_fu_903_p3 <= (trunc_ln134_158_reg_2051 & tmp_386_reg_2056);
    or_ln195_fu_792_p2 <= (idx38_i102_load_reg_1805 or ap_const_lv7_4);
    select_ln131_118_fu_826_p3 <= 
        xor_ln132_118_fu_820_p2 when (tmp_383_fu_812_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_119_fu_868_p3 <= 
        xor_ln132_119_fu_862_p2 when (tmp_385_fu_854_p3(0) = '1') else 
        x_assign_70_fu_846_p3;
    select_ln131_120_fu_923_p3 <= 
        xor_ln132_120_fu_917_p2 when (tmp_387_fu_909_p3(0) = '1') else 
        clefia_s1_q0;
    select_ln131_121_fu_965_p3 <= 
        xor_ln132_121_fu_959_p2 when (tmp_389_fu_951_p3(0) = '1') else 
        x_assign_71_fu_943_p3;
    select_ln131_122_fu_642_p3 <= 
        xor_ln132_122_fu_636_p2 when (tmp_391_fu_628_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_123_fu_684_p3 <= 
        xor_ln132_123_fu_678_p2 when (tmp_393_fu_670_p3(0) = '1') else 
        x_assign_72_fu_662_p3;
    select_ln131_124_fu_772_p3 <= 
        xor_ln132_124_fu_766_p2 when (tmp_395_fu_758_p3(0) = '1') else 
        x_assign_s_fu_750_p3;
    select_ln131_125_fu_1297_p3 <= 
        xor_ln132_125_fu_1291_p2 when (tmp_397_fu_1283_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_126_fu_1339_p3 <= 
        xor_ln132_126_fu_1333_p2 when (tmp_399_fu_1325_p3(0) = '1') else 
        x_assign_73_fu_1317_p3;
    select_ln131_127_fu_1381_p3 <= 
        xor_ln132_127_fu_1375_p2 when (tmp_401_fu_1367_p3(0) = '1') else 
        x_assign_74_fu_1359_p3;
    select_ln131_128_fu_1424_p3 <= 
        xor_ln132_128_fu_1418_p2 when (tmp_403_fu_1410_p3(0) = '1') else 
        clefia_s1_q0;
    select_ln131_129_fu_1542_p3 <= 
        xor_ln132_129_fu_1536_p2 when (tmp_405_fu_1528_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_130_fu_1584_p3 <= 
        xor_ln132_130_fu_1578_p2 when (tmp_407_fu_1570_p3(0) = '1') else 
        x_assign_76_fu_1562_p3;
    select_ln131_131_fu_1626_p3 <= 
        xor_ln132_131_fu_1620_p2 when (tmp_409_fu_1612_p3(0) = '1') else 
        x_assign_77_fu_1604_p3;
    select_ln131_132_fu_1170_p3 <= 
        xor_ln132_132_fu_1164_p2 when (tmp_411_fu_1156_p3(0) = '1') else 
        clefia_s1_q0;
    select_ln131_133_fu_1212_p3 <= 
        xor_ln132_133_fu_1206_p2 when (tmp_413_fu_1198_p3(0) = '1') else 
        x_assign_78_fu_1190_p3;
    select_ln131_134_fu_1254_p3 <= 
        xor_ln132_134_fu_1248_p2 when (tmp_415_fu_1240_p3(0) = '1') else 
        x_assign_79_fu_1232_p3;
    select_ln131_135_fu_1466_p3 <= 
        xor_ln132_135_fu_1460_p2 when (tmp_417_fu_1452_p3(0) = '1') else 
        x_assign_75_fu_1444_p3;
    select_ln131_136_fu_1508_p3 <= 
        xor_ln132_136_fu_1502_p2 when (tmp_419_fu_1494_p3(0) = '1') else 
        x_assign_80_fu_1486_p3;
    select_ln131_fu_730_p3 <= 
        xor_ln132_fu_724_p2 when (tmp_fu_716_p3(0) = '1') else 
        clefia_s1_q0;
    tmp_382_fu_742_p3 <= select_ln131_fu_730_p3(7 downto 7);
    tmp_383_fu_812_p3 <= clefia_s0_q0(7 downto 7);
    tmp_384_fu_838_p3 <= select_ln131_118_fu_826_p3(7 downto 7);
    tmp_385_fu_854_p3 <= select_ln131_118_fu_826_p3(6 downto 6);
    tmp_387_fu_909_p3 <= clefia_s1_q0(7 downto 7);
    tmp_388_fu_935_p3 <= select_ln131_120_fu_923_p3(7 downto 7);
    tmp_389_fu_951_p3 <= select_ln131_120_fu_923_p3(6 downto 6);
    tmp_390_fu_977_p3 <= select_ln131_121_fu_965_p3(7 downto 7);
    tmp_391_fu_628_p3 <= clefia_s0_q0(7 downto 7);
    tmp_392_fu_654_p3 <= select_ln131_122_fu_642_p3(7 downto 7);
    tmp_393_fu_670_p3 <= select_ln131_122_fu_642_p3(6 downto 6);
    tmp_395_fu_758_p3 <= select_ln131_fu_730_p3(6 downto 6);
    tmp_397_fu_1283_p3 <= clefia_s0_q0(7 downto 7);
    tmp_398_fu_1309_p3 <= select_ln131_125_fu_1297_p3(7 downto 7);
    tmp_399_fu_1325_p3 <= select_ln131_125_fu_1297_p3(6 downto 6);
    tmp_400_fu_1351_p3 <= select_ln131_126_fu_1339_p3(7 downto 7);
    tmp_401_fu_1367_p3 <= select_ln131_126_fu_1339_p3(6 downto 6);
    tmp_403_fu_1410_p3 <= clefia_s1_q0(7 downto 7);
    tmp_404_fu_1436_p3 <= select_ln131_128_fu_1424_p3(7 downto 7);
    tmp_405_fu_1528_p3 <= clefia_s0_q0(7 downto 7);
    tmp_406_fu_1554_p3 <= select_ln131_129_fu_1542_p3(7 downto 7);
    tmp_407_fu_1570_p3 <= select_ln131_129_fu_1542_p3(6 downto 6);
    tmp_408_fu_1596_p3 <= select_ln131_130_fu_1584_p3(7 downto 7);
    tmp_409_fu_1612_p3 <= select_ln131_130_fu_1584_p3(6 downto 6);
    tmp_411_fu_1156_p3 <= clefia_s1_q0(7 downto 7);
    tmp_412_fu_1182_p3 <= select_ln131_132_fu_1170_p3(7 downto 7);
    tmp_413_fu_1198_p3 <= select_ln131_132_fu_1170_p3(6 downto 6);
    tmp_414_fu_1224_p3 <= select_ln131_133_fu_1212_p3(7 downto 7);
    tmp_415_fu_1240_p3 <= select_ln131_133_fu_1212_p3(6 downto 6);
    tmp_417_fu_1452_p3 <= select_ln131_128_fu_1424_p3(6 downto 6);
    tmp_418_fu_1478_p3 <= select_ln131_135_fu_1466_p3(7 downto 7);
    tmp_419_fu_1494_p3 <= select_ln131_135_fu_1466_p3(6 downto 6);
    tmp_fu_716_p3 <= clefia_s1_q0(7 downto 7);
    trunc_ln134_157_fu_834_p1 <= select_ln131_118_fu_826_p3(7 - 1 downto 0);
    trunc_ln134_158_fu_876_p1 <= select_ln131_119_fu_868_p3(7 - 1 downto 0);
    trunc_ln134_159_fu_931_p1 <= select_ln131_120_fu_923_p3(7 - 1 downto 0);
    trunc_ln134_160_fu_973_p1 <= select_ln131_121_fu_965_p3(7 - 1 downto 0);
    trunc_ln134_161_fu_650_p1 <= select_ln131_122_fu_642_p3(7 - 1 downto 0);
    trunc_ln134_162_fu_692_p1 <= select_ln131_123_fu_684_p3(7 - 1 downto 0);
    trunc_ln134_163_fu_780_p1 <= select_ln131_124_fu_772_p3(7 - 1 downto 0);
    trunc_ln134_164_fu_1305_p1 <= select_ln131_125_fu_1297_p3(7 - 1 downto 0);
    trunc_ln134_165_fu_1347_p1 <= select_ln131_126_fu_1339_p3(7 - 1 downto 0);
    trunc_ln134_166_fu_1389_p1 <= select_ln131_127_fu_1381_p3(7 - 1 downto 0);
    trunc_ln134_167_fu_1432_p1 <= select_ln131_128_fu_1424_p3(7 - 1 downto 0);
    trunc_ln134_168_fu_1550_p1 <= select_ln131_129_fu_1542_p3(7 - 1 downto 0);
    trunc_ln134_169_fu_1592_p1 <= select_ln131_130_fu_1584_p3(7 - 1 downto 0);
    trunc_ln134_170_fu_1634_p1 <= select_ln131_131_fu_1626_p3(7 - 1 downto 0);
    trunc_ln134_171_fu_1178_p1 <= select_ln131_132_fu_1170_p3(7 - 1 downto 0);
    trunc_ln134_172_fu_1220_p1 <= select_ln131_133_fu_1212_p3(7 - 1 downto 0);
    trunc_ln134_173_fu_1262_p1 <= select_ln131_134_fu_1254_p3(7 - 1 downto 0);
    trunc_ln134_174_fu_1474_p1 <= select_ln131_135_fu_1466_p3(7 - 1 downto 0);
    trunc_ln134_175_fu_1516_p1 <= select_ln131_136_fu_1508_p3(7 - 1 downto 0);
    trunc_ln134_fu_738_p1 <= select_ln131_fu_730_p3(7 - 1 downto 0);
    x_assign_70_fu_846_p3 <= (trunc_ln134_157_fu_834_p1 & tmp_384_fu_838_p3);
    x_assign_71_fu_943_p3 <= (trunc_ln134_159_fu_931_p1 & tmp_388_fu_935_p3);
    x_assign_72_fu_662_p3 <= (trunc_ln134_161_fu_650_p1 & tmp_392_fu_654_p3);
    x_assign_73_fu_1317_p3 <= (trunc_ln134_164_fu_1305_p1 & tmp_398_fu_1309_p3);
    x_assign_74_fu_1359_p3 <= (trunc_ln134_165_fu_1347_p1 & tmp_400_fu_1351_p3);
    x_assign_75_fu_1444_p3 <= (trunc_ln134_167_fu_1432_p1 & tmp_404_fu_1436_p3);
    x_assign_76_fu_1562_p3 <= (trunc_ln134_168_fu_1550_p1 & tmp_406_fu_1554_p3);
    x_assign_77_fu_1604_p3 <= (trunc_ln134_169_fu_1592_p1 & tmp_408_fu_1596_p3);
    x_assign_78_fu_1190_p3 <= (trunc_ln134_171_fu_1178_p1 & tmp_412_fu_1182_p3);
    x_assign_79_fu_1232_p3 <= (trunc_ln134_172_fu_1220_p1 & tmp_414_fu_1224_p3);
    x_assign_80_fu_1486_p3 <= (trunc_ln134_174_fu_1474_p1 & tmp_418_fu_1478_p3);
    x_assign_s_fu_750_p3 <= (trunc_ln134_fu_738_p1 & tmp_382_fu_742_p3);
    xor_ln124_264_fu_574_p2 <= (fin_4_q1 xor con128_q0);
    xor_ln124_265_fu_590_p2 <= (fin_4_load_1_reg_1858 xor con128_q0);
    xor_ln124_266_fu_609_p2 <= (fin_4_load_2_reg_1887 xor con128_q0);
    xor_ln124_267_fu_707_p2 <= (fin_4_load_3_reg_1894 xor con128_q0);
    xor_ln124_268_fu_1028_p2 <= (xor_ln124_487_fu_1022_p2 xor xor_ln124_485_fu_1011_p2);
    xor_ln124_268_out <= xor_ln124_268_reg_2081;

    xor_ln124_268_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2021)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_268_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_268_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_269_fu_1056_p2 <= (xor_ln124_491_fu_1050_p2 xor xor_ln124_489_fu_1040_p2);
    xor_ln124_269_out <= xor_ln124_269_reg_2087;

    xor_ln124_269_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2021)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_269_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_269_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_270_fu_1084_p2 <= (xor_ln124_495_fu_1078_p2 xor xor_ln124_493_fu_1068_p2);
    xor_ln124_270_out <= xor_ln124_270_reg_2093;

    xor_ln124_270_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2021)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_270_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_270_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_271_fu_1112_p2 <= (xor_ln124_499_fu_1107_p2 xor xor_ln124_497_fu_1096_p2);
    xor_ln124_271_out <= xor_ln124_271_reg_2099;

    xor_ln124_271_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2021)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_271_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_271_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_272_fu_888_p2 <= (fin_4_load_8_reg_1947 xor con128_q0);
    xor_ln124_273_fu_1118_p2 <= (fin_4_load_9_reg_1954 xor con128_q0);
    xor_ln124_274_fu_1137_p2 <= (fin_4_load_10_reg_2007 xor con128_q0);
    xor_ln124_275_fu_1274_p2 <= (fin_4_load_11_reg_2014 xor con128_q0);
    xor_ln124_276_fu_1744_p2 <= (xor_ln124_503_fu_1738_p2 xor xor_ln124_501_fu_1727_p2);
    xor_ln124_276_out <= xor_ln124_276_reg_2248;

    xor_ln124_276_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2021)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_276_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_276_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_277_fu_1681_p2 <= (xor_ln124_507_fu_1675_p2 xor xor_ln124_505_fu_1664_p2);
    xor_ln124_277_out <= xor_ln124_277_reg_2237;

    xor_ln124_277_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2021)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_277_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_277_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_278_fu_1766_p2 <= (xor_ln124_510_fu_1760_p2 xor xor_ln124_508_fu_1751_p2);
    xor_ln124_278_out <= xor_ln124_278_reg_2253;

    xor_ln124_278_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2021)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_278_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_278_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_279_fu_1703_p2 <= (xor_ln124_513_fu_1697_p2 xor xor_ln124_511_fu_1687_p2);
    xor_ln124_279_out <= xor_ln124_279_reg_2243;

    xor_ln124_279_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2021)
    begin
        if (((icmp_ln197_reg_2021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_279_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_279_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_485_fu_1011_p2 <= (xor_ln124_fu_1005_p2 xor reg_540);
    xor_ln124_486_fu_1017_p2 <= (x_assign_s_reg_1986 xor or_ln134_s_fu_903_p3);
    xor_ln124_487_fu_1022_p2 <= (xor_ln124_486_fu_1017_p2 xor or_ln134_46_fu_985_p3);
    xor_ln124_488_fu_1034_p2 <= (reg_552 xor or_ln134_s_fu_903_p3);
    xor_ln124_489_fu_1040_p2 <= (xor_ln124_488_fu_1034_p2 xor reg_544);
    xor_ln124_490_fu_1046_p2 <= (x_assign_72_reg_1931 xor x_assign_70_reg_2045);
    xor_ln124_491_fu_1050_p2 <= (xor_ln124_490_fu_1046_p2 xor or_ln134_46_fu_985_p3);
    xor_ln124_492_fu_1062_p2 <= (or_ln134_48_fu_999_p3 xor fin_4_q1);
    xor_ln124_493_fu_1068_p2 <= (z_62_reg_2035 xor xor_ln124_492_fu_1062_p2);
    xor_ln124_494_fu_1073_p2 <= (x_assign_s_reg_1986 xor or_ln134_47_fu_993_p3);
    xor_ln124_495_fu_1078_p2 <= (xor_ln124_494_fu_1073_p2 xor x_assign_71_fu_943_p3);
    xor_ln124_496_fu_1090_p2 <= (or_ln134_48_fu_999_p3 xor fin_4_q0);
    xor_ln124_497_fu_1096_p2 <= (xor_ln124_496_fu_1090_p2 xor clefia_s1_q0);
    xor_ln124_498_fu_1102_p2 <= (x_assign_72_reg_1931 xor or_ln134_47_fu_993_p3);
    xor_ln124_499_fu_1107_p2 <= (xor_ln124_498_fu_1102_p2 xor x_assign_70_reg_2045);
    xor_ln124_500_fu_1722_p2 <= (x_assign_76_reg_2222 xor reg_548);
    xor_ln124_501_fu_1727_p2 <= (xor_ln124_500_fu_1722_p2 xor reg_544);
    xor_ln124_502_fu_1733_p2 <= (x_assign_75_reg_2206 xor or_ln134_49_fu_1710_p3);
    xor_ln124_503_fu_1738_p2 <= (xor_ln124_502_fu_1733_p2 xor or_ln134_50_fu_1716_p3);
    xor_ln124_504_fu_1658_p2 <= (x_assign_76_fu_1562_p3 xor reg_552);
    xor_ln124_505_fu_1664_p2 <= (xor_ln124_504_fu_1658_p2 xor reg_540);
    xor_ln124_506_fu_1670_p2 <= (x_assign_75_reg_2206 xor or_ln134_51_fu_1646_p3);
    xor_ln124_507_fu_1675_p2 <= (xor_ln124_506_fu_1670_p2 xor or_ln134_52_fu_1652_p3);
    xor_ln124_508_fu_1751_p2 <= (z_66_reg_2196 xor fin_4_load_14_reg_2186);
    xor_ln124_509_fu_1755_p2 <= (xor_ln180_reg_2180 xor or_ln134_50_fu_1716_p3);
    xor_ln124_510_fu_1760_p2 <= (xor_ln124_509_fu_1755_p2 xor or_ln134_49_fu_1710_p3);
    xor_ln124_511_fu_1687_p2 <= (fin_4_load_15_reg_2191 xor clefia_s0_q0);
    xor_ln124_512_fu_1692_p2 <= (xor_ln180_reg_2180 xor or_ln134_52_fu_1652_p3);
    xor_ln124_513_fu_1697_p2 <= (xor_ln124_512_fu_1692_p2 xor or_ln134_51_fu_1646_p3);
    xor_ln124_fu_1005_p2 <= (x_assign_71_fu_943_p3 xor reg_548);
    xor_ln132_118_fu_820_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_119_fu_862_p2 <= (x_assign_70_fu_846_p3 xor ap_const_lv8_E);
    xor_ln132_120_fu_917_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln132_121_fu_959_p2 <= (x_assign_71_fu_943_p3 xor ap_const_lv8_E);
    xor_ln132_122_fu_636_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_123_fu_678_p2 <= (x_assign_72_fu_662_p3 xor ap_const_lv8_E);
    xor_ln132_124_fu_766_p2 <= (x_assign_s_fu_750_p3 xor ap_const_lv8_E);
    xor_ln132_125_fu_1291_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_126_fu_1333_p2 <= (x_assign_73_fu_1317_p3 xor ap_const_lv8_E);
    xor_ln132_127_fu_1375_p2 <= (x_assign_74_fu_1359_p3 xor ap_const_lv8_E);
    xor_ln132_128_fu_1418_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln132_129_fu_1536_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_130_fu_1578_p2 <= (x_assign_76_fu_1562_p3 xor ap_const_lv8_E);
    xor_ln132_131_fu_1620_p2 <= (x_assign_77_fu_1604_p3 xor ap_const_lv8_E);
    xor_ln132_132_fu_1164_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln132_133_fu_1206_p2 <= (x_assign_78_fu_1190_p3 xor ap_const_lv8_E);
    xor_ln132_134_fu_1248_p2 <= (x_assign_79_fu_1232_p3 xor ap_const_lv8_E);
    xor_ln132_135_fu_1460_p2 <= (x_assign_75_fu_1444_p3 xor ap_const_lv8_E);
    xor_ln132_136_fu_1502_p2 <= (x_assign_80_fu_1486_p3 xor ap_const_lv8_E);
    xor_ln132_fu_724_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln180_fu_1401_p2 <= (x_assign_78_reg_2145 xor x_assign_73_fu_1317_p3);
    zext_ln121_231_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln121_59_fu_595_p2),64));
    zext_ln121_232_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln121_60_fu_614_p2),64));
    zext_ln121_233_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln195_fu_792_p2),64));
    zext_ln121_234_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln121_61_fu_893_p2),64));
    zext_ln121_235_fu_1128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln121_62_fu_1123_p2),64));
    zext_ln121_236_fu_1147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln121_63_fu_1142_p2),64));
    zext_ln121_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln121_58_fu_580_p2),64));
    zext_ln150_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_264_reg_1848),64));
    zext_ln151_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_265_reg_1877),64));
    zext_ln152_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_266_reg_1916),64));
    zext_ln153_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_267_reg_1976),64));
    zext_ln173_fu_1133_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_272_reg_2061),64));
    zext_ln174_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_273_reg_2105),64));
    zext_ln175_fu_1279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_274_reg_2130),64));
    zext_ln176_fu_1406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_275_reg_2160),64));
end behav;
