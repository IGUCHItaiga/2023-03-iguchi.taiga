// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clefia_clefia_Pipeline_ClefiaGfn4_label366 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln460,
        fin_3_address0,
        fin_3_ce0,
        fin_3_we0,
        fin_3_d0,
        fin_3_q0,
        fin_3_address1,
        fin_3_ce1,
        fin_3_we1,
        fin_3_d1,
        fin_3_q1,
        rk_address0,
        rk_ce0,
        rk_q0,
        rk_address1,
        rk_ce1,
        rk_q1,
        fin_3_load_out,
        fin_3_load_out_ap_vld,
        fin_3_load_1_out,
        fin_3_load_1_out_ap_vld,
        fin_3_load_2_out,
        fin_3_load_2_out_ap_vld,
        fin_3_load_3_out,
        fin_3_load_3_out_ap_vld,
        xor_ln124_252_out,
        xor_ln124_252_out_ap_vld,
        xor_ln124_253_out,
        xor_ln124_253_out_ap_vld,
        xor_ln124_254_out,
        xor_ln124_254_out_ap_vld,
        xor_ln124_255_out,
        xor_ln124_255_out_ap_vld,
        fin_3_load_8_out,
        fin_3_load_8_out_ap_vld,
        fin_3_load_9_out,
        fin_3_load_9_out_ap_vld,
        fin_3_load_10_out,
        fin_3_load_10_out_ap_vld,
        fin_3_load_11_out,
        fin_3_load_11_out_ap_vld,
        xor_ln124_260_out,
        xor_ln124_260_out_ap_vld,
        xor_ln124_261_out,
        xor_ln124_261_out_ap_vld,
        xor_ln124_262_out,
        xor_ln124_262_out_ap_vld,
        xor_ln124_263_out,
        xor_ln124_263_out_ap_vld,
        clefia_s0_address0,
        clefia_s0_ce0,
        clefia_s0_q0,
        clefia_s1_address0,
        clefia_s1_ce0,
        clefia_s1_q0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] zext_ln460;
output  [3:0] fin_3_address0;
output   fin_3_ce0;
output   fin_3_we0;
output  [7:0] fin_3_d0;
input  [7:0] fin_3_q0;
output  [3:0] fin_3_address1;
output   fin_3_ce1;
output   fin_3_we1;
output  [7:0] fin_3_d1;
input  [7:0] fin_3_q1;
output  [7:0] rk_address0;
output   rk_ce0;
input  [7:0] rk_q0;
output  [7:0] rk_address1;
output   rk_ce1;
input  [7:0] rk_q1;
output  [7:0] fin_3_load_out;
output   fin_3_load_out_ap_vld;
output  [7:0] fin_3_load_1_out;
output   fin_3_load_1_out_ap_vld;
output  [7:0] fin_3_load_2_out;
output   fin_3_load_2_out_ap_vld;
output  [7:0] fin_3_load_3_out;
output   fin_3_load_3_out_ap_vld;
output  [7:0] xor_ln124_252_out;
output   xor_ln124_252_out_ap_vld;
output  [7:0] xor_ln124_253_out;
output   xor_ln124_253_out_ap_vld;
output  [7:0] xor_ln124_254_out;
output   xor_ln124_254_out_ap_vld;
output  [7:0] xor_ln124_255_out;
output   xor_ln124_255_out_ap_vld;
output  [7:0] fin_3_load_8_out;
output   fin_3_load_8_out_ap_vld;
output  [7:0] fin_3_load_9_out;
output   fin_3_load_9_out_ap_vld;
output  [7:0] fin_3_load_10_out;
output   fin_3_load_10_out_ap_vld;
output  [7:0] fin_3_load_11_out;
output   fin_3_load_11_out_ap_vld;
output  [7:0] xor_ln124_260_out;
output   xor_ln124_260_out_ap_vld;
output  [7:0] xor_ln124_261_out;
output   xor_ln124_261_out_ap_vld;
output  [7:0] xor_ln124_262_out;
output   xor_ln124_262_out_ap_vld;
output  [7:0] xor_ln124_263_out;
output   xor_ln124_263_out_ap_vld;
output  [7:0] clefia_s0_address0;
output   clefia_s0_ce0;
input  [7:0] clefia_s0_q0;
output  [7:0] clefia_s1_address0;
output   clefia_s1_ce0;
input  [7:0] clefia_s1_q0;

reg ap_idle;
reg[3:0] fin_3_address0;
reg fin_3_ce0;
reg fin_3_we0;
reg[7:0] fin_3_d0;
reg[3:0] fin_3_address1;
reg fin_3_ce1;
reg fin_3_we1;
reg[7:0] fin_3_d1;
reg[7:0] rk_address0;
reg rk_ce0;
reg[7:0] rk_address1;
reg rk_ce1;
reg fin_3_load_out_ap_vld;
reg fin_3_load_1_out_ap_vld;
reg fin_3_load_2_out_ap_vld;
reg fin_3_load_3_out_ap_vld;
reg xor_ln124_252_out_ap_vld;
reg xor_ln124_253_out_ap_vld;
reg xor_ln124_254_out_ap_vld;
reg xor_ln124_255_out_ap_vld;
reg fin_3_load_8_out_ap_vld;
reg fin_3_load_9_out_ap_vld;
reg fin_3_load_10_out_ap_vld;
reg fin_3_load_11_out_ap_vld;
reg xor_ln124_260_out_ap_vld;
reg xor_ln124_261_out_ap_vld;
reg xor_ln124_262_out_ap_vld;
reg xor_ln124_263_out_ap_vld;
reg[7:0] clefia_s0_address0;
reg clefia_s0_ce0;
reg[7:0] clefia_s1_address0;
reg clefia_s1_ce0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state12;
wire    ap_block_state12_pp0_stage11_iter0;
wire   [0:0] icmp_ln193_fu_1769_p2;
reg    ap_condition_exit_pp0_iter0_stage11;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [7:0] grp_fu_540_p2;
reg   [7:0] reg_552;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
wire   [7:0] grp_fu_546_p2;
reg   [7:0] reg_556;
reg   [7:0] reg_560;
wire    ap_CS_fsm_state6;
wire    ap_block_state6_pp0_stage5_iter0;
reg   [7:0] reg_564;
reg   [7:0] reg_568;
wire    ap_CS_fsm_state7;
wire    ap_block_state7_pp0_stage6_iter0;
reg   [7:0] reg_572;
wire   [3:0] fin_3_addr_14_reg_1796;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [3:0] fin_3_addr_15_reg_1801;
wire   [7:0] empty_fu_593_p1;
reg   [7:0] empty_reg_1806;
wire   [63:0] add_ln188_fu_597_p2;
reg   [63:0] add_ln188_reg_1816;
wire   [3:0] fin_3_addr_12_reg_1831;
wire   [3:0] fin_3_addr_13_reg_1836;
reg   [7:0] fin_3_load_reg_1841;
reg   [7:0] fin_3_load_1_reg_1847;
wire   [3:0] fin_3_addr_6_reg_1863;
wire   [3:0] fin_3_addr_7_reg_1868;
reg   [7:0] fin_3_load_2_reg_1873;
reg   [7:0] fin_3_load_3_reg_1879;
wire   [3:0] fin_3_addr_4_reg_1905;
wire   [3:0] fin_3_addr_5_reg_1910;
wire   [31:0] add_ln188_1_fu_668_p2;
reg   [31:0] add_ln188_1_reg_1915;
wire   [7:0] x_assign_60_fu_718_p3;
reg   [7:0] x_assign_60_reg_1932;
wire   [7:0] x_assign_63_fu_760_p3;
reg   [7:0] x_assign_63_reg_1938;
wire   [6:0] trunc_ln134_181_fu_790_p1;
reg   [6:0] trunc_ln134_181_reg_1944;
reg   [0:0] tmp_433_reg_1949;
wire   [6:0] trunc_ln134_182_fu_824_p1;
reg   [6:0] trunc_ln134_182_reg_1954;
reg   [0:0] tmp_435_reg_1959;
reg   [7:0] fin_3_load_8_reg_1964;
reg   [7:0] fin_3_load_9_reg_1970;
wire   [7:0] x_assign_61_fu_890_p3;
reg   [7:0] x_assign_61_reg_1996;
wire   [6:0] trunc_ln134_177_fu_920_p1;
reg   [6:0] trunc_ln134_177_reg_2002;
reg   [0:0] tmp_425_reg_2007;
wire   [7:0] x_assign_62_fu_966_p3;
reg   [7:0] x_assign_62_reg_2012;
wire   [6:0] trunc_ln134_179_fu_996_p1;
reg   [6:0] trunc_ln134_179_reg_2018;
reg   [0:0] tmp_429_reg_2023;
reg   [7:0] fin_3_load_10_reg_2028;
reg   [7:0] fin_3_load_11_reg_2034;
wire   [0:0] icmp_ln197_fu_1018_p2;
reg   [0:0] icmp_ln197_reg_2050;
wire   [7:0] xor_ln124_252_fu_1057_p2;
reg   [7:0] xor_ln124_252_reg_2064;
wire   [7:0] xor_ln124_253_fu_1085_p2;
reg   [7:0] xor_ln124_253_reg_2070;
wire   [6:0] trunc_ln134_185_fu_1207_p1;
reg   [6:0] trunc_ln134_185_reg_2086;
reg   [0:0] tmp_441_reg_2091;
wire   [6:0] trunc_ln134_192_fu_1325_p1;
reg   [6:0] trunc_ln134_192_reg_2096;
reg   [0:0] tmp_455_reg_2101;
wire   [7:0] xor_ln180_fu_1337_p2;
reg   [7:0] xor_ln180_reg_2106;
wire   [7:0] xor_ln124_254_fu_1377_p2;
reg   [7:0] xor_ln124_254_reg_2122;
wire   [7:0] xor_ln124_255_fu_1405_p2;
reg   [7:0] xor_ln124_255_reg_2128;
wire   [7:0] x_assign_66_fu_1445_p3;
reg   [7:0] x_assign_66_reg_2134;
wire   [7:0] x_assign_67_fu_1487_p3;
reg   [7:0] x_assign_67_reg_2140;
wire   [6:0] trunc_ln134_189_fu_1559_p1;
reg   [6:0] trunc_ln134_189_reg_2146;
reg   [0:0] tmp_449_reg_2151;
wire   [6:0] trunc_ln134_194_fu_1635_p1;
reg   [6:0] trunc_ln134_194_reg_2156;
reg   [0:0] tmp_459_reg_2161;
wire    ap_CS_fsm_state8;
wire    ap_block_state8_pp0_stage7_iter0;
wire   [7:0] or_ln134_43_fu_1647_p3;
reg   [7:0] or_ln134_43_reg_2176;
wire   [7:0] or_ln134_44_fu_1653_p3;
reg   [7:0] or_ln134_44_reg_2181;
wire   [7:0] or_ln134_45_fu_1659_p3;
reg   [7:0] or_ln134_45_reg_2186;
wire   [7:0] or_ln134_46_fu_1665_p3;
reg   [7:0] or_ln134_46_reg_2191;
wire   [7:0] xor_ln124_260_fu_1693_p2;
reg   [7:0] xor_ln124_260_reg_2196;
wire   [7:0] xor_ln124_261_fu_1721_p2;
reg   [7:0] xor_ln124_261_reg_2202;
wire   [7:0] xor_ln124_262_fu_1742_p2;
reg   [7:0] xor_ln124_262_reg_2208;
wire    ap_CS_fsm_state9;
wire    ap_block_state9_pp0_stage8_iter0;
wire   [7:0] xor_ln124_263_fu_1763_p2;
reg   [7:0] xor_ln124_263_reg_2214;
wire   [63:0] zext_ln121_fu_610_p1;
wire   [63:0] zext_ln121_237_fu_620_p1;
wire   [63:0] zext_ln121_238_fu_630_p1;
wire   [63:0] zext_ln150_fu_635_p1;
wire   [63:0] zext_ln151_fu_640_p1;
wire   [63:0] zext_ln121_239_fu_650_p1;
wire   [63:0] zext_ln121_240_fu_660_p1;
wire   [63:0] zext_ln152_fu_674_p1;
wire   [63:0] zext_ln153_fu_679_p1;
wire   [63:0] zext_ln121_241_fu_841_p1;
wire   [63:0] zext_ln121_242_fu_851_p1;
wire   [63:0] zext_ln173_fu_1008_p1;
wire   [63:0] zext_ln174_fu_1013_p1;
wire   [63:0] zext_ln175_fu_1091_p1;
wire   [63:0] zext_ln176_fu_1096_p1;
reg   [63:0] idx109_i_fu_114;
wire    ap_loop_init;
reg   [63:0] ap_sig_allocacmp_idx109_i_load;
reg   [31:0] dec12_i_in_i_fu_118;
wire   [31:0] zext_ln460_cast_fu_576_p1;
wire    ap_CS_fsm_state10;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_CS_fsm_state11;
wire    ap_block_state11_pp0_stage10_iter0;
wire   [7:0] add_ln121_fu_604_p2;
wire   [7:0] add_ln121_111_fu_615_p2;
wire   [7:0] add_ln121_112_fu_625_p2;
wire   [7:0] add_ln121_113_fu_645_p2;
wire   [7:0] add_ln121_114_fu_655_p2;
wire   [0:0] tmp_fu_684_p3;
wire   [7:0] xor_ln132_100_fu_692_p2;
wire   [7:0] select_ln131_100_fu_698_p3;
wire   [6:0] trunc_ln134_fu_706_p1;
wire   [0:0] tmp_421_fu_710_p3;
wire   [0:0] tmp_430_fu_726_p3;
wire   [7:0] xor_ln132_105_fu_734_p2;
wire   [7:0] select_ln131_105_fu_740_p3;
wire   [6:0] trunc_ln134_180_fu_748_p1;
wire   [0:0] tmp_431_fu_752_p3;
wire   [0:0] tmp_432_fu_768_p3;
wire   [7:0] xor_ln132_106_fu_776_p2;
wire   [7:0] select_ln131_106_fu_782_p3;
wire   [0:0] tmp_434_fu_802_p3;
wire   [7:0] xor_ln132_107_fu_810_p2;
wire   [7:0] select_ln131_107_fu_816_p3;
wire   [7:0] add_ln121_115_fu_836_p2;
wire   [7:0] add_ln121_116_fu_846_p2;
wire   [0:0] tmp_422_fu_856_p3;
wire   [7:0] xor_ln132_101_fu_864_p2;
wire   [7:0] select_ln131_101_fu_870_p3;
wire   [6:0] trunc_ln134_176_fu_878_p1;
wire   [0:0] tmp_423_fu_882_p3;
wire   [0:0] tmp_424_fu_898_p3;
wire   [7:0] xor_ln132_102_fu_906_p2;
wire   [7:0] select_ln131_102_fu_912_p3;
wire   [0:0] tmp_426_fu_932_p3;
wire   [7:0] xor_ln132_103_fu_940_p2;
wire   [7:0] select_ln131_103_fu_946_p3;
wire   [6:0] trunc_ln134_178_fu_954_p1;
wire   [0:0] tmp_427_fu_958_p3;
wire   [0:0] tmp_428_fu_974_p3;
wire   [7:0] xor_ln132_104_fu_982_p2;
wire   [7:0] select_ln131_104_fu_988_p3;
wire   [7:0] xor_ln124_fu_1035_p2;
wire   [7:0] or_ln134_39_fu_1023_p3;
wire   [7:0] xor_ln124_515_fu_1046_p2;
wire   [7:0] or_ln134_40_fu_1029_p3;
wire   [7:0] xor_ln124_516_fu_1051_p2;
wire   [7:0] xor_ln124_514_fu_1040_p2;
wire   [7:0] xor_ln124_517_fu_1063_p2;
wire   [7:0] xor_ln124_519_fu_1075_p2;
wire   [7:0] xor_ln124_520_fu_1079_p2;
wire   [7:0] xor_ln124_518_fu_1069_p2;
wire   [0:0] tmp_436_fu_1101_p3;
wire   [7:0] xor_ln132_108_fu_1109_p2;
wire   [7:0] select_ln131_108_fu_1115_p3;
wire   [6:0] trunc_ln134_183_fu_1123_p1;
wire   [0:0] tmp_437_fu_1127_p3;
wire   [7:0] x_assign_64_fu_1135_p3;
wire   [0:0] tmp_438_fu_1143_p3;
wire   [7:0] xor_ln132_109_fu_1151_p2;
wire   [7:0] select_ln131_109_fu_1157_p3;
wire   [6:0] trunc_ln134_184_fu_1165_p1;
wire   [0:0] tmp_439_fu_1169_p3;
wire   [7:0] x_assign_65_fu_1177_p3;
wire   [0:0] tmp_440_fu_1185_p3;
wire   [7:0] xor_ln132_110_fu_1193_p2;
wire   [7:0] select_ln131_110_fu_1199_p3;
wire   [0:0] tmp_450_fu_1219_p3;
wire   [7:0] xor_ln132_115_fu_1227_p2;
wire   [7:0] select_ln131_115_fu_1233_p3;
wire   [6:0] trunc_ln134_190_fu_1241_p1;
wire   [0:0] tmp_451_fu_1245_p3;
wire   [7:0] x_assign_69_fu_1253_p3;
wire   [0:0] tmp_452_fu_1261_p3;
wire   [7:0] xor_ln132_116_fu_1269_p2;
wire   [7:0] select_ln131_116_fu_1275_p3;
wire   [6:0] trunc_ln134_191_fu_1283_p1;
wire   [0:0] tmp_453_fu_1287_p3;
wire   [7:0] x_assign_70_fu_1295_p3;
wire   [0:0] tmp_454_fu_1303_p3;
wire   [7:0] xor_ln132_117_fu_1311_p2;
wire   [7:0] select_ln131_117_fu_1317_p3;
wire   [7:0] or_ln134_42_fu_1349_p3;
wire   [7:0] xor_ln124_521_fu_1355_p2;
wire   [7:0] or_ln134_41_fu_1343_p3;
wire   [7:0] xor_ln124_523_fu_1367_p2;
wire   [7:0] xor_ln124_524_fu_1372_p2;
wire   [7:0] xor_ln124_522_fu_1361_p2;
wire   [7:0] xor_ln124_525_fu_1383_p2;
wire   [7:0] xor_ln124_527_fu_1395_p2;
wire   [7:0] xor_ln124_528_fu_1400_p2;
wire   [7:0] xor_ln124_526_fu_1389_p2;
wire   [0:0] tmp_442_fu_1411_p3;
wire   [7:0] xor_ln132_111_fu_1419_p2;
wire   [7:0] select_ln131_111_fu_1425_p3;
wire   [6:0] trunc_ln134_186_fu_1433_p1;
wire   [0:0] tmp_443_fu_1437_p3;
wire   [0:0] tmp_444_fu_1453_p3;
wire   [7:0] xor_ln132_112_fu_1461_p2;
wire   [7:0] select_ln131_112_fu_1467_p3;
wire   [6:0] trunc_ln134_187_fu_1475_p1;
wire   [0:0] tmp_445_fu_1479_p3;
wire   [0:0] tmp_446_fu_1495_p3;
wire   [7:0] xor_ln132_113_fu_1503_p2;
wire   [7:0] select_ln131_113_fu_1509_p3;
wire   [6:0] trunc_ln134_188_fu_1517_p1;
wire   [0:0] tmp_447_fu_1521_p3;
wire   [7:0] x_assign_68_fu_1529_p3;
wire   [0:0] tmp_448_fu_1537_p3;
wire   [7:0] xor_ln132_114_fu_1545_p2;
wire   [7:0] select_ln131_114_fu_1551_p3;
wire   [0:0] tmp_456_fu_1571_p3;
wire   [7:0] xor_ln132_118_fu_1579_p2;
wire   [7:0] select_ln131_118_fu_1585_p3;
wire   [6:0] trunc_ln134_193_fu_1593_p1;
wire   [0:0] tmp_457_fu_1597_p3;
wire   [7:0] x_assign_71_fu_1605_p3;
wire   [0:0] tmp_458_fu_1613_p3;
wire   [7:0] xor_ln132_119_fu_1621_p2;
wire   [7:0] select_ln131_119_fu_1627_p3;
wire   [7:0] xor_ln124_529_fu_1671_p2;
wire   [7:0] xor_ln124_531_fu_1682_p2;
wire   [7:0] xor_ln124_532_fu_1687_p2;
wire   [7:0] xor_ln124_530_fu_1676_p2;
wire   [7:0] xor_ln124_533_fu_1699_p2;
wire   [7:0] xor_ln124_535_fu_1710_p2;
wire   [7:0] xor_ln124_536_fu_1715_p2;
wire   [7:0] xor_ln124_534_fu_1704_p2;
wire   [7:0] xor_ln124_538_fu_1733_p2;
wire   [7:0] xor_ln124_539_fu_1737_p2;
wire   [7:0] xor_ln124_537_fu_1727_p2;
wire   [7:0] xor_ln124_541_fu_1754_p2;
wire   [7:0] xor_ln124_542_fu_1758_p2;
wire   [7:0] xor_ln124_540_fu_1748_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [11:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_done_reg = 1'b0;
end

clefia_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage11),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        dec12_i_in_i_fu_118 <= zext_ln460_cast_fu_576_p1;
    end else if (((icmp_ln193_fu_1769_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        dec12_i_in_i_fu_118 <= add_ln188_1_reg_1915;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        idx109_i_fu_114 <= 64'd0;
    end else if (((icmp_ln193_fu_1769_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        idx109_i_fu_114 <= add_ln188_reg_1816;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln188_1_reg_1915 <= add_ln188_1_fu_668_p2;
        fin_3_load_8_reg_1964 <= fin_3_q1;
        fin_3_load_9_reg_1970 <= fin_3_q0;
        tmp_433_reg_1949 <= select_ln131_106_fu_782_p3[32'd7];
        tmp_435_reg_1959 <= select_ln131_107_fu_816_p3[32'd7];
        trunc_ln134_181_reg_1944 <= trunc_ln134_181_fu_790_p1;
        trunc_ln134_182_reg_1954 <= trunc_ln134_182_fu_824_p1;
        x_assign_60_reg_1932 <= x_assign_60_fu_718_p3;
        x_assign_63_reg_1938 <= x_assign_63_fu_760_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        add_ln188_reg_1816 <= add_ln188_fu_597_p2;
        empty_reg_1806 <= empty_fu_593_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fin_3_load_10_reg_2028 <= fin_3_q1;
        fin_3_load_11_reg_2034 <= fin_3_q0;
        icmp_ln197_reg_2050 <= icmp_ln197_fu_1018_p2;
        tmp_425_reg_2007 <= select_ln131_102_fu_912_p3[32'd7];
        tmp_429_reg_2023 <= select_ln131_104_fu_988_p3[32'd7];
        trunc_ln134_177_reg_2002 <= trunc_ln134_177_fu_920_p1;
        trunc_ln134_179_reg_2018 <= trunc_ln134_179_fu_996_p1;
        x_assign_61_reg_1996 <= x_assign_61_fu_890_p3;
        x_assign_62_reg_2012 <= x_assign_62_fu_966_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        fin_3_load_1_reg_1847 <= fin_3_q0;
        fin_3_load_reg_1841 <= fin_3_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fin_3_load_2_reg_1873 <= fin_3_q1;
        fin_3_load_3_reg_1879 <= fin_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        or_ln134_43_reg_2176 <= or_ln134_43_fu_1647_p3;
        or_ln134_44_reg_2181 <= or_ln134_44_fu_1653_p3;
        or_ln134_45_reg_2186 <= or_ln134_45_fu_1659_p3;
        or_ln134_46_reg_2191 <= or_ln134_46_fu_1665_p3;
        xor_ln124_260_reg_2196 <= xor_ln124_260_fu_1693_p2;
        xor_ln124_261_reg_2202 <= xor_ln124_261_fu_1721_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_552 <= grp_fu_540_p2;
        reg_556 <= grp_fu_546_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_560 <= clefia_s0_q0;
        reg_564 <= clefia_s1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_568 <= clefia_s0_q0;
        reg_572 <= clefia_s1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_441_reg_2091 <= select_ln131_110_fu_1199_p3[32'd7];
        tmp_455_reg_2101 <= select_ln131_117_fu_1317_p3[32'd7];
        trunc_ln134_185_reg_2086 <= trunc_ln134_185_fu_1207_p1;
        trunc_ln134_192_reg_2096 <= trunc_ln134_192_fu_1325_p1;
        xor_ln124_252_reg_2064 <= xor_ln124_252_fu_1057_p2;
        xor_ln124_253_reg_2070 <= xor_ln124_253_fu_1085_p2;
        xor_ln180_reg_2106 <= xor_ln180_fu_1337_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_449_reg_2151 <= select_ln131_114_fu_1551_p3[32'd7];
        tmp_459_reg_2161 <= select_ln131_119_fu_1627_p3[32'd7];
        trunc_ln134_189_reg_2146 <= trunc_ln134_189_fu_1559_p1;
        trunc_ln134_194_reg_2156 <= trunc_ln134_194_fu_1635_p1;
        x_assign_66_reg_2134 <= x_assign_66_fu_1445_p3;
        x_assign_67_reg_2140 <= x_assign_67_fu_1487_p3;
        xor_ln124_254_reg_2122 <= xor_ln124_254_fu_1377_p2;
        xor_ln124_255_reg_2128 <= xor_ln124_255_fu_1405_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        xor_ln124_262_reg_2208 <= xor_ln124_262_fu_1742_p2;
        xor_ln124_263_reg_2214 <= xor_ln124_263_fu_1763_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln193_fu_1769_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_condition_exit_pp0_iter0_stage11 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage11 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_idx109_i_load = 64'd0;
    end else begin
        ap_sig_allocacmp_idx109_i_load = idx109_i_fu_114;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        clefia_s0_address0 = zext_ln176_fu_1096_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        clefia_s0_address0 = zext_ln174_fu_1013_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        clefia_s0_address0 = zext_ln152_fu_674_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        clefia_s0_address0 = zext_ln150_fu_635_p1;
    end else begin
        clefia_s0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        clefia_s0_ce0 = 1'b1;
    end else begin
        clefia_s0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        clefia_s1_address0 = zext_ln175_fu_1091_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        clefia_s1_address0 = zext_ln173_fu_1008_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        clefia_s1_address0 = zext_ln153_fu_679_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        clefia_s1_address0 = zext_ln151_fu_640_p1;
    end else begin
        clefia_s1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        clefia_s1_ce0 = 1'b1;
    end else begin
        clefia_s1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_3_address0 = fin_3_addr_4_reg_1905;
    end else if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        fin_3_address0 = fin_3_addr_6_reg_1863;
    end else if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fin_3_address0 = fin_3_addr_12_reg_1831;
    end else if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        fin_3_address0 = fin_3_addr_14_reg_1796;
    end else if (((1'b1 == ap_CS_fsm_state8) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        fin_3_address0 = 64'd15;
    end else if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        fin_3_address0 = 64'd13;
    end else if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        fin_3_address0 = 64'd7;
    end else if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln197_fu_1018_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        fin_3_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        fin_3_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fin_3_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fin_3_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fin_3_address0 = 64'd1;
    end else begin
        fin_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_3_address1 = fin_3_addr_5_reg_1910;
    end else if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        fin_3_address1 = fin_3_addr_7_reg_1868;
    end else if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fin_3_address1 = fin_3_addr_13_reg_1836;
    end else if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        fin_3_address1 = fin_3_addr_15_reg_1801;
    end else if (((1'b1 == ap_CS_fsm_state8) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        fin_3_address1 = 64'd14;
    end else if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        fin_3_address1 = 64'd12;
    end else if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        fin_3_address1 = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln197_fu_1018_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        fin_3_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        fin_3_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fin_3_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fin_3_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fin_3_address1 = 64'd0;
    end else begin
        fin_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln197_fu_1018_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        fin_3_ce0 = 1'b1;
    end else begin
        fin_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln197_fu_1018_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        fin_3_ce1 = 1'b1;
    end else begin
        fin_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_3_d0 = xor_ln124_263_reg_2214;
    end else if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        fin_3_d0 = xor_ln124_261_reg_2202;
    end else if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fin_3_d0 = xor_ln124_255_reg_2128;
    end else if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        fin_3_d0 = xor_ln124_253_reg_2070;
    end else if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        fin_3_d0 = fin_3_load_3_reg_1879;
    end else if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        fin_3_d0 = fin_3_load_1_reg_1847;
    end else if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        fin_3_d0 = fin_3_load_11_reg_2034;
    end else if (((icmp_ln197_fu_1018_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        fin_3_d0 = fin_3_load_9_reg_1970;
    end else begin
        fin_3_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_3_d1 = xor_ln124_262_reg_2208;
    end else if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        fin_3_d1 = xor_ln124_260_reg_2196;
    end else if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fin_3_d1 = xor_ln124_254_reg_2122;
    end else if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        fin_3_d1 = xor_ln124_252_reg_2064;
    end else if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        fin_3_d1 = fin_3_load_2_reg_1873;
    end else if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        fin_3_d1 = fin_3_load_reg_1841;
    end else if (((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        fin_3_d1 = fin_3_load_10_reg_2028;
    end else if (((icmp_ln197_fu_1018_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        fin_3_d1 = fin_3_load_8_reg_1964;
    end else begin
        fin_3_d1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln193_fu_1769_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_3_load_10_out_ap_vld = 1'b1;
    end else begin
        fin_3_load_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln193_fu_1769_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_3_load_11_out_ap_vld = 1'b1;
    end else begin
        fin_3_load_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln193_fu_1769_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_3_load_1_out_ap_vld = 1'b1;
    end else begin
        fin_3_load_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln193_fu_1769_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_3_load_2_out_ap_vld = 1'b1;
    end else begin
        fin_3_load_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln193_fu_1769_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_3_load_3_out_ap_vld = 1'b1;
    end else begin
        fin_3_load_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln193_fu_1769_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_3_load_8_out_ap_vld = 1'b1;
    end else begin
        fin_3_load_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln193_fu_1769_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_3_load_9_out_ap_vld = 1'b1;
    end else begin
        fin_3_load_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln193_fu_1769_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_3_load_out_ap_vld = 1'b1;
    end else begin
        fin_3_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln197_fu_1018_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        fin_3_we0 = 1'b1;
    end else begin
        fin_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln197_reg_2050 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln197_fu_1018_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        fin_3_we1 = 1'b1;
    end else begin
        fin_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        rk_address0 = zext_ln121_242_fu_851_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rk_address0 = zext_ln121_240_fu_660_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rk_address0 = zext_ln121_238_fu_630_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        rk_address0 = zext_ln121_fu_610_p1;
    end else begin
        rk_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        rk_address1 = zext_ln121_241_fu_841_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rk_address1 = zext_ln121_239_fu_650_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rk_address1 = zext_ln121_237_fu_620_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        rk_address1 = add_ln188_fu_597_p2;
    end else begin
        rk_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        rk_ce0 = 1'b1;
    end else begin
        rk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        rk_ce1 = 1'b1;
    end else begin
        rk_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln193_fu_1769_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        xor_ln124_252_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_252_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln193_fu_1769_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        xor_ln124_253_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_253_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln193_fu_1769_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        xor_ln124_254_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_254_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln193_fu_1769_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        xor_ln124_255_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_255_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln193_fu_1769_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        xor_ln124_260_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_260_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln193_fu_1769_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        xor_ln124_261_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_261_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln193_fu_1769_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        xor_ln124_262_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_262_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln193_fu_1769_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        xor_ln124_263_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_263_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln121_111_fu_615_p2 = (empty_reg_1806 + 8'd10);

assign add_ln121_112_fu_625_p2 = (empty_reg_1806 + 8'd11);

assign add_ln121_113_fu_645_p2 = (empty_reg_1806 + 8'd12);

assign add_ln121_114_fu_655_p2 = (empty_reg_1806 + 8'd13);

assign add_ln121_115_fu_836_p2 = (empty_reg_1806 + 8'd14);

assign add_ln121_116_fu_846_p2 = (empty_reg_1806 + 8'd15);

assign add_ln121_fu_604_p2 = (empty_fu_593_p1 + 8'd9);

assign add_ln188_1_fu_668_p2 = ($signed(dec12_i_in_i_fu_118) + $signed(32'd4294967295));

assign add_ln188_fu_597_p2 = (ap_sig_allocacmp_idx109_i_load + 64'd8);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage11;

assign empty_fu_593_p1 = ap_sig_allocacmp_idx109_i_load[7:0];

assign fin_3_addr_12_reg_1831 = 64'd3;

assign fin_3_addr_13_reg_1836 = 64'd2;

assign fin_3_addr_14_reg_1796 = 64'd1;

assign fin_3_addr_15_reg_1801 = 64'd0;

assign fin_3_addr_4_reg_1905 = 64'd11;

assign fin_3_addr_5_reg_1910 = 64'd10;

assign fin_3_addr_6_reg_1863 = 64'd9;

assign fin_3_addr_7_reg_1868 = 64'd8;

assign fin_3_load_10_out = fin_3_load_10_reg_2028;

assign fin_3_load_11_out = fin_3_load_11_reg_2034;

assign fin_3_load_1_out = fin_3_load_1_reg_1847;

assign fin_3_load_2_out = fin_3_load_2_reg_1873;

assign fin_3_load_3_out = fin_3_load_3_reg_1879;

assign fin_3_load_8_out = fin_3_load_8_reg_1964;

assign fin_3_load_9_out = fin_3_load_9_reg_1970;

assign fin_3_load_out = fin_3_load_reg_1841;

assign grp_fu_540_p2 = (rk_q1 ^ fin_3_q1);

assign grp_fu_546_p2 = (rk_q0 ^ fin_3_q0);

assign icmp_ln193_fu_1769_p2 = (($signed(add_ln188_1_reg_1915) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln197_fu_1018_p2 = ((add_ln188_1_reg_1915 == 32'd0) ? 1'b1 : 1'b0);

assign or_ln134_39_fu_1023_p3 = {{trunc_ln134_177_reg_2002}, {tmp_425_reg_2007}};

assign or_ln134_40_fu_1029_p3 = {{trunc_ln134_179_reg_2018}, {tmp_429_reg_2023}};

assign or_ln134_41_fu_1343_p3 = {{trunc_ln134_181_reg_1944}, {tmp_433_reg_1949}};

assign or_ln134_42_fu_1349_p3 = {{trunc_ln134_182_reg_1954}, {tmp_435_reg_1959}};

assign or_ln134_43_fu_1647_p3 = {{trunc_ln134_185_reg_2086}, {tmp_441_reg_2091}};

assign or_ln134_44_fu_1653_p3 = {{trunc_ln134_189_reg_2146}, {tmp_449_reg_2151}};

assign or_ln134_45_fu_1659_p3 = {{trunc_ln134_192_reg_2096}, {tmp_455_reg_2101}};

assign or_ln134_46_fu_1665_p3 = {{trunc_ln134_194_reg_2156}, {tmp_459_reg_2161}};

assign select_ln131_100_fu_698_p3 = ((tmp_fu_684_p3[0:0] == 1'b1) ? xor_ln132_100_fu_692_p2 : clefia_s1_q0);

assign select_ln131_101_fu_870_p3 = ((tmp_422_fu_856_p3[0:0] == 1'b1) ? xor_ln132_101_fu_864_p2 : clefia_s0_q0);

assign select_ln131_102_fu_912_p3 = ((tmp_424_fu_898_p3[0:0] == 1'b1) ? xor_ln132_102_fu_906_p2 : x_assign_61_fu_890_p3);

assign select_ln131_103_fu_946_p3 = ((tmp_426_fu_932_p3[0:0] == 1'b1) ? xor_ln132_103_fu_940_p2 : clefia_s1_q0);

assign select_ln131_104_fu_988_p3 = ((tmp_428_fu_974_p3[0:0] == 1'b1) ? xor_ln132_104_fu_982_p2 : x_assign_62_fu_966_p3);

assign select_ln131_105_fu_740_p3 = ((tmp_430_fu_726_p3[0:0] == 1'b1) ? xor_ln132_105_fu_734_p2 : clefia_s0_q0);

assign select_ln131_106_fu_782_p3 = ((tmp_432_fu_768_p3[0:0] == 1'b1) ? xor_ln132_106_fu_776_p2 : x_assign_63_fu_760_p3);

assign select_ln131_107_fu_816_p3 = ((tmp_434_fu_802_p3[0:0] == 1'b1) ? xor_ln132_107_fu_810_p2 : x_assign_60_fu_718_p3);

assign select_ln131_108_fu_1115_p3 = ((tmp_436_fu_1101_p3[0:0] == 1'b1) ? xor_ln132_108_fu_1109_p2 : clefia_s0_q0);

assign select_ln131_109_fu_1157_p3 = ((tmp_438_fu_1143_p3[0:0] == 1'b1) ? xor_ln132_109_fu_1151_p2 : x_assign_64_fu_1135_p3);

assign select_ln131_110_fu_1199_p3 = ((tmp_440_fu_1185_p3[0:0] == 1'b1) ? xor_ln132_110_fu_1193_p2 : x_assign_65_fu_1177_p3);

assign select_ln131_111_fu_1425_p3 = ((tmp_442_fu_1411_p3[0:0] == 1'b1) ? xor_ln132_111_fu_1419_p2 : clefia_s1_q0);

assign select_ln131_112_fu_1467_p3 = ((tmp_444_fu_1453_p3[0:0] == 1'b1) ? xor_ln132_112_fu_1461_p2 : clefia_s0_q0);

assign select_ln131_113_fu_1509_p3 = ((tmp_446_fu_1495_p3[0:0] == 1'b1) ? xor_ln132_113_fu_1503_p2 : x_assign_67_fu_1487_p3);

assign select_ln131_114_fu_1551_p3 = ((tmp_448_fu_1537_p3[0:0] == 1'b1) ? xor_ln132_114_fu_1545_p2 : x_assign_68_fu_1529_p3);

assign select_ln131_115_fu_1233_p3 = ((tmp_450_fu_1219_p3[0:0] == 1'b1) ? xor_ln132_115_fu_1227_p2 : clefia_s1_q0);

assign select_ln131_116_fu_1275_p3 = ((tmp_452_fu_1261_p3[0:0] == 1'b1) ? xor_ln132_116_fu_1269_p2 : x_assign_69_fu_1253_p3);

assign select_ln131_117_fu_1317_p3 = ((tmp_454_fu_1303_p3[0:0] == 1'b1) ? xor_ln132_117_fu_1311_p2 : x_assign_70_fu_1295_p3);

assign select_ln131_118_fu_1585_p3 = ((tmp_456_fu_1571_p3[0:0] == 1'b1) ? xor_ln132_118_fu_1579_p2 : x_assign_66_fu_1445_p3);

assign select_ln131_119_fu_1627_p3 = ((tmp_458_fu_1613_p3[0:0] == 1'b1) ? xor_ln132_119_fu_1621_p2 : x_assign_71_fu_1605_p3);

assign tmp_421_fu_710_p3 = select_ln131_100_fu_698_p3[32'd7];

assign tmp_422_fu_856_p3 = clefia_s0_q0[32'd7];

assign tmp_423_fu_882_p3 = select_ln131_101_fu_870_p3[32'd7];

assign tmp_424_fu_898_p3 = select_ln131_101_fu_870_p3[32'd6];

assign tmp_426_fu_932_p3 = clefia_s1_q0[32'd7];

assign tmp_427_fu_958_p3 = select_ln131_103_fu_946_p3[32'd7];

assign tmp_428_fu_974_p3 = select_ln131_103_fu_946_p3[32'd6];

assign tmp_430_fu_726_p3 = clefia_s0_q0[32'd7];

assign tmp_431_fu_752_p3 = select_ln131_105_fu_740_p3[32'd7];

assign tmp_432_fu_768_p3 = select_ln131_105_fu_740_p3[32'd6];

assign tmp_434_fu_802_p3 = select_ln131_100_fu_698_p3[32'd6];

assign tmp_436_fu_1101_p3 = clefia_s0_q0[32'd7];

assign tmp_437_fu_1127_p3 = select_ln131_108_fu_1115_p3[32'd7];

assign tmp_438_fu_1143_p3 = select_ln131_108_fu_1115_p3[32'd6];

assign tmp_439_fu_1169_p3 = select_ln131_109_fu_1157_p3[32'd7];

assign tmp_440_fu_1185_p3 = select_ln131_109_fu_1157_p3[32'd6];

assign tmp_442_fu_1411_p3 = clefia_s1_q0[32'd7];

assign tmp_443_fu_1437_p3 = select_ln131_111_fu_1425_p3[32'd7];

assign tmp_444_fu_1453_p3 = clefia_s0_q0[32'd7];

assign tmp_445_fu_1479_p3 = select_ln131_112_fu_1467_p3[32'd7];

assign tmp_446_fu_1495_p3 = select_ln131_112_fu_1467_p3[32'd6];

assign tmp_447_fu_1521_p3 = select_ln131_113_fu_1509_p3[32'd7];

assign tmp_448_fu_1537_p3 = select_ln131_113_fu_1509_p3[32'd6];

assign tmp_450_fu_1219_p3 = clefia_s1_q0[32'd7];

assign tmp_451_fu_1245_p3 = select_ln131_115_fu_1233_p3[32'd7];

assign tmp_452_fu_1261_p3 = select_ln131_115_fu_1233_p3[32'd6];

assign tmp_453_fu_1287_p3 = select_ln131_116_fu_1275_p3[32'd7];

assign tmp_454_fu_1303_p3 = select_ln131_116_fu_1275_p3[32'd6];

assign tmp_456_fu_1571_p3 = select_ln131_111_fu_1425_p3[32'd6];

assign tmp_457_fu_1597_p3 = select_ln131_118_fu_1585_p3[32'd7];

assign tmp_458_fu_1613_p3 = select_ln131_118_fu_1585_p3[32'd6];

assign tmp_fu_684_p3 = clefia_s1_q0[32'd7];

assign trunc_ln134_176_fu_878_p1 = select_ln131_101_fu_870_p3[6:0];

assign trunc_ln134_177_fu_920_p1 = select_ln131_102_fu_912_p3[6:0];

assign trunc_ln134_178_fu_954_p1 = select_ln131_103_fu_946_p3[6:0];

assign trunc_ln134_179_fu_996_p1 = select_ln131_104_fu_988_p3[6:0];

assign trunc_ln134_180_fu_748_p1 = select_ln131_105_fu_740_p3[6:0];

assign trunc_ln134_181_fu_790_p1 = select_ln131_106_fu_782_p3[6:0];

assign trunc_ln134_182_fu_824_p1 = select_ln131_107_fu_816_p3[6:0];

assign trunc_ln134_183_fu_1123_p1 = select_ln131_108_fu_1115_p3[6:0];

assign trunc_ln134_184_fu_1165_p1 = select_ln131_109_fu_1157_p3[6:0];

assign trunc_ln134_185_fu_1207_p1 = select_ln131_110_fu_1199_p3[6:0];

assign trunc_ln134_186_fu_1433_p1 = select_ln131_111_fu_1425_p3[6:0];

assign trunc_ln134_187_fu_1475_p1 = select_ln131_112_fu_1467_p3[6:0];

assign trunc_ln134_188_fu_1517_p1 = select_ln131_113_fu_1509_p3[6:0];

assign trunc_ln134_189_fu_1559_p1 = select_ln131_114_fu_1551_p3[6:0];

assign trunc_ln134_190_fu_1241_p1 = select_ln131_115_fu_1233_p3[6:0];

assign trunc_ln134_191_fu_1283_p1 = select_ln131_116_fu_1275_p3[6:0];

assign trunc_ln134_192_fu_1325_p1 = select_ln131_117_fu_1317_p3[6:0];

assign trunc_ln134_193_fu_1593_p1 = select_ln131_118_fu_1585_p3[6:0];

assign trunc_ln134_194_fu_1635_p1 = select_ln131_119_fu_1627_p3[6:0];

assign trunc_ln134_fu_706_p1 = select_ln131_100_fu_698_p3[6:0];

assign x_assign_60_fu_718_p3 = {{trunc_ln134_fu_706_p1}, {tmp_421_fu_710_p3}};

assign x_assign_61_fu_890_p3 = {{trunc_ln134_176_fu_878_p1}, {tmp_423_fu_882_p3}};

assign x_assign_62_fu_966_p3 = {{trunc_ln134_178_fu_954_p1}, {tmp_427_fu_958_p3}};

assign x_assign_63_fu_760_p3 = {{trunc_ln134_180_fu_748_p1}, {tmp_431_fu_752_p3}};

assign x_assign_64_fu_1135_p3 = {{trunc_ln134_183_fu_1123_p1}, {tmp_437_fu_1127_p3}};

assign x_assign_65_fu_1177_p3 = {{trunc_ln134_184_fu_1165_p1}, {tmp_439_fu_1169_p3}};

assign x_assign_66_fu_1445_p3 = {{trunc_ln134_186_fu_1433_p1}, {tmp_443_fu_1437_p3}};

assign x_assign_67_fu_1487_p3 = {{trunc_ln134_187_fu_1475_p1}, {tmp_445_fu_1479_p3}};

assign x_assign_68_fu_1529_p3 = {{trunc_ln134_188_fu_1517_p1}, {tmp_447_fu_1521_p3}};

assign x_assign_69_fu_1253_p3 = {{trunc_ln134_190_fu_1241_p1}, {tmp_451_fu_1245_p3}};

assign x_assign_70_fu_1295_p3 = {{trunc_ln134_191_fu_1283_p1}, {tmp_453_fu_1287_p3}};

assign x_assign_71_fu_1605_p3 = {{trunc_ln134_193_fu_1593_p1}, {tmp_457_fu_1597_p3}};

assign xor_ln124_252_fu_1057_p2 = (xor_ln124_516_fu_1051_p2 ^ xor_ln124_514_fu_1040_p2);

assign xor_ln124_252_out = xor_ln124_252_reg_2064;

assign xor_ln124_253_fu_1085_p2 = (xor_ln124_520_fu_1079_p2 ^ xor_ln124_518_fu_1069_p2);

assign xor_ln124_253_out = xor_ln124_253_reg_2070;

assign xor_ln124_254_fu_1377_p2 = (xor_ln124_524_fu_1372_p2 ^ xor_ln124_522_fu_1361_p2);

assign xor_ln124_254_out = xor_ln124_254_reg_2122;

assign xor_ln124_255_fu_1405_p2 = (xor_ln124_528_fu_1400_p2 ^ xor_ln124_526_fu_1389_p2);

assign xor_ln124_255_out = xor_ln124_255_reg_2128;

assign xor_ln124_260_fu_1693_p2 = (xor_ln124_532_fu_1687_p2 ^ xor_ln124_530_fu_1676_p2);

assign xor_ln124_260_out = xor_ln124_260_reg_2196;

assign xor_ln124_261_fu_1721_p2 = (xor_ln124_536_fu_1715_p2 ^ xor_ln124_534_fu_1704_p2);

assign xor_ln124_261_out = xor_ln124_261_reg_2202;

assign xor_ln124_262_fu_1742_p2 = (xor_ln124_539_fu_1737_p2 ^ xor_ln124_537_fu_1727_p2);

assign xor_ln124_262_out = xor_ln124_262_reg_2208;

assign xor_ln124_263_fu_1763_p2 = (xor_ln124_542_fu_1758_p2 ^ xor_ln124_540_fu_1748_p2);

assign xor_ln124_263_out = xor_ln124_263_reg_2214;

assign xor_ln124_514_fu_1040_p2 = (xor_ln124_fu_1035_p2 ^ reg_560);

assign xor_ln124_515_fu_1046_p2 = (x_assign_60_reg_1932 ^ or_ln134_39_fu_1023_p3);

assign xor_ln124_516_fu_1051_p2 = (xor_ln124_515_fu_1046_p2 ^ or_ln134_40_fu_1029_p3);

assign xor_ln124_517_fu_1063_p2 = (or_ln134_39_fu_1023_p3 ^ fin_3_q0);

assign xor_ln124_518_fu_1069_p2 = (xor_ln124_517_fu_1063_p2 ^ reg_564);

assign xor_ln124_519_fu_1075_p2 = (x_assign_63_reg_1938 ^ x_assign_61_reg_1996);

assign xor_ln124_520_fu_1079_p2 = (xor_ln124_519_fu_1075_p2 ^ or_ln134_40_fu_1029_p3);

assign xor_ln124_521_fu_1355_p2 = (or_ln134_42_fu_1349_p3 ^ fin_3_q1);

assign xor_ln124_522_fu_1361_p2 = (xor_ln124_521_fu_1355_p2 ^ reg_568);

assign xor_ln124_523_fu_1367_p2 = (x_assign_60_reg_1932 ^ or_ln134_41_fu_1343_p3);

assign xor_ln124_524_fu_1372_p2 = (xor_ln124_523_fu_1367_p2 ^ x_assign_62_reg_2012);

assign xor_ln124_525_fu_1383_p2 = (or_ln134_42_fu_1349_p3 ^ fin_3_q0);

assign xor_ln124_526_fu_1389_p2 = (xor_ln124_525_fu_1383_p2 ^ reg_572);

assign xor_ln124_527_fu_1395_p2 = (x_assign_63_reg_1938 ^ or_ln134_41_fu_1343_p3);

assign xor_ln124_528_fu_1400_p2 = (xor_ln124_527_fu_1395_p2 ^ x_assign_61_reg_1996);

assign xor_ln124_529_fu_1671_p2 = (x_assign_67_reg_2140 ^ fin_3_q1);

assign xor_ln124_530_fu_1676_p2 = (xor_ln124_529_fu_1671_p2 ^ reg_564);

assign xor_ln124_531_fu_1682_p2 = (x_assign_66_reg_2134 ^ or_ln134_43_fu_1647_p3);

assign xor_ln124_532_fu_1687_p2 = (xor_ln124_531_fu_1682_p2 ^ or_ln134_44_fu_1653_p3);

assign xor_ln124_533_fu_1699_p2 = (x_assign_67_reg_2140 ^ fin_3_q0);

assign xor_ln124_534_fu_1704_p2 = (xor_ln124_533_fu_1699_p2 ^ reg_560);

assign xor_ln124_535_fu_1710_p2 = (x_assign_66_reg_2134 ^ or_ln134_45_fu_1659_p3);

assign xor_ln124_536_fu_1715_p2 = (xor_ln124_535_fu_1710_p2 ^ or_ln134_46_fu_1665_p3);

assign xor_ln124_537_fu_1727_p2 = (reg_572 ^ fin_3_q1);

assign xor_ln124_538_fu_1733_p2 = (xor_ln180_reg_2106 ^ or_ln134_44_reg_2181);

assign xor_ln124_539_fu_1737_p2 = (xor_ln124_538_fu_1733_p2 ^ or_ln134_43_reg_2176);

assign xor_ln124_540_fu_1748_p2 = (reg_568 ^ fin_3_q0);

assign xor_ln124_541_fu_1754_p2 = (xor_ln180_reg_2106 ^ or_ln134_46_reg_2191);

assign xor_ln124_542_fu_1758_p2 = (xor_ln124_541_fu_1754_p2 ^ or_ln134_45_reg_2186);

assign xor_ln124_fu_1035_p2 = (x_assign_62_reg_2012 ^ fin_3_q1);

assign xor_ln132_100_fu_692_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_101_fu_864_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_102_fu_906_p2 = (x_assign_61_fu_890_p3 ^ 8'd14);

assign xor_ln132_103_fu_940_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_104_fu_982_p2 = (x_assign_62_fu_966_p3 ^ 8'd14);

assign xor_ln132_105_fu_734_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_106_fu_776_p2 = (x_assign_63_fu_760_p3 ^ 8'd14);

assign xor_ln132_107_fu_810_p2 = (x_assign_60_fu_718_p3 ^ 8'd14);

assign xor_ln132_108_fu_1109_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_109_fu_1151_p2 = (x_assign_64_fu_1135_p3 ^ 8'd14);

assign xor_ln132_110_fu_1193_p2 = (x_assign_65_fu_1177_p3 ^ 8'd14);

assign xor_ln132_111_fu_1419_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_112_fu_1461_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_113_fu_1503_p2 = (x_assign_67_fu_1487_p3 ^ 8'd14);

assign xor_ln132_114_fu_1545_p2 = (x_assign_68_fu_1529_p3 ^ 8'd14);

assign xor_ln132_115_fu_1227_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_116_fu_1269_p2 = (x_assign_69_fu_1253_p3 ^ 8'd14);

assign xor_ln132_117_fu_1311_p2 = (x_assign_70_fu_1295_p3 ^ 8'd14);

assign xor_ln132_118_fu_1579_p2 = (x_assign_66_fu_1445_p3 ^ 8'd14);

assign xor_ln132_119_fu_1621_p2 = (x_assign_71_fu_1605_p3 ^ 8'd14);

assign xor_ln180_fu_1337_p2 = (x_assign_69_fu_1253_p3 ^ x_assign_64_fu_1135_p3);

assign zext_ln121_237_fu_620_p1 = add_ln121_111_fu_615_p2;

assign zext_ln121_238_fu_630_p1 = add_ln121_112_fu_625_p2;

assign zext_ln121_239_fu_650_p1 = add_ln121_113_fu_645_p2;

assign zext_ln121_240_fu_660_p1 = add_ln121_114_fu_655_p2;

assign zext_ln121_241_fu_841_p1 = add_ln121_115_fu_836_p2;

assign zext_ln121_242_fu_851_p1 = add_ln121_116_fu_846_p2;

assign zext_ln121_fu_610_p1 = add_ln121_fu_604_p2;

assign zext_ln150_fu_635_p1 = reg_552;

assign zext_ln151_fu_640_p1 = reg_556;

assign zext_ln152_fu_674_p1 = reg_552;

assign zext_ln153_fu_679_p1 = reg_556;

assign zext_ln173_fu_1008_p1 = reg_552;

assign zext_ln174_fu_1013_p1 = reg_556;

assign zext_ln175_fu_1091_p1 = reg_552;

assign zext_ln176_fu_1096_p1 = reg_556;

assign zext_ln460_cast_fu_576_p1 = zext_ln460;

endmodule //clefia_clefia_Pipeline_ClefiaGfn4_label366
