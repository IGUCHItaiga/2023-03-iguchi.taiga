// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clefia_clefia_Pipeline_ClefiaGfn4Inv_label5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln460_1,
        fin_7_address0,
        fin_7_ce0,
        fin_7_we0,
        fin_7_d0,
        fin_7_q0,
        fin_7_address1,
        fin_7_ce1,
        fin_7_we1,
        fin_7_d1,
        fin_7_q1,
        shl_ln3,
        rk_address0,
        rk_ce0,
        rk_q0,
        rk_address1,
        rk_ce1,
        rk_q1,
        fin_7_load_out,
        fin_7_load_out_ap_vld,
        fin_7_load_1_out,
        fin_7_load_1_out_ap_vld,
        fin_7_load_2_out,
        fin_7_load_2_out_ap_vld,
        fin_7_load_3_out,
        fin_7_load_3_out_ap_vld,
        xor_ln124_474_out,
        xor_ln124_474_out_ap_vld,
        xor_ln124_475_out,
        xor_ln124_475_out_ap_vld,
        xor_ln124_476_out,
        xor_ln124_476_out_ap_vld,
        xor_ln124_477_out,
        xor_ln124_477_out_ap_vld,
        fin_7_load_8_out,
        fin_7_load_8_out_ap_vld,
        fin_7_load_9_out,
        fin_7_load_9_out_ap_vld,
        fin_7_load_10_out,
        fin_7_load_10_out_ap_vld,
        fin_7_load_11_out,
        fin_7_load_11_out_ap_vld,
        xor_ln124_482_out,
        xor_ln124_482_out_ap_vld,
        xor_ln124_483_out,
        xor_ln124_483_out_ap_vld,
        xor_ln124_484_out,
        xor_ln124_484_out_ap_vld,
        xor_ln124_485_out,
        xor_ln124_485_out_ap_vld,
        clefia_s0_address0,
        clefia_s0_ce0,
        clefia_s0_q0,
        clefia_s1_address0,
        clefia_s1_ce0,
        clefia_s1_q0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] zext_ln460_1;
output  [3:0] fin_7_address0;
output   fin_7_ce0;
output   fin_7_we0;
output  [7:0] fin_7_d0;
input  [7:0] fin_7_q0;
output  [3:0] fin_7_address1;
output   fin_7_ce1;
output   fin_7_we1;
output  [7:0] fin_7_d1;
input  [7:0] fin_7_q1;
input  [7:0] shl_ln3;
output  [7:0] rk_address0;
output   rk_ce0;
input  [7:0] rk_q0;
output  [7:0] rk_address1;
output   rk_ce1;
input  [7:0] rk_q1;
output  [7:0] fin_7_load_out;
output   fin_7_load_out_ap_vld;
output  [7:0] fin_7_load_1_out;
output   fin_7_load_1_out_ap_vld;
output  [7:0] fin_7_load_2_out;
output   fin_7_load_2_out_ap_vld;
output  [7:0] fin_7_load_3_out;
output   fin_7_load_3_out_ap_vld;
output  [7:0] xor_ln124_474_out;
output   xor_ln124_474_out_ap_vld;
output  [7:0] xor_ln124_475_out;
output   xor_ln124_475_out_ap_vld;
output  [7:0] xor_ln124_476_out;
output   xor_ln124_476_out_ap_vld;
output  [7:0] xor_ln124_477_out;
output   xor_ln124_477_out_ap_vld;
output  [7:0] fin_7_load_8_out;
output   fin_7_load_8_out_ap_vld;
output  [7:0] fin_7_load_9_out;
output   fin_7_load_9_out_ap_vld;
output  [7:0] fin_7_load_10_out;
output   fin_7_load_10_out_ap_vld;
output  [7:0] fin_7_load_11_out;
output   fin_7_load_11_out_ap_vld;
output  [7:0] xor_ln124_482_out;
output   xor_ln124_482_out_ap_vld;
output  [7:0] xor_ln124_483_out;
output   xor_ln124_483_out_ap_vld;
output  [7:0] xor_ln124_484_out;
output   xor_ln124_484_out_ap_vld;
output  [7:0] xor_ln124_485_out;
output   xor_ln124_485_out_ap_vld;
output  [7:0] clefia_s0_address0;
output   clefia_s0_ce0;
input  [7:0] clefia_s0_q0;
output  [7:0] clefia_s1_address0;
output   clefia_s1_ce0;
input  [7:0] clefia_s1_q0;

reg ap_idle;
reg[3:0] fin_7_address0;
reg fin_7_ce0;
reg fin_7_we0;
reg[7:0] fin_7_d0;
reg[3:0] fin_7_address1;
reg fin_7_ce1;
reg fin_7_we1;
reg[7:0] fin_7_d1;
reg[7:0] rk_address0;
reg rk_ce0;
reg[7:0] rk_address1;
reg rk_ce1;
reg fin_7_load_out_ap_vld;
reg fin_7_load_1_out_ap_vld;
reg fin_7_load_2_out_ap_vld;
reg fin_7_load_3_out_ap_vld;
reg xor_ln124_474_out_ap_vld;
reg xor_ln124_475_out_ap_vld;
reg xor_ln124_476_out_ap_vld;
reg xor_ln124_477_out_ap_vld;
reg fin_7_load_8_out_ap_vld;
reg fin_7_load_9_out_ap_vld;
reg fin_7_load_10_out_ap_vld;
reg fin_7_load_11_out_ap_vld;
reg xor_ln124_482_out_ap_vld;
reg xor_ln124_483_out_ap_vld;
reg xor_ln124_484_out_ap_vld;
reg xor_ln124_485_out_ap_vld;
reg[7:0] clefia_s0_address0;
reg clefia_s0_ce0;
reg[7:0] clefia_s1_address0;
reg clefia_s1_ce0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state12;
wire    ap_block_state12_pp0_stage11_iter0;
wire   [0:0] icmp_ln230_fu_1792_p2;
reg    ap_condition_exit_pp0_iter0_stage11;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [7:0] grp_fu_554_p2;
reg   [7:0] reg_566;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
wire   [7:0] grp_fu_560_p2;
reg   [7:0] reg_570;
reg   [7:0] reg_574;
wire    ap_CS_fsm_state6;
wire    ap_block_state6_pp0_stage5_iter0;
reg   [7:0] reg_578;
reg   [7:0] reg_582;
wire    ap_CS_fsm_state7;
wire    ap_block_state7_pp0_stage6_iter0;
reg   [7:0] reg_586;
reg   [63:0] idx109_i370_load_reg_1819;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [3:0] fin_7_addr_14_reg_1824;
wire   [3:0] fin_7_addr_15_reg_1829;
wire   [7:0] add_ln224_fu_611_p2;
reg   [7:0] add_ln224_reg_1834;
wire   [3:0] fin_7_addr_12_reg_1854;
wire   [3:0] fin_7_addr_13_reg_1859;
reg   [7:0] fin_7_load_reg_1864;
reg   [7:0] fin_7_load_1_reg_1870;
wire   [3:0] fin_7_addr_6_reg_1886;
wire   [3:0] fin_7_addr_7_reg_1891;
reg   [7:0] fin_7_load_2_reg_1896;
reg   [7:0] fin_7_load_3_reg_1902;
wire   [3:0] fin_7_addr_4_reg_1928;
wire   [3:0] fin_7_addr_5_reg_1933;
wire   [31:0] add_ln224_1_fu_686_p2;
reg   [31:0] add_ln224_1_reg_1938;
wire   [7:0] x_assign_s_fu_736_p3;
reg   [7:0] x_assign_s_reg_1955;
wire   [7:0] x_assign_83_fu_778_p3;
reg   [7:0] x_assign_83_reg_1961;
wire   [6:0] trunc_ln134_219_fu_808_p1;
reg   [6:0] trunc_ln134_219_reg_1967;
reg   [0:0] tmp_511_reg_1972;
wire   [6:0] trunc_ln134_220_fu_842_p1;
reg   [6:0] trunc_ln134_220_reg_1977;
reg   [0:0] tmp_513_reg_1982;
reg   [7:0] fin_7_load_8_reg_1987;
reg   [7:0] fin_7_load_9_reg_1993;
wire   [7:0] x_assign_81_fu_908_p3;
reg   [7:0] x_assign_81_reg_2019;
wire   [6:0] trunc_ln134_215_fu_938_p1;
reg   [6:0] trunc_ln134_215_reg_2025;
reg   [0:0] tmp_503_reg_2030;
wire   [7:0] x_assign_82_fu_984_p3;
reg   [7:0] x_assign_82_reg_2035;
wire   [6:0] trunc_ln134_217_fu_1014_p1;
reg   [6:0] trunc_ln134_217_reg_2041;
reg   [0:0] tmp_507_reg_2046;
reg   [7:0] fin_7_load_10_reg_2051;
reg   [7:0] fin_7_load_11_reg_2057;
wire   [0:0] icmp_ln234_fu_1036_p2;
reg   [0:0] icmp_ln234_reg_2073;
wire   [7:0] xor_ln124_474_fu_1075_p2;
reg   [7:0] xor_ln124_474_reg_2087;
wire   [7:0] xor_ln124_475_fu_1103_p2;
reg   [7:0] xor_ln124_475_reg_2093;
wire   [6:0] trunc_ln134_223_fu_1225_p1;
reg   [6:0] trunc_ln134_223_reg_2109;
reg   [0:0] tmp_519_reg_2114;
wire   [6:0] trunc_ln134_230_fu_1343_p1;
reg   [6:0] trunc_ln134_230_reg_2119;
reg   [0:0] tmp_533_reg_2124;
wire   [7:0] xor_ln180_fu_1355_p2;
reg   [7:0] xor_ln180_reg_2129;
wire   [7:0] xor_ln124_476_fu_1395_p2;
reg   [7:0] xor_ln124_476_reg_2145;
wire   [7:0] xor_ln124_477_fu_1423_p2;
reg   [7:0] xor_ln124_477_reg_2151;
wire   [7:0] x_assign_86_fu_1463_p3;
reg   [7:0] x_assign_86_reg_2157;
wire   [7:0] x_assign_87_fu_1505_p3;
reg   [7:0] x_assign_87_reg_2163;
wire   [6:0] trunc_ln134_227_fu_1577_p1;
reg   [6:0] trunc_ln134_227_reg_2169;
reg   [0:0] tmp_527_reg_2174;
wire   [6:0] trunc_ln134_232_fu_1653_p1;
reg   [6:0] trunc_ln134_232_reg_2179;
reg   [0:0] tmp_537_reg_2184;
wire    ap_CS_fsm_state8;
wire    ap_block_state8_pp0_stage7_iter0;
wire   [7:0] or_ln134_56_fu_1665_p3;
reg   [7:0] or_ln134_56_reg_2199;
wire   [7:0] or_ln134_57_fu_1671_p3;
reg   [7:0] or_ln134_57_reg_2204;
wire   [7:0] or_ln134_58_fu_1677_p3;
reg   [7:0] or_ln134_58_reg_2209;
wire   [7:0] or_ln134_59_fu_1683_p3;
reg   [7:0] or_ln134_59_reg_2214;
wire   [7:0] xor_ln124_482_fu_1711_p2;
reg   [7:0] xor_ln124_482_reg_2219;
wire   [7:0] xor_ln124_483_fu_1739_p2;
reg   [7:0] xor_ln124_483_reg_2225;
wire   [7:0] xor_ln124_484_fu_1760_p2;
reg   [7:0] xor_ln124_484_reg_2231;
wire    ap_CS_fsm_state9;
wire    ap_block_state9_pp0_stage8_iter0;
wire   [7:0] xor_ln124_485_fu_1781_p2;
reg   [7:0] xor_ln124_485_reg_2237;
wire   [63:0] add_ln233_fu_1787_p2;
reg   [63:0] add_ln233_reg_2243;
wire   [63:0] zext_ln121_fu_617_p1;
wire   [63:0] zext_ln121_243_fu_628_p1;
wire   [63:0] zext_ln121_244_fu_638_p1;
wire   [63:0] zext_ln121_245_fu_648_p1;
wire   [63:0] zext_ln150_fu_653_p1;
wire   [63:0] zext_ln151_fu_658_p1;
wire   [63:0] zext_ln121_246_fu_668_p1;
wire   [63:0] zext_ln121_247_fu_678_p1;
wire   [63:0] zext_ln152_fu_692_p1;
wire   [63:0] zext_ln153_fu_697_p1;
wire   [63:0] zext_ln121_248_fu_859_p1;
wire   [63:0] zext_ln121_249_fu_869_p1;
wire   [63:0] zext_ln173_fu_1026_p1;
wire   [63:0] zext_ln174_fu_1031_p1;
wire   [63:0] zext_ln175_fu_1109_p1;
wire   [63:0] zext_ln176_fu_1114_p1;
reg   [63:0] idx109_i370_fu_122;
wire    ap_loop_init;
reg   [63:0] ap_sig_allocacmp_idx109_i370_load;
reg   [31:0] dec12_i_in_i369_fu_126;
wire   [31:0] zext_ln460_1_cast_fu_590_p1;
wire    ap_CS_fsm_state10;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_CS_fsm_state11;
wire    ap_block_state11_pp0_stage10_iter0;
wire   [7:0] empty_fu_607_p1;
wire   [7:0] or_ln121_fu_622_p2;
wire   [7:0] or_ln121_75_fu_633_p2;
wire   [7:0] or_ln121_76_fu_643_p2;
wire   [7:0] or_ln232_fu_663_p2;
wire   [7:0] or_ln121_77_fu_673_p2;
wire   [0:0] tmp_fu_702_p3;
wire   [7:0] xor_ln132_fu_710_p2;
wire   [7:0] select_ln131_fu_716_p3;
wire   [6:0] trunc_ln134_fu_724_p1;
wire   [0:0] tmp_499_fu_728_p3;
wire   [0:0] tmp_508_fu_744_p3;
wire   [7:0] xor_ln132_141_fu_752_p2;
wire   [7:0] select_ln131_141_fu_758_p3;
wire   [6:0] trunc_ln134_218_fu_766_p1;
wire   [0:0] tmp_509_fu_770_p3;
wire   [0:0] tmp_510_fu_786_p3;
wire   [7:0] xor_ln132_142_fu_794_p2;
wire   [7:0] select_ln131_142_fu_800_p3;
wire   [0:0] tmp_512_fu_820_p3;
wire   [7:0] xor_ln132_143_fu_828_p2;
wire   [7:0] select_ln131_143_fu_834_p3;
wire   [7:0] or_ln121_78_fu_854_p2;
wire   [7:0] or_ln121_79_fu_864_p2;
wire   [0:0] tmp_500_fu_874_p3;
wire   [7:0] xor_ln132_137_fu_882_p2;
wire   [7:0] select_ln131_137_fu_888_p3;
wire   [6:0] trunc_ln134_214_fu_896_p1;
wire   [0:0] tmp_501_fu_900_p3;
wire   [0:0] tmp_502_fu_916_p3;
wire   [7:0] xor_ln132_138_fu_924_p2;
wire   [7:0] select_ln131_138_fu_930_p3;
wire   [0:0] tmp_504_fu_950_p3;
wire   [7:0] xor_ln132_139_fu_958_p2;
wire   [7:0] select_ln131_139_fu_964_p3;
wire   [6:0] trunc_ln134_216_fu_972_p1;
wire   [0:0] tmp_505_fu_976_p3;
wire   [0:0] tmp_506_fu_992_p3;
wire   [7:0] xor_ln132_140_fu_1000_p2;
wire   [7:0] select_ln131_140_fu_1006_p3;
wire   [7:0] xor_ln124_fu_1053_p2;
wire   [7:0] or_ln134_s_fu_1041_p3;
wire   [7:0] xor_ln124_544_fu_1064_p2;
wire   [7:0] or_ln134_53_fu_1047_p3;
wire   [7:0] xor_ln124_545_fu_1069_p2;
wire   [7:0] xor_ln124_543_fu_1058_p2;
wire   [7:0] xor_ln124_546_fu_1081_p2;
wire   [7:0] xor_ln124_548_fu_1093_p2;
wire   [7:0] xor_ln124_549_fu_1097_p2;
wire   [7:0] xor_ln124_547_fu_1087_p2;
wire   [0:0] tmp_514_fu_1119_p3;
wire   [7:0] xor_ln132_144_fu_1127_p2;
wire   [7:0] select_ln131_144_fu_1133_p3;
wire   [6:0] trunc_ln134_221_fu_1141_p1;
wire   [0:0] tmp_515_fu_1145_p3;
wire   [7:0] x_assign_84_fu_1153_p3;
wire   [0:0] tmp_516_fu_1161_p3;
wire   [7:0] xor_ln132_145_fu_1169_p2;
wire   [7:0] select_ln131_145_fu_1175_p3;
wire   [6:0] trunc_ln134_222_fu_1183_p1;
wire   [0:0] tmp_517_fu_1187_p3;
wire   [7:0] x_assign_85_fu_1195_p3;
wire   [0:0] tmp_518_fu_1203_p3;
wire   [7:0] xor_ln132_146_fu_1211_p2;
wire   [7:0] select_ln131_146_fu_1217_p3;
wire   [0:0] tmp_528_fu_1237_p3;
wire   [7:0] xor_ln132_151_fu_1245_p2;
wire   [7:0] select_ln131_151_fu_1251_p3;
wire   [6:0] trunc_ln134_228_fu_1259_p1;
wire   [0:0] tmp_529_fu_1263_p3;
wire   [7:0] x_assign_89_fu_1271_p3;
wire   [0:0] tmp_530_fu_1279_p3;
wire   [7:0] xor_ln132_152_fu_1287_p2;
wire   [7:0] select_ln131_152_fu_1293_p3;
wire   [6:0] trunc_ln134_229_fu_1301_p1;
wire   [0:0] tmp_531_fu_1305_p3;
wire   [7:0] x_assign_90_fu_1313_p3;
wire   [0:0] tmp_532_fu_1321_p3;
wire   [7:0] xor_ln132_153_fu_1329_p2;
wire   [7:0] select_ln131_153_fu_1335_p3;
wire   [7:0] or_ln134_55_fu_1367_p3;
wire   [7:0] xor_ln124_550_fu_1373_p2;
wire   [7:0] or_ln134_54_fu_1361_p3;
wire   [7:0] xor_ln124_552_fu_1385_p2;
wire   [7:0] xor_ln124_553_fu_1390_p2;
wire   [7:0] xor_ln124_551_fu_1379_p2;
wire   [7:0] xor_ln124_554_fu_1401_p2;
wire   [7:0] xor_ln124_556_fu_1413_p2;
wire   [7:0] xor_ln124_557_fu_1418_p2;
wire   [7:0] xor_ln124_555_fu_1407_p2;
wire   [0:0] tmp_520_fu_1429_p3;
wire   [7:0] xor_ln132_147_fu_1437_p2;
wire   [7:0] select_ln131_147_fu_1443_p3;
wire   [6:0] trunc_ln134_224_fu_1451_p1;
wire   [0:0] tmp_521_fu_1455_p3;
wire   [0:0] tmp_522_fu_1471_p3;
wire   [7:0] xor_ln132_148_fu_1479_p2;
wire   [7:0] select_ln131_148_fu_1485_p3;
wire   [6:0] trunc_ln134_225_fu_1493_p1;
wire   [0:0] tmp_523_fu_1497_p3;
wire   [0:0] tmp_524_fu_1513_p3;
wire   [7:0] xor_ln132_149_fu_1521_p2;
wire   [7:0] select_ln131_149_fu_1527_p3;
wire   [6:0] trunc_ln134_226_fu_1535_p1;
wire   [0:0] tmp_525_fu_1539_p3;
wire   [7:0] x_assign_88_fu_1547_p3;
wire   [0:0] tmp_526_fu_1555_p3;
wire   [7:0] xor_ln132_150_fu_1563_p2;
wire   [7:0] select_ln131_150_fu_1569_p3;
wire   [0:0] tmp_534_fu_1589_p3;
wire   [7:0] xor_ln132_154_fu_1597_p2;
wire   [7:0] select_ln131_154_fu_1603_p3;
wire   [6:0] trunc_ln134_231_fu_1611_p1;
wire   [0:0] tmp_535_fu_1615_p3;
wire   [7:0] x_assign_91_fu_1623_p3;
wire   [0:0] tmp_536_fu_1631_p3;
wire   [7:0] xor_ln132_155_fu_1639_p2;
wire   [7:0] select_ln131_155_fu_1645_p3;
wire   [7:0] xor_ln124_558_fu_1689_p2;
wire   [7:0] xor_ln124_560_fu_1700_p2;
wire   [7:0] xor_ln124_561_fu_1705_p2;
wire   [7:0] xor_ln124_559_fu_1694_p2;
wire   [7:0] xor_ln124_562_fu_1717_p2;
wire   [7:0] xor_ln124_564_fu_1728_p2;
wire   [7:0] xor_ln124_565_fu_1733_p2;
wire   [7:0] xor_ln124_563_fu_1722_p2;
wire   [7:0] xor_ln124_567_fu_1751_p2;
wire   [7:0] xor_ln124_568_fu_1755_p2;
wire   [7:0] xor_ln124_566_fu_1745_p2;
wire   [7:0] xor_ln124_570_fu_1772_p2;
wire   [7:0] xor_ln124_571_fu_1776_p2;
wire   [7:0] xor_ln124_569_fu_1766_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [11:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_done_reg = 1'b0;
end

clefia_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage11),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        dec12_i_in_i369_fu_126 <= zext_ln460_1_cast_fu_590_p1;
    end else if (((icmp_ln230_fu_1792_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        dec12_i_in_i369_fu_126 <= add_ln224_1_reg_1938;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        idx109_i370_fu_122 <= 64'd0;
    end else if (((icmp_ln230_fu_1792_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        idx109_i370_fu_122 <= add_ln233_reg_2243;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln224_1_reg_1938 <= add_ln224_1_fu_686_p2;
        fin_7_load_8_reg_1987 <= fin_7_q1;
        fin_7_load_9_reg_1993 <= fin_7_q0;
        tmp_511_reg_1972 <= select_ln131_142_fu_800_p3[32'd7];
        tmp_513_reg_1982 <= select_ln131_143_fu_834_p3[32'd7];
        trunc_ln134_219_reg_1967 <= trunc_ln134_219_fu_808_p1;
        trunc_ln134_220_reg_1977 <= trunc_ln134_220_fu_842_p1;
        x_assign_83_reg_1961 <= x_assign_83_fu_778_p3;
        x_assign_s_reg_1955 <= x_assign_s_fu_736_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        add_ln224_reg_1834 <= add_ln224_fu_611_p2;
        idx109_i370_load_reg_1819 <= ap_sig_allocacmp_idx109_i370_load;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln233_reg_2243 <= add_ln233_fu_1787_p2;
        xor_ln124_484_reg_2231 <= xor_ln124_484_fu_1760_p2;
        xor_ln124_485_reg_2237 <= xor_ln124_485_fu_1781_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fin_7_load_10_reg_2051 <= fin_7_q1;
        fin_7_load_11_reg_2057 <= fin_7_q0;
        icmp_ln234_reg_2073 <= icmp_ln234_fu_1036_p2;
        tmp_503_reg_2030 <= select_ln131_138_fu_930_p3[32'd7];
        tmp_507_reg_2046 <= select_ln131_140_fu_1006_p3[32'd7];
        trunc_ln134_215_reg_2025 <= trunc_ln134_215_fu_938_p1;
        trunc_ln134_217_reg_2041 <= trunc_ln134_217_fu_1014_p1;
        x_assign_81_reg_2019 <= x_assign_81_fu_908_p3;
        x_assign_82_reg_2035 <= x_assign_82_fu_984_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        fin_7_load_1_reg_1870 <= fin_7_q0;
        fin_7_load_reg_1864 <= fin_7_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fin_7_load_2_reg_1896 <= fin_7_q1;
        fin_7_load_3_reg_1902 <= fin_7_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        or_ln134_56_reg_2199 <= or_ln134_56_fu_1665_p3;
        or_ln134_57_reg_2204 <= or_ln134_57_fu_1671_p3;
        or_ln134_58_reg_2209 <= or_ln134_58_fu_1677_p3;
        or_ln134_59_reg_2214 <= or_ln134_59_fu_1683_p3;
        xor_ln124_482_reg_2219 <= xor_ln124_482_fu_1711_p2;
        xor_ln124_483_reg_2225 <= xor_ln124_483_fu_1739_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_566 <= grp_fu_554_p2;
        reg_570 <= grp_fu_560_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_574 <= clefia_s0_q0;
        reg_578 <= clefia_s1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_582 <= clefia_s0_q0;
        reg_586 <= clefia_s1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_519_reg_2114 <= select_ln131_146_fu_1217_p3[32'd7];
        tmp_533_reg_2124 <= select_ln131_153_fu_1335_p3[32'd7];
        trunc_ln134_223_reg_2109 <= trunc_ln134_223_fu_1225_p1;
        trunc_ln134_230_reg_2119 <= trunc_ln134_230_fu_1343_p1;
        xor_ln124_474_reg_2087 <= xor_ln124_474_fu_1075_p2;
        xor_ln124_475_reg_2093 <= xor_ln124_475_fu_1103_p2;
        xor_ln180_reg_2129 <= xor_ln180_fu_1355_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_527_reg_2174 <= select_ln131_150_fu_1569_p3[32'd7];
        tmp_537_reg_2184 <= select_ln131_155_fu_1645_p3[32'd7];
        trunc_ln134_227_reg_2169 <= trunc_ln134_227_fu_1577_p1;
        trunc_ln134_232_reg_2179 <= trunc_ln134_232_fu_1653_p1;
        x_assign_86_reg_2157 <= x_assign_86_fu_1463_p3;
        x_assign_87_reg_2163 <= x_assign_87_fu_1505_p3;
        xor_ln124_476_reg_2145 <= xor_ln124_476_fu_1395_p2;
        xor_ln124_477_reg_2151 <= xor_ln124_477_fu_1423_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln230_fu_1792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_condition_exit_pp0_iter0_stage11 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage11 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_idx109_i370_load = 64'd0;
    end else begin
        ap_sig_allocacmp_idx109_i370_load = idx109_i370_fu_122;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        clefia_s0_address0 = zext_ln176_fu_1114_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        clefia_s0_address0 = zext_ln174_fu_1031_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        clefia_s0_address0 = zext_ln152_fu_692_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        clefia_s0_address0 = zext_ln150_fu_653_p1;
    end else begin
        clefia_s0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        clefia_s0_ce0 = 1'b1;
    end else begin
        clefia_s0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        clefia_s1_address0 = zext_ln175_fu_1109_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        clefia_s1_address0 = zext_ln173_fu_1026_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        clefia_s1_address0 = zext_ln153_fu_697_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        clefia_s1_address0 = zext_ln151_fu_658_p1;
    end else begin
        clefia_s1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        clefia_s1_ce0 = 1'b1;
    end else begin
        clefia_s1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_7_address0 = fin_7_addr_4_reg_1928;
    end else if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        fin_7_address0 = fin_7_addr_6_reg_1886;
    end else if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fin_7_address0 = fin_7_addr_12_reg_1854;
    end else if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        fin_7_address0 = fin_7_addr_14_reg_1824;
    end else if (((1'b1 == ap_CS_fsm_state8) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        fin_7_address0 = 64'd15;
    end else if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        fin_7_address0 = 64'd13;
    end else if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        fin_7_address0 = 64'd7;
    end else if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln234_fu_1036_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        fin_7_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        fin_7_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fin_7_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fin_7_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fin_7_address0 = 64'd1;
    end else begin
        fin_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_7_address1 = fin_7_addr_5_reg_1933;
    end else if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        fin_7_address1 = fin_7_addr_7_reg_1891;
    end else if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fin_7_address1 = fin_7_addr_13_reg_1859;
    end else if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        fin_7_address1 = fin_7_addr_15_reg_1829;
    end else if (((1'b1 == ap_CS_fsm_state8) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        fin_7_address1 = 64'd14;
    end else if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        fin_7_address1 = 64'd12;
    end else if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        fin_7_address1 = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln234_fu_1036_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        fin_7_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        fin_7_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fin_7_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fin_7_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fin_7_address1 = 64'd0;
    end else begin
        fin_7_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln234_fu_1036_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        fin_7_ce0 = 1'b1;
    end else begin
        fin_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln234_fu_1036_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        fin_7_ce1 = 1'b1;
    end else begin
        fin_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_7_d0 = xor_ln124_477_reg_2151;
    end else if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        fin_7_d0 = xor_ln124_475_reg_2093;
    end else if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fin_7_d0 = xor_ln124_485_reg_2237;
    end else if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        fin_7_d0 = xor_ln124_483_reg_2225;
    end else if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        fin_7_d0 = fin_7_load_11_reg_2057;
    end else if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        fin_7_d0 = fin_7_load_9_reg_1993;
    end else if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        fin_7_d0 = fin_7_load_3_reg_1902;
    end else if (((icmp_ln234_fu_1036_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        fin_7_d0 = fin_7_load_1_reg_1870;
    end else begin
        fin_7_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_7_d1 = xor_ln124_476_reg_2145;
    end else if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        fin_7_d1 = xor_ln124_474_reg_2087;
    end else if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fin_7_d1 = xor_ln124_484_reg_2231;
    end else if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        fin_7_d1 = xor_ln124_482_reg_2219;
    end else if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        fin_7_d1 = fin_7_load_10_reg_2051;
    end else if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        fin_7_d1 = fin_7_load_8_reg_1987;
    end else if (((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        fin_7_d1 = fin_7_load_2_reg_1896;
    end else if (((icmp_ln234_fu_1036_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        fin_7_d1 = fin_7_load_reg_1864;
    end else begin
        fin_7_d1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln230_fu_1792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_7_load_10_out_ap_vld = 1'b1;
    end else begin
        fin_7_load_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln230_fu_1792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_7_load_11_out_ap_vld = 1'b1;
    end else begin
        fin_7_load_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln230_fu_1792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_7_load_1_out_ap_vld = 1'b1;
    end else begin
        fin_7_load_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln230_fu_1792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_7_load_2_out_ap_vld = 1'b1;
    end else begin
        fin_7_load_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln230_fu_1792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_7_load_3_out_ap_vld = 1'b1;
    end else begin
        fin_7_load_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln230_fu_1792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_7_load_8_out_ap_vld = 1'b1;
    end else begin
        fin_7_load_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln230_fu_1792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_7_load_9_out_ap_vld = 1'b1;
    end else begin
        fin_7_load_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln230_fu_1792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_7_load_out_ap_vld = 1'b1;
    end else begin
        fin_7_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln234_fu_1036_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        fin_7_we0 = 1'b1;
    end else begin
        fin_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln234_reg_2073 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln234_fu_1036_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        fin_7_we1 = 1'b1;
    end else begin
        fin_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        rk_address0 = zext_ln121_249_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rk_address0 = zext_ln121_247_fu_678_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rk_address0 = zext_ln121_245_fu_648_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        rk_address0 = zext_ln121_243_fu_628_p1;
    end else begin
        rk_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        rk_address1 = zext_ln121_248_fu_859_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rk_address1 = zext_ln121_246_fu_668_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rk_address1 = zext_ln121_244_fu_638_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        rk_address1 = zext_ln121_fu_617_p1;
    end else begin
        rk_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        rk_ce0 = 1'b1;
    end else begin
        rk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        rk_ce1 = 1'b1;
    end else begin
        rk_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln230_fu_1792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        xor_ln124_474_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_474_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln230_fu_1792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        xor_ln124_475_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_475_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln230_fu_1792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        xor_ln124_476_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_476_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln230_fu_1792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        xor_ln124_477_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_477_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln230_fu_1792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        xor_ln124_482_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_482_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln230_fu_1792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        xor_ln124_483_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_483_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln230_fu_1792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        xor_ln124_484_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_484_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln230_fu_1792_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        xor_ln124_485_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_485_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln224_1_fu_686_p2 = ($signed(dec12_i_in_i369_fu_126) + $signed(32'd4294967295));

assign add_ln224_fu_611_p2 = (empty_fu_607_p1 + shl_ln3);

assign add_ln233_fu_1787_p2 = ($signed(idx109_i370_load_reg_1819) + $signed(64'd18446744073709551608));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage11;

assign empty_fu_607_p1 = ap_sig_allocacmp_idx109_i370_load[7:0];

assign fin_7_addr_12_reg_1854 = 64'd3;

assign fin_7_addr_13_reg_1859 = 64'd2;

assign fin_7_addr_14_reg_1824 = 64'd1;

assign fin_7_addr_15_reg_1829 = 64'd0;

assign fin_7_addr_4_reg_1928 = 64'd11;

assign fin_7_addr_5_reg_1933 = 64'd10;

assign fin_7_addr_6_reg_1886 = 64'd9;

assign fin_7_addr_7_reg_1891 = 64'd8;

assign fin_7_load_10_out = fin_7_load_10_reg_2051;

assign fin_7_load_11_out = fin_7_load_11_reg_2057;

assign fin_7_load_1_out = fin_7_load_1_reg_1870;

assign fin_7_load_2_out = fin_7_load_2_reg_1896;

assign fin_7_load_3_out = fin_7_load_3_reg_1902;

assign fin_7_load_8_out = fin_7_load_8_reg_1987;

assign fin_7_load_9_out = fin_7_load_9_reg_1993;

assign fin_7_load_out = fin_7_load_reg_1864;

assign grp_fu_554_p2 = (rk_q1 ^ fin_7_q1);

assign grp_fu_560_p2 = (rk_q0 ^ fin_7_q0);

assign icmp_ln230_fu_1792_p2 = (($signed(add_ln224_1_reg_1938) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln234_fu_1036_p2 = ((add_ln224_1_reg_1938 == 32'd0) ? 1'b1 : 1'b0);

assign or_ln121_75_fu_633_p2 = (8'd2 | add_ln224_reg_1834);

assign or_ln121_76_fu_643_p2 = (8'd3 | add_ln224_reg_1834);

assign or_ln121_77_fu_673_p2 = (8'd5 | add_ln224_reg_1834);

assign or_ln121_78_fu_854_p2 = (8'd6 | add_ln224_reg_1834);

assign or_ln121_79_fu_864_p2 = (8'd7 | add_ln224_reg_1834);

assign or_ln121_fu_622_p2 = (8'd1 | add_ln224_fu_611_p2);

assign or_ln134_53_fu_1047_p3 = {{trunc_ln134_217_reg_2041}, {tmp_507_reg_2046}};

assign or_ln134_54_fu_1361_p3 = {{trunc_ln134_219_reg_1967}, {tmp_511_reg_1972}};

assign or_ln134_55_fu_1367_p3 = {{trunc_ln134_220_reg_1977}, {tmp_513_reg_1982}};

assign or_ln134_56_fu_1665_p3 = {{trunc_ln134_223_reg_2109}, {tmp_519_reg_2114}};

assign or_ln134_57_fu_1671_p3 = {{trunc_ln134_227_reg_2169}, {tmp_527_reg_2174}};

assign or_ln134_58_fu_1677_p3 = {{trunc_ln134_230_reg_2119}, {tmp_533_reg_2124}};

assign or_ln134_59_fu_1683_p3 = {{trunc_ln134_232_reg_2179}, {tmp_537_reg_2184}};

assign or_ln134_s_fu_1041_p3 = {{trunc_ln134_215_reg_2025}, {tmp_503_reg_2030}};

assign or_ln232_fu_663_p2 = (8'd4 | add_ln224_reg_1834);

assign select_ln131_137_fu_888_p3 = ((tmp_500_fu_874_p3[0:0] == 1'b1) ? xor_ln132_137_fu_882_p2 : clefia_s0_q0);

assign select_ln131_138_fu_930_p3 = ((tmp_502_fu_916_p3[0:0] == 1'b1) ? xor_ln132_138_fu_924_p2 : x_assign_81_fu_908_p3);

assign select_ln131_139_fu_964_p3 = ((tmp_504_fu_950_p3[0:0] == 1'b1) ? xor_ln132_139_fu_958_p2 : clefia_s1_q0);

assign select_ln131_140_fu_1006_p3 = ((tmp_506_fu_992_p3[0:0] == 1'b1) ? xor_ln132_140_fu_1000_p2 : x_assign_82_fu_984_p3);

assign select_ln131_141_fu_758_p3 = ((tmp_508_fu_744_p3[0:0] == 1'b1) ? xor_ln132_141_fu_752_p2 : clefia_s0_q0);

assign select_ln131_142_fu_800_p3 = ((tmp_510_fu_786_p3[0:0] == 1'b1) ? xor_ln132_142_fu_794_p2 : x_assign_83_fu_778_p3);

assign select_ln131_143_fu_834_p3 = ((tmp_512_fu_820_p3[0:0] == 1'b1) ? xor_ln132_143_fu_828_p2 : x_assign_s_fu_736_p3);

assign select_ln131_144_fu_1133_p3 = ((tmp_514_fu_1119_p3[0:0] == 1'b1) ? xor_ln132_144_fu_1127_p2 : clefia_s0_q0);

assign select_ln131_145_fu_1175_p3 = ((tmp_516_fu_1161_p3[0:0] == 1'b1) ? xor_ln132_145_fu_1169_p2 : x_assign_84_fu_1153_p3);

assign select_ln131_146_fu_1217_p3 = ((tmp_518_fu_1203_p3[0:0] == 1'b1) ? xor_ln132_146_fu_1211_p2 : x_assign_85_fu_1195_p3);

assign select_ln131_147_fu_1443_p3 = ((tmp_520_fu_1429_p3[0:0] == 1'b1) ? xor_ln132_147_fu_1437_p2 : clefia_s1_q0);

assign select_ln131_148_fu_1485_p3 = ((tmp_522_fu_1471_p3[0:0] == 1'b1) ? xor_ln132_148_fu_1479_p2 : clefia_s0_q0);

assign select_ln131_149_fu_1527_p3 = ((tmp_524_fu_1513_p3[0:0] == 1'b1) ? xor_ln132_149_fu_1521_p2 : x_assign_87_fu_1505_p3);

assign select_ln131_150_fu_1569_p3 = ((tmp_526_fu_1555_p3[0:0] == 1'b1) ? xor_ln132_150_fu_1563_p2 : x_assign_88_fu_1547_p3);

assign select_ln131_151_fu_1251_p3 = ((tmp_528_fu_1237_p3[0:0] == 1'b1) ? xor_ln132_151_fu_1245_p2 : clefia_s1_q0);

assign select_ln131_152_fu_1293_p3 = ((tmp_530_fu_1279_p3[0:0] == 1'b1) ? xor_ln132_152_fu_1287_p2 : x_assign_89_fu_1271_p3);

assign select_ln131_153_fu_1335_p3 = ((tmp_532_fu_1321_p3[0:0] == 1'b1) ? xor_ln132_153_fu_1329_p2 : x_assign_90_fu_1313_p3);

assign select_ln131_154_fu_1603_p3 = ((tmp_534_fu_1589_p3[0:0] == 1'b1) ? xor_ln132_154_fu_1597_p2 : x_assign_86_fu_1463_p3);

assign select_ln131_155_fu_1645_p3 = ((tmp_536_fu_1631_p3[0:0] == 1'b1) ? xor_ln132_155_fu_1639_p2 : x_assign_91_fu_1623_p3);

assign select_ln131_fu_716_p3 = ((tmp_fu_702_p3[0:0] == 1'b1) ? xor_ln132_fu_710_p2 : clefia_s1_q0);

assign tmp_499_fu_728_p3 = select_ln131_fu_716_p3[32'd7];

assign tmp_500_fu_874_p3 = clefia_s0_q0[32'd7];

assign tmp_501_fu_900_p3 = select_ln131_137_fu_888_p3[32'd7];

assign tmp_502_fu_916_p3 = select_ln131_137_fu_888_p3[32'd6];

assign tmp_504_fu_950_p3 = clefia_s1_q0[32'd7];

assign tmp_505_fu_976_p3 = select_ln131_139_fu_964_p3[32'd7];

assign tmp_506_fu_992_p3 = select_ln131_139_fu_964_p3[32'd6];

assign tmp_508_fu_744_p3 = clefia_s0_q0[32'd7];

assign tmp_509_fu_770_p3 = select_ln131_141_fu_758_p3[32'd7];

assign tmp_510_fu_786_p3 = select_ln131_141_fu_758_p3[32'd6];

assign tmp_512_fu_820_p3 = select_ln131_fu_716_p3[32'd6];

assign tmp_514_fu_1119_p3 = clefia_s0_q0[32'd7];

assign tmp_515_fu_1145_p3 = select_ln131_144_fu_1133_p3[32'd7];

assign tmp_516_fu_1161_p3 = select_ln131_144_fu_1133_p3[32'd6];

assign tmp_517_fu_1187_p3 = select_ln131_145_fu_1175_p3[32'd7];

assign tmp_518_fu_1203_p3 = select_ln131_145_fu_1175_p3[32'd6];

assign tmp_520_fu_1429_p3 = clefia_s1_q0[32'd7];

assign tmp_521_fu_1455_p3 = select_ln131_147_fu_1443_p3[32'd7];

assign tmp_522_fu_1471_p3 = clefia_s0_q0[32'd7];

assign tmp_523_fu_1497_p3 = select_ln131_148_fu_1485_p3[32'd7];

assign tmp_524_fu_1513_p3 = select_ln131_148_fu_1485_p3[32'd6];

assign tmp_525_fu_1539_p3 = select_ln131_149_fu_1527_p3[32'd7];

assign tmp_526_fu_1555_p3 = select_ln131_149_fu_1527_p3[32'd6];

assign tmp_528_fu_1237_p3 = clefia_s1_q0[32'd7];

assign tmp_529_fu_1263_p3 = select_ln131_151_fu_1251_p3[32'd7];

assign tmp_530_fu_1279_p3 = select_ln131_151_fu_1251_p3[32'd6];

assign tmp_531_fu_1305_p3 = select_ln131_152_fu_1293_p3[32'd7];

assign tmp_532_fu_1321_p3 = select_ln131_152_fu_1293_p3[32'd6];

assign tmp_534_fu_1589_p3 = select_ln131_147_fu_1443_p3[32'd6];

assign tmp_535_fu_1615_p3 = select_ln131_154_fu_1603_p3[32'd7];

assign tmp_536_fu_1631_p3 = select_ln131_154_fu_1603_p3[32'd6];

assign tmp_fu_702_p3 = clefia_s1_q0[32'd7];

assign trunc_ln134_214_fu_896_p1 = select_ln131_137_fu_888_p3[6:0];

assign trunc_ln134_215_fu_938_p1 = select_ln131_138_fu_930_p3[6:0];

assign trunc_ln134_216_fu_972_p1 = select_ln131_139_fu_964_p3[6:0];

assign trunc_ln134_217_fu_1014_p1 = select_ln131_140_fu_1006_p3[6:0];

assign trunc_ln134_218_fu_766_p1 = select_ln131_141_fu_758_p3[6:0];

assign trunc_ln134_219_fu_808_p1 = select_ln131_142_fu_800_p3[6:0];

assign trunc_ln134_220_fu_842_p1 = select_ln131_143_fu_834_p3[6:0];

assign trunc_ln134_221_fu_1141_p1 = select_ln131_144_fu_1133_p3[6:0];

assign trunc_ln134_222_fu_1183_p1 = select_ln131_145_fu_1175_p3[6:0];

assign trunc_ln134_223_fu_1225_p1 = select_ln131_146_fu_1217_p3[6:0];

assign trunc_ln134_224_fu_1451_p1 = select_ln131_147_fu_1443_p3[6:0];

assign trunc_ln134_225_fu_1493_p1 = select_ln131_148_fu_1485_p3[6:0];

assign trunc_ln134_226_fu_1535_p1 = select_ln131_149_fu_1527_p3[6:0];

assign trunc_ln134_227_fu_1577_p1 = select_ln131_150_fu_1569_p3[6:0];

assign trunc_ln134_228_fu_1259_p1 = select_ln131_151_fu_1251_p3[6:0];

assign trunc_ln134_229_fu_1301_p1 = select_ln131_152_fu_1293_p3[6:0];

assign trunc_ln134_230_fu_1343_p1 = select_ln131_153_fu_1335_p3[6:0];

assign trunc_ln134_231_fu_1611_p1 = select_ln131_154_fu_1603_p3[6:0];

assign trunc_ln134_232_fu_1653_p1 = select_ln131_155_fu_1645_p3[6:0];

assign trunc_ln134_fu_724_p1 = select_ln131_fu_716_p3[6:0];

assign x_assign_81_fu_908_p3 = {{trunc_ln134_214_fu_896_p1}, {tmp_501_fu_900_p3}};

assign x_assign_82_fu_984_p3 = {{trunc_ln134_216_fu_972_p1}, {tmp_505_fu_976_p3}};

assign x_assign_83_fu_778_p3 = {{trunc_ln134_218_fu_766_p1}, {tmp_509_fu_770_p3}};

assign x_assign_84_fu_1153_p3 = {{trunc_ln134_221_fu_1141_p1}, {tmp_515_fu_1145_p3}};

assign x_assign_85_fu_1195_p3 = {{trunc_ln134_222_fu_1183_p1}, {tmp_517_fu_1187_p3}};

assign x_assign_86_fu_1463_p3 = {{trunc_ln134_224_fu_1451_p1}, {tmp_521_fu_1455_p3}};

assign x_assign_87_fu_1505_p3 = {{trunc_ln134_225_fu_1493_p1}, {tmp_523_fu_1497_p3}};

assign x_assign_88_fu_1547_p3 = {{trunc_ln134_226_fu_1535_p1}, {tmp_525_fu_1539_p3}};

assign x_assign_89_fu_1271_p3 = {{trunc_ln134_228_fu_1259_p1}, {tmp_529_fu_1263_p3}};

assign x_assign_90_fu_1313_p3 = {{trunc_ln134_229_fu_1301_p1}, {tmp_531_fu_1305_p3}};

assign x_assign_91_fu_1623_p3 = {{trunc_ln134_231_fu_1611_p1}, {tmp_535_fu_1615_p3}};

assign x_assign_s_fu_736_p3 = {{trunc_ln134_fu_724_p1}, {tmp_499_fu_728_p3}};

assign xor_ln124_474_fu_1075_p2 = (xor_ln124_545_fu_1069_p2 ^ xor_ln124_543_fu_1058_p2);

assign xor_ln124_474_out = xor_ln124_474_reg_2087;

assign xor_ln124_475_fu_1103_p2 = (xor_ln124_549_fu_1097_p2 ^ xor_ln124_547_fu_1087_p2);

assign xor_ln124_475_out = xor_ln124_475_reg_2093;

assign xor_ln124_476_fu_1395_p2 = (xor_ln124_553_fu_1390_p2 ^ xor_ln124_551_fu_1379_p2);

assign xor_ln124_476_out = xor_ln124_476_reg_2145;

assign xor_ln124_477_fu_1423_p2 = (xor_ln124_557_fu_1418_p2 ^ xor_ln124_555_fu_1407_p2);

assign xor_ln124_477_out = xor_ln124_477_reg_2151;

assign xor_ln124_482_fu_1711_p2 = (xor_ln124_561_fu_1705_p2 ^ xor_ln124_559_fu_1694_p2);

assign xor_ln124_482_out = xor_ln124_482_reg_2219;

assign xor_ln124_483_fu_1739_p2 = (xor_ln124_565_fu_1733_p2 ^ xor_ln124_563_fu_1722_p2);

assign xor_ln124_483_out = xor_ln124_483_reg_2225;

assign xor_ln124_484_fu_1760_p2 = (xor_ln124_568_fu_1755_p2 ^ xor_ln124_566_fu_1745_p2);

assign xor_ln124_484_out = xor_ln124_484_reg_2231;

assign xor_ln124_485_fu_1781_p2 = (xor_ln124_571_fu_1776_p2 ^ xor_ln124_569_fu_1766_p2);

assign xor_ln124_485_out = xor_ln124_485_reg_2237;

assign xor_ln124_543_fu_1058_p2 = (xor_ln124_fu_1053_p2 ^ reg_574);

assign xor_ln124_544_fu_1064_p2 = (x_assign_s_reg_1955 ^ or_ln134_s_fu_1041_p3);

assign xor_ln124_545_fu_1069_p2 = (xor_ln124_544_fu_1064_p2 ^ or_ln134_53_fu_1047_p3);

assign xor_ln124_546_fu_1081_p2 = (or_ln134_s_fu_1041_p3 ^ fin_7_q0);

assign xor_ln124_547_fu_1087_p2 = (xor_ln124_546_fu_1081_p2 ^ reg_578);

assign xor_ln124_548_fu_1093_p2 = (x_assign_83_reg_1961 ^ x_assign_81_reg_2019);

assign xor_ln124_549_fu_1097_p2 = (xor_ln124_548_fu_1093_p2 ^ or_ln134_53_fu_1047_p3);

assign xor_ln124_550_fu_1373_p2 = (or_ln134_55_fu_1367_p3 ^ fin_7_q1);

assign xor_ln124_551_fu_1379_p2 = (xor_ln124_550_fu_1373_p2 ^ reg_582);

assign xor_ln124_552_fu_1385_p2 = (x_assign_s_reg_1955 ^ or_ln134_54_fu_1361_p3);

assign xor_ln124_553_fu_1390_p2 = (xor_ln124_552_fu_1385_p2 ^ x_assign_82_reg_2035);

assign xor_ln124_554_fu_1401_p2 = (or_ln134_55_fu_1367_p3 ^ fin_7_q0);

assign xor_ln124_555_fu_1407_p2 = (xor_ln124_554_fu_1401_p2 ^ reg_586);

assign xor_ln124_556_fu_1413_p2 = (x_assign_83_reg_1961 ^ or_ln134_54_fu_1361_p3);

assign xor_ln124_557_fu_1418_p2 = (xor_ln124_556_fu_1413_p2 ^ x_assign_81_reg_2019);

assign xor_ln124_558_fu_1689_p2 = (x_assign_87_reg_2163 ^ fin_7_q1);

assign xor_ln124_559_fu_1694_p2 = (xor_ln124_558_fu_1689_p2 ^ reg_578);

assign xor_ln124_560_fu_1700_p2 = (x_assign_86_reg_2157 ^ or_ln134_56_fu_1665_p3);

assign xor_ln124_561_fu_1705_p2 = (xor_ln124_560_fu_1700_p2 ^ or_ln134_57_fu_1671_p3);

assign xor_ln124_562_fu_1717_p2 = (x_assign_87_reg_2163 ^ fin_7_q0);

assign xor_ln124_563_fu_1722_p2 = (xor_ln124_562_fu_1717_p2 ^ reg_574);

assign xor_ln124_564_fu_1728_p2 = (x_assign_86_reg_2157 ^ or_ln134_58_fu_1677_p3);

assign xor_ln124_565_fu_1733_p2 = (xor_ln124_564_fu_1728_p2 ^ or_ln134_59_fu_1683_p3);

assign xor_ln124_566_fu_1745_p2 = (reg_586 ^ fin_7_q1);

assign xor_ln124_567_fu_1751_p2 = (xor_ln180_reg_2129 ^ or_ln134_57_reg_2204);

assign xor_ln124_568_fu_1755_p2 = (xor_ln124_567_fu_1751_p2 ^ or_ln134_56_reg_2199);

assign xor_ln124_569_fu_1766_p2 = (reg_582 ^ fin_7_q0);

assign xor_ln124_570_fu_1772_p2 = (xor_ln180_reg_2129 ^ or_ln134_59_reg_2214);

assign xor_ln124_571_fu_1776_p2 = (xor_ln124_570_fu_1772_p2 ^ or_ln134_58_reg_2209);

assign xor_ln124_fu_1053_p2 = (x_assign_82_reg_2035 ^ fin_7_q1);

assign xor_ln132_137_fu_882_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_138_fu_924_p2 = (x_assign_81_fu_908_p3 ^ 8'd14);

assign xor_ln132_139_fu_958_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_140_fu_1000_p2 = (x_assign_82_fu_984_p3 ^ 8'd14);

assign xor_ln132_141_fu_752_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_142_fu_794_p2 = (x_assign_83_fu_778_p3 ^ 8'd14);

assign xor_ln132_143_fu_828_p2 = (x_assign_s_fu_736_p3 ^ 8'd14);

assign xor_ln132_144_fu_1127_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_145_fu_1169_p2 = (x_assign_84_fu_1153_p3 ^ 8'd14);

assign xor_ln132_146_fu_1211_p2 = (x_assign_85_fu_1195_p3 ^ 8'd14);

assign xor_ln132_147_fu_1437_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_148_fu_1479_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_149_fu_1521_p2 = (x_assign_87_fu_1505_p3 ^ 8'd14);

assign xor_ln132_150_fu_1563_p2 = (x_assign_88_fu_1547_p3 ^ 8'd14);

assign xor_ln132_151_fu_1245_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_152_fu_1287_p2 = (x_assign_89_fu_1271_p3 ^ 8'd14);

assign xor_ln132_153_fu_1329_p2 = (x_assign_90_fu_1313_p3 ^ 8'd14);

assign xor_ln132_154_fu_1597_p2 = (x_assign_86_fu_1463_p3 ^ 8'd14);

assign xor_ln132_155_fu_1639_p2 = (x_assign_91_fu_1623_p3 ^ 8'd14);

assign xor_ln132_fu_710_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln180_fu_1355_p2 = (x_assign_89_fu_1271_p3 ^ x_assign_84_fu_1153_p3);

assign zext_ln121_243_fu_628_p1 = or_ln121_fu_622_p2;

assign zext_ln121_244_fu_638_p1 = or_ln121_75_fu_633_p2;

assign zext_ln121_245_fu_648_p1 = or_ln121_76_fu_643_p2;

assign zext_ln121_246_fu_668_p1 = or_ln232_fu_663_p2;

assign zext_ln121_247_fu_678_p1 = or_ln121_77_fu_673_p2;

assign zext_ln121_248_fu_859_p1 = or_ln121_78_fu_854_p2;

assign zext_ln121_249_fu_869_p1 = or_ln121_79_fu_864_p2;

assign zext_ln121_fu_617_p1 = add_ln224_fu_611_p2;

assign zext_ln150_fu_653_p1 = reg_566;

assign zext_ln151_fu_658_p1 = reg_570;

assign zext_ln152_fu_692_p1 = reg_566;

assign zext_ln153_fu_697_p1 = reg_570;

assign zext_ln173_fu_1026_p1 = reg_566;

assign zext_ln174_fu_1031_p1 = reg_570;

assign zext_ln175_fu_1109_p1 = reg_566;

assign zext_ln176_fu_1114_p1 = reg_570;

assign zext_ln460_1_cast_fu_590_p1 = zext_ln460_1;

endmodule //clefia_clefia_Pipeline_ClefiaGfn4Inv_label5
