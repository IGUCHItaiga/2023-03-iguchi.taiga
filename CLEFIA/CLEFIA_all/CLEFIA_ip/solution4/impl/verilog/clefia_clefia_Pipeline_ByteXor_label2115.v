// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clefia_clefia_Pipeline_ByteXor_label2115 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_1,
        rk_address0,
        rk_ce0,
        rk_q0,
        rin_1_address0,
        rin_1_ce0,
        rin_1_we0,
        rin_1_d0,
        rin_1_address1,
        rin_1_ce1,
        rin_1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] r_1;
output  [7:0] rk_address0;
output   rk_ce0;
input  [7:0] rk_q0;
output  [3:0] rin_1_address0;
output   rin_1_ce0;
output   rin_1_we0;
output  [7:0] rin_1_d0;
output  [3:0] rin_1_address1;
output   rin_1_ce1;
input  [7:0] rin_1_q1;

reg ap_idle;
reg rk_ce0;
reg rin_1_ce0;
reg rin_1_we0;
reg rin_1_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln123_fu_171_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] rin_1_addr_reg_235;
wire   [0:0] addr_cmp_fu_160_p2;
reg   [0:0] addr_cmp_reg_241;
wire   [63:0] zext_ln121_fu_129_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln121_278_fu_146_p1;
reg   [63:0] reuse_addr_reg_fu_48;
wire    ap_loop_init;
reg   [7:0] reuse_reg_fu_52;
wire   [7:0] xor_ln124_99_fu_192_p2;
reg   [1:0] idx101_i358_fu_56;
wire   [1:0] add_ln124_fu_151_p2;
wire   [7:0] or_ln4_fu_114_p4;
wire   [7:0] or_ln121_fu_123_p2;
wire   [2:0] or_ln121_s_fu_134_p3;
wire  signed [3:0] sext_ln121_fu_142_p1;
wire   [7:0] reuse_select_fu_185_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

clefia_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            idx101_i358_fu_56 <= 2'd0;
        end else if (((icmp_ln123_fu_171_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            idx101_i358_fu_56 <= add_ln124_fu_151_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
                        reuse_addr_reg_fu_48[0] <= 1'b1;
            reuse_addr_reg_fu_48[1] <= 1'b1;
            reuse_addr_reg_fu_48[4] <= 1'b1;
            reuse_addr_reg_fu_48[5] <= 1'b1;
            reuse_addr_reg_fu_48[6] <= 1'b1;
            reuse_addr_reg_fu_48[7] <= 1'b1;
            reuse_addr_reg_fu_48[8] <= 1'b1;
            reuse_addr_reg_fu_48[9] <= 1'b1;
            reuse_addr_reg_fu_48[10] <= 1'b1;
            reuse_addr_reg_fu_48[11] <= 1'b1;
            reuse_addr_reg_fu_48[12] <= 1'b1;
            reuse_addr_reg_fu_48[13] <= 1'b1;
            reuse_addr_reg_fu_48[14] <= 1'b1;
            reuse_addr_reg_fu_48[15] <= 1'b1;
            reuse_addr_reg_fu_48[16] <= 1'b1;
            reuse_addr_reg_fu_48[17] <= 1'b1;
            reuse_addr_reg_fu_48[18] <= 1'b1;
            reuse_addr_reg_fu_48[19] <= 1'b1;
            reuse_addr_reg_fu_48[20] <= 1'b1;
            reuse_addr_reg_fu_48[21] <= 1'b1;
            reuse_addr_reg_fu_48[22] <= 1'b1;
            reuse_addr_reg_fu_48[23] <= 1'b1;
            reuse_addr_reg_fu_48[24] <= 1'b1;
            reuse_addr_reg_fu_48[25] <= 1'b1;
            reuse_addr_reg_fu_48[26] <= 1'b1;
            reuse_addr_reg_fu_48[27] <= 1'b1;
            reuse_addr_reg_fu_48[28] <= 1'b1;
            reuse_addr_reg_fu_48[29] <= 1'b1;
            reuse_addr_reg_fu_48[30] <= 1'b1;
            reuse_addr_reg_fu_48[31] <= 1'b1;
            reuse_addr_reg_fu_48[32] <= 1'b1;
            reuse_addr_reg_fu_48[33] <= 1'b1;
            reuse_addr_reg_fu_48[34] <= 1'b1;
            reuse_addr_reg_fu_48[35] <= 1'b1;
            reuse_addr_reg_fu_48[36] <= 1'b1;
            reuse_addr_reg_fu_48[37] <= 1'b1;
            reuse_addr_reg_fu_48[38] <= 1'b1;
            reuse_addr_reg_fu_48[39] <= 1'b1;
            reuse_addr_reg_fu_48[40] <= 1'b1;
            reuse_addr_reg_fu_48[41] <= 1'b1;
            reuse_addr_reg_fu_48[42] <= 1'b1;
            reuse_addr_reg_fu_48[43] <= 1'b1;
            reuse_addr_reg_fu_48[44] <= 1'b1;
            reuse_addr_reg_fu_48[45] <= 1'b1;
            reuse_addr_reg_fu_48[46] <= 1'b1;
            reuse_addr_reg_fu_48[47] <= 1'b1;
            reuse_addr_reg_fu_48[48] <= 1'b1;
            reuse_addr_reg_fu_48[49] <= 1'b1;
            reuse_addr_reg_fu_48[50] <= 1'b1;
            reuse_addr_reg_fu_48[51] <= 1'b1;
            reuse_addr_reg_fu_48[52] <= 1'b1;
            reuse_addr_reg_fu_48[53] <= 1'b1;
            reuse_addr_reg_fu_48[54] <= 1'b1;
            reuse_addr_reg_fu_48[55] <= 1'b1;
            reuse_addr_reg_fu_48[56] <= 1'b1;
            reuse_addr_reg_fu_48[57] <= 1'b1;
            reuse_addr_reg_fu_48[58] <= 1'b1;
            reuse_addr_reg_fu_48[59] <= 1'b1;
            reuse_addr_reg_fu_48[60] <= 1'b1;
            reuse_addr_reg_fu_48[61] <= 1'b1;
            reuse_addr_reg_fu_48[62] <= 1'b1;
            reuse_addr_reg_fu_48[63] <= 1'b1;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
                        reuse_addr_reg_fu_48[1 : 0] <= zext_ln121_278_fu_146_p1[1 : 0];
            reuse_addr_reg_fu_48[63 : 4] <= zext_ln121_278_fu_146_p1[63 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg_fu_52 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg_fu_52 <= xor_ln124_99_fu_192_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        addr_cmp_reg_241 <= addr_cmp_fu_160_p2;
        rin_1_addr_reg_235[1 : 0] <= zext_ln121_278_fu_146_p1[1 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln123_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        rin_1_ce0 = 1'b1;
    end else begin
        rin_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rin_1_ce1 = 1'b1;
    end else begin
        rin_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        rin_1_we0 = 1'b1;
    end else begin
        rin_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rk_ce0 = 1'b1;
    end else begin
        rk_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln124_fu_151_p2 = (idx101_i358_fu_56 + 2'd1);

assign addr_cmp_fu_160_p2 = ((reuse_addr_reg_fu_48 == zext_ln121_278_fu_146_p1) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln123_fu_171_p2 = ((idx101_i358_fu_56 == 2'd3) ? 1'b1 : 1'b0);

assign or_ln121_fu_123_p2 = (or_ln4_fu_114_p4 | 8'd12);

assign or_ln121_s_fu_134_p3 = {{1'd1}, {idx101_i358_fu_56}};

assign or_ln4_fu_114_p4 = {{{r_1}, {1'd0}}, {idx101_i358_fu_56}};

assign reuse_select_fu_185_p3 = ((addr_cmp_reg_241[0:0] == 1'b1) ? reuse_reg_fu_52 : rin_1_q1);

assign rin_1_address0 = rin_1_addr_reg_235;

assign rin_1_address1 = zext_ln121_278_fu_146_p1;

assign rin_1_d0 = (rk_q0 ^ reuse_select_fu_185_p3);

assign rk_address0 = zext_ln121_fu_129_p1;

assign sext_ln121_fu_142_p1 = $signed(or_ln121_s_fu_134_p3);

assign xor_ln124_99_fu_192_p2 = (rk_q0 ^ reuse_select_fu_185_p3);

assign zext_ln121_278_fu_146_p1 = $unsigned(sext_ln121_fu_142_p1);

assign zext_ln121_fu_129_p1 = or_ln121_fu_123_p2;

always @ (posedge ap_clk) begin
    rin_1_addr_reg_235[3:2] <= 2'b11;
    reuse_addr_reg_fu_48[3:2] <= 2'b11;
end

endmodule //clefia_clefia_Pipeline_ByteXor_label2115
