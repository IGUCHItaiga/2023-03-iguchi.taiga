// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clefia_clefia_Pipeline_ClefiaGfn4_label3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fin_address0,
        fin_ce0,
        fin_we0,
        fin_d0,
        fin_q0,
        fin_address1,
        fin_ce1,
        fin_we1,
        fin_d1,
        fin_q1,
        fin_load_out,
        fin_load_out_ap_vld,
        fin_load_1_out,
        fin_load_1_out_ap_vld,
        fin_load_2_out,
        fin_load_2_out_ap_vld,
        fin_load_3_out,
        fin_load_3_out_ap_vld,
        xor_ln124_4_out,
        xor_ln124_4_out_ap_vld,
        xor_ln124_5_out,
        xor_ln124_5_out_ap_vld,
        xor_ln124_6_out,
        xor_ln124_6_out_ap_vld,
        xor_ln124_7_out,
        xor_ln124_7_out_ap_vld,
        fin_load_8_out,
        fin_load_8_out_ap_vld,
        fin_load_9_out,
        fin_load_9_out_ap_vld,
        fin_load_10_out,
        fin_load_10_out_ap_vld,
        fin_load_11_out,
        fin_load_11_out_ap_vld,
        xor_ln124_12_out,
        xor_ln124_12_out_ap_vld,
        xor_ln124_13_out,
        xor_ln124_13_out_ap_vld,
        xor_ln124_14_out,
        xor_ln124_14_out_ap_vld,
        xor_ln124_15_out,
        xor_ln124_15_out_ap_vld,
        con128_address0,
        con128_ce0,
        con128_q0,
        clefia_s0_address0,
        clefia_s0_ce0,
        clefia_s0_q0,
        clefia_s1_address0,
        clefia_s1_ce0,
        clefia_s1_q0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] fin_address0;
output   fin_ce0;
output   fin_we0;
output  [7:0] fin_d0;
input  [7:0] fin_q0;
output  [3:0] fin_address1;
output   fin_ce1;
output   fin_we1;
output  [7:0] fin_d1;
input  [7:0] fin_q1;
output  [7:0] fin_load_out;
output   fin_load_out_ap_vld;
output  [7:0] fin_load_1_out;
output   fin_load_1_out_ap_vld;
output  [7:0] fin_load_2_out;
output   fin_load_2_out_ap_vld;
output  [7:0] fin_load_3_out;
output   fin_load_3_out_ap_vld;
output  [7:0] xor_ln124_4_out;
output   xor_ln124_4_out_ap_vld;
output  [7:0] xor_ln124_5_out;
output   xor_ln124_5_out_ap_vld;
output  [7:0] xor_ln124_6_out;
output   xor_ln124_6_out_ap_vld;
output  [7:0] xor_ln124_7_out;
output   xor_ln124_7_out_ap_vld;
output  [7:0] fin_load_8_out;
output   fin_load_8_out_ap_vld;
output  [7:0] fin_load_9_out;
output   fin_load_9_out_ap_vld;
output  [7:0] fin_load_10_out;
output   fin_load_10_out_ap_vld;
output  [7:0] fin_load_11_out;
output   fin_load_11_out_ap_vld;
output  [7:0] xor_ln124_12_out;
output   xor_ln124_12_out_ap_vld;
output  [7:0] xor_ln124_13_out;
output   xor_ln124_13_out_ap_vld;
output  [7:0] xor_ln124_14_out;
output   xor_ln124_14_out_ap_vld;
output  [7:0] xor_ln124_15_out;
output   xor_ln124_15_out_ap_vld;
output  [7:0] con128_address0;
output   con128_ce0;
input  [7:0] con128_q0;
output  [7:0] clefia_s0_address0;
output   clefia_s0_ce0;
input  [7:0] clefia_s0_q0;
output  [7:0] clefia_s1_address0;
output   clefia_s1_ce0;
input  [7:0] clefia_s1_q0;

reg ap_idle;
reg[3:0] fin_address0;
reg fin_ce0;
reg fin_we0;
reg[7:0] fin_d0;
reg[3:0] fin_address1;
reg fin_ce1;
reg fin_we1;
reg[7:0] fin_d1;
reg fin_load_out_ap_vld;
reg fin_load_1_out_ap_vld;
reg fin_load_2_out_ap_vld;
reg fin_load_3_out_ap_vld;
reg xor_ln124_4_out_ap_vld;
reg xor_ln124_5_out_ap_vld;
reg xor_ln124_6_out_ap_vld;
reg xor_ln124_7_out_ap_vld;
reg fin_load_8_out_ap_vld;
reg fin_load_9_out_ap_vld;
reg fin_load_10_out_ap_vld;
reg fin_load_11_out_ap_vld;
reg xor_ln124_12_out_ap_vld;
reg xor_ln124_13_out_ap_vld;
reg xor_ln124_14_out_ap_vld;
reg xor_ln124_15_out_ap_vld;
reg[7:0] con128_address0;
reg con128_ce0;
reg[7:0] clefia_s0_address0;
reg clefia_s0_ce0;
reg[7:0] clefia_s1_address0;
reg clefia_s1_ce0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state13;
wire    ap_block_state13_pp0_stage12_iter0;
reg   [0:0] icmp_ln197_reg_2021;
reg    ap_condition_exit_pp0_iter0_stage12;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [7:0] reg_540;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_CS_fsm_state9;
wire    ap_block_state9_pp0_stage8_iter0;
reg   [7:0] reg_544;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_CS_fsm_state8;
wire    ap_block_state8_pp0_stage7_iter0;
reg   [7:0] reg_548;
wire    ap_CS_fsm_state6;
wire    ap_block_state6_pp0_stage5_iter0;
reg   [7:0] reg_552;
reg   [6:0] idx38_i_load_reg_1805;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [3:0] fin_addr_14_reg_1817;
wire   [3:0] fin_addr_15_reg_1822;
wire   [3:0] fin_addr_12_reg_1832;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [3:0] fin_addr_13_reg_1837;
reg   [7:0] fin_load_reg_1842;
wire   [7:0] xor_ln124_fu_574_p2;
reg   [7:0] xor_ln124_reg_1848;
reg   [7:0] fin_load_1_reg_1858;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire   [7:0] xor_ln124_1_fu_590_p2;
reg   [7:0] xor_ln124_1_reg_1877;
reg   [7:0] fin_load_2_reg_1887;
reg   [7:0] fin_load_3_reg_1894;
wire   [3:0] fin_addr_4_reg_1906;
wire   [3:0] fin_addr_5_reg_1911;
wire   [7:0] xor_ln124_2_fu_609_p2;
reg   [7:0] xor_ln124_2_reg_1916;
wire   [7:0] x_assign_2_fu_662_p3;
reg   [7:0] x_assign_2_reg_1931;
wire   [6:0] trunc_ln134_200_fu_692_p1;
reg   [6:0] trunc_ln134_200_reg_1937;
reg   [0:0] tmp_472_reg_1942;
reg   [7:0] fin_load_8_reg_1947;
reg   [7:0] fin_load_9_reg_1954;
reg   [3:0] r_assign_load_reg_1961;
wire   [7:0] xor_ln124_3_fu_707_p2;
reg   [7:0] xor_ln124_3_reg_1976;
wire   [7:0] x_assign_s_fu_750_p3;
reg   [7:0] x_assign_s_reg_1986;
wire   [6:0] trunc_ln134_201_fu_780_p1;
reg   [6:0] trunc_ln134_201_reg_1992;
reg   [0:0] tmp_474_reg_1997;
reg   [7:0] fin_load_10_reg_2007;
reg   [7:0] fin_load_11_reg_2014;
wire   [0:0] icmp_ln197_fu_802_p2;
reg   [7:0] z_76_reg_2035;
wire   [7:0] x_assign_8_fu_846_p3;
reg   [7:0] x_assign_8_reg_2045;
wire   [6:0] trunc_ln134_196_fu_876_p1;
reg   [6:0] trunc_ln134_196_reg_2051;
reg   [0:0] tmp_464_reg_2056;
wire   [7:0] xor_ln124_8_fu_888_p2;
reg   [7:0] xor_ln124_8_reg_2061;
wire    ap_CS_fsm_state7;
wire    ap_block_state7_pp0_stage6_iter0;
wire   [7:0] xor_ln124_4_fu_1028_p2;
reg   [7:0] xor_ln124_4_reg_2081;
wire   [7:0] xor_ln124_5_fu_1056_p2;
reg   [7:0] xor_ln124_5_reg_2087;
wire   [7:0] xor_ln124_6_fu_1084_p2;
reg   [7:0] xor_ln124_6_reg_2093;
wire   [7:0] xor_ln124_7_fu_1112_p2;
reg   [7:0] xor_ln124_7_reg_2099;
wire   [7:0] xor_ln124_9_fu_1118_p2;
reg   [7:0] xor_ln124_9_reg_2105;
wire   [7:0] xor_ln124_10_fu_1137_p2;
reg   [7:0] xor_ln124_10_reg_2130;
wire   [7:0] x_assign_9_fu_1190_p3;
reg   [7:0] x_assign_9_reg_2145;
wire   [6:0] trunc_ln134_211_fu_1262_p1;
reg   [6:0] trunc_ln134_211_reg_2150;
reg   [0:0] tmp_494_reg_2155;
wire   [7:0] xor_ln124_11_fu_1274_p2;
reg   [7:0] xor_ln124_11_reg_2160;
wire   [6:0] trunc_ln134_204_fu_1389_p1;
reg   [6:0] trunc_ln134_204_reg_2170;
reg   [0:0] tmp_480_reg_2175;
wire   [7:0] xor_ln180_fu_1401_p2;
reg   [7:0] xor_ln180_reg_2180;
reg   [7:0] fin_load_14_reg_2186;
reg   [7:0] fin_load_15_reg_2191;
reg   [7:0] z_80_reg_2196;
wire    ap_CS_fsm_state10;
wire    ap_block_state10_pp0_stage9_iter0;
wire   [7:0] x_assign_5_fu_1444_p3;
reg   [7:0] x_assign_5_reg_2206;
wire   [6:0] trunc_ln134_213_fu_1516_p1;
reg   [6:0] trunc_ln134_213_reg_2212;
reg   [0:0] tmp_498_reg_2217;
wire   [7:0] x_assign_6_fu_1562_p3;
reg   [7:0] x_assign_6_reg_2222;
wire    ap_CS_fsm_state11;
wire    ap_block_state11_pp0_stage10_iter0;
wire   [6:0] trunc_ln134_208_fu_1634_p1;
reg   [6:0] trunc_ln134_208_reg_2227;
reg   [0:0] tmp_488_reg_2232;
wire   [7:0] xor_ln124_13_fu_1681_p2;
reg   [7:0] xor_ln124_13_reg_2237;
wire   [7:0] xor_ln124_15_fu_1703_p2;
reg   [7:0] xor_ln124_15_reg_2243;
wire   [7:0] xor_ln124_12_fu_1744_p2;
reg   [7:0] xor_ln124_12_reg_2248;
wire    ap_CS_fsm_state12;
wire    ap_block_state12_pp0_stage11_iter0;
wire   [7:0] xor_ln124_14_fu_1766_p2;
reg   [7:0] xor_ln124_14_reg_2253;
wire   [6:0] add_ln196_fu_1772_p2;
reg   [6:0] add_ln196_reg_2259;
wire   [63:0] idx38_i_cast_fu_569_p1;
wire   [63:0] zext_ln121_4_fu_585_p1;
wire   [63:0] zext_ln121_6_fu_600_p1;
wire   [63:0] zext_ln150_fu_605_p1;
wire   [63:0] zext_ln121_18_fu_619_p1;
wire   [63:0] zext_ln151_fu_624_p1;
wire   [63:0] zext_ln152_fu_712_p1;
wire   [63:0] zext_ln121_19_fu_797_p1;
wire   [63:0] zext_ln153_fu_808_p1;
wire   [63:0] zext_ln121_20_fu_898_p1;
wire   [63:0] zext_ln121_25_fu_1128_p1;
wire   [63:0] zext_ln173_fu_1133_p1;
wire   [63:0] zext_ln121_27_fu_1147_p1;
wire   [63:0] zext_ln174_fu_1152_p1;
wire   [63:0] zext_ln175_fu_1279_p1;
wire   [63:0] zext_ln176_fu_1406_p1;
reg   [6:0] idx38_i_fu_124;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_idx38_i_load;
reg   [3:0] r_assign_fu_128;
wire   [3:0] add_ln193_fu_1777_p2;
wire   [6:0] or_ln121_fu_580_p2;
wire   [6:0] or_ln121_1_fu_595_p2;
wire   [6:0] or_ln121_2_fu_614_p2;
wire   [0:0] tmp_469_fu_628_p3;
wire   [7:0] xor_ln132_5_fu_636_p2;
wire   [7:0] select_ln131_5_fu_642_p3;
wire   [6:0] trunc_ln134_199_fu_650_p1;
wire   [0:0] tmp_470_fu_654_p3;
wire   [0:0] tmp_471_fu_670_p3;
wire   [7:0] xor_ln132_6_fu_678_p2;
wire   [7:0] select_ln131_6_fu_684_p3;
wire   [0:0] tmp_fu_716_p3;
wire   [7:0] xor_ln132_fu_724_p2;
wire   [7:0] select_ln131_fu_730_p3;
wire   [6:0] trunc_ln134_fu_738_p1;
wire   [0:0] tmp_460_fu_742_p3;
wire   [0:0] tmp_473_fu_758_p3;
wire   [7:0] xor_ln132_7_fu_766_p2;
wire   [7:0] select_ln131_7_fu_772_p3;
wire   [6:0] or_ln195_fu_792_p2;
wire   [0:0] tmp_461_fu_812_p3;
wire   [7:0] xor_ln132_1_fu_820_p2;
wire   [7:0] select_ln131_1_fu_826_p3;
wire   [6:0] trunc_ln134_195_fu_834_p1;
wire   [0:0] tmp_462_fu_838_p3;
wire   [0:0] tmp_463_fu_854_p3;
wire   [7:0] xor_ln132_2_fu_862_p2;
wire   [7:0] select_ln131_2_fu_868_p3;
wire   [6:0] or_ln121_3_fu_893_p2;
wire   [0:0] tmp_465_fu_909_p3;
wire   [7:0] xor_ln132_3_fu_917_p2;
wire   [7:0] select_ln131_3_fu_923_p3;
wire   [6:0] trunc_ln134_197_fu_931_p1;
wire   [0:0] tmp_466_fu_935_p3;
wire   [7:0] x_assign_1_fu_943_p3;
wire   [0:0] tmp_467_fu_951_p3;
wire   [7:0] xor_ln132_4_fu_959_p2;
wire   [7:0] select_ln131_4_fu_965_p3;
wire   [6:0] trunc_ln134_198_fu_973_p1;
wire   [0:0] tmp_468_fu_977_p3;
wire   [7:0] xor_ln124_486_fu_1005_p2;
wire   [7:0] or_ln134_2_fu_903_p3;
wire   [7:0] xor_ln124_488_fu_1017_p2;
wire   [7:0] or_ln134_4_fu_985_p3;
wire   [7:0] xor_ln124_489_fu_1022_p2;
wire   [7:0] xor_ln124_487_fu_1011_p2;
wire   [7:0] xor_ln124_490_fu_1034_p2;
wire   [7:0] xor_ln124_492_fu_1046_p2;
wire   [7:0] xor_ln124_493_fu_1050_p2;
wire   [7:0] xor_ln124_491_fu_1040_p2;
wire   [7:0] or_ln5_fu_999_p3;
wire   [7:0] xor_ln124_494_fu_1062_p2;
wire   [7:0] or_ln134_6_fu_993_p3;
wire   [7:0] xor_ln124_496_fu_1073_p2;
wire   [7:0] xor_ln124_497_fu_1078_p2;
wire   [7:0] xor_ln124_495_fu_1068_p2;
wire   [7:0] xor_ln124_498_fu_1090_p2;
wire   [7:0] xor_ln124_500_fu_1102_p2;
wire   [7:0] xor_ln124_501_fu_1107_p2;
wire   [7:0] xor_ln124_499_fu_1096_p2;
wire   [6:0] or_ln121_4_fu_1123_p2;
wire   [6:0] or_ln121_5_fu_1142_p2;
wire   [0:0] tmp_489_fu_1156_p3;
wire   [7:0] xor_ln132_15_fu_1164_p2;
wire   [7:0] select_ln131_15_fu_1170_p3;
wire   [6:0] trunc_ln134_209_fu_1178_p1;
wire   [0:0] tmp_490_fu_1182_p3;
wire   [0:0] tmp_491_fu_1198_p3;
wire   [7:0] xor_ln132_16_fu_1206_p2;
wire   [7:0] select_ln131_16_fu_1212_p3;
wire   [6:0] trunc_ln134_210_fu_1220_p1;
wire   [0:0] tmp_492_fu_1224_p3;
wire   [7:0] x_assign_10_fu_1232_p3;
wire   [0:0] tmp_493_fu_1240_p3;
wire   [7:0] xor_ln132_17_fu_1248_p2;
wire   [7:0] select_ln131_17_fu_1254_p3;
wire   [0:0] tmp_475_fu_1283_p3;
wire   [7:0] xor_ln132_8_fu_1291_p2;
wire   [7:0] select_ln131_8_fu_1297_p3;
wire   [6:0] trunc_ln134_202_fu_1305_p1;
wire   [0:0] tmp_476_fu_1309_p3;
wire   [7:0] x_assign_3_fu_1317_p3;
wire   [0:0] tmp_477_fu_1325_p3;
wire   [7:0] xor_ln132_9_fu_1333_p2;
wire   [7:0] select_ln131_9_fu_1339_p3;
wire   [6:0] trunc_ln134_203_fu_1347_p1;
wire   [0:0] tmp_478_fu_1351_p3;
wire   [7:0] x_assign_4_fu_1359_p3;
wire   [0:0] tmp_479_fu_1367_p3;
wire   [7:0] xor_ln132_10_fu_1375_p2;
wire   [7:0] select_ln131_10_fu_1381_p3;
wire   [0:0] tmp_481_fu_1410_p3;
wire   [7:0] xor_ln132_11_fu_1418_p2;
wire   [7:0] select_ln131_11_fu_1424_p3;
wire   [6:0] trunc_ln134_205_fu_1432_p1;
wire   [0:0] tmp_482_fu_1436_p3;
wire   [0:0] tmp_495_fu_1452_p3;
wire   [7:0] xor_ln132_18_fu_1460_p2;
wire   [7:0] select_ln131_18_fu_1466_p3;
wire   [6:0] trunc_ln134_212_fu_1474_p1;
wire   [0:0] tmp_496_fu_1478_p3;
wire   [7:0] x_assign_11_fu_1486_p3;
wire   [0:0] tmp_497_fu_1494_p3;
wire   [7:0] xor_ln132_19_fu_1502_p2;
wire   [7:0] select_ln131_19_fu_1508_p3;
wire   [0:0] tmp_483_fu_1528_p3;
wire   [7:0] xor_ln132_12_fu_1536_p2;
wire   [7:0] select_ln131_12_fu_1542_p3;
wire   [6:0] trunc_ln134_206_fu_1550_p1;
wire   [0:0] tmp_484_fu_1554_p3;
wire   [0:0] tmp_485_fu_1570_p3;
wire   [7:0] xor_ln132_13_fu_1578_p2;
wire   [7:0] select_ln131_13_fu_1584_p3;
wire   [6:0] trunc_ln134_207_fu_1592_p1;
wire   [0:0] tmp_486_fu_1596_p3;
wire   [7:0] x_assign_7_fu_1604_p3;
wire   [0:0] tmp_487_fu_1612_p3;
wire   [7:0] xor_ln132_14_fu_1620_p2;
wire   [7:0] select_ln131_14_fu_1626_p3;
wire   [7:0] xor_ln124_506_fu_1658_p2;
wire   [7:0] or_ln134_3_fu_1646_p3;
wire   [7:0] xor_ln124_508_fu_1670_p2;
wire   [7:0] or_ln134_5_fu_1652_p3;
wire   [7:0] xor_ln124_509_fu_1675_p2;
wire   [7:0] xor_ln124_507_fu_1664_p2;
wire   [7:0] xor_ln124_514_fu_1692_p2;
wire   [7:0] xor_ln124_515_fu_1697_p2;
wire   [7:0] xor_ln124_513_fu_1687_p2;
wire   [7:0] xor_ln124_502_fu_1722_p2;
wire   [7:0] or_ln134_s_fu_1710_p3;
wire   [7:0] xor_ln124_504_fu_1733_p2;
wire   [7:0] or_ln134_1_fu_1716_p3;
wire   [7:0] xor_ln124_505_fu_1738_p2;
wire   [7:0] xor_ln124_503_fu_1727_p2;
wire   [7:0] xor_ln124_511_fu_1755_p2;
wire   [7:0] xor_ln124_512_fu_1760_p2;
wire   [7:0] xor_ln124_510_fu_1751_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_done_reg = 1'b0;
end

clefia_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage12),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        idx38_i_fu_124 <= 7'd0;
    end else if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        idx38_i_fu_124 <= add_ln196_reg_2259;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        r_assign_fu_128 <= 4'd11;
    end else if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        r_assign_fu_128 <= add_ln193_fu_1777_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln196_reg_2259 <= add_ln196_fu_1772_p2;
        xor_ln124_12_reg_2248 <= xor_ln124_12_fu_1744_p2;
        xor_ln124_14_reg_2253 <= xor_ln124_14_fu_1766_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fin_load_10_reg_2007 <= fin_q1;
        fin_load_11_reg_2014 <= fin_q0;
        icmp_ln197_reg_2021 <= icmp_ln197_fu_802_p2;
        r_assign_load_reg_1961 <= r_assign_fu_128;
        tmp_474_reg_1997 <= select_ln131_7_fu_772_p3[32'd7];
        trunc_ln134_201_reg_1992 <= trunc_ln134_201_fu_780_p1;
        x_assign_s_reg_1986 <= x_assign_s_fu_750_p3;
        xor_ln124_3_reg_1976 <= xor_ln124_3_fu_707_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        fin_load_14_reg_2186 <= fin_q1;
        fin_load_15_reg_2191 <= fin_q0;
        tmp_480_reg_2175 <= select_ln131_10_fu_1381_p3[32'd7];
        trunc_ln134_204_reg_2170 <= trunc_ln134_204_fu_1389_p1;
        xor_ln124_11_reg_2160 <= xor_ln124_11_fu_1274_p2;
        xor_ln180_reg_2180 <= xor_ln180_fu_1401_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        fin_load_1_reg_1858 <= fin_q0;
        fin_load_reg_1842 <= fin_q1;
        xor_ln124_reg_1848 <= xor_ln124_fu_574_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fin_load_2_reg_1887 <= fin_q1;
        fin_load_3_reg_1894 <= fin_q0;
        xor_ln124_1_reg_1877 <= xor_ln124_1_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fin_load_8_reg_1947 <= fin_q1;
        fin_load_9_reg_1954 <= fin_q0;
        tmp_472_reg_1942 <= select_ln131_6_fu_684_p3[32'd7];
        trunc_ln134_200_reg_1937 <= trunc_ln134_200_fu_692_p1;
        x_assign_2_reg_1931 <= x_assign_2_fu_662_p3;
        xor_ln124_2_reg_1916 <= xor_ln124_2_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        idx38_i_load_reg_1805 <= ap_sig_allocacmp_idx38_i_load;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_540 <= clefia_s0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_544 <= clefia_s1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_548 <= fin_q1;
        reg_552 <= fin_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_464_reg_2056 <= select_ln131_2_fu_868_p3[32'd7];
        trunc_ln134_196_reg_2051 <= trunc_ln134_196_fu_876_p1;
        x_assign_8_reg_2045 <= x_assign_8_fu_846_p3;
        xor_ln124_8_reg_2061 <= xor_ln124_8_fu_888_p2;
        z_76_reg_2035 <= clefia_s0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_488_reg_2232 <= select_ln131_14_fu_1626_p3[32'd7];
        trunc_ln134_208_reg_2227 <= trunc_ln134_208_fu_1634_p1;
        x_assign_6_reg_2222 <= x_assign_6_fu_1562_p3;
        xor_ln124_13_reg_2237 <= xor_ln124_13_fu_1681_p2;
        xor_ln124_15_reg_2243 <= xor_ln124_15_fu_1703_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_494_reg_2155 <= select_ln131_17_fu_1254_p3[32'd7];
        trunc_ln134_211_reg_2150 <= trunc_ln134_211_fu_1262_p1;
        x_assign_9_reg_2145 <= x_assign_9_fu_1190_p3;
        xor_ln124_10_reg_2130 <= xor_ln124_10_fu_1137_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_498_reg_2217 <= select_ln131_19_fu_1508_p3[32'd7];
        trunc_ln134_213_reg_2212 <= trunc_ln134_213_fu_1516_p1;
        x_assign_5_reg_2206 <= x_assign_5_fu_1444_p3;
        z_80_reg_2196 <= clefia_s1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        xor_ln124_4_reg_2081 <= xor_ln124_4_fu_1028_p2;
        xor_ln124_5_reg_2087 <= xor_ln124_5_fu_1056_p2;
        xor_ln124_6_reg_2093 <= xor_ln124_6_fu_1084_p2;
        xor_ln124_7_reg_2099 <= xor_ln124_7_fu_1112_p2;
        xor_ln124_9_reg_2105 <= xor_ln124_9_fu_1118_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_condition_exit_pp0_iter0_stage12 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage12 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_idx38_i_load = 7'd0;
    end else begin
        ap_sig_allocacmp_idx38_i_load = idx38_i_fu_124;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        clefia_s0_address0 = zext_ln176_fu_1406_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        clefia_s0_address0 = zext_ln174_fu_1152_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        clefia_s0_address0 = zext_ln152_fu_712_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        clefia_s0_address0 = zext_ln150_fu_605_p1;
    end else begin
        clefia_s0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        clefia_s0_ce0 = 1'b1;
    end else begin
        clefia_s0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        clefia_s1_address0 = zext_ln175_fu_1279_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        clefia_s1_address0 = zext_ln173_fu_1133_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        clefia_s1_address0 = zext_ln153_fu_808_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        clefia_s1_address0 = zext_ln151_fu_624_p1;
    end else begin
        clefia_s1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        clefia_s1_ce0 = 1'b1;
    end else begin
        clefia_s1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        con128_address0 = zext_ln121_27_fu_1147_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        con128_address0 = zext_ln121_25_fu_1128_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        con128_address0 = zext_ln121_20_fu_898_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        con128_address0 = zext_ln121_19_fu_797_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        con128_address0 = zext_ln121_18_fu_619_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        con128_address0 = zext_ln121_6_fu_600_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        con128_address0 = zext_ln121_4_fu_585_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        con128_address0 = idx38_i_cast_fu_569_p1;
    end else begin
        con128_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        con128_ce0 = 1'b1;
    end else begin
        con128_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_address0 = 64'd8;
    end else if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        fin_address0 = fin_addr_4_reg_1906;
    end else if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fin_address0 = fin_addr_12_reg_1832;
    end else if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        fin_address0 = fin_addr_14_reg_1817;
    end else if (((1'b1 == ap_CS_fsm_state8) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        fin_address0 = 64'd15;
    end else if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        fin_address0 = 64'd13;
    end else if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        fin_address0 = 64'd7;
    end else if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln197_fu_802_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        fin_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        fin_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fin_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fin_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fin_address0 = 64'd1;
    end else begin
        fin_address0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_address1 = fin_addr_5_reg_1911;
    end else if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_address1 = 64'd9;
    end else if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fin_address1 = fin_addr_13_reg_1837;
    end else if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        fin_address1 = fin_addr_15_reg_1822;
    end else if (((1'b1 == ap_CS_fsm_state8) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        fin_address1 = 64'd14;
    end else if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        fin_address1 = 64'd12;
    end else if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        fin_address1 = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln197_fu_802_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        fin_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        fin_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fin_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fin_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fin_address1 = 64'd0;
    end else begin
        fin_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((icmp_ln197_fu_802_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        fin_ce0 = 1'b1;
    end else begin
        fin_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((icmp_ln197_fu_802_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        fin_ce1 = 1'b1;
    end else begin
        fin_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_d0 = xor_ln124_12_fu_1744_p2;
    end else if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        fin_d0 = xor_ln124_15_fu_1703_p2;
    end else if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fin_d0 = xor_ln124_7_reg_2099;
    end else if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        fin_d0 = xor_ln124_5_reg_2087;
    end else if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        fin_d0 = fin_load_3_reg_1894;
    end else if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        fin_d0 = fin_load_1_reg_1858;
    end else if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        fin_d0 = fin_load_11_reg_2014;
    end else if (((icmp_ln197_fu_802_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        fin_d0 = fin_load_9_reg_1954;
    end else begin
        fin_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_d1 = xor_ln124_14_reg_2253;
    end else if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_d1 = xor_ln124_13_reg_2237;
    end else if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fin_d1 = xor_ln124_6_reg_2093;
    end else if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        fin_d1 = xor_ln124_4_reg_2081;
    end else if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        fin_d1 = fin_load_2_reg_1887;
    end else if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        fin_d1 = fin_load_reg_1842;
    end else if (((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        fin_d1 = fin_load_10_reg_2007;
    end else if (((icmp_ln197_fu_802_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        fin_d1 = fin_load_8_reg_1947;
    end else begin
        fin_d1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_10_out_ap_vld = 1'b1;
    end else begin
        fin_load_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_11_out_ap_vld = 1'b1;
    end else begin
        fin_load_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_1_out_ap_vld = 1'b1;
    end else begin
        fin_load_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_2_out_ap_vld = 1'b1;
    end else begin
        fin_load_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_3_out_ap_vld = 1'b1;
    end else begin
        fin_load_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_8_out_ap_vld = 1'b1;
    end else begin
        fin_load_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_9_out_ap_vld = 1'b1;
    end else begin
        fin_load_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_out_ap_vld = 1'b1;
    end else begin
        fin_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln197_fu_802_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        fin_we0 = 1'b1;
    end else begin
        fin_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln197_fu_802_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln197_reg_2021 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        fin_we1 = 1'b1;
    end else begin
        fin_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_12_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_13_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_13_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_14_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_14_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_15_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_15_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_4_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_5_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_6_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2021 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_7_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln193_fu_1777_p2 = ($signed(r_assign_load_reg_1961) + $signed(4'd15));

assign add_ln196_fu_1772_p2 = (idx38_i_load_reg_1805 + 7'd8);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage12;

assign fin_addr_12_reg_1832 = 64'd3;

assign fin_addr_13_reg_1837 = 64'd2;

assign fin_addr_14_reg_1817 = 64'd1;

assign fin_addr_15_reg_1822 = 64'd0;

assign fin_addr_4_reg_1906 = 64'd11;

assign fin_addr_5_reg_1911 = 64'd10;

assign fin_load_10_out = fin_load_10_reg_2007;

assign fin_load_11_out = fin_load_11_reg_2014;

assign fin_load_1_out = fin_load_1_reg_1858;

assign fin_load_2_out = fin_load_2_reg_1887;

assign fin_load_3_out = fin_load_3_reg_1894;

assign fin_load_8_out = fin_load_8_reg_1947;

assign fin_load_9_out = fin_load_9_reg_1954;

assign fin_load_out = fin_load_reg_1842;

assign icmp_ln197_fu_802_p2 = ((r_assign_fu_128 == 4'd0) ? 1'b1 : 1'b0);

assign idx38_i_cast_fu_569_p1 = ap_sig_allocacmp_idx38_i_load;

assign or_ln121_1_fu_595_p2 = (idx38_i_load_reg_1805 | 7'd2);

assign or_ln121_2_fu_614_p2 = (idx38_i_load_reg_1805 | 7'd3);

assign or_ln121_3_fu_893_p2 = (idx38_i_load_reg_1805 | 7'd5);

assign or_ln121_4_fu_1123_p2 = (idx38_i_load_reg_1805 | 7'd6);

assign or_ln121_5_fu_1142_p2 = (idx38_i_load_reg_1805 | 7'd7);

assign or_ln121_fu_580_p2 = (idx38_i_load_reg_1805 | 7'd1);

assign or_ln134_1_fu_1716_p3 = {{trunc_ln134_208_reg_2227}, {tmp_488_reg_2232}};

assign or_ln134_2_fu_903_p3 = {{trunc_ln134_196_reg_2051}, {tmp_464_reg_2056}};

assign or_ln134_3_fu_1646_p3 = {{trunc_ln134_211_reg_2150}, {tmp_494_reg_2155}};

assign or_ln134_4_fu_985_p3 = {{trunc_ln134_198_fu_973_p1}, {tmp_468_fu_977_p3}};

assign or_ln134_5_fu_1652_p3 = {{trunc_ln134_213_reg_2212}, {tmp_498_reg_2217}};

assign or_ln134_6_fu_993_p3 = {{trunc_ln134_200_reg_1937}, {tmp_472_reg_1942}};

assign or_ln134_s_fu_1710_p3 = {{trunc_ln134_204_reg_2170}, {tmp_480_reg_2175}};

assign or_ln195_fu_792_p2 = (idx38_i_load_reg_1805 | 7'd4);

assign or_ln5_fu_999_p3 = {{trunc_ln134_201_reg_1992}, {tmp_474_reg_1997}};

assign select_ln131_10_fu_1381_p3 = ((tmp_479_fu_1367_p3[0:0] == 1'b1) ? xor_ln132_10_fu_1375_p2 : x_assign_4_fu_1359_p3);

assign select_ln131_11_fu_1424_p3 = ((tmp_481_fu_1410_p3[0:0] == 1'b1) ? xor_ln132_11_fu_1418_p2 : clefia_s1_q0);

assign select_ln131_12_fu_1542_p3 = ((tmp_483_fu_1528_p3[0:0] == 1'b1) ? xor_ln132_12_fu_1536_p2 : clefia_s0_q0);

assign select_ln131_13_fu_1584_p3 = ((tmp_485_fu_1570_p3[0:0] == 1'b1) ? xor_ln132_13_fu_1578_p2 : x_assign_6_fu_1562_p3);

assign select_ln131_14_fu_1626_p3 = ((tmp_487_fu_1612_p3[0:0] == 1'b1) ? xor_ln132_14_fu_1620_p2 : x_assign_7_fu_1604_p3);

assign select_ln131_15_fu_1170_p3 = ((tmp_489_fu_1156_p3[0:0] == 1'b1) ? xor_ln132_15_fu_1164_p2 : clefia_s1_q0);

assign select_ln131_16_fu_1212_p3 = ((tmp_491_fu_1198_p3[0:0] == 1'b1) ? xor_ln132_16_fu_1206_p2 : x_assign_9_fu_1190_p3);

assign select_ln131_17_fu_1254_p3 = ((tmp_493_fu_1240_p3[0:0] == 1'b1) ? xor_ln132_17_fu_1248_p2 : x_assign_10_fu_1232_p3);

assign select_ln131_18_fu_1466_p3 = ((tmp_495_fu_1452_p3[0:0] == 1'b1) ? xor_ln132_18_fu_1460_p2 : x_assign_5_fu_1444_p3);

assign select_ln131_19_fu_1508_p3 = ((tmp_497_fu_1494_p3[0:0] == 1'b1) ? xor_ln132_19_fu_1502_p2 : x_assign_11_fu_1486_p3);

assign select_ln131_1_fu_826_p3 = ((tmp_461_fu_812_p3[0:0] == 1'b1) ? xor_ln132_1_fu_820_p2 : clefia_s0_q0);

assign select_ln131_2_fu_868_p3 = ((tmp_463_fu_854_p3[0:0] == 1'b1) ? xor_ln132_2_fu_862_p2 : x_assign_8_fu_846_p3);

assign select_ln131_3_fu_923_p3 = ((tmp_465_fu_909_p3[0:0] == 1'b1) ? xor_ln132_3_fu_917_p2 : clefia_s1_q0);

assign select_ln131_4_fu_965_p3 = ((tmp_467_fu_951_p3[0:0] == 1'b1) ? xor_ln132_4_fu_959_p2 : x_assign_1_fu_943_p3);

assign select_ln131_5_fu_642_p3 = ((tmp_469_fu_628_p3[0:0] == 1'b1) ? xor_ln132_5_fu_636_p2 : clefia_s0_q0);

assign select_ln131_6_fu_684_p3 = ((tmp_471_fu_670_p3[0:0] == 1'b1) ? xor_ln132_6_fu_678_p2 : x_assign_2_fu_662_p3);

assign select_ln131_7_fu_772_p3 = ((tmp_473_fu_758_p3[0:0] == 1'b1) ? xor_ln132_7_fu_766_p2 : x_assign_s_fu_750_p3);

assign select_ln131_8_fu_1297_p3 = ((tmp_475_fu_1283_p3[0:0] == 1'b1) ? xor_ln132_8_fu_1291_p2 : clefia_s0_q0);

assign select_ln131_9_fu_1339_p3 = ((tmp_477_fu_1325_p3[0:0] == 1'b1) ? xor_ln132_9_fu_1333_p2 : x_assign_3_fu_1317_p3);

assign select_ln131_fu_730_p3 = ((tmp_fu_716_p3[0:0] == 1'b1) ? xor_ln132_fu_724_p2 : clefia_s1_q0);

assign tmp_460_fu_742_p3 = select_ln131_fu_730_p3[32'd7];

assign tmp_461_fu_812_p3 = clefia_s0_q0[32'd7];

assign tmp_462_fu_838_p3 = select_ln131_1_fu_826_p3[32'd7];

assign tmp_463_fu_854_p3 = select_ln131_1_fu_826_p3[32'd6];

assign tmp_465_fu_909_p3 = clefia_s1_q0[32'd7];

assign tmp_466_fu_935_p3 = select_ln131_3_fu_923_p3[32'd7];

assign tmp_467_fu_951_p3 = select_ln131_3_fu_923_p3[32'd6];

assign tmp_468_fu_977_p3 = select_ln131_4_fu_965_p3[32'd7];

assign tmp_469_fu_628_p3 = clefia_s0_q0[32'd7];

assign tmp_470_fu_654_p3 = select_ln131_5_fu_642_p3[32'd7];

assign tmp_471_fu_670_p3 = select_ln131_5_fu_642_p3[32'd6];

assign tmp_473_fu_758_p3 = select_ln131_fu_730_p3[32'd6];

assign tmp_475_fu_1283_p3 = clefia_s0_q0[32'd7];

assign tmp_476_fu_1309_p3 = select_ln131_8_fu_1297_p3[32'd7];

assign tmp_477_fu_1325_p3 = select_ln131_8_fu_1297_p3[32'd6];

assign tmp_478_fu_1351_p3 = select_ln131_9_fu_1339_p3[32'd7];

assign tmp_479_fu_1367_p3 = select_ln131_9_fu_1339_p3[32'd6];

assign tmp_481_fu_1410_p3 = clefia_s1_q0[32'd7];

assign tmp_482_fu_1436_p3 = select_ln131_11_fu_1424_p3[32'd7];

assign tmp_483_fu_1528_p3 = clefia_s0_q0[32'd7];

assign tmp_484_fu_1554_p3 = select_ln131_12_fu_1542_p3[32'd7];

assign tmp_485_fu_1570_p3 = select_ln131_12_fu_1542_p3[32'd6];

assign tmp_486_fu_1596_p3 = select_ln131_13_fu_1584_p3[32'd7];

assign tmp_487_fu_1612_p3 = select_ln131_13_fu_1584_p3[32'd6];

assign tmp_489_fu_1156_p3 = clefia_s1_q0[32'd7];

assign tmp_490_fu_1182_p3 = select_ln131_15_fu_1170_p3[32'd7];

assign tmp_491_fu_1198_p3 = select_ln131_15_fu_1170_p3[32'd6];

assign tmp_492_fu_1224_p3 = select_ln131_16_fu_1212_p3[32'd7];

assign tmp_493_fu_1240_p3 = select_ln131_16_fu_1212_p3[32'd6];

assign tmp_495_fu_1452_p3 = select_ln131_11_fu_1424_p3[32'd6];

assign tmp_496_fu_1478_p3 = select_ln131_18_fu_1466_p3[32'd7];

assign tmp_497_fu_1494_p3 = select_ln131_18_fu_1466_p3[32'd6];

assign tmp_fu_716_p3 = clefia_s1_q0[32'd7];

assign trunc_ln134_195_fu_834_p1 = select_ln131_1_fu_826_p3[6:0];

assign trunc_ln134_196_fu_876_p1 = select_ln131_2_fu_868_p3[6:0];

assign trunc_ln134_197_fu_931_p1 = select_ln131_3_fu_923_p3[6:0];

assign trunc_ln134_198_fu_973_p1 = select_ln131_4_fu_965_p3[6:0];

assign trunc_ln134_199_fu_650_p1 = select_ln131_5_fu_642_p3[6:0];

assign trunc_ln134_200_fu_692_p1 = select_ln131_6_fu_684_p3[6:0];

assign trunc_ln134_201_fu_780_p1 = select_ln131_7_fu_772_p3[6:0];

assign trunc_ln134_202_fu_1305_p1 = select_ln131_8_fu_1297_p3[6:0];

assign trunc_ln134_203_fu_1347_p1 = select_ln131_9_fu_1339_p3[6:0];

assign trunc_ln134_204_fu_1389_p1 = select_ln131_10_fu_1381_p3[6:0];

assign trunc_ln134_205_fu_1432_p1 = select_ln131_11_fu_1424_p3[6:0];

assign trunc_ln134_206_fu_1550_p1 = select_ln131_12_fu_1542_p3[6:0];

assign trunc_ln134_207_fu_1592_p1 = select_ln131_13_fu_1584_p3[6:0];

assign trunc_ln134_208_fu_1634_p1 = select_ln131_14_fu_1626_p3[6:0];

assign trunc_ln134_209_fu_1178_p1 = select_ln131_15_fu_1170_p3[6:0];

assign trunc_ln134_210_fu_1220_p1 = select_ln131_16_fu_1212_p3[6:0];

assign trunc_ln134_211_fu_1262_p1 = select_ln131_17_fu_1254_p3[6:0];

assign trunc_ln134_212_fu_1474_p1 = select_ln131_18_fu_1466_p3[6:0];

assign trunc_ln134_213_fu_1516_p1 = select_ln131_19_fu_1508_p3[6:0];

assign trunc_ln134_fu_738_p1 = select_ln131_fu_730_p3[6:0];

assign x_assign_10_fu_1232_p3 = {{trunc_ln134_210_fu_1220_p1}, {tmp_492_fu_1224_p3}};

assign x_assign_11_fu_1486_p3 = {{trunc_ln134_212_fu_1474_p1}, {tmp_496_fu_1478_p3}};

assign x_assign_1_fu_943_p3 = {{trunc_ln134_197_fu_931_p1}, {tmp_466_fu_935_p3}};

assign x_assign_2_fu_662_p3 = {{trunc_ln134_199_fu_650_p1}, {tmp_470_fu_654_p3}};

assign x_assign_3_fu_1317_p3 = {{trunc_ln134_202_fu_1305_p1}, {tmp_476_fu_1309_p3}};

assign x_assign_4_fu_1359_p3 = {{trunc_ln134_203_fu_1347_p1}, {tmp_478_fu_1351_p3}};

assign x_assign_5_fu_1444_p3 = {{trunc_ln134_205_fu_1432_p1}, {tmp_482_fu_1436_p3}};

assign x_assign_6_fu_1562_p3 = {{trunc_ln134_206_fu_1550_p1}, {tmp_484_fu_1554_p3}};

assign x_assign_7_fu_1604_p3 = {{trunc_ln134_207_fu_1592_p1}, {tmp_486_fu_1596_p3}};

assign x_assign_8_fu_846_p3 = {{trunc_ln134_195_fu_834_p1}, {tmp_462_fu_838_p3}};

assign x_assign_9_fu_1190_p3 = {{trunc_ln134_209_fu_1178_p1}, {tmp_490_fu_1182_p3}};

assign x_assign_s_fu_750_p3 = {{trunc_ln134_fu_738_p1}, {tmp_460_fu_742_p3}};

assign xor_ln124_10_fu_1137_p2 = (fin_load_10_reg_2007 ^ con128_q0);

assign xor_ln124_11_fu_1274_p2 = (fin_load_11_reg_2014 ^ con128_q0);

assign xor_ln124_12_fu_1744_p2 = (xor_ln124_505_fu_1738_p2 ^ xor_ln124_503_fu_1727_p2);

assign xor_ln124_12_out = xor_ln124_12_reg_2248;

assign xor_ln124_13_fu_1681_p2 = (xor_ln124_509_fu_1675_p2 ^ xor_ln124_507_fu_1664_p2);

assign xor_ln124_13_out = xor_ln124_13_reg_2237;

assign xor_ln124_14_fu_1766_p2 = (xor_ln124_512_fu_1760_p2 ^ xor_ln124_510_fu_1751_p2);

assign xor_ln124_14_out = xor_ln124_14_reg_2253;

assign xor_ln124_15_fu_1703_p2 = (xor_ln124_515_fu_1697_p2 ^ xor_ln124_513_fu_1687_p2);

assign xor_ln124_15_out = xor_ln124_15_reg_2243;

assign xor_ln124_1_fu_590_p2 = (fin_load_1_reg_1858 ^ con128_q0);

assign xor_ln124_2_fu_609_p2 = (fin_load_2_reg_1887 ^ con128_q0);

assign xor_ln124_3_fu_707_p2 = (fin_load_3_reg_1894 ^ con128_q0);

assign xor_ln124_486_fu_1005_p2 = (x_assign_1_fu_943_p3 ^ reg_548);

assign xor_ln124_487_fu_1011_p2 = (xor_ln124_486_fu_1005_p2 ^ reg_540);

assign xor_ln124_488_fu_1017_p2 = (x_assign_s_reg_1986 ^ or_ln134_2_fu_903_p3);

assign xor_ln124_489_fu_1022_p2 = (xor_ln124_488_fu_1017_p2 ^ or_ln134_4_fu_985_p3);

assign xor_ln124_490_fu_1034_p2 = (reg_552 ^ or_ln134_2_fu_903_p3);

assign xor_ln124_491_fu_1040_p2 = (xor_ln124_490_fu_1034_p2 ^ reg_544);

assign xor_ln124_492_fu_1046_p2 = (x_assign_8_reg_2045 ^ x_assign_2_reg_1931);

assign xor_ln124_493_fu_1050_p2 = (xor_ln124_492_fu_1046_p2 ^ or_ln134_4_fu_985_p3);

assign xor_ln124_494_fu_1062_p2 = (or_ln5_fu_999_p3 ^ fin_q1);

assign xor_ln124_495_fu_1068_p2 = (z_76_reg_2035 ^ xor_ln124_494_fu_1062_p2);

assign xor_ln124_496_fu_1073_p2 = (x_assign_s_reg_1986 ^ or_ln134_6_fu_993_p3);

assign xor_ln124_497_fu_1078_p2 = (xor_ln124_496_fu_1073_p2 ^ x_assign_1_fu_943_p3);

assign xor_ln124_498_fu_1090_p2 = (or_ln5_fu_999_p3 ^ fin_q0);

assign xor_ln124_499_fu_1096_p2 = (xor_ln124_498_fu_1090_p2 ^ clefia_s1_q0);

assign xor_ln124_4_fu_1028_p2 = (xor_ln124_489_fu_1022_p2 ^ xor_ln124_487_fu_1011_p2);

assign xor_ln124_4_out = xor_ln124_4_reg_2081;

assign xor_ln124_500_fu_1102_p2 = (x_assign_2_reg_1931 ^ or_ln134_6_fu_993_p3);

assign xor_ln124_501_fu_1107_p2 = (xor_ln124_500_fu_1102_p2 ^ x_assign_8_reg_2045);

assign xor_ln124_502_fu_1722_p2 = (x_assign_6_reg_2222 ^ reg_548);

assign xor_ln124_503_fu_1727_p2 = (xor_ln124_502_fu_1722_p2 ^ reg_544);

assign xor_ln124_504_fu_1733_p2 = (x_assign_5_reg_2206 ^ or_ln134_s_fu_1710_p3);

assign xor_ln124_505_fu_1738_p2 = (xor_ln124_504_fu_1733_p2 ^ or_ln134_1_fu_1716_p3);

assign xor_ln124_506_fu_1658_p2 = (x_assign_6_fu_1562_p3 ^ reg_552);

assign xor_ln124_507_fu_1664_p2 = (xor_ln124_506_fu_1658_p2 ^ reg_540);

assign xor_ln124_508_fu_1670_p2 = (x_assign_5_reg_2206 ^ or_ln134_3_fu_1646_p3);

assign xor_ln124_509_fu_1675_p2 = (xor_ln124_508_fu_1670_p2 ^ or_ln134_5_fu_1652_p3);

assign xor_ln124_510_fu_1751_p2 = (z_80_reg_2196 ^ fin_load_14_reg_2186);

assign xor_ln124_511_fu_1755_p2 = (xor_ln180_reg_2180 ^ or_ln134_1_fu_1716_p3);

assign xor_ln124_512_fu_1760_p2 = (xor_ln124_511_fu_1755_p2 ^ or_ln134_s_fu_1710_p3);

assign xor_ln124_513_fu_1687_p2 = (fin_load_15_reg_2191 ^ clefia_s0_q0);

assign xor_ln124_514_fu_1692_p2 = (xor_ln180_reg_2180 ^ or_ln134_5_fu_1652_p3);

assign xor_ln124_515_fu_1697_p2 = (xor_ln124_514_fu_1692_p2 ^ or_ln134_3_fu_1646_p3);

assign xor_ln124_5_fu_1056_p2 = (xor_ln124_493_fu_1050_p2 ^ xor_ln124_491_fu_1040_p2);

assign xor_ln124_5_out = xor_ln124_5_reg_2087;

assign xor_ln124_6_fu_1084_p2 = (xor_ln124_497_fu_1078_p2 ^ xor_ln124_495_fu_1068_p2);

assign xor_ln124_6_out = xor_ln124_6_reg_2093;

assign xor_ln124_7_fu_1112_p2 = (xor_ln124_501_fu_1107_p2 ^ xor_ln124_499_fu_1096_p2);

assign xor_ln124_7_out = xor_ln124_7_reg_2099;

assign xor_ln124_8_fu_888_p2 = (fin_load_8_reg_1947 ^ con128_q0);

assign xor_ln124_9_fu_1118_p2 = (fin_load_9_reg_1954 ^ con128_q0);

assign xor_ln124_fu_574_p2 = (fin_q1 ^ con128_q0);

assign xor_ln132_10_fu_1375_p2 = (x_assign_4_fu_1359_p3 ^ 8'd14);

assign xor_ln132_11_fu_1418_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_12_fu_1536_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_13_fu_1578_p2 = (x_assign_6_fu_1562_p3 ^ 8'd14);

assign xor_ln132_14_fu_1620_p2 = (x_assign_7_fu_1604_p3 ^ 8'd14);

assign xor_ln132_15_fu_1164_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_16_fu_1206_p2 = (x_assign_9_fu_1190_p3 ^ 8'd14);

assign xor_ln132_17_fu_1248_p2 = (x_assign_10_fu_1232_p3 ^ 8'd14);

assign xor_ln132_18_fu_1460_p2 = (x_assign_5_fu_1444_p3 ^ 8'd14);

assign xor_ln132_19_fu_1502_p2 = (x_assign_11_fu_1486_p3 ^ 8'd14);

assign xor_ln132_1_fu_820_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_2_fu_862_p2 = (x_assign_8_fu_846_p3 ^ 8'd14);

assign xor_ln132_3_fu_917_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_4_fu_959_p2 = (x_assign_1_fu_943_p3 ^ 8'd14);

assign xor_ln132_5_fu_636_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_6_fu_678_p2 = (x_assign_2_fu_662_p3 ^ 8'd14);

assign xor_ln132_7_fu_766_p2 = (x_assign_s_fu_750_p3 ^ 8'd14);

assign xor_ln132_8_fu_1291_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_9_fu_1333_p2 = (x_assign_3_fu_1317_p3 ^ 8'd14);

assign xor_ln132_fu_724_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln180_fu_1401_p2 = (x_assign_9_reg_2145 ^ x_assign_3_fu_1317_p3);

assign zext_ln121_18_fu_619_p1 = or_ln121_2_fu_614_p2;

assign zext_ln121_19_fu_797_p1 = or_ln195_fu_792_p2;

assign zext_ln121_20_fu_898_p1 = or_ln121_3_fu_893_p2;

assign zext_ln121_25_fu_1128_p1 = or_ln121_4_fu_1123_p2;

assign zext_ln121_27_fu_1147_p1 = or_ln121_5_fu_1142_p2;

assign zext_ln121_4_fu_585_p1 = or_ln121_fu_580_p2;

assign zext_ln121_6_fu_600_p1 = or_ln121_1_fu_595_p2;

assign zext_ln150_fu_605_p1 = xor_ln124_reg_1848;

assign zext_ln151_fu_624_p1 = xor_ln124_1_reg_1877;

assign zext_ln152_fu_712_p1 = xor_ln124_2_reg_1916;

assign zext_ln153_fu_808_p1 = xor_ln124_3_reg_1976;

assign zext_ln173_fu_1133_p1 = xor_ln124_8_reg_2061;

assign zext_ln174_fu_1152_p1 = xor_ln124_9_reg_2105;

assign zext_ln175_fu_1279_p1 = xor_ln124_10_reg_2130;

assign zext_ln176_fu_1406_p1 = xor_ln124_11_reg_2160;

endmodule //clefia_clefia_Pipeline_ClefiaGfn4_label3
