-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity clefia_enc_clefia_enc_Pipeline_VITIS_LOOP_193_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fin_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    fin_ce0 : OUT STD_LOGIC;
    fin_we0 : OUT STD_LOGIC;
    fin_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    fin_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    fin_ce1 : OUT STD_LOGIC;
    fin_we1 : OUT STD_LOGIC;
    fin_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    fin_load_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_load_out_ap_vld : OUT STD_LOGIC;
    fin_load_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_load_1_out_ap_vld : OUT STD_LOGIC;
    fin_load_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_load_2_out_ap_vld : OUT STD_LOGIC;
    fin_load_3_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_load_3_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_8_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_8_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_9_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_9_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_10_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_10_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_11_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_11_out_ap_vld : OUT STD_LOGIC;
    fin_load_8_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_load_8_out_ap_vld : OUT STD_LOGIC;
    fin_load_9_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_load_9_out_ap_vld : OUT STD_LOGIC;
    fin_load_10_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_load_10_out_ap_vld : OUT STD_LOGIC;
    fin_load_11_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    fin_load_11_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_16_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_16_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_17_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_17_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_18_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_18_out_ap_vld : OUT STD_LOGIC;
    xor_ln124_19_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    xor_ln124_19_out_ap_vld : OUT STD_LOGIC;
    rk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rk_ce0 : OUT STD_LOGIC;
    rk_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of clefia_enc_clefia_enc_Pipeline_VITIS_LOOP_193_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal icmp_ln197_reg_2026 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage12 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal clefia_s0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s0_ce0 : STD_LOGIC;
    signal clefia_s0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal clefia_s1_ce0 : STD_LOGIC;
    signal clefia_s1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_540 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal reg_544 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal reg_548 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal reg_552 : STD_LOGIC_VECTOR (7 downto 0);
    signal idx105_i_load_reg_1806 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal fin_addr_14_reg_1817 : STD_LOGIC_VECTOR (3 downto 0);
    signal fin_addr_15_reg_1822 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln188_fu_569_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln188_reg_1827 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_addr_12_reg_1837 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal fin_addr_13_reg_1842 : STD_LOGIC_VECTOR (3 downto 0);
    signal fin_load_reg_1847 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_fu_580_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_reg_1853 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_load_1_reg_1863 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal xor_ln124_1_fu_596_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_1_reg_1882 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_load_2_reg_1892 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_load_3_reg_1899 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_addr_4_reg_1911 : STD_LOGIC_VECTOR (3 downto 0);
    signal fin_addr_5_reg_1916 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln124_2_fu_615_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_2_reg_1921 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_2_fu_668_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_2_reg_1936 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_6_fu_698_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_6_reg_1942 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_reg_1947 : STD_LOGIC_VECTOR (0 downto 0);
    signal fin_load_8_reg_1952 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_load_9_reg_1959 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_assign_load_reg_1966 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln124_3_fu_713_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_3_reg_1981 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_s_fu_756_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_s_reg_1991 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_7_fu_786_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_7_reg_1997 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_reg_2002 : STD_LOGIC_VECTOR (0 downto 0);
    signal fin_load_10_reg_2012 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_load_11_reg_2019 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln197_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_2_reg_2040 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_6_fu_852_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_6_reg_2050 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_2_fu_882_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_2_reg_2056 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_reg_2061 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln124_12_fu_894_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_12_reg_2066 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal xor_ln124_8_fu_1034_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_8_reg_2086 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_9_fu_1062_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_9_reg_2092 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_10_fu_1090_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_10_reg_2098 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_11_fu_1118_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_11_reg_2104 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_13_fu_1124_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_13_reg_2110 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_14_fu_1143_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_14_reg_2135 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_9_fu_1196_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_9_reg_2150 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_17_fu_1268_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_17_reg_2155 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_35_reg_2160 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln124_15_fu_1280_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_15_reg_2165 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_10_fu_1395_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_10_reg_2175 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_reg_2180 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln180_fu_1407_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln180_reg_2185 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_load_14_reg_2191 : STD_LOGIC_VECTOR (7 downto 0);
    signal fin_load_15_reg_2196 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_6_reg_2201 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal x_assign_5_fu_1450_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_5_reg_2211 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_19_fu_1522_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_19_reg_2217 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_39_reg_2222 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_7_fu_1568_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_7_reg_2227 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal trunc_ln134_14_fu_1640_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln134_14_reg_2232 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_29_reg_2237 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln124_17_fu_1687_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_17_reg_2242 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_19_fu_1709_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_19_reg_2248 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_16_fu_1750_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_16_reg_2253 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal xor_ln124_18_fu_1772_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_18_reg_2258 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln188_cast_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_fu_591_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_1_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_2_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln151_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_3_fu_803_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln153_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_4_fu_904_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_5_fu_1134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_fu_1139_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_6_fu_1153_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_fu_1158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_fu_1285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_fu_1412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idx105_i_fu_124 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_idx105_i_load : STD_LOGIC_VECTOR (7 downto 0);
    signal r_assign_fu_128 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln193_fu_1778_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln121_fu_586_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_1_fu_601_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_2_fu_620_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_634_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_5_fu_642_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_5_fu_648_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_5_fu_656_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_fu_660_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_676_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_6_fu_684_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_6_fu_690_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_722_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_fu_730_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_fu_736_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_fu_744_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_748_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_764_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_7_fu_772_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_7_fu_778_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_3_fu_798_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_818_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_1_fu_826_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_1_fu_832_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_1_fu_840_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_844_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_860_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_2_fu_868_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_2_fu_874_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_4_fu_899_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_915_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_3_fu_923_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_3_fu_929_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_3_fu_937_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_941_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_1_fu_949_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_957_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_4_fu_965_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_4_fu_971_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_4_fu_979_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_983_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln124_4_fu_1011_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_2_fu_909_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_6_fu_1023_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_4_fu_991_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_7_fu_1028_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_5_fu_1017_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_20_fu_1040_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_22_fu_1052_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_23_fu_1056_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_21_fu_1046_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln1_fu_1005_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_24_fu_1068_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_6_fu_999_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_26_fu_1079_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_27_fu_1084_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_25_fu_1074_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_28_fu_1096_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_30_fu_1108_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_31_fu_1113_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_29_fu_1102_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_5_fu_1129_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_6_fu_1148_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_1162_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_15_fu_1170_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_15_fu_1176_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_15_fu_1184_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_31_fu_1188_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_1204_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_16_fu_1212_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_16_fu_1218_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_16_fu_1226_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_33_fu_1230_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_10_fu_1238_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_fu_1246_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_17_fu_1254_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_17_fu_1260_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_1289_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_8_fu_1297_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_8_fu_1303_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_8_fu_1311_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_fu_1315_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_3_fu_1323_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_1331_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_9_fu_1339_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_9_fu_1345_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_9_fu_1353_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_fu_1357_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_4_fu_1365_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_1373_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_10_fu_1381_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_10_fu_1387_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_1416_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_11_fu_1424_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_11_fu_1430_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_11_fu_1438_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_1442_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_1458_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_18_fu_1466_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_18_fu_1472_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_18_fu_1480_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_37_fu_1484_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_11_fu_1492_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_fu_1500_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_19_fu_1508_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_19_fu_1514_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_1534_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_12_fu_1542_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_12_fu_1548_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_12_fu_1556_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_25_fu_1560_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1576_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_13_fu_1584_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_13_fu_1590_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln134_13_fu_1598_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_27_fu_1602_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_8_fu_1610_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_1618_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln132_14_fu_1626_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_14_fu_1632_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_36_fu_1664_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_1_fu_1652_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_38_fu_1676_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_3_fu_1658_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_39_fu_1681_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_37_fu_1670_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_44_fu_1698_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_45_fu_1703_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_43_fu_1693_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_32_fu_1728_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_9_fu_1716_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_34_fu_1739_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln134_s_fu_1722_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_35_fu_1744_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_33_fu_1733_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_41_fu_1761_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_42_fu_1766_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln124_40_fu_1757_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component clefia_enc_clefia_enc_Pipeline_VITIS_LOOP_193_1_clefia_s0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_enc_clefia_enc_Pipeline_VITIS_LOOP_193_1_clefia_s1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component clefia_enc_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    clefia_s0_U : component clefia_enc_clefia_enc_Pipeline_VITIS_LOOP_193_1_clefia_s0_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s0_address0,
        ce0 => clefia_s0_ce0,
        q0 => clefia_s0_q0);

    clefia_s1_U : component clefia_enc_clefia_enc_Pipeline_VITIS_LOOP_193_1_clefia_s1_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => clefia_s1_address0,
        ce0 => clefia_s1_ce0,
        q0 => clefia_s1_q0);

    flow_control_loop_pipe_sequential_init_U : component clefia_enc_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage12,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    idx105_i_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                idx105_i_fu_124 <= ap_const_lv8_0;
            elsif (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                idx105_i_fu_124 <= add_ln188_reg_1827;
            end if; 
        end if;
    end process;

    r_assign_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                r_assign_fu_128 <= ap_const_lv5_19;
            elsif (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                r_assign_fu_128 <= add_ln193_fu_1778_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                add_ln188_reg_1827 <= add_ln188_fu_569_p2;
                idx105_i_load_reg_1806 <= ap_sig_allocacmp_idx105_i_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                fin_load_10_reg_2012 <= fin_q1;
                fin_load_11_reg_2019 <= fin_q0;
                icmp_ln197_reg_2026 <= icmp_ln197_fu_808_p2;
                r_assign_load_reg_1966 <= r_assign_fu_128;
                tmp_15_reg_2002 <= select_ln131_7_fu_778_p3(7 downto 7);
                trunc_ln134_7_reg_1997 <= trunc_ln134_7_fu_786_p1;
                x_assign_s_reg_1991 <= x_assign_s_fu_756_p3;
                xor_ln124_3_reg_1981 <= xor_ln124_3_fu_713_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                fin_load_14_reg_2191 <= fin_q1;
                fin_load_15_reg_2196 <= fin_q0;
                tmp_21_reg_2180 <= select_ln131_10_fu_1387_p3(7 downto 7);
                trunc_ln134_10_reg_2175 <= trunc_ln134_10_fu_1395_p1;
                xor_ln124_15_reg_2165 <= xor_ln124_15_fu_1280_p2;
                xor_ln180_reg_2185 <= xor_ln180_fu_1407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                fin_load_1_reg_1863 <= fin_q0;
                fin_load_reg_1847 <= fin_q1;
                xor_ln124_reg_1853 <= xor_ln124_fu_580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                fin_load_2_reg_1892 <= fin_q1;
                fin_load_3_reg_1899 <= fin_q0;
                xor_ln124_1_reg_1882 <= xor_ln124_1_fu_596_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                fin_load_8_reg_1952 <= fin_q1;
                fin_load_9_reg_1959 <= fin_q0;
                tmp_13_reg_1947 <= select_ln131_6_fu_690_p3(7 downto 7);
                trunc_ln134_6_reg_1942 <= trunc_ln134_6_fu_698_p1;
                x_assign_2_reg_1936 <= x_assign_2_fu_668_p3;
                xor_ln124_2_reg_1921 <= xor_ln124_2_fu_615_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_540 <= clefia_s0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_544 <= clefia_s1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_548 <= fin_q1;
                reg_552 <= fin_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_29_reg_2237 <= select_ln131_14_fu_1632_p3(7 downto 7);
                trunc_ln134_14_reg_2232 <= trunc_ln134_14_fu_1640_p1;
                x_assign_7_reg_2227 <= x_assign_7_fu_1568_p3;
                xor_ln124_17_reg_2242 <= xor_ln124_17_fu_1687_p2;
                xor_ln124_19_reg_2248 <= xor_ln124_19_fu_1709_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_35_reg_2160 <= select_ln131_17_fu_1260_p3(7 downto 7);
                trunc_ln134_17_reg_2155 <= trunc_ln134_17_fu_1268_p1;
                x_assign_9_reg_2150 <= x_assign_9_fu_1196_p3;
                xor_ln124_14_reg_2135 <= xor_ln124_14_fu_1143_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_39_reg_2222 <= select_ln131_19_fu_1514_p3(7 downto 7);
                trunc_ln134_19_reg_2217 <= trunc_ln134_19_fu_1522_p1;
                x_assign_5_reg_2211 <= x_assign_5_fu_1450_p3;
                z_6_reg_2201 <= clefia_s1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_5_reg_2061 <= select_ln131_2_fu_874_p3(7 downto 7);
                trunc_ln134_2_reg_2056 <= trunc_ln134_2_fu_882_p1;
                x_assign_6_reg_2050 <= x_assign_6_fu_852_p3;
                xor_ln124_12_reg_2066 <= xor_ln124_12_fu_894_p2;
                z_2_reg_2040 <= clefia_s0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                xor_ln124_10_reg_2098 <= xor_ln124_10_fu_1090_p2;
                xor_ln124_11_reg_2104 <= xor_ln124_11_fu_1118_p2;
                xor_ln124_13_reg_2110 <= xor_ln124_13_fu_1124_p2;
                xor_ln124_8_reg_2086 <= xor_ln124_8_fu_1034_p2;
                xor_ln124_9_reg_2092 <= xor_ln124_9_fu_1062_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                xor_ln124_16_reg_2253 <= xor_ln124_16_fu_1750_p2;
                xor_ln124_18_reg_2258 <= xor_ln124_18_fu_1772_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state13, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln121_1_fu_601_p2 <= std_logic_vector(unsigned(idx105_i_load_reg_1806) + unsigned(ap_const_lv8_A));
    add_ln121_2_fu_620_p2 <= std_logic_vector(unsigned(idx105_i_load_reg_1806) + unsigned(ap_const_lv8_B));
    add_ln121_3_fu_798_p2 <= std_logic_vector(unsigned(idx105_i_load_reg_1806) + unsigned(ap_const_lv8_C));
    add_ln121_4_fu_899_p2 <= std_logic_vector(unsigned(idx105_i_load_reg_1806) + unsigned(ap_const_lv8_D));
    add_ln121_5_fu_1129_p2 <= std_logic_vector(unsigned(idx105_i_load_reg_1806) + unsigned(ap_const_lv8_E));
    add_ln121_6_fu_1148_p2 <= std_logic_vector(unsigned(idx105_i_load_reg_1806) + unsigned(ap_const_lv8_F));
    add_ln121_fu_586_p2 <= std_logic_vector(unsigned(idx105_i_load_reg_1806) + unsigned(ap_const_lv8_9));
    add_ln188_cast_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln188_fu_569_p2),64));
    add_ln188_fu_569_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_idx105_i_load) + unsigned(ap_const_lv8_8));
    add_ln193_fu_1778_p2 <= std_logic_vector(unsigned(r_assign_load_reg_1966) + unsigned(ap_const_lv5_1F));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage12_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2026)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_condition_exit_pp0_iter0_stage12 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state13, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage12;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_idx105_i_load_assign_proc : process(ap_CS_fsm_state1, idx105_i_fu_124, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_idx105_i_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_idx105_i_load <= idx105_i_fu_124;
        end if; 
    end process;


    clefia_s0_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state10, zext_ln150_fu_611_p1, zext_ln152_fu_718_p1, zext_ln174_fu_1158_p1, zext_ln176_fu_1412_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            clefia_s0_address0 <= zext_ln176_fu_1412_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            clefia_s0_address0 <= zext_ln174_fu_1158_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            clefia_s0_address0 <= zext_ln152_fu_718_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            clefia_s0_address0 <= zext_ln150_fu_611_p1(8 - 1 downto 0);
        else 
            clefia_s0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s0_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            clefia_s0_ce0 <= ap_const_logic_1;
        else 
            clefia_s0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clefia_s1_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln151_fu_630_p1, zext_ln153_fu_814_p1, zext_ln173_fu_1139_p1, zext_ln175_fu_1285_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            clefia_s1_address0 <= zext_ln175_fu_1285_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            clefia_s1_address0 <= zext_ln173_fu_1139_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            clefia_s1_address0 <= zext_ln153_fu_814_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            clefia_s1_address0 <= zext_ln151_fu_630_p1(8 - 1 downto 0);
        else 
            clefia_s1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clefia_s1_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            clefia_s1_ce0 <= ap_const_logic_1;
        else 
            clefia_s1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fin_addr_12_reg_1837 <= ap_const_lv64_3(4 - 1 downto 0);
    fin_addr_13_reg_1842 <= ap_const_lv64_2(4 - 1 downto 0);
    fin_addr_14_reg_1817 <= ap_const_lv64_1(4 - 1 downto 0);
    fin_addr_15_reg_1822 <= ap_const_lv64_0(4 - 1 downto 0);
    fin_addr_4_reg_1911 <= ap_const_lv64_B(4 - 1 downto 0);
    fin_addr_5_reg_1916 <= ap_const_lv64_A(4 - 1 downto 0);

    fin_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln197_reg_2026, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, fin_addr_14_reg_1817, fin_addr_12_reg_1837, ap_CS_fsm_state2, ap_CS_fsm_state3, fin_addr_4_reg_1911, icmp_ln197_fu_808_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            fin_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            fin_address0 <= fin_addr_4_reg_1911;
        elsif (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            fin_address0 <= fin_addr_12_reg_1837;
        elsif (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            fin_address0 <= fin_addr_14_reg_1817;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            fin_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            fin_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            fin_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln197_fu_808_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            fin_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fin_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fin_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fin_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            fin_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            fin_address0 <= "XXXX";
        end if; 
    end process;


    fin_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, icmp_ln197_reg_2026, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, fin_addr_15_reg_1822, ap_CS_fsm_state2, fin_addr_13_reg_1842, ap_CS_fsm_state3, fin_addr_5_reg_1916, icmp_ln197_fu_808_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_address1 <= fin_addr_5_reg_1916;
        elsif (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            fin_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            fin_address1 <= fin_addr_13_reg_1842;
        elsif (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            fin_address1 <= fin_addr_15_reg_1822;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            fin_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            fin_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            fin_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln197_fu_808_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            fin_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fin_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fin_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fin_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            fin_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            fin_address1 <= "XXXX";
        end if; 
    end process;


    fin_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln197_reg_2026, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln197_fu_808_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln197_fu_808_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            fin_ce0 <= ap_const_logic_1;
        else 
            fin_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fin_ce1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13, icmp_ln197_reg_2026, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln197_fu_808_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln197_fu_808_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            fin_ce1 <= ap_const_logic_1;
        else 
            fin_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    fin_d0_assign_proc : process(icmp_ln197_reg_2026, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, fin_load_1_reg_1863, fin_load_3_reg_1899, fin_load_9_reg_1959, fin_load_11_reg_2019, icmp_ln197_fu_808_p2, ap_CS_fsm_state7, xor_ln124_9_reg_2092, xor_ln124_11_reg_2104, ap_CS_fsm_state10, ap_CS_fsm_state11, xor_ln124_19_fu_1709_p2, xor_ln124_16_fu_1750_p2, ap_CS_fsm_state12)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            fin_d0 <= xor_ln124_16_fu_1750_p2;
        elsif (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            fin_d0 <= xor_ln124_19_fu_1709_p2;
        elsif (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            fin_d0 <= xor_ln124_11_reg_2104;
        elsif (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            fin_d0 <= xor_ln124_9_reg_2092;
        elsif (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            fin_d0 <= fin_load_3_reg_1899;
        elsif (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            fin_d0 <= fin_load_1_reg_1863;
        elsif (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            fin_d0 <= fin_load_11_reg_2019;
        elsif (((icmp_ln197_fu_808_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            fin_d0 <= fin_load_9_reg_1959;
        else 
            fin_d0 <= "XXXXXXXX";
        end if; 
    end process;


    fin_d1_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2026, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, fin_load_reg_1847, fin_load_2_reg_1892, fin_load_8_reg_1952, fin_load_10_reg_2012, icmp_ln197_fu_808_p2, ap_CS_fsm_state7, xor_ln124_8_reg_2086, xor_ln124_10_reg_2098, ap_CS_fsm_state10, xor_ln124_17_reg_2242, ap_CS_fsm_state12, xor_ln124_18_reg_2258)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_d1 <= xor_ln124_18_reg_2258;
        elsif (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            fin_d1 <= xor_ln124_17_reg_2242;
        elsif (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            fin_d1 <= xor_ln124_10_reg_2098;
        elsif (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            fin_d1 <= xor_ln124_8_reg_2086;
        elsif (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            fin_d1 <= fin_load_2_reg_1892;
        elsif (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            fin_d1 <= fin_load_reg_1847;
        elsif (((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            fin_d1 <= fin_load_10_reg_2012;
        elsif (((icmp_ln197_fu_808_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            fin_d1 <= fin_load_8_reg_1952;
        else 
            fin_d1 <= "XXXXXXXX";
        end if; 
    end process;

    fin_load_10_out <= fin_load_10_reg_2012;

    fin_load_10_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2026)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_load_10_out_ap_vld <= ap_const_logic_1;
        else 
            fin_load_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_load_11_out <= fin_load_11_reg_2019;

    fin_load_11_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2026)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_load_11_out_ap_vld <= ap_const_logic_1;
        else 
            fin_load_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_load_1_out <= fin_load_1_reg_1863;

    fin_load_1_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2026)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_load_1_out_ap_vld <= ap_const_logic_1;
        else 
            fin_load_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_load_2_out <= fin_load_2_reg_1892;

    fin_load_2_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2026)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_load_2_out_ap_vld <= ap_const_logic_1;
        else 
            fin_load_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_load_3_out <= fin_load_3_reg_1899;

    fin_load_3_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2026)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_load_3_out_ap_vld <= ap_const_logic_1;
        else 
            fin_load_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_load_8_out <= fin_load_8_reg_1952;

    fin_load_8_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2026)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_load_8_out_ap_vld <= ap_const_logic_1;
        else 
            fin_load_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_load_9_out <= fin_load_9_reg_1959;

    fin_load_9_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2026)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_load_9_out_ap_vld <= ap_const_logic_1;
        else 
            fin_load_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fin_load_out <= fin_load_reg_1847;

    fin_load_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2026)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fin_load_out_ap_vld <= ap_const_logic_1;
        else 
            fin_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    fin_we0_assign_proc : process(icmp_ln197_reg_2026, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, icmp_ln197_fu_808_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((((icmp_ln197_fu_808_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            fin_we0 <= ap_const_logic_1;
        else 
            fin_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fin_we1_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2026, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, icmp_ln197_fu_808_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((((icmp_ln197_fu_808_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln197_reg_2026 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            fin_we1 <= ap_const_logic_1;
        else 
            fin_we1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln197_fu_808_p2 <= "1" when (r_assign_fu_128 = ap_const_lv5_0) else "0";
    or_ln134_1_fu_1652_p3 <= (trunc_ln134_17_reg_2155 & tmp_35_reg_2160);
    or_ln134_2_fu_909_p3 <= (trunc_ln134_2_reg_2056 & tmp_5_reg_2061);
    or_ln134_3_fu_1658_p3 <= (trunc_ln134_19_reg_2217 & tmp_39_reg_2222);
    or_ln134_4_fu_991_p3 <= (trunc_ln134_4_fu_979_p1 & tmp_9_fu_983_p3);
    or_ln134_6_fu_999_p3 <= (trunc_ln134_6_reg_1942 & tmp_13_reg_1947);
    or_ln134_9_fu_1716_p3 <= (trunc_ln134_10_reg_2175 & tmp_21_reg_2180);
    or_ln134_s_fu_1722_p3 <= (trunc_ln134_14_reg_2232 & tmp_29_reg_2237);
    or_ln1_fu_1005_p3 <= (trunc_ln134_7_reg_1997 & tmp_15_reg_2002);

    rk_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state7, add_ln188_cast_fu_575_p1, zext_ln121_fu_591_p1, zext_ln121_1_fu_606_p1, zext_ln121_2_fu_625_p1, zext_ln121_3_fu_803_p1, zext_ln121_4_fu_904_p1, zext_ln121_5_fu_1134_p1, zext_ln121_6_fu_1153_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            rk_address0 <= zext_ln121_6_fu_1153_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rk_address0 <= zext_ln121_5_fu_1134_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rk_address0 <= zext_ln121_4_fu_904_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rk_address0 <= zext_ln121_3_fu_803_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rk_address0 <= zext_ln121_2_fu_625_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rk_address0 <= zext_ln121_1_fu_606_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rk_address0 <= zext_ln121_fu_591_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            rk_address0 <= add_ln188_cast_fu_575_p1(8 - 1 downto 0);
        else 
            rk_address0 <= "XXXXXXXX";
        end if; 
    end process;


    rk_ce0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            rk_ce0 <= ap_const_logic_1;
        else 
            rk_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln131_10_fu_1387_p3 <= 
        xor_ln132_10_fu_1381_p2 when (tmp_20_fu_1373_p3(0) = '1') else 
        x_assign_4_fu_1365_p3;
    select_ln131_11_fu_1430_p3 <= 
        xor_ln132_11_fu_1424_p2 when (tmp_22_fu_1416_p3(0) = '1') else 
        clefia_s1_q0;
    select_ln131_12_fu_1548_p3 <= 
        xor_ln132_12_fu_1542_p2 when (tmp_24_fu_1534_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_13_fu_1590_p3 <= 
        xor_ln132_13_fu_1584_p2 when (tmp_26_fu_1576_p3(0) = '1') else 
        x_assign_7_fu_1568_p3;
    select_ln131_14_fu_1632_p3 <= 
        xor_ln132_14_fu_1626_p2 when (tmp_28_fu_1618_p3(0) = '1') else 
        x_assign_8_fu_1610_p3;
    select_ln131_15_fu_1176_p3 <= 
        xor_ln132_15_fu_1170_p2 when (tmp_30_fu_1162_p3(0) = '1') else 
        clefia_s1_q0;
    select_ln131_16_fu_1218_p3 <= 
        xor_ln132_16_fu_1212_p2 when (tmp_32_fu_1204_p3(0) = '1') else 
        x_assign_9_fu_1196_p3;
    select_ln131_17_fu_1260_p3 <= 
        xor_ln132_17_fu_1254_p2 when (tmp_34_fu_1246_p3(0) = '1') else 
        x_assign_10_fu_1238_p3;
    select_ln131_18_fu_1472_p3 <= 
        xor_ln132_18_fu_1466_p2 when (tmp_36_fu_1458_p3(0) = '1') else 
        x_assign_5_fu_1450_p3;
    select_ln131_19_fu_1514_p3 <= 
        xor_ln132_19_fu_1508_p2 when (tmp_38_fu_1500_p3(0) = '1') else 
        x_assign_11_fu_1492_p3;
    select_ln131_1_fu_832_p3 <= 
        xor_ln132_1_fu_826_p2 when (tmp_2_fu_818_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_2_fu_874_p3 <= 
        xor_ln132_2_fu_868_p2 when (tmp_4_fu_860_p3(0) = '1') else 
        x_assign_6_fu_852_p3;
    select_ln131_3_fu_929_p3 <= 
        xor_ln132_3_fu_923_p2 when (tmp_6_fu_915_p3(0) = '1') else 
        clefia_s1_q0;
    select_ln131_4_fu_971_p3 <= 
        xor_ln132_4_fu_965_p2 when (tmp_8_fu_957_p3(0) = '1') else 
        x_assign_1_fu_949_p3;
    select_ln131_5_fu_648_p3 <= 
        xor_ln132_5_fu_642_p2 when (tmp_10_fu_634_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_6_fu_690_p3 <= 
        xor_ln132_6_fu_684_p2 when (tmp_12_fu_676_p3(0) = '1') else 
        x_assign_2_fu_668_p3;
    select_ln131_7_fu_778_p3 <= 
        xor_ln132_7_fu_772_p2 when (tmp_14_fu_764_p3(0) = '1') else 
        x_assign_s_fu_756_p3;
    select_ln131_8_fu_1303_p3 <= 
        xor_ln132_8_fu_1297_p2 when (tmp_16_fu_1289_p3(0) = '1') else 
        clefia_s0_q0;
    select_ln131_9_fu_1345_p3 <= 
        xor_ln132_9_fu_1339_p2 when (tmp_18_fu_1331_p3(0) = '1') else 
        x_assign_3_fu_1323_p3;
    select_ln131_fu_736_p3 <= 
        xor_ln132_fu_730_p2 when (tmp_fu_722_p3(0) = '1') else 
        clefia_s1_q0;
    tmp_10_fu_634_p3 <= clefia_s0_q0(7 downto 7);
    tmp_11_fu_660_p3 <= select_ln131_5_fu_648_p3(7 downto 7);
    tmp_12_fu_676_p3 <= select_ln131_5_fu_648_p3(6 downto 6);
    tmp_14_fu_764_p3 <= select_ln131_fu_736_p3(6 downto 6);
    tmp_16_fu_1289_p3 <= clefia_s0_q0(7 downto 7);
    tmp_17_fu_1315_p3 <= select_ln131_8_fu_1303_p3(7 downto 7);
    tmp_18_fu_1331_p3 <= select_ln131_8_fu_1303_p3(6 downto 6);
    tmp_19_fu_1357_p3 <= select_ln131_9_fu_1345_p3(7 downto 7);
    tmp_1_fu_748_p3 <= select_ln131_fu_736_p3(7 downto 7);
    tmp_20_fu_1373_p3 <= select_ln131_9_fu_1345_p3(6 downto 6);
    tmp_22_fu_1416_p3 <= clefia_s1_q0(7 downto 7);
    tmp_23_fu_1442_p3 <= select_ln131_11_fu_1430_p3(7 downto 7);
    tmp_24_fu_1534_p3 <= clefia_s0_q0(7 downto 7);
    tmp_25_fu_1560_p3 <= select_ln131_12_fu_1548_p3(7 downto 7);
    tmp_26_fu_1576_p3 <= select_ln131_12_fu_1548_p3(6 downto 6);
    tmp_27_fu_1602_p3 <= select_ln131_13_fu_1590_p3(7 downto 7);
    tmp_28_fu_1618_p3 <= select_ln131_13_fu_1590_p3(6 downto 6);
    tmp_2_fu_818_p3 <= clefia_s0_q0(7 downto 7);
    tmp_30_fu_1162_p3 <= clefia_s1_q0(7 downto 7);
    tmp_31_fu_1188_p3 <= select_ln131_15_fu_1176_p3(7 downto 7);
    tmp_32_fu_1204_p3 <= select_ln131_15_fu_1176_p3(6 downto 6);
    tmp_33_fu_1230_p3 <= select_ln131_16_fu_1218_p3(7 downto 7);
    tmp_34_fu_1246_p3 <= select_ln131_16_fu_1218_p3(6 downto 6);
    tmp_36_fu_1458_p3 <= select_ln131_11_fu_1430_p3(6 downto 6);
    tmp_37_fu_1484_p3 <= select_ln131_18_fu_1472_p3(7 downto 7);
    tmp_38_fu_1500_p3 <= select_ln131_18_fu_1472_p3(6 downto 6);
    tmp_3_fu_844_p3 <= select_ln131_1_fu_832_p3(7 downto 7);
    tmp_4_fu_860_p3 <= select_ln131_1_fu_832_p3(6 downto 6);
    tmp_6_fu_915_p3 <= clefia_s1_q0(7 downto 7);
    tmp_7_fu_941_p3 <= select_ln131_3_fu_929_p3(7 downto 7);
    tmp_8_fu_957_p3 <= select_ln131_3_fu_929_p3(6 downto 6);
    tmp_9_fu_983_p3 <= select_ln131_4_fu_971_p3(7 downto 7);
    tmp_fu_722_p3 <= clefia_s1_q0(7 downto 7);
    trunc_ln134_10_fu_1395_p1 <= select_ln131_10_fu_1387_p3(7 - 1 downto 0);
    trunc_ln134_11_fu_1438_p1 <= select_ln131_11_fu_1430_p3(7 - 1 downto 0);
    trunc_ln134_12_fu_1556_p1 <= select_ln131_12_fu_1548_p3(7 - 1 downto 0);
    trunc_ln134_13_fu_1598_p1 <= select_ln131_13_fu_1590_p3(7 - 1 downto 0);
    trunc_ln134_14_fu_1640_p1 <= select_ln131_14_fu_1632_p3(7 - 1 downto 0);
    trunc_ln134_15_fu_1184_p1 <= select_ln131_15_fu_1176_p3(7 - 1 downto 0);
    trunc_ln134_16_fu_1226_p1 <= select_ln131_16_fu_1218_p3(7 - 1 downto 0);
    trunc_ln134_17_fu_1268_p1 <= select_ln131_17_fu_1260_p3(7 - 1 downto 0);
    trunc_ln134_18_fu_1480_p1 <= select_ln131_18_fu_1472_p3(7 - 1 downto 0);
    trunc_ln134_19_fu_1522_p1 <= select_ln131_19_fu_1514_p3(7 - 1 downto 0);
    trunc_ln134_1_fu_840_p1 <= select_ln131_1_fu_832_p3(7 - 1 downto 0);
    trunc_ln134_2_fu_882_p1 <= select_ln131_2_fu_874_p3(7 - 1 downto 0);
    trunc_ln134_3_fu_937_p1 <= select_ln131_3_fu_929_p3(7 - 1 downto 0);
    trunc_ln134_4_fu_979_p1 <= select_ln131_4_fu_971_p3(7 - 1 downto 0);
    trunc_ln134_5_fu_656_p1 <= select_ln131_5_fu_648_p3(7 - 1 downto 0);
    trunc_ln134_6_fu_698_p1 <= select_ln131_6_fu_690_p3(7 - 1 downto 0);
    trunc_ln134_7_fu_786_p1 <= select_ln131_7_fu_778_p3(7 - 1 downto 0);
    trunc_ln134_8_fu_1311_p1 <= select_ln131_8_fu_1303_p3(7 - 1 downto 0);
    trunc_ln134_9_fu_1353_p1 <= select_ln131_9_fu_1345_p3(7 - 1 downto 0);
    trunc_ln134_fu_744_p1 <= select_ln131_fu_736_p3(7 - 1 downto 0);
    x_assign_10_fu_1238_p3 <= (trunc_ln134_16_fu_1226_p1 & tmp_33_fu_1230_p3);
    x_assign_11_fu_1492_p3 <= (trunc_ln134_18_fu_1480_p1 & tmp_37_fu_1484_p3);
    x_assign_1_fu_949_p3 <= (trunc_ln134_3_fu_937_p1 & tmp_7_fu_941_p3);
    x_assign_2_fu_668_p3 <= (trunc_ln134_5_fu_656_p1 & tmp_11_fu_660_p3);
    x_assign_3_fu_1323_p3 <= (trunc_ln134_8_fu_1311_p1 & tmp_17_fu_1315_p3);
    x_assign_4_fu_1365_p3 <= (trunc_ln134_9_fu_1353_p1 & tmp_19_fu_1357_p3);
    x_assign_5_fu_1450_p3 <= (trunc_ln134_11_fu_1438_p1 & tmp_23_fu_1442_p3);
    x_assign_6_fu_852_p3 <= (trunc_ln134_1_fu_840_p1 & tmp_3_fu_844_p3);
    x_assign_7_fu_1568_p3 <= (trunc_ln134_12_fu_1556_p1 & tmp_25_fu_1560_p3);
    x_assign_8_fu_1610_p3 <= (trunc_ln134_13_fu_1598_p1 & tmp_27_fu_1602_p3);
    x_assign_9_fu_1196_p3 <= (trunc_ln134_15_fu_1184_p1 & tmp_31_fu_1188_p3);
    x_assign_s_fu_756_p3 <= (trunc_ln134_fu_744_p1 & tmp_1_fu_748_p3);
    xor_ln124_10_fu_1090_p2 <= (xor_ln124_27_fu_1084_p2 xor xor_ln124_25_fu_1074_p2);
    xor_ln124_10_out <= xor_ln124_10_reg_2098;

    xor_ln124_10_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2026)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_10_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_11_fu_1118_p2 <= (xor_ln124_31_fu_1113_p2 xor xor_ln124_29_fu_1102_p2);
    xor_ln124_11_out <= xor_ln124_11_reg_2104;

    xor_ln124_11_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2026)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_11_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_12_fu_894_p2 <= (rk_q0 xor fin_load_8_reg_1952);
    xor_ln124_13_fu_1124_p2 <= (rk_q0 xor fin_load_9_reg_1959);
    xor_ln124_14_fu_1143_p2 <= (rk_q0 xor fin_load_10_reg_2012);
    xor_ln124_15_fu_1280_p2 <= (rk_q0 xor fin_load_11_reg_2019);
    xor_ln124_16_fu_1750_p2 <= (xor_ln124_35_fu_1744_p2 xor xor_ln124_33_fu_1733_p2);
    xor_ln124_16_out <= xor_ln124_16_reg_2253;

    xor_ln124_16_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2026)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_16_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_16_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_17_fu_1687_p2 <= (xor_ln124_39_fu_1681_p2 xor xor_ln124_37_fu_1670_p2);
    xor_ln124_17_out <= xor_ln124_17_reg_2242;

    xor_ln124_17_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2026)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_17_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_17_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_18_fu_1772_p2 <= (xor_ln124_42_fu_1766_p2 xor xor_ln124_40_fu_1757_p2);
    xor_ln124_18_out <= xor_ln124_18_reg_2258;

    xor_ln124_18_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2026)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_18_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_18_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_19_fu_1709_p2 <= (xor_ln124_45_fu_1703_p2 xor xor_ln124_43_fu_1693_p2);
    xor_ln124_19_out <= xor_ln124_19_reg_2248;

    xor_ln124_19_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2026)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_19_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_19_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_1_fu_596_p2 <= (rk_q0 xor fin_load_1_reg_1863);
    xor_ln124_20_fu_1040_p2 <= (reg_552 xor or_ln134_2_fu_909_p3);
    xor_ln124_21_fu_1046_p2 <= (xor_ln124_20_fu_1040_p2 xor reg_544);
    xor_ln124_22_fu_1052_p2 <= (x_assign_6_reg_2050 xor x_assign_2_reg_1936);
    xor_ln124_23_fu_1056_p2 <= (xor_ln124_22_fu_1052_p2 xor or_ln134_4_fu_991_p3);
    xor_ln124_24_fu_1068_p2 <= (or_ln1_fu_1005_p3 xor fin_q1);
    xor_ln124_25_fu_1074_p2 <= (z_2_reg_2040 xor xor_ln124_24_fu_1068_p2);
    xor_ln124_26_fu_1079_p2 <= (x_assign_s_reg_1991 xor or_ln134_6_fu_999_p3);
    xor_ln124_27_fu_1084_p2 <= (xor_ln124_26_fu_1079_p2 xor x_assign_1_fu_949_p3);
    xor_ln124_28_fu_1096_p2 <= (or_ln1_fu_1005_p3 xor fin_q0);
    xor_ln124_29_fu_1102_p2 <= (xor_ln124_28_fu_1096_p2 xor clefia_s1_q0);
    xor_ln124_2_fu_615_p2 <= (rk_q0 xor fin_load_2_reg_1892);
    xor_ln124_30_fu_1108_p2 <= (x_assign_2_reg_1936 xor or_ln134_6_fu_999_p3);
    xor_ln124_31_fu_1113_p2 <= (xor_ln124_30_fu_1108_p2 xor x_assign_6_reg_2050);
    xor_ln124_32_fu_1728_p2 <= (x_assign_7_reg_2227 xor reg_548);
    xor_ln124_33_fu_1733_p2 <= (xor_ln124_32_fu_1728_p2 xor reg_544);
    xor_ln124_34_fu_1739_p2 <= (x_assign_5_reg_2211 xor or_ln134_9_fu_1716_p3);
    xor_ln124_35_fu_1744_p2 <= (xor_ln124_34_fu_1739_p2 xor or_ln134_s_fu_1722_p3);
    xor_ln124_36_fu_1664_p2 <= (x_assign_7_fu_1568_p3 xor reg_552);
    xor_ln124_37_fu_1670_p2 <= (xor_ln124_36_fu_1664_p2 xor reg_540);
    xor_ln124_38_fu_1676_p2 <= (x_assign_5_reg_2211 xor or_ln134_1_fu_1652_p3);
    xor_ln124_39_fu_1681_p2 <= (xor_ln124_38_fu_1676_p2 xor or_ln134_3_fu_1658_p3);
    xor_ln124_3_fu_713_p2 <= (rk_q0 xor fin_load_3_reg_1899);
    xor_ln124_40_fu_1757_p2 <= (z_6_reg_2201 xor fin_load_14_reg_2191);
    xor_ln124_41_fu_1761_p2 <= (xor_ln180_reg_2185 xor or_ln134_s_fu_1722_p3);
    xor_ln124_42_fu_1766_p2 <= (xor_ln124_41_fu_1761_p2 xor or_ln134_9_fu_1716_p3);
    xor_ln124_43_fu_1693_p2 <= (fin_load_15_reg_2196 xor clefia_s0_q0);
    xor_ln124_44_fu_1698_p2 <= (xor_ln180_reg_2185 xor or_ln134_3_fu_1658_p3);
    xor_ln124_45_fu_1703_p2 <= (xor_ln124_44_fu_1698_p2 xor or_ln134_1_fu_1652_p3);
    xor_ln124_4_fu_1011_p2 <= (x_assign_1_fu_949_p3 xor reg_548);
    xor_ln124_5_fu_1017_p2 <= (xor_ln124_4_fu_1011_p2 xor reg_540);
    xor_ln124_6_fu_1023_p2 <= (x_assign_s_reg_1991 xor or_ln134_2_fu_909_p3);
    xor_ln124_7_fu_1028_p2 <= (xor_ln124_6_fu_1023_p2 xor or_ln134_4_fu_991_p3);
    xor_ln124_8_fu_1034_p2 <= (xor_ln124_7_fu_1028_p2 xor xor_ln124_5_fu_1017_p2);
    xor_ln124_8_out <= xor_ln124_8_reg_2086;

    xor_ln124_8_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2026)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_8_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_9_fu_1062_p2 <= (xor_ln124_23_fu_1056_p2 xor xor_ln124_21_fu_1046_p2);
    xor_ln124_9_out <= xor_ln124_9_reg_2092;

    xor_ln124_9_out_ap_vld_assign_proc : process(ap_CS_fsm_state13, icmp_ln197_reg_2026)
    begin
        if (((icmp_ln197_reg_2026 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            xor_ln124_9_out_ap_vld <= ap_const_logic_1;
        else 
            xor_ln124_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln124_fu_580_p2 <= (rk_q0 xor fin_q1);
    xor_ln132_10_fu_1381_p2 <= (x_assign_4_fu_1365_p3 xor ap_const_lv8_E);
    xor_ln132_11_fu_1424_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln132_12_fu_1542_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_13_fu_1584_p2 <= (x_assign_7_fu_1568_p3 xor ap_const_lv8_E);
    xor_ln132_14_fu_1626_p2 <= (x_assign_8_fu_1610_p3 xor ap_const_lv8_E);
    xor_ln132_15_fu_1170_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln132_16_fu_1212_p2 <= (x_assign_9_fu_1196_p3 xor ap_const_lv8_E);
    xor_ln132_17_fu_1254_p2 <= (x_assign_10_fu_1238_p3 xor ap_const_lv8_E);
    xor_ln132_18_fu_1466_p2 <= (x_assign_5_fu_1450_p3 xor ap_const_lv8_E);
    xor_ln132_19_fu_1508_p2 <= (x_assign_11_fu_1492_p3 xor ap_const_lv8_E);
    xor_ln132_1_fu_826_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_2_fu_868_p2 <= (x_assign_6_fu_852_p3 xor ap_const_lv8_E);
    xor_ln132_3_fu_923_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln132_4_fu_965_p2 <= (x_assign_1_fu_949_p3 xor ap_const_lv8_E);
    xor_ln132_5_fu_642_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_6_fu_684_p2 <= (x_assign_2_fu_668_p3 xor ap_const_lv8_E);
    xor_ln132_7_fu_772_p2 <= (x_assign_s_fu_756_p3 xor ap_const_lv8_E);
    xor_ln132_8_fu_1297_p2 <= (clefia_s0_q0 xor ap_const_lv8_E);
    xor_ln132_9_fu_1339_p2 <= (x_assign_3_fu_1323_p3 xor ap_const_lv8_E);
    xor_ln132_fu_730_p2 <= (clefia_s1_q0 xor ap_const_lv8_E);
    xor_ln180_fu_1407_p2 <= (x_assign_9_reg_2150 xor x_assign_3_fu_1323_p3);
    zext_ln121_1_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_1_fu_601_p2),64));
    zext_ln121_2_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_2_fu_620_p2),64));
    zext_ln121_3_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_3_fu_798_p2),64));
    zext_ln121_4_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_4_fu_899_p2),64));
    zext_ln121_5_fu_1134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_5_fu_1129_p2),64));
    zext_ln121_6_fu_1153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_6_fu_1148_p2),64));
    zext_ln121_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_fu_586_p2),64));
    zext_ln150_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_reg_1853),64));
    zext_ln151_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_1_reg_1882),64));
    zext_ln152_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_2_reg_1921),64));
    zext_ln153_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_3_reg_1981),64));
    zext_ln173_fu_1139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_12_reg_2066),64));
    zext_ln174_fu_1158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_13_reg_2110),64));
    zext_ln175_fu_1285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_14_reg_2135),64));
    zext_ln176_fu_1412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln124_15_reg_2165),64));
end behav;
