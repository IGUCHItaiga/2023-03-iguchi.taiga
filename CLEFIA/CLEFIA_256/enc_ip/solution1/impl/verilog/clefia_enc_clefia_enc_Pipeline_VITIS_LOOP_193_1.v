// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clefia_enc_clefia_enc_Pipeline_VITIS_LOOP_193_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fin_address0,
        fin_ce0,
        fin_we0,
        fin_d0,
        fin_q0,
        fin_address1,
        fin_ce1,
        fin_we1,
        fin_d1,
        fin_q1,
        fin_load_out,
        fin_load_out_ap_vld,
        fin_load_1_out,
        fin_load_1_out_ap_vld,
        fin_load_2_out,
        fin_load_2_out_ap_vld,
        fin_load_3_out,
        fin_load_3_out_ap_vld,
        xor_ln124_8_out,
        xor_ln124_8_out_ap_vld,
        xor_ln124_9_out,
        xor_ln124_9_out_ap_vld,
        xor_ln124_10_out,
        xor_ln124_10_out_ap_vld,
        xor_ln124_11_out,
        xor_ln124_11_out_ap_vld,
        fin_load_8_out,
        fin_load_8_out_ap_vld,
        fin_load_9_out,
        fin_load_9_out_ap_vld,
        fin_load_10_out,
        fin_load_10_out_ap_vld,
        fin_load_11_out,
        fin_load_11_out_ap_vld,
        xor_ln124_16_out,
        xor_ln124_16_out_ap_vld,
        xor_ln124_17_out,
        xor_ln124_17_out_ap_vld,
        xor_ln124_18_out,
        xor_ln124_18_out_ap_vld,
        xor_ln124_19_out,
        xor_ln124_19_out_ap_vld,
        rk_address0,
        rk_ce0,
        rk_q0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] fin_address0;
output   fin_ce0;
output   fin_we0;
output  [7:0] fin_d0;
input  [7:0] fin_q0;
output  [3:0] fin_address1;
output   fin_ce1;
output   fin_we1;
output  [7:0] fin_d1;
input  [7:0] fin_q1;
output  [7:0] fin_load_out;
output   fin_load_out_ap_vld;
output  [7:0] fin_load_1_out;
output   fin_load_1_out_ap_vld;
output  [7:0] fin_load_2_out;
output   fin_load_2_out_ap_vld;
output  [7:0] fin_load_3_out;
output   fin_load_3_out_ap_vld;
output  [7:0] xor_ln124_8_out;
output   xor_ln124_8_out_ap_vld;
output  [7:0] xor_ln124_9_out;
output   xor_ln124_9_out_ap_vld;
output  [7:0] xor_ln124_10_out;
output   xor_ln124_10_out_ap_vld;
output  [7:0] xor_ln124_11_out;
output   xor_ln124_11_out_ap_vld;
output  [7:0] fin_load_8_out;
output   fin_load_8_out_ap_vld;
output  [7:0] fin_load_9_out;
output   fin_load_9_out_ap_vld;
output  [7:0] fin_load_10_out;
output   fin_load_10_out_ap_vld;
output  [7:0] fin_load_11_out;
output   fin_load_11_out_ap_vld;
output  [7:0] xor_ln124_16_out;
output   xor_ln124_16_out_ap_vld;
output  [7:0] xor_ln124_17_out;
output   xor_ln124_17_out_ap_vld;
output  [7:0] xor_ln124_18_out;
output   xor_ln124_18_out_ap_vld;
output  [7:0] xor_ln124_19_out;
output   xor_ln124_19_out_ap_vld;
output  [7:0] rk_address0;
output   rk_ce0;
input  [7:0] rk_q0;

reg ap_idle;
reg[3:0] fin_address0;
reg fin_ce0;
reg fin_we0;
reg[7:0] fin_d0;
reg[3:0] fin_address1;
reg fin_ce1;
reg fin_we1;
reg[7:0] fin_d1;
reg fin_load_out_ap_vld;
reg fin_load_1_out_ap_vld;
reg fin_load_2_out_ap_vld;
reg fin_load_3_out_ap_vld;
reg xor_ln124_8_out_ap_vld;
reg xor_ln124_9_out_ap_vld;
reg xor_ln124_10_out_ap_vld;
reg xor_ln124_11_out_ap_vld;
reg fin_load_8_out_ap_vld;
reg fin_load_9_out_ap_vld;
reg fin_load_10_out_ap_vld;
reg fin_load_11_out_ap_vld;
reg xor_ln124_16_out_ap_vld;
reg xor_ln124_17_out_ap_vld;
reg xor_ln124_18_out_ap_vld;
reg xor_ln124_19_out_ap_vld;
reg[7:0] rk_address0;
reg rk_ce0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state13;
wire    ap_block_state13_pp0_stage12_iter0;
reg   [0:0] icmp_ln197_reg_2026;
reg    ap_condition_exit_pp0_iter0_stage12;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [7:0] clefia_s0_address0;
reg    clefia_s0_ce0;
wire   [7:0] clefia_s0_q0;
reg   [7:0] clefia_s1_address0;
reg    clefia_s1_ce0;
wire   [7:0] clefia_s1_q0;
reg   [7:0] reg_540;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_CS_fsm_state9;
wire    ap_block_state9_pp0_stage8_iter0;
reg   [7:0] reg_544;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_CS_fsm_state8;
wire    ap_block_state8_pp0_stage7_iter0;
reg   [7:0] reg_548;
wire    ap_CS_fsm_state6;
wire    ap_block_state6_pp0_stage5_iter0;
reg   [7:0] reg_552;
reg   [7:0] idx105_i_load_reg_1806;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [3:0] fin_addr_14_reg_1817;
wire   [3:0] fin_addr_15_reg_1822;
wire   [7:0] add_ln188_fu_569_p2;
reg   [7:0] add_ln188_reg_1827;
wire   [3:0] fin_addr_12_reg_1837;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [3:0] fin_addr_13_reg_1842;
reg   [7:0] fin_load_reg_1847;
wire   [7:0] xor_ln124_fu_580_p2;
reg   [7:0] xor_ln124_reg_1853;
reg   [7:0] fin_load_1_reg_1863;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire   [7:0] xor_ln124_1_fu_596_p2;
reg   [7:0] xor_ln124_1_reg_1882;
reg   [7:0] fin_load_2_reg_1892;
reg   [7:0] fin_load_3_reg_1899;
wire   [3:0] fin_addr_4_reg_1911;
wire   [3:0] fin_addr_5_reg_1916;
wire   [7:0] xor_ln124_2_fu_615_p2;
reg   [7:0] xor_ln124_2_reg_1921;
wire   [7:0] x_assign_2_fu_668_p3;
reg   [7:0] x_assign_2_reg_1936;
wire   [6:0] trunc_ln134_6_fu_698_p1;
reg   [6:0] trunc_ln134_6_reg_1942;
reg   [0:0] tmp_13_reg_1947;
reg   [7:0] fin_load_8_reg_1952;
reg   [7:0] fin_load_9_reg_1959;
reg   [4:0] r_assign_load_reg_1966;
wire   [7:0] xor_ln124_3_fu_713_p2;
reg   [7:0] xor_ln124_3_reg_1981;
wire   [7:0] x_assign_s_fu_756_p3;
reg   [7:0] x_assign_s_reg_1991;
wire   [6:0] trunc_ln134_7_fu_786_p1;
reg   [6:0] trunc_ln134_7_reg_1997;
reg   [0:0] tmp_15_reg_2002;
reg   [7:0] fin_load_10_reg_2012;
reg   [7:0] fin_load_11_reg_2019;
wire   [0:0] icmp_ln197_fu_808_p2;
reg   [7:0] z_2_reg_2040;
wire   [7:0] x_assign_6_fu_852_p3;
reg   [7:0] x_assign_6_reg_2050;
wire   [6:0] trunc_ln134_2_fu_882_p1;
reg   [6:0] trunc_ln134_2_reg_2056;
reg   [0:0] tmp_5_reg_2061;
wire   [7:0] xor_ln124_12_fu_894_p2;
reg   [7:0] xor_ln124_12_reg_2066;
wire    ap_CS_fsm_state7;
wire    ap_block_state7_pp0_stage6_iter0;
wire   [7:0] xor_ln124_8_fu_1034_p2;
reg   [7:0] xor_ln124_8_reg_2086;
wire   [7:0] xor_ln124_9_fu_1062_p2;
reg   [7:0] xor_ln124_9_reg_2092;
wire   [7:0] xor_ln124_10_fu_1090_p2;
reg   [7:0] xor_ln124_10_reg_2098;
wire   [7:0] xor_ln124_11_fu_1118_p2;
reg   [7:0] xor_ln124_11_reg_2104;
wire   [7:0] xor_ln124_13_fu_1124_p2;
reg   [7:0] xor_ln124_13_reg_2110;
wire   [7:0] xor_ln124_14_fu_1143_p2;
reg   [7:0] xor_ln124_14_reg_2135;
wire   [7:0] x_assign_9_fu_1196_p3;
reg   [7:0] x_assign_9_reg_2150;
wire   [6:0] trunc_ln134_17_fu_1268_p1;
reg   [6:0] trunc_ln134_17_reg_2155;
reg   [0:0] tmp_35_reg_2160;
wire   [7:0] xor_ln124_15_fu_1280_p2;
reg   [7:0] xor_ln124_15_reg_2165;
wire   [6:0] trunc_ln134_10_fu_1395_p1;
reg   [6:0] trunc_ln134_10_reg_2175;
reg   [0:0] tmp_21_reg_2180;
wire   [7:0] xor_ln180_fu_1407_p2;
reg   [7:0] xor_ln180_reg_2185;
reg   [7:0] fin_load_14_reg_2191;
reg   [7:0] fin_load_15_reg_2196;
reg   [7:0] z_6_reg_2201;
wire    ap_CS_fsm_state10;
wire    ap_block_state10_pp0_stage9_iter0;
wire   [7:0] x_assign_5_fu_1450_p3;
reg   [7:0] x_assign_5_reg_2211;
wire   [6:0] trunc_ln134_19_fu_1522_p1;
reg   [6:0] trunc_ln134_19_reg_2217;
reg   [0:0] tmp_39_reg_2222;
wire   [7:0] x_assign_7_fu_1568_p3;
reg   [7:0] x_assign_7_reg_2227;
wire    ap_CS_fsm_state11;
wire    ap_block_state11_pp0_stage10_iter0;
wire   [6:0] trunc_ln134_14_fu_1640_p1;
reg   [6:0] trunc_ln134_14_reg_2232;
reg   [0:0] tmp_29_reg_2237;
wire   [7:0] xor_ln124_17_fu_1687_p2;
reg   [7:0] xor_ln124_17_reg_2242;
wire   [7:0] xor_ln124_19_fu_1709_p2;
reg   [7:0] xor_ln124_19_reg_2248;
wire   [7:0] xor_ln124_16_fu_1750_p2;
reg   [7:0] xor_ln124_16_reg_2253;
wire    ap_CS_fsm_state12;
wire    ap_block_state12_pp0_stage11_iter0;
wire   [7:0] xor_ln124_18_fu_1772_p2;
reg   [7:0] xor_ln124_18_reg_2258;
wire   [63:0] add_ln188_cast_fu_575_p1;
wire   [63:0] zext_ln121_fu_591_p1;
wire   [63:0] zext_ln121_1_fu_606_p1;
wire   [63:0] zext_ln150_fu_611_p1;
wire   [63:0] zext_ln121_2_fu_625_p1;
wire   [63:0] zext_ln151_fu_630_p1;
wire   [63:0] zext_ln152_fu_718_p1;
wire   [63:0] zext_ln121_3_fu_803_p1;
wire   [63:0] zext_ln153_fu_814_p1;
wire   [63:0] zext_ln121_4_fu_904_p1;
wire   [63:0] zext_ln121_5_fu_1134_p1;
wire   [63:0] zext_ln173_fu_1139_p1;
wire   [63:0] zext_ln121_6_fu_1153_p1;
wire   [63:0] zext_ln174_fu_1158_p1;
wire   [63:0] zext_ln175_fu_1285_p1;
wire   [63:0] zext_ln176_fu_1412_p1;
reg   [7:0] idx105_i_fu_124;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_idx105_i_load;
reg   [4:0] r_assign_fu_128;
wire   [4:0] add_ln193_fu_1778_p2;
wire   [7:0] add_ln121_fu_586_p2;
wire   [7:0] add_ln121_1_fu_601_p2;
wire   [7:0] add_ln121_2_fu_620_p2;
wire   [0:0] tmp_10_fu_634_p3;
wire   [7:0] xor_ln132_5_fu_642_p2;
wire   [7:0] select_ln131_5_fu_648_p3;
wire   [6:0] trunc_ln134_5_fu_656_p1;
wire   [0:0] tmp_11_fu_660_p3;
wire   [0:0] tmp_12_fu_676_p3;
wire   [7:0] xor_ln132_6_fu_684_p2;
wire   [7:0] select_ln131_6_fu_690_p3;
wire   [0:0] tmp_fu_722_p3;
wire   [7:0] xor_ln132_fu_730_p2;
wire   [7:0] select_ln131_fu_736_p3;
wire   [6:0] trunc_ln134_fu_744_p1;
wire   [0:0] tmp_1_fu_748_p3;
wire   [0:0] tmp_14_fu_764_p3;
wire   [7:0] xor_ln132_7_fu_772_p2;
wire   [7:0] select_ln131_7_fu_778_p3;
wire   [7:0] add_ln121_3_fu_798_p2;
wire   [0:0] tmp_2_fu_818_p3;
wire   [7:0] xor_ln132_1_fu_826_p2;
wire   [7:0] select_ln131_1_fu_832_p3;
wire   [6:0] trunc_ln134_1_fu_840_p1;
wire   [0:0] tmp_3_fu_844_p3;
wire   [0:0] tmp_4_fu_860_p3;
wire   [7:0] xor_ln132_2_fu_868_p2;
wire   [7:0] select_ln131_2_fu_874_p3;
wire   [7:0] add_ln121_4_fu_899_p2;
wire   [0:0] tmp_6_fu_915_p3;
wire   [7:0] xor_ln132_3_fu_923_p2;
wire   [7:0] select_ln131_3_fu_929_p3;
wire   [6:0] trunc_ln134_3_fu_937_p1;
wire   [0:0] tmp_7_fu_941_p3;
wire   [7:0] x_assign_1_fu_949_p3;
wire   [0:0] tmp_8_fu_957_p3;
wire   [7:0] xor_ln132_4_fu_965_p2;
wire   [7:0] select_ln131_4_fu_971_p3;
wire   [6:0] trunc_ln134_4_fu_979_p1;
wire   [0:0] tmp_9_fu_983_p3;
wire   [7:0] xor_ln124_4_fu_1011_p2;
wire   [7:0] or_ln134_2_fu_909_p3;
wire   [7:0] xor_ln124_6_fu_1023_p2;
wire   [7:0] or_ln134_4_fu_991_p3;
wire   [7:0] xor_ln124_7_fu_1028_p2;
wire   [7:0] xor_ln124_5_fu_1017_p2;
wire   [7:0] xor_ln124_20_fu_1040_p2;
wire   [7:0] xor_ln124_22_fu_1052_p2;
wire   [7:0] xor_ln124_23_fu_1056_p2;
wire   [7:0] xor_ln124_21_fu_1046_p2;
wire   [7:0] or_ln1_fu_1005_p3;
wire   [7:0] xor_ln124_24_fu_1068_p2;
wire   [7:0] or_ln134_6_fu_999_p3;
wire   [7:0] xor_ln124_26_fu_1079_p2;
wire   [7:0] xor_ln124_27_fu_1084_p2;
wire   [7:0] xor_ln124_25_fu_1074_p2;
wire   [7:0] xor_ln124_28_fu_1096_p2;
wire   [7:0] xor_ln124_30_fu_1108_p2;
wire   [7:0] xor_ln124_31_fu_1113_p2;
wire   [7:0] xor_ln124_29_fu_1102_p2;
wire   [7:0] add_ln121_5_fu_1129_p2;
wire   [7:0] add_ln121_6_fu_1148_p2;
wire   [0:0] tmp_30_fu_1162_p3;
wire   [7:0] xor_ln132_15_fu_1170_p2;
wire   [7:0] select_ln131_15_fu_1176_p3;
wire   [6:0] trunc_ln134_15_fu_1184_p1;
wire   [0:0] tmp_31_fu_1188_p3;
wire   [0:0] tmp_32_fu_1204_p3;
wire   [7:0] xor_ln132_16_fu_1212_p2;
wire   [7:0] select_ln131_16_fu_1218_p3;
wire   [6:0] trunc_ln134_16_fu_1226_p1;
wire   [0:0] tmp_33_fu_1230_p3;
wire   [7:0] x_assign_10_fu_1238_p3;
wire   [0:0] tmp_34_fu_1246_p3;
wire   [7:0] xor_ln132_17_fu_1254_p2;
wire   [7:0] select_ln131_17_fu_1260_p3;
wire   [0:0] tmp_16_fu_1289_p3;
wire   [7:0] xor_ln132_8_fu_1297_p2;
wire   [7:0] select_ln131_8_fu_1303_p3;
wire   [6:0] trunc_ln134_8_fu_1311_p1;
wire   [0:0] tmp_17_fu_1315_p3;
wire   [7:0] x_assign_3_fu_1323_p3;
wire   [0:0] tmp_18_fu_1331_p3;
wire   [7:0] xor_ln132_9_fu_1339_p2;
wire   [7:0] select_ln131_9_fu_1345_p3;
wire   [6:0] trunc_ln134_9_fu_1353_p1;
wire   [0:0] tmp_19_fu_1357_p3;
wire   [7:0] x_assign_4_fu_1365_p3;
wire   [0:0] tmp_20_fu_1373_p3;
wire   [7:0] xor_ln132_10_fu_1381_p2;
wire   [7:0] select_ln131_10_fu_1387_p3;
wire   [0:0] tmp_22_fu_1416_p3;
wire   [7:0] xor_ln132_11_fu_1424_p2;
wire   [7:0] select_ln131_11_fu_1430_p3;
wire   [6:0] trunc_ln134_11_fu_1438_p1;
wire   [0:0] tmp_23_fu_1442_p3;
wire   [0:0] tmp_36_fu_1458_p3;
wire   [7:0] xor_ln132_18_fu_1466_p2;
wire   [7:0] select_ln131_18_fu_1472_p3;
wire   [6:0] trunc_ln134_18_fu_1480_p1;
wire   [0:0] tmp_37_fu_1484_p3;
wire   [7:0] x_assign_11_fu_1492_p3;
wire   [0:0] tmp_38_fu_1500_p3;
wire   [7:0] xor_ln132_19_fu_1508_p2;
wire   [7:0] select_ln131_19_fu_1514_p3;
wire   [0:0] tmp_24_fu_1534_p3;
wire   [7:0] xor_ln132_12_fu_1542_p2;
wire   [7:0] select_ln131_12_fu_1548_p3;
wire   [6:0] trunc_ln134_12_fu_1556_p1;
wire   [0:0] tmp_25_fu_1560_p3;
wire   [0:0] tmp_26_fu_1576_p3;
wire   [7:0] xor_ln132_13_fu_1584_p2;
wire   [7:0] select_ln131_13_fu_1590_p3;
wire   [6:0] trunc_ln134_13_fu_1598_p1;
wire   [0:0] tmp_27_fu_1602_p3;
wire   [7:0] x_assign_8_fu_1610_p3;
wire   [0:0] tmp_28_fu_1618_p3;
wire   [7:0] xor_ln132_14_fu_1626_p2;
wire   [7:0] select_ln131_14_fu_1632_p3;
wire   [7:0] xor_ln124_36_fu_1664_p2;
wire   [7:0] or_ln134_1_fu_1652_p3;
wire   [7:0] xor_ln124_38_fu_1676_p2;
wire   [7:0] or_ln134_3_fu_1658_p3;
wire   [7:0] xor_ln124_39_fu_1681_p2;
wire   [7:0] xor_ln124_37_fu_1670_p2;
wire   [7:0] xor_ln124_44_fu_1698_p2;
wire   [7:0] xor_ln124_45_fu_1703_p2;
wire   [7:0] xor_ln124_43_fu_1693_p2;
wire   [7:0] xor_ln124_32_fu_1728_p2;
wire   [7:0] or_ln134_9_fu_1716_p3;
wire   [7:0] xor_ln124_34_fu_1739_p2;
wire   [7:0] or_ln134_s_fu_1722_p3;
wire   [7:0] xor_ln124_35_fu_1744_p2;
wire   [7:0] xor_ln124_33_fu_1733_p2;
wire   [7:0] xor_ln124_41_fu_1761_p2;
wire   [7:0] xor_ln124_42_fu_1766_p2;
wire   [7:0] xor_ln124_40_fu_1757_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_done_reg = 1'b0;
end

clefia_enc_clefia_enc_Pipeline_VITIS_LOOP_193_1_clefia_s0_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s0_address0),
    .ce0(clefia_s0_ce0),
    .q0(clefia_s0_q0)
);

clefia_enc_clefia_enc_Pipeline_VITIS_LOOP_193_1_clefia_s1_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s1_address0),
    .ce0(clefia_s1_ce0),
    .q0(clefia_s1_q0)
);

clefia_enc_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage12),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        idx105_i_fu_124 <= 8'd0;
    end else if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        idx105_i_fu_124 <= add_ln188_reg_1827;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        r_assign_fu_128 <= 5'd25;
    end else if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        r_assign_fu_128 <= add_ln193_fu_1778_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        add_ln188_reg_1827 <= add_ln188_fu_569_p2;
        idx105_i_load_reg_1806 <= ap_sig_allocacmp_idx105_i_load;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fin_load_10_reg_2012 <= fin_q1;
        fin_load_11_reg_2019 <= fin_q0;
        icmp_ln197_reg_2026 <= icmp_ln197_fu_808_p2;
        r_assign_load_reg_1966 <= r_assign_fu_128;
        tmp_15_reg_2002 <= select_ln131_7_fu_778_p3[32'd7];
        trunc_ln134_7_reg_1997 <= trunc_ln134_7_fu_786_p1;
        x_assign_s_reg_1991 <= x_assign_s_fu_756_p3;
        xor_ln124_3_reg_1981 <= xor_ln124_3_fu_713_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        fin_load_14_reg_2191 <= fin_q1;
        fin_load_15_reg_2196 <= fin_q0;
        tmp_21_reg_2180 <= select_ln131_10_fu_1387_p3[32'd7];
        trunc_ln134_10_reg_2175 <= trunc_ln134_10_fu_1395_p1;
        xor_ln124_15_reg_2165 <= xor_ln124_15_fu_1280_p2;
        xor_ln180_reg_2185 <= xor_ln180_fu_1407_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        fin_load_1_reg_1863 <= fin_q0;
        fin_load_reg_1847 <= fin_q1;
        xor_ln124_reg_1853 <= xor_ln124_fu_580_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fin_load_2_reg_1892 <= fin_q1;
        fin_load_3_reg_1899 <= fin_q0;
        xor_ln124_1_reg_1882 <= xor_ln124_1_fu_596_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fin_load_8_reg_1952 <= fin_q1;
        fin_load_9_reg_1959 <= fin_q0;
        tmp_13_reg_1947 <= select_ln131_6_fu_690_p3[32'd7];
        trunc_ln134_6_reg_1942 <= trunc_ln134_6_fu_698_p1;
        x_assign_2_reg_1936 <= x_assign_2_fu_668_p3;
        xor_ln124_2_reg_1921 <= xor_ln124_2_fu_615_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_540 <= clefia_s0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_544 <= clefia_s1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_548 <= fin_q1;
        reg_552 <= fin_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_29_reg_2237 <= select_ln131_14_fu_1632_p3[32'd7];
        trunc_ln134_14_reg_2232 <= trunc_ln134_14_fu_1640_p1;
        x_assign_7_reg_2227 <= x_assign_7_fu_1568_p3;
        xor_ln124_17_reg_2242 <= xor_ln124_17_fu_1687_p2;
        xor_ln124_19_reg_2248 <= xor_ln124_19_fu_1709_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_35_reg_2160 <= select_ln131_17_fu_1260_p3[32'd7];
        trunc_ln134_17_reg_2155 <= trunc_ln134_17_fu_1268_p1;
        x_assign_9_reg_2150 <= x_assign_9_fu_1196_p3;
        xor_ln124_14_reg_2135 <= xor_ln124_14_fu_1143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_39_reg_2222 <= select_ln131_19_fu_1514_p3[32'd7];
        trunc_ln134_19_reg_2217 <= trunc_ln134_19_fu_1522_p1;
        x_assign_5_reg_2211 <= x_assign_5_fu_1450_p3;
        z_6_reg_2201 <= clefia_s1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_5_reg_2061 <= select_ln131_2_fu_874_p3[32'd7];
        trunc_ln134_2_reg_2056 <= trunc_ln134_2_fu_882_p1;
        x_assign_6_reg_2050 <= x_assign_6_fu_852_p3;
        xor_ln124_12_reg_2066 <= xor_ln124_12_fu_894_p2;
        z_2_reg_2040 <= clefia_s0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        xor_ln124_10_reg_2098 <= xor_ln124_10_fu_1090_p2;
        xor_ln124_11_reg_2104 <= xor_ln124_11_fu_1118_p2;
        xor_ln124_13_reg_2110 <= xor_ln124_13_fu_1124_p2;
        xor_ln124_8_reg_2086 <= xor_ln124_8_fu_1034_p2;
        xor_ln124_9_reg_2092 <= xor_ln124_9_fu_1062_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        xor_ln124_16_reg_2253 <= xor_ln124_16_fu_1750_p2;
        xor_ln124_18_reg_2258 <= xor_ln124_18_fu_1772_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_condition_exit_pp0_iter0_stage12 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage12 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_idx105_i_load = 8'd0;
    end else begin
        ap_sig_allocacmp_idx105_i_load = idx105_i_fu_124;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        clefia_s0_address0 = zext_ln176_fu_1412_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        clefia_s0_address0 = zext_ln174_fu_1158_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        clefia_s0_address0 = zext_ln152_fu_718_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        clefia_s0_address0 = zext_ln150_fu_611_p1;
    end else begin
        clefia_s0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        clefia_s0_ce0 = 1'b1;
    end else begin
        clefia_s0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        clefia_s1_address0 = zext_ln175_fu_1285_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        clefia_s1_address0 = zext_ln173_fu_1139_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        clefia_s1_address0 = zext_ln153_fu_814_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        clefia_s1_address0 = zext_ln151_fu_630_p1;
    end else begin
        clefia_s1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        clefia_s1_ce0 = 1'b1;
    end else begin
        clefia_s1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_address0 = 64'd8;
    end else if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        fin_address0 = fin_addr_4_reg_1911;
    end else if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fin_address0 = fin_addr_12_reg_1837;
    end else if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        fin_address0 = fin_addr_14_reg_1817;
    end else if (((1'b1 == ap_CS_fsm_state8) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        fin_address0 = 64'd15;
    end else if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        fin_address0 = 64'd13;
    end else if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        fin_address0 = 64'd7;
    end else if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln197_fu_808_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        fin_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        fin_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fin_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fin_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fin_address0 = 64'd1;
    end else begin
        fin_address0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_address1 = fin_addr_5_reg_1916;
    end else if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_address1 = 64'd9;
    end else if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fin_address1 = fin_addr_13_reg_1842;
    end else if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        fin_address1 = fin_addr_15_reg_1822;
    end else if (((1'b1 == ap_CS_fsm_state8) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        fin_address1 = 64'd14;
    end else if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        fin_address1 = 64'd12;
    end else if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        fin_address1 = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln197_fu_808_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        fin_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        fin_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fin_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fin_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fin_address1 = 64'd0;
    end else begin
        fin_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((icmp_ln197_fu_808_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        fin_ce0 = 1'b1;
    end else begin
        fin_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((icmp_ln197_fu_808_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        fin_ce1 = 1'b1;
    end else begin
        fin_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_d0 = xor_ln124_16_fu_1750_p2;
    end else if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        fin_d0 = xor_ln124_19_fu_1709_p2;
    end else if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fin_d0 = xor_ln124_11_reg_2104;
    end else if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        fin_d0 = xor_ln124_9_reg_2092;
    end else if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        fin_d0 = fin_load_3_reg_1899;
    end else if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        fin_d0 = fin_load_1_reg_1863;
    end else if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        fin_d0 = fin_load_11_reg_2019;
    end else if (((icmp_ln197_fu_808_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        fin_d0 = fin_load_9_reg_1959;
    end else begin
        fin_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_d1 = xor_ln124_18_reg_2258;
    end else if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_d1 = xor_ln124_17_reg_2242;
    end else if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fin_d1 = xor_ln124_10_reg_2098;
    end else if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        fin_d1 = xor_ln124_8_reg_2086;
    end else if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        fin_d1 = fin_load_2_reg_1892;
    end else if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        fin_d1 = fin_load_reg_1847;
    end else if (((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        fin_d1 = fin_load_10_reg_2012;
    end else if (((icmp_ln197_fu_808_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        fin_d1 = fin_load_8_reg_1952;
    end else begin
        fin_d1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_10_out_ap_vld = 1'b1;
    end else begin
        fin_load_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_11_out_ap_vld = 1'b1;
    end else begin
        fin_load_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_1_out_ap_vld = 1'b1;
    end else begin
        fin_load_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_2_out_ap_vld = 1'b1;
    end else begin
        fin_load_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_3_out_ap_vld = 1'b1;
    end else begin
        fin_load_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_8_out_ap_vld = 1'b1;
    end else begin
        fin_load_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_9_out_ap_vld = 1'b1;
    end else begin
        fin_load_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_out_ap_vld = 1'b1;
    end else begin
        fin_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln197_fu_808_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        fin_we0 = 1'b1;
    end else begin
        fin_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln197_fu_808_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln197_reg_2026 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        fin_we1 = 1'b1;
    end else begin
        fin_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        rk_address0 = zext_ln121_6_fu_1153_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        rk_address0 = zext_ln121_5_fu_1134_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rk_address0 = zext_ln121_4_fu_904_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        rk_address0 = zext_ln121_3_fu_803_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rk_address0 = zext_ln121_2_fu_625_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rk_address0 = zext_ln121_1_fu_606_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rk_address0 = zext_ln121_fu_591_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        rk_address0 = add_ln188_cast_fu_575_p1;
    end else begin
        rk_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        rk_ce0 = 1'b1;
    end else begin
        rk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_10_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_11_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_16_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_16_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_17_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_17_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_18_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_18_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_19_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_19_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_8_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_2026 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_9_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln121_1_fu_601_p2 = (idx105_i_load_reg_1806 + 8'd10);

assign add_ln121_2_fu_620_p2 = (idx105_i_load_reg_1806 + 8'd11);

assign add_ln121_3_fu_798_p2 = (idx105_i_load_reg_1806 + 8'd12);

assign add_ln121_4_fu_899_p2 = (idx105_i_load_reg_1806 + 8'd13);

assign add_ln121_5_fu_1129_p2 = (idx105_i_load_reg_1806 + 8'd14);

assign add_ln121_6_fu_1148_p2 = (idx105_i_load_reg_1806 + 8'd15);

assign add_ln121_fu_586_p2 = (idx105_i_load_reg_1806 + 8'd9);

assign add_ln188_cast_fu_575_p1 = add_ln188_fu_569_p2;

assign add_ln188_fu_569_p2 = (ap_sig_allocacmp_idx105_i_load + 8'd8);

assign add_ln193_fu_1778_p2 = ($signed(r_assign_load_reg_1966) + $signed(5'd31));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage12;

assign fin_addr_12_reg_1837 = 64'd3;

assign fin_addr_13_reg_1842 = 64'd2;

assign fin_addr_14_reg_1817 = 64'd1;

assign fin_addr_15_reg_1822 = 64'd0;

assign fin_addr_4_reg_1911 = 64'd11;

assign fin_addr_5_reg_1916 = 64'd10;

assign fin_load_10_out = fin_load_10_reg_2012;

assign fin_load_11_out = fin_load_11_reg_2019;

assign fin_load_1_out = fin_load_1_reg_1863;

assign fin_load_2_out = fin_load_2_reg_1892;

assign fin_load_3_out = fin_load_3_reg_1899;

assign fin_load_8_out = fin_load_8_reg_1952;

assign fin_load_9_out = fin_load_9_reg_1959;

assign fin_load_out = fin_load_reg_1847;

assign icmp_ln197_fu_808_p2 = ((r_assign_fu_128 == 5'd0) ? 1'b1 : 1'b0);

assign or_ln134_1_fu_1652_p3 = {{trunc_ln134_17_reg_2155}, {tmp_35_reg_2160}};

assign or_ln134_2_fu_909_p3 = {{trunc_ln134_2_reg_2056}, {tmp_5_reg_2061}};

assign or_ln134_3_fu_1658_p3 = {{trunc_ln134_19_reg_2217}, {tmp_39_reg_2222}};

assign or_ln134_4_fu_991_p3 = {{trunc_ln134_4_fu_979_p1}, {tmp_9_fu_983_p3}};

assign or_ln134_6_fu_999_p3 = {{trunc_ln134_6_reg_1942}, {tmp_13_reg_1947}};

assign or_ln134_9_fu_1716_p3 = {{trunc_ln134_10_reg_2175}, {tmp_21_reg_2180}};

assign or_ln134_s_fu_1722_p3 = {{trunc_ln134_14_reg_2232}, {tmp_29_reg_2237}};

assign or_ln1_fu_1005_p3 = {{trunc_ln134_7_reg_1997}, {tmp_15_reg_2002}};

assign select_ln131_10_fu_1387_p3 = ((tmp_20_fu_1373_p3[0:0] == 1'b1) ? xor_ln132_10_fu_1381_p2 : x_assign_4_fu_1365_p3);

assign select_ln131_11_fu_1430_p3 = ((tmp_22_fu_1416_p3[0:0] == 1'b1) ? xor_ln132_11_fu_1424_p2 : clefia_s1_q0);

assign select_ln131_12_fu_1548_p3 = ((tmp_24_fu_1534_p3[0:0] == 1'b1) ? xor_ln132_12_fu_1542_p2 : clefia_s0_q0);

assign select_ln131_13_fu_1590_p3 = ((tmp_26_fu_1576_p3[0:0] == 1'b1) ? xor_ln132_13_fu_1584_p2 : x_assign_7_fu_1568_p3);

assign select_ln131_14_fu_1632_p3 = ((tmp_28_fu_1618_p3[0:0] == 1'b1) ? xor_ln132_14_fu_1626_p2 : x_assign_8_fu_1610_p3);

assign select_ln131_15_fu_1176_p3 = ((tmp_30_fu_1162_p3[0:0] == 1'b1) ? xor_ln132_15_fu_1170_p2 : clefia_s1_q0);

assign select_ln131_16_fu_1218_p3 = ((tmp_32_fu_1204_p3[0:0] == 1'b1) ? xor_ln132_16_fu_1212_p2 : x_assign_9_fu_1196_p3);

assign select_ln131_17_fu_1260_p3 = ((tmp_34_fu_1246_p3[0:0] == 1'b1) ? xor_ln132_17_fu_1254_p2 : x_assign_10_fu_1238_p3);

assign select_ln131_18_fu_1472_p3 = ((tmp_36_fu_1458_p3[0:0] == 1'b1) ? xor_ln132_18_fu_1466_p2 : x_assign_5_fu_1450_p3);

assign select_ln131_19_fu_1514_p3 = ((tmp_38_fu_1500_p3[0:0] == 1'b1) ? xor_ln132_19_fu_1508_p2 : x_assign_11_fu_1492_p3);

assign select_ln131_1_fu_832_p3 = ((tmp_2_fu_818_p3[0:0] == 1'b1) ? xor_ln132_1_fu_826_p2 : clefia_s0_q0);

assign select_ln131_2_fu_874_p3 = ((tmp_4_fu_860_p3[0:0] == 1'b1) ? xor_ln132_2_fu_868_p2 : x_assign_6_fu_852_p3);

assign select_ln131_3_fu_929_p3 = ((tmp_6_fu_915_p3[0:0] == 1'b1) ? xor_ln132_3_fu_923_p2 : clefia_s1_q0);

assign select_ln131_4_fu_971_p3 = ((tmp_8_fu_957_p3[0:0] == 1'b1) ? xor_ln132_4_fu_965_p2 : x_assign_1_fu_949_p3);

assign select_ln131_5_fu_648_p3 = ((tmp_10_fu_634_p3[0:0] == 1'b1) ? xor_ln132_5_fu_642_p2 : clefia_s0_q0);

assign select_ln131_6_fu_690_p3 = ((tmp_12_fu_676_p3[0:0] == 1'b1) ? xor_ln132_6_fu_684_p2 : x_assign_2_fu_668_p3);

assign select_ln131_7_fu_778_p3 = ((tmp_14_fu_764_p3[0:0] == 1'b1) ? xor_ln132_7_fu_772_p2 : x_assign_s_fu_756_p3);

assign select_ln131_8_fu_1303_p3 = ((tmp_16_fu_1289_p3[0:0] == 1'b1) ? xor_ln132_8_fu_1297_p2 : clefia_s0_q0);

assign select_ln131_9_fu_1345_p3 = ((tmp_18_fu_1331_p3[0:0] == 1'b1) ? xor_ln132_9_fu_1339_p2 : x_assign_3_fu_1323_p3);

assign select_ln131_fu_736_p3 = ((tmp_fu_722_p3[0:0] == 1'b1) ? xor_ln132_fu_730_p2 : clefia_s1_q0);

assign tmp_10_fu_634_p3 = clefia_s0_q0[32'd7];

assign tmp_11_fu_660_p3 = select_ln131_5_fu_648_p3[32'd7];

assign tmp_12_fu_676_p3 = select_ln131_5_fu_648_p3[32'd6];

assign tmp_14_fu_764_p3 = select_ln131_fu_736_p3[32'd6];

assign tmp_16_fu_1289_p3 = clefia_s0_q0[32'd7];

assign tmp_17_fu_1315_p3 = select_ln131_8_fu_1303_p3[32'd7];

assign tmp_18_fu_1331_p3 = select_ln131_8_fu_1303_p3[32'd6];

assign tmp_19_fu_1357_p3 = select_ln131_9_fu_1345_p3[32'd7];

assign tmp_1_fu_748_p3 = select_ln131_fu_736_p3[32'd7];

assign tmp_20_fu_1373_p3 = select_ln131_9_fu_1345_p3[32'd6];

assign tmp_22_fu_1416_p3 = clefia_s1_q0[32'd7];

assign tmp_23_fu_1442_p3 = select_ln131_11_fu_1430_p3[32'd7];

assign tmp_24_fu_1534_p3 = clefia_s0_q0[32'd7];

assign tmp_25_fu_1560_p3 = select_ln131_12_fu_1548_p3[32'd7];

assign tmp_26_fu_1576_p3 = select_ln131_12_fu_1548_p3[32'd6];

assign tmp_27_fu_1602_p3 = select_ln131_13_fu_1590_p3[32'd7];

assign tmp_28_fu_1618_p3 = select_ln131_13_fu_1590_p3[32'd6];

assign tmp_2_fu_818_p3 = clefia_s0_q0[32'd7];

assign tmp_30_fu_1162_p3 = clefia_s1_q0[32'd7];

assign tmp_31_fu_1188_p3 = select_ln131_15_fu_1176_p3[32'd7];

assign tmp_32_fu_1204_p3 = select_ln131_15_fu_1176_p3[32'd6];

assign tmp_33_fu_1230_p3 = select_ln131_16_fu_1218_p3[32'd7];

assign tmp_34_fu_1246_p3 = select_ln131_16_fu_1218_p3[32'd6];

assign tmp_36_fu_1458_p3 = select_ln131_11_fu_1430_p3[32'd6];

assign tmp_37_fu_1484_p3 = select_ln131_18_fu_1472_p3[32'd7];

assign tmp_38_fu_1500_p3 = select_ln131_18_fu_1472_p3[32'd6];

assign tmp_3_fu_844_p3 = select_ln131_1_fu_832_p3[32'd7];

assign tmp_4_fu_860_p3 = select_ln131_1_fu_832_p3[32'd6];

assign tmp_6_fu_915_p3 = clefia_s1_q0[32'd7];

assign tmp_7_fu_941_p3 = select_ln131_3_fu_929_p3[32'd7];

assign tmp_8_fu_957_p3 = select_ln131_3_fu_929_p3[32'd6];

assign tmp_9_fu_983_p3 = select_ln131_4_fu_971_p3[32'd7];

assign tmp_fu_722_p3 = clefia_s1_q0[32'd7];

assign trunc_ln134_10_fu_1395_p1 = select_ln131_10_fu_1387_p3[6:0];

assign trunc_ln134_11_fu_1438_p1 = select_ln131_11_fu_1430_p3[6:0];

assign trunc_ln134_12_fu_1556_p1 = select_ln131_12_fu_1548_p3[6:0];

assign trunc_ln134_13_fu_1598_p1 = select_ln131_13_fu_1590_p3[6:0];

assign trunc_ln134_14_fu_1640_p1 = select_ln131_14_fu_1632_p3[6:0];

assign trunc_ln134_15_fu_1184_p1 = select_ln131_15_fu_1176_p3[6:0];

assign trunc_ln134_16_fu_1226_p1 = select_ln131_16_fu_1218_p3[6:0];

assign trunc_ln134_17_fu_1268_p1 = select_ln131_17_fu_1260_p3[6:0];

assign trunc_ln134_18_fu_1480_p1 = select_ln131_18_fu_1472_p3[6:0];

assign trunc_ln134_19_fu_1522_p1 = select_ln131_19_fu_1514_p3[6:0];

assign trunc_ln134_1_fu_840_p1 = select_ln131_1_fu_832_p3[6:0];

assign trunc_ln134_2_fu_882_p1 = select_ln131_2_fu_874_p3[6:0];

assign trunc_ln134_3_fu_937_p1 = select_ln131_3_fu_929_p3[6:0];

assign trunc_ln134_4_fu_979_p1 = select_ln131_4_fu_971_p3[6:0];

assign trunc_ln134_5_fu_656_p1 = select_ln131_5_fu_648_p3[6:0];

assign trunc_ln134_6_fu_698_p1 = select_ln131_6_fu_690_p3[6:0];

assign trunc_ln134_7_fu_786_p1 = select_ln131_7_fu_778_p3[6:0];

assign trunc_ln134_8_fu_1311_p1 = select_ln131_8_fu_1303_p3[6:0];

assign trunc_ln134_9_fu_1353_p1 = select_ln131_9_fu_1345_p3[6:0];

assign trunc_ln134_fu_744_p1 = select_ln131_fu_736_p3[6:0];

assign x_assign_10_fu_1238_p3 = {{trunc_ln134_16_fu_1226_p1}, {tmp_33_fu_1230_p3}};

assign x_assign_11_fu_1492_p3 = {{trunc_ln134_18_fu_1480_p1}, {tmp_37_fu_1484_p3}};

assign x_assign_1_fu_949_p3 = {{trunc_ln134_3_fu_937_p1}, {tmp_7_fu_941_p3}};

assign x_assign_2_fu_668_p3 = {{trunc_ln134_5_fu_656_p1}, {tmp_11_fu_660_p3}};

assign x_assign_3_fu_1323_p3 = {{trunc_ln134_8_fu_1311_p1}, {tmp_17_fu_1315_p3}};

assign x_assign_4_fu_1365_p3 = {{trunc_ln134_9_fu_1353_p1}, {tmp_19_fu_1357_p3}};

assign x_assign_5_fu_1450_p3 = {{trunc_ln134_11_fu_1438_p1}, {tmp_23_fu_1442_p3}};

assign x_assign_6_fu_852_p3 = {{trunc_ln134_1_fu_840_p1}, {tmp_3_fu_844_p3}};

assign x_assign_7_fu_1568_p3 = {{trunc_ln134_12_fu_1556_p1}, {tmp_25_fu_1560_p3}};

assign x_assign_8_fu_1610_p3 = {{trunc_ln134_13_fu_1598_p1}, {tmp_27_fu_1602_p3}};

assign x_assign_9_fu_1196_p3 = {{trunc_ln134_15_fu_1184_p1}, {tmp_31_fu_1188_p3}};

assign x_assign_s_fu_756_p3 = {{trunc_ln134_fu_744_p1}, {tmp_1_fu_748_p3}};

assign xor_ln124_10_fu_1090_p2 = (xor_ln124_27_fu_1084_p2 ^ xor_ln124_25_fu_1074_p2);

assign xor_ln124_10_out = xor_ln124_10_reg_2098;

assign xor_ln124_11_fu_1118_p2 = (xor_ln124_31_fu_1113_p2 ^ xor_ln124_29_fu_1102_p2);

assign xor_ln124_11_out = xor_ln124_11_reg_2104;

assign xor_ln124_12_fu_894_p2 = (rk_q0 ^ fin_load_8_reg_1952);

assign xor_ln124_13_fu_1124_p2 = (rk_q0 ^ fin_load_9_reg_1959);

assign xor_ln124_14_fu_1143_p2 = (rk_q0 ^ fin_load_10_reg_2012);

assign xor_ln124_15_fu_1280_p2 = (rk_q0 ^ fin_load_11_reg_2019);

assign xor_ln124_16_fu_1750_p2 = (xor_ln124_35_fu_1744_p2 ^ xor_ln124_33_fu_1733_p2);

assign xor_ln124_16_out = xor_ln124_16_reg_2253;

assign xor_ln124_17_fu_1687_p2 = (xor_ln124_39_fu_1681_p2 ^ xor_ln124_37_fu_1670_p2);

assign xor_ln124_17_out = xor_ln124_17_reg_2242;

assign xor_ln124_18_fu_1772_p2 = (xor_ln124_42_fu_1766_p2 ^ xor_ln124_40_fu_1757_p2);

assign xor_ln124_18_out = xor_ln124_18_reg_2258;

assign xor_ln124_19_fu_1709_p2 = (xor_ln124_45_fu_1703_p2 ^ xor_ln124_43_fu_1693_p2);

assign xor_ln124_19_out = xor_ln124_19_reg_2248;

assign xor_ln124_1_fu_596_p2 = (rk_q0 ^ fin_load_1_reg_1863);

assign xor_ln124_20_fu_1040_p2 = (reg_552 ^ or_ln134_2_fu_909_p3);

assign xor_ln124_21_fu_1046_p2 = (xor_ln124_20_fu_1040_p2 ^ reg_544);

assign xor_ln124_22_fu_1052_p2 = (x_assign_6_reg_2050 ^ x_assign_2_reg_1936);

assign xor_ln124_23_fu_1056_p2 = (xor_ln124_22_fu_1052_p2 ^ or_ln134_4_fu_991_p3);

assign xor_ln124_24_fu_1068_p2 = (or_ln1_fu_1005_p3 ^ fin_q1);

assign xor_ln124_25_fu_1074_p2 = (z_2_reg_2040 ^ xor_ln124_24_fu_1068_p2);

assign xor_ln124_26_fu_1079_p2 = (x_assign_s_reg_1991 ^ or_ln134_6_fu_999_p3);

assign xor_ln124_27_fu_1084_p2 = (xor_ln124_26_fu_1079_p2 ^ x_assign_1_fu_949_p3);

assign xor_ln124_28_fu_1096_p2 = (or_ln1_fu_1005_p3 ^ fin_q0);

assign xor_ln124_29_fu_1102_p2 = (xor_ln124_28_fu_1096_p2 ^ clefia_s1_q0);

assign xor_ln124_2_fu_615_p2 = (rk_q0 ^ fin_load_2_reg_1892);

assign xor_ln124_30_fu_1108_p2 = (x_assign_2_reg_1936 ^ or_ln134_6_fu_999_p3);

assign xor_ln124_31_fu_1113_p2 = (xor_ln124_30_fu_1108_p2 ^ x_assign_6_reg_2050);

assign xor_ln124_32_fu_1728_p2 = (x_assign_7_reg_2227 ^ reg_548);

assign xor_ln124_33_fu_1733_p2 = (xor_ln124_32_fu_1728_p2 ^ reg_544);

assign xor_ln124_34_fu_1739_p2 = (x_assign_5_reg_2211 ^ or_ln134_9_fu_1716_p3);

assign xor_ln124_35_fu_1744_p2 = (xor_ln124_34_fu_1739_p2 ^ or_ln134_s_fu_1722_p3);

assign xor_ln124_36_fu_1664_p2 = (x_assign_7_fu_1568_p3 ^ reg_552);

assign xor_ln124_37_fu_1670_p2 = (xor_ln124_36_fu_1664_p2 ^ reg_540);

assign xor_ln124_38_fu_1676_p2 = (x_assign_5_reg_2211 ^ or_ln134_1_fu_1652_p3);

assign xor_ln124_39_fu_1681_p2 = (xor_ln124_38_fu_1676_p2 ^ or_ln134_3_fu_1658_p3);

assign xor_ln124_3_fu_713_p2 = (rk_q0 ^ fin_load_3_reg_1899);

assign xor_ln124_40_fu_1757_p2 = (z_6_reg_2201 ^ fin_load_14_reg_2191);

assign xor_ln124_41_fu_1761_p2 = (xor_ln180_reg_2185 ^ or_ln134_s_fu_1722_p3);

assign xor_ln124_42_fu_1766_p2 = (xor_ln124_41_fu_1761_p2 ^ or_ln134_9_fu_1716_p3);

assign xor_ln124_43_fu_1693_p2 = (fin_load_15_reg_2196 ^ clefia_s0_q0);

assign xor_ln124_44_fu_1698_p2 = (xor_ln180_reg_2185 ^ or_ln134_3_fu_1658_p3);

assign xor_ln124_45_fu_1703_p2 = (xor_ln124_44_fu_1698_p2 ^ or_ln134_1_fu_1652_p3);

assign xor_ln124_4_fu_1011_p2 = (x_assign_1_fu_949_p3 ^ reg_548);

assign xor_ln124_5_fu_1017_p2 = (xor_ln124_4_fu_1011_p2 ^ reg_540);

assign xor_ln124_6_fu_1023_p2 = (x_assign_s_reg_1991 ^ or_ln134_2_fu_909_p3);

assign xor_ln124_7_fu_1028_p2 = (xor_ln124_6_fu_1023_p2 ^ or_ln134_4_fu_991_p3);

assign xor_ln124_8_fu_1034_p2 = (xor_ln124_7_fu_1028_p2 ^ xor_ln124_5_fu_1017_p2);

assign xor_ln124_8_out = xor_ln124_8_reg_2086;

assign xor_ln124_9_fu_1062_p2 = (xor_ln124_23_fu_1056_p2 ^ xor_ln124_21_fu_1046_p2);

assign xor_ln124_9_out = xor_ln124_9_reg_2092;

assign xor_ln124_fu_580_p2 = (rk_q0 ^ fin_q1);

assign xor_ln132_10_fu_1381_p2 = (x_assign_4_fu_1365_p3 ^ 8'd14);

assign xor_ln132_11_fu_1424_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_12_fu_1542_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_13_fu_1584_p2 = (x_assign_7_fu_1568_p3 ^ 8'd14);

assign xor_ln132_14_fu_1626_p2 = (x_assign_8_fu_1610_p3 ^ 8'd14);

assign xor_ln132_15_fu_1170_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_16_fu_1212_p2 = (x_assign_9_fu_1196_p3 ^ 8'd14);

assign xor_ln132_17_fu_1254_p2 = (x_assign_10_fu_1238_p3 ^ 8'd14);

assign xor_ln132_18_fu_1466_p2 = (x_assign_5_fu_1450_p3 ^ 8'd14);

assign xor_ln132_19_fu_1508_p2 = (x_assign_11_fu_1492_p3 ^ 8'd14);

assign xor_ln132_1_fu_826_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_2_fu_868_p2 = (x_assign_6_fu_852_p3 ^ 8'd14);

assign xor_ln132_3_fu_923_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_4_fu_965_p2 = (x_assign_1_fu_949_p3 ^ 8'd14);

assign xor_ln132_5_fu_642_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_6_fu_684_p2 = (x_assign_2_fu_668_p3 ^ 8'd14);

assign xor_ln132_7_fu_772_p2 = (x_assign_s_fu_756_p3 ^ 8'd14);

assign xor_ln132_8_fu_1297_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_9_fu_1339_p2 = (x_assign_3_fu_1323_p3 ^ 8'd14);

assign xor_ln132_fu_730_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln180_fu_1407_p2 = (x_assign_9_reg_2150 ^ x_assign_3_fu_1323_p3);

assign zext_ln121_1_fu_606_p1 = add_ln121_1_fu_601_p2;

assign zext_ln121_2_fu_625_p1 = add_ln121_2_fu_620_p2;

assign zext_ln121_3_fu_803_p1 = add_ln121_3_fu_798_p2;

assign zext_ln121_4_fu_904_p1 = add_ln121_4_fu_899_p2;

assign zext_ln121_5_fu_1134_p1 = add_ln121_5_fu_1129_p2;

assign zext_ln121_6_fu_1153_p1 = add_ln121_6_fu_1148_p2;

assign zext_ln121_fu_591_p1 = add_ln121_fu_586_p2;

assign zext_ln150_fu_611_p1 = xor_ln124_reg_1853;

assign zext_ln151_fu_630_p1 = xor_ln124_1_reg_1882;

assign zext_ln152_fu_718_p1 = xor_ln124_2_reg_1921;

assign zext_ln153_fu_814_p1 = xor_ln124_3_reg_1981;

assign zext_ln173_fu_1139_p1 = xor_ln124_12_reg_2066;

assign zext_ln174_fu_1158_p1 = xor_ln124_13_reg_2110;

assign zext_ln175_fu_1285_p1 = xor_ln124_14_reg_2135;

assign zext_ln176_fu_1412_p1 = xor_ln124_15_reg_2165;

endmodule //clefia_enc_clefia_enc_Pipeline_VITIS_LOOP_193_1
