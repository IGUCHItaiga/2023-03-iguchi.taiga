// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clefia_dec_clefia_dec_Pipeline_ByteXor_label22 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        rin_address0,
        rin_ce0,
        rin_we0,
        rin_d0,
        rin_address1,
        rin_ce1,
        rin_q1,
        rk_address0,
        rk_ce0,
        rk_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] rin_address0;
output   rin_ce0;
output   rin_we0;
output  [7:0] rin_d0;
output  [3:0] rin_address1;
output   rin_ce1;
input  [7:0] rin_q1;
output  [7:0] rk_address0;
output   rk_ce0;
input  [7:0] rk_q0;

reg ap_idle;
reg rin_ce0;
reg rin_we0;
reg rin_ce1;
reg rk_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln123_fu_156_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] rin_addr_reg_215;
wire   [0:0] addr_cmp_fu_145_p2;
reg   [0:0] addr_cmp_reg_221;
wire   [63:0] zext_ln121_fu_114_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln121_9_fu_131_p1;
reg   [63:0] reuse_addr_reg_fu_42;
wire    ap_loop_init;
reg   [7:0] reuse_reg_fu_46;
wire   [7:0] xor_ln124_1_fu_177_p2;
reg   [1:0] idx96_i_fu_50;
wire   [1:0] add_ln124_fu_136_p2;
wire   [6:0] or_ln121_2_fu_102_p3;
wire  signed [7:0] sext_ln121_fu_110_p1;
wire   [2:0] or_ln121_3_fu_119_p3;
wire  signed [3:0] sext_ln121_1_fu_127_p1;
wire   [7:0] reuse_select_fu_170_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

clefia_dec_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            idx96_i_fu_50 <= 2'd0;
        end else if (((icmp_ln123_fu_156_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            idx96_i_fu_50 <= add_ln124_fu_136_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
                        reuse_addr_reg_fu_42[0] <= 1'b1;
            reuse_addr_reg_fu_42[1] <= 1'b1;
            reuse_addr_reg_fu_42[4] <= 1'b1;
            reuse_addr_reg_fu_42[5] <= 1'b1;
            reuse_addr_reg_fu_42[6] <= 1'b1;
            reuse_addr_reg_fu_42[7] <= 1'b1;
            reuse_addr_reg_fu_42[8] <= 1'b1;
            reuse_addr_reg_fu_42[9] <= 1'b1;
            reuse_addr_reg_fu_42[10] <= 1'b1;
            reuse_addr_reg_fu_42[11] <= 1'b1;
            reuse_addr_reg_fu_42[12] <= 1'b1;
            reuse_addr_reg_fu_42[13] <= 1'b1;
            reuse_addr_reg_fu_42[14] <= 1'b1;
            reuse_addr_reg_fu_42[15] <= 1'b1;
            reuse_addr_reg_fu_42[16] <= 1'b1;
            reuse_addr_reg_fu_42[17] <= 1'b1;
            reuse_addr_reg_fu_42[18] <= 1'b1;
            reuse_addr_reg_fu_42[19] <= 1'b1;
            reuse_addr_reg_fu_42[20] <= 1'b1;
            reuse_addr_reg_fu_42[21] <= 1'b1;
            reuse_addr_reg_fu_42[22] <= 1'b1;
            reuse_addr_reg_fu_42[23] <= 1'b1;
            reuse_addr_reg_fu_42[24] <= 1'b1;
            reuse_addr_reg_fu_42[25] <= 1'b1;
            reuse_addr_reg_fu_42[26] <= 1'b1;
            reuse_addr_reg_fu_42[27] <= 1'b1;
            reuse_addr_reg_fu_42[28] <= 1'b1;
            reuse_addr_reg_fu_42[29] <= 1'b1;
            reuse_addr_reg_fu_42[30] <= 1'b1;
            reuse_addr_reg_fu_42[31] <= 1'b1;
            reuse_addr_reg_fu_42[32] <= 1'b1;
            reuse_addr_reg_fu_42[33] <= 1'b1;
            reuse_addr_reg_fu_42[34] <= 1'b1;
            reuse_addr_reg_fu_42[35] <= 1'b1;
            reuse_addr_reg_fu_42[36] <= 1'b1;
            reuse_addr_reg_fu_42[37] <= 1'b1;
            reuse_addr_reg_fu_42[38] <= 1'b1;
            reuse_addr_reg_fu_42[39] <= 1'b1;
            reuse_addr_reg_fu_42[40] <= 1'b1;
            reuse_addr_reg_fu_42[41] <= 1'b1;
            reuse_addr_reg_fu_42[42] <= 1'b1;
            reuse_addr_reg_fu_42[43] <= 1'b1;
            reuse_addr_reg_fu_42[44] <= 1'b1;
            reuse_addr_reg_fu_42[45] <= 1'b1;
            reuse_addr_reg_fu_42[46] <= 1'b1;
            reuse_addr_reg_fu_42[47] <= 1'b1;
            reuse_addr_reg_fu_42[48] <= 1'b1;
            reuse_addr_reg_fu_42[49] <= 1'b1;
            reuse_addr_reg_fu_42[50] <= 1'b1;
            reuse_addr_reg_fu_42[51] <= 1'b1;
            reuse_addr_reg_fu_42[52] <= 1'b1;
            reuse_addr_reg_fu_42[53] <= 1'b1;
            reuse_addr_reg_fu_42[54] <= 1'b1;
            reuse_addr_reg_fu_42[55] <= 1'b1;
            reuse_addr_reg_fu_42[56] <= 1'b1;
            reuse_addr_reg_fu_42[57] <= 1'b1;
            reuse_addr_reg_fu_42[58] <= 1'b1;
            reuse_addr_reg_fu_42[59] <= 1'b1;
            reuse_addr_reg_fu_42[60] <= 1'b1;
            reuse_addr_reg_fu_42[61] <= 1'b1;
            reuse_addr_reg_fu_42[62] <= 1'b1;
            reuse_addr_reg_fu_42[63] <= 1'b1;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
                        reuse_addr_reg_fu_42[1 : 0] <= zext_ln121_9_fu_131_p1[1 : 0];
            reuse_addr_reg_fu_42[63 : 4] <= zext_ln121_9_fu_131_p1[63 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg_fu_46 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg_fu_46 <= xor_ln124_1_fu_177_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        addr_cmp_reg_221 <= addr_cmp_fu_145_p2;
        rin_addr_reg_215[1 : 0] <= zext_ln121_9_fu_131_p1[1 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln123_fu_156_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        rin_ce0 = 1'b1;
    end else begin
        rin_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rin_ce1 = 1'b1;
    end else begin
        rin_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        rin_we0 = 1'b1;
    end else begin
        rin_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rk_ce0 = 1'b1;
    end else begin
        rk_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln124_fu_136_p2 = (idx96_i_fu_50 + 2'd1);

assign addr_cmp_fu_145_p2 = ((reuse_addr_reg_fu_42 == zext_ln121_9_fu_131_p1) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln123_fu_156_p2 = ((idx96_i_fu_50 == 2'd3) ? 1'b1 : 1'b0);

assign or_ln121_2_fu_102_p3 = {{5'd23}, {idx96_i_fu_50}};

assign or_ln121_3_fu_119_p3 = {{1'd1}, {idx96_i_fu_50}};

assign reuse_select_fu_170_p3 = ((addr_cmp_reg_221[0:0] == 1'b1) ? reuse_reg_fu_46 : rin_q1);

assign rin_address0 = rin_addr_reg_215;

assign rin_address1 = zext_ln121_9_fu_131_p1;

assign rin_d0 = (rk_q0 ^ reuse_select_fu_170_p3);

assign rk_address0 = zext_ln121_fu_114_p1;

assign sext_ln121_1_fu_127_p1 = $signed(or_ln121_3_fu_119_p3);

assign sext_ln121_fu_110_p1 = $signed(or_ln121_2_fu_102_p3);

assign xor_ln124_1_fu_177_p2 = (rk_q0 ^ reuse_select_fu_170_p3);

assign zext_ln121_9_fu_131_p1 = $unsigned(sext_ln121_1_fu_127_p1);

assign zext_ln121_fu_114_p1 = $unsigned(sext_ln121_fu_110_p1);

always @ (posedge ap_clk) begin
    rin_addr_reg_215[3:2] <= 2'b11;
    reuse_addr_reg_fu_42[3:2] <= 2'b11;
end

endmodule //clefia_dec_clefia_dec_Pipeline_ByteXor_label22
