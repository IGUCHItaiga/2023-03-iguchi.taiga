// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clefia_dec_clefia_dec_Pipeline_ClefiaGfn4Inv_label5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fin_address0,
        fin_ce0,
        fin_we0,
        fin_d0,
        fin_q0,
        fin_address1,
        fin_ce1,
        fin_we1,
        fin_d1,
        fin_q1,
        fin_load_out,
        fin_load_out_ap_vld,
        fin_load_1_out,
        fin_load_1_out_ap_vld,
        fin_load_2_out,
        fin_load_2_out_ap_vld,
        fin_load_3_out,
        fin_load_3_out_ap_vld,
        xor_ln124_8_out,
        xor_ln124_8_out_ap_vld,
        xor_ln124_9_out,
        xor_ln124_9_out_ap_vld,
        xor_ln124_10_out,
        xor_ln124_10_out_ap_vld,
        xor_ln124_11_out,
        xor_ln124_11_out_ap_vld,
        fin_load_8_out,
        fin_load_8_out_ap_vld,
        fin_load_9_out,
        fin_load_9_out_ap_vld,
        fin_load_10_out,
        fin_load_10_out_ap_vld,
        fin_load_11_out,
        fin_load_11_out_ap_vld,
        xor_ln124_16_out,
        xor_ln124_16_out_ap_vld,
        xor_ln124_17_out,
        xor_ln124_17_out_ap_vld,
        xor_ln124_18_out,
        xor_ln124_18_out_ap_vld,
        xor_ln124_19_out,
        xor_ln124_19_out_ap_vld,
        rk_address0,
        rk_ce0,
        rk_q0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] fin_address0;
output   fin_ce0;
output   fin_we0;
output  [7:0] fin_d0;
input  [7:0] fin_q0;
output  [3:0] fin_address1;
output   fin_ce1;
output   fin_we1;
output  [7:0] fin_d1;
input  [7:0] fin_q1;
output  [7:0] fin_load_out;
output   fin_load_out_ap_vld;
output  [7:0] fin_load_1_out;
output   fin_load_1_out_ap_vld;
output  [7:0] fin_load_2_out;
output   fin_load_2_out_ap_vld;
output  [7:0] fin_load_3_out;
output   fin_load_3_out_ap_vld;
output  [7:0] xor_ln124_8_out;
output   xor_ln124_8_out_ap_vld;
output  [7:0] xor_ln124_9_out;
output   xor_ln124_9_out_ap_vld;
output  [7:0] xor_ln124_10_out;
output   xor_ln124_10_out_ap_vld;
output  [7:0] xor_ln124_11_out;
output   xor_ln124_11_out_ap_vld;
output  [7:0] fin_load_8_out;
output   fin_load_8_out_ap_vld;
output  [7:0] fin_load_9_out;
output   fin_load_9_out_ap_vld;
output  [7:0] fin_load_10_out;
output   fin_load_10_out_ap_vld;
output  [7:0] fin_load_11_out;
output   fin_load_11_out_ap_vld;
output  [7:0] xor_ln124_16_out;
output   xor_ln124_16_out_ap_vld;
output  [7:0] xor_ln124_17_out;
output   xor_ln124_17_out_ap_vld;
output  [7:0] xor_ln124_18_out;
output   xor_ln124_18_out_ap_vld;
output  [7:0] xor_ln124_19_out;
output   xor_ln124_19_out_ap_vld;
output  [7:0] rk_address0;
output   rk_ce0;
input  [7:0] rk_q0;

reg ap_idle;
reg[3:0] fin_address0;
reg fin_ce0;
reg fin_we0;
reg[7:0] fin_d0;
reg[3:0] fin_address1;
reg fin_ce1;
reg fin_we1;
reg[7:0] fin_d1;
reg fin_load_out_ap_vld;
reg fin_load_1_out_ap_vld;
reg fin_load_2_out_ap_vld;
reg fin_load_3_out_ap_vld;
reg xor_ln124_8_out_ap_vld;
reg xor_ln124_9_out_ap_vld;
reg xor_ln124_10_out_ap_vld;
reg xor_ln124_11_out_ap_vld;
reg fin_load_8_out_ap_vld;
reg fin_load_9_out_ap_vld;
reg fin_load_10_out_ap_vld;
reg fin_load_11_out_ap_vld;
reg xor_ln124_16_out_ap_vld;
reg xor_ln124_17_out_ap_vld;
reg xor_ln124_18_out_ap_vld;
reg xor_ln124_19_out_ap_vld;
reg[7:0] rk_address0;
reg rk_ce0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state13;
wire    ap_block_state13_pp0_stage12_iter0;
reg   [0:0] icmp_ln217_reg_2039;
reg    ap_condition_exit_pp0_iter0_stage12;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [7:0] clefia_s0_address0;
reg    clefia_s0_ce0;
wire   [7:0] clefia_s0_q0;
reg   [7:0] clefia_s1_address0;
reg    clefia_s1_ce0;
wire   [7:0] clefia_s1_q0;
reg   [7:0] reg_544;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_CS_fsm_state9;
wire    ap_block_state9_pp0_stage8_iter0;
reg   [7:0] reg_548;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_CS_fsm_state8;
wire    ap_block_state8_pp0_stage7_iter0;
reg   [7:0] reg_552;
wire    ap_CS_fsm_state6;
wire    ap_block_state6_pp0_stage5_iter0;
reg   [7:0] reg_556;
reg   [8:0] idx104_i_load_reg_1819;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [7:0] empty_fu_573_p1;
reg   [7:0] empty_reg_1836;
wire   [3:0] fin_addr_12_reg_1852;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [3:0] fin_addr_13_reg_1857;
reg   [7:0] fin_load_reg_1862;
wire   [7:0] xor_ln124_fu_588_p2;
reg   [7:0] xor_ln124_reg_1868;
reg   [7:0] fin_load_1_reg_1878;
wire   [3:0] fin_addr_6_reg_1885;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire   [3:0] fin_addr_7_reg_1890;
wire   [7:0] xor_ln124_1_fu_604_p2;
reg   [7:0] xor_ln124_1_reg_1895;
reg   [7:0] fin_load_2_reg_1905;
reg   [7:0] fin_load_3_reg_1912;
wire   [3:0] fin_addr_4_reg_1924;
wire   [3:0] fin_addr_5_reg_1929;
wire   [7:0] xor_ln124_2_fu_623_p2;
reg   [7:0] xor_ln124_2_reg_1934;
wire   [7:0] x_assign_2_fu_676_p3;
reg   [7:0] x_assign_2_reg_1949;
wire   [6:0] trunc_ln134_6_fu_706_p1;
reg   [6:0] trunc_ln134_6_reg_1955;
reg   [0:0] tmp_13_reg_1960;
reg   [7:0] fin_load_8_reg_1965;
reg   [7:0] fin_load_9_reg_1972;
reg   [4:0] r_assign_load_reg_1979;
wire   [7:0] xor_ln124_3_fu_721_p2;
reg   [7:0] xor_ln124_3_reg_1994;
wire   [7:0] x_assign_s_fu_764_p3;
reg   [7:0] x_assign_s_reg_2004;
wire   [6:0] trunc_ln134_7_fu_794_p1;
reg   [6:0] trunc_ln134_7_reg_2010;
reg   [0:0] tmp_15_reg_2015;
reg   [7:0] fin_load_10_reg_2025;
reg   [7:0] fin_load_11_reg_2032;
wire   [0:0] icmp_ln217_fu_816_p2;
reg   [7:0] z_2_reg_2053;
wire   [7:0] x_assign_6_fu_860_p3;
reg   [7:0] x_assign_6_reg_2063;
wire   [6:0] trunc_ln134_2_fu_890_p1;
reg   [6:0] trunc_ln134_2_reg_2069;
reg   [0:0] tmp_5_reg_2074;
wire   [7:0] xor_ln124_12_fu_902_p2;
reg   [7:0] xor_ln124_12_reg_2079;
wire    ap_CS_fsm_state7;
wire    ap_block_state7_pp0_stage6_iter0;
wire   [7:0] xor_ln124_8_fu_1042_p2;
reg   [7:0] xor_ln124_8_reg_2099;
wire   [7:0] xor_ln124_9_fu_1070_p2;
reg   [7:0] xor_ln124_9_reg_2105;
wire   [7:0] xor_ln124_10_fu_1098_p2;
reg   [7:0] xor_ln124_10_reg_2111;
wire   [7:0] xor_ln124_11_fu_1126_p2;
reg   [7:0] xor_ln124_11_reg_2117;
wire   [7:0] xor_ln124_13_fu_1132_p2;
reg   [7:0] xor_ln124_13_reg_2123;
wire   [7:0] xor_ln124_14_fu_1151_p2;
reg   [7:0] xor_ln124_14_reg_2148;
wire   [7:0] x_assign_9_fu_1204_p3;
reg   [7:0] x_assign_9_reg_2163;
wire   [6:0] trunc_ln134_17_fu_1276_p1;
reg   [6:0] trunc_ln134_17_reg_2168;
reg   [0:0] tmp_35_reg_2173;
wire   [7:0] xor_ln124_15_fu_1288_p2;
reg   [7:0] xor_ln124_15_reg_2178;
wire   [6:0] trunc_ln134_10_fu_1403_p1;
reg   [6:0] trunc_ln134_10_reg_2188;
reg   [0:0] tmp_21_reg_2193;
wire   [7:0] xor_ln180_fu_1415_p2;
reg   [7:0] xor_ln180_reg_2198;
reg   [7:0] fin_load_14_reg_2204;
reg   [7:0] fin_load_15_reg_2209;
reg   [7:0] z_6_reg_2214;
wire    ap_CS_fsm_state10;
wire    ap_block_state10_pp0_stage9_iter0;
wire   [7:0] x_assign_5_fu_1458_p3;
reg   [7:0] x_assign_5_reg_2224;
wire   [6:0] trunc_ln134_19_fu_1530_p1;
reg   [6:0] trunc_ln134_19_reg_2230;
reg   [0:0] tmp_39_reg_2235;
wire   [7:0] x_assign_7_fu_1576_p3;
reg   [7:0] x_assign_7_reg_2240;
wire    ap_CS_fsm_state11;
wire    ap_block_state11_pp0_stage10_iter0;
wire   [6:0] trunc_ln134_14_fu_1648_p1;
reg   [6:0] trunc_ln134_14_reg_2245;
reg   [0:0] tmp_29_reg_2250;
wire   [7:0] xor_ln124_17_fu_1695_p2;
reg   [7:0] xor_ln124_17_reg_2255;
wire   [7:0] xor_ln124_19_fu_1717_p2;
reg   [7:0] xor_ln124_19_reg_2261;
wire   [7:0] xor_ln124_16_fu_1758_p2;
reg   [7:0] xor_ln124_16_reg_2266;
wire    ap_CS_fsm_state12;
wire    ap_block_state12_pp0_stage11_iter0;
wire   [7:0] xor_ln124_18_fu_1780_p2;
reg   [7:0] xor_ln124_18_reg_2271;
wire   [8:0] add_ln216_fu_1786_p2;
reg   [8:0] add_ln216_reg_2277;
wire   [63:0] zext_ln121_fu_583_p1;
wire   [63:0] zext_ln121_1_fu_599_p1;
wire   [63:0] zext_ln121_2_fu_614_p1;
wire   [63:0] zext_ln150_fu_619_p1;
wire   [63:0] zext_ln121_3_fu_633_p1;
wire   [63:0] zext_ln151_fu_638_p1;
wire   [63:0] zext_ln152_fu_726_p1;
wire   [63:0] zext_ln121_4_fu_811_p1;
wire   [63:0] zext_ln153_fu_822_p1;
wire   [63:0] zext_ln121_5_fu_912_p1;
wire   [63:0] zext_ln121_6_fu_1142_p1;
wire   [63:0] zext_ln173_fu_1147_p1;
wire   [63:0] zext_ln121_7_fu_1161_p1;
wire   [63:0] zext_ln174_fu_1166_p1;
wire   [63:0] zext_ln175_fu_1293_p1;
wire   [63:0] zext_ln176_fu_1420_p1;
reg   [8:0] idx104_i_fu_128;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_idx104_i_load;
reg   [4:0] r_assign_fu_132;
wire   [4:0] add_ln213_fu_1791_p2;
wire   [7:0] add_ln121_fu_577_p2;
wire   [7:0] add_ln121_1_fu_594_p2;
wire   [7:0] add_ln121_2_fu_609_p2;
wire   [7:0] add_ln121_3_fu_628_p2;
wire   [0:0] tmp_10_fu_642_p3;
wire   [7:0] xor_ln132_5_fu_650_p2;
wire   [7:0] select_ln131_5_fu_656_p3;
wire   [6:0] trunc_ln134_5_fu_664_p1;
wire   [0:0] tmp_11_fu_668_p3;
wire   [0:0] tmp_12_fu_684_p3;
wire   [7:0] xor_ln132_6_fu_692_p2;
wire   [7:0] select_ln131_6_fu_698_p3;
wire   [0:0] tmp_fu_730_p3;
wire   [7:0] xor_ln132_fu_738_p2;
wire   [7:0] select_ln131_fu_744_p3;
wire   [6:0] trunc_ln134_fu_752_p1;
wire   [0:0] tmp_1_fu_756_p3;
wire   [0:0] tmp_14_fu_772_p3;
wire   [7:0] xor_ln132_7_fu_780_p2;
wire   [7:0] select_ln131_7_fu_786_p3;
wire   [7:0] add_ln121_4_fu_806_p2;
wire   [0:0] tmp_2_fu_826_p3;
wire   [7:0] xor_ln132_1_fu_834_p2;
wire   [7:0] select_ln131_1_fu_840_p3;
wire   [6:0] trunc_ln134_1_fu_848_p1;
wire   [0:0] tmp_3_fu_852_p3;
wire   [0:0] tmp_4_fu_868_p3;
wire   [7:0] xor_ln132_2_fu_876_p2;
wire   [7:0] select_ln131_2_fu_882_p3;
wire   [7:0] add_ln121_5_fu_907_p2;
wire   [0:0] tmp_6_fu_923_p3;
wire   [7:0] xor_ln132_3_fu_931_p2;
wire   [7:0] select_ln131_3_fu_937_p3;
wire   [6:0] trunc_ln134_3_fu_945_p1;
wire   [0:0] tmp_7_fu_949_p3;
wire   [7:0] x_assign_1_fu_957_p3;
wire   [0:0] tmp_8_fu_965_p3;
wire   [7:0] xor_ln132_4_fu_973_p2;
wire   [7:0] select_ln131_4_fu_979_p3;
wire   [6:0] trunc_ln134_4_fu_987_p1;
wire   [0:0] tmp_9_fu_991_p3;
wire   [7:0] xor_ln124_4_fu_1019_p2;
wire   [7:0] or_ln134_2_fu_917_p3;
wire   [7:0] xor_ln124_6_fu_1031_p2;
wire   [7:0] or_ln134_4_fu_999_p3;
wire   [7:0] xor_ln124_7_fu_1036_p2;
wire   [7:0] xor_ln124_5_fu_1025_p2;
wire   [7:0] xor_ln124_20_fu_1048_p2;
wire   [7:0] xor_ln124_22_fu_1060_p2;
wire   [7:0] xor_ln124_23_fu_1064_p2;
wire   [7:0] xor_ln124_21_fu_1054_p2;
wire   [7:0] or_ln1_fu_1013_p3;
wire   [7:0] xor_ln124_24_fu_1076_p2;
wire   [7:0] or_ln134_6_fu_1007_p3;
wire   [7:0] xor_ln124_26_fu_1087_p2;
wire   [7:0] xor_ln124_27_fu_1092_p2;
wire   [7:0] xor_ln124_25_fu_1082_p2;
wire   [7:0] xor_ln124_28_fu_1104_p2;
wire   [7:0] xor_ln124_30_fu_1116_p2;
wire   [7:0] xor_ln124_31_fu_1121_p2;
wire   [7:0] xor_ln124_29_fu_1110_p2;
wire   [7:0] add_ln121_6_fu_1137_p2;
wire   [7:0] add_ln121_7_fu_1156_p2;
wire   [0:0] tmp_30_fu_1170_p3;
wire   [7:0] xor_ln132_15_fu_1178_p2;
wire   [7:0] select_ln131_15_fu_1184_p3;
wire   [6:0] trunc_ln134_15_fu_1192_p1;
wire   [0:0] tmp_31_fu_1196_p3;
wire   [0:0] tmp_32_fu_1212_p3;
wire   [7:0] xor_ln132_16_fu_1220_p2;
wire   [7:0] select_ln131_16_fu_1226_p3;
wire   [6:0] trunc_ln134_16_fu_1234_p1;
wire   [0:0] tmp_33_fu_1238_p3;
wire   [7:0] x_assign_10_fu_1246_p3;
wire   [0:0] tmp_34_fu_1254_p3;
wire   [7:0] xor_ln132_17_fu_1262_p2;
wire   [7:0] select_ln131_17_fu_1268_p3;
wire   [0:0] tmp_16_fu_1297_p3;
wire   [7:0] xor_ln132_8_fu_1305_p2;
wire   [7:0] select_ln131_8_fu_1311_p3;
wire   [6:0] trunc_ln134_8_fu_1319_p1;
wire   [0:0] tmp_17_fu_1323_p3;
wire   [7:0] x_assign_3_fu_1331_p3;
wire   [0:0] tmp_18_fu_1339_p3;
wire   [7:0] xor_ln132_9_fu_1347_p2;
wire   [7:0] select_ln131_9_fu_1353_p3;
wire   [6:0] trunc_ln134_9_fu_1361_p1;
wire   [0:0] tmp_19_fu_1365_p3;
wire   [7:0] x_assign_4_fu_1373_p3;
wire   [0:0] tmp_20_fu_1381_p3;
wire   [7:0] xor_ln132_10_fu_1389_p2;
wire   [7:0] select_ln131_10_fu_1395_p3;
wire   [0:0] tmp_22_fu_1424_p3;
wire   [7:0] xor_ln132_11_fu_1432_p2;
wire   [7:0] select_ln131_11_fu_1438_p3;
wire   [6:0] trunc_ln134_11_fu_1446_p1;
wire   [0:0] tmp_23_fu_1450_p3;
wire   [0:0] tmp_36_fu_1466_p3;
wire   [7:0] xor_ln132_18_fu_1474_p2;
wire   [7:0] select_ln131_18_fu_1480_p3;
wire   [6:0] trunc_ln134_18_fu_1488_p1;
wire   [0:0] tmp_37_fu_1492_p3;
wire   [7:0] x_assign_11_fu_1500_p3;
wire   [0:0] tmp_38_fu_1508_p3;
wire   [7:0] xor_ln132_19_fu_1516_p2;
wire   [7:0] select_ln131_19_fu_1522_p3;
wire   [0:0] tmp_24_fu_1542_p3;
wire   [7:0] xor_ln132_12_fu_1550_p2;
wire   [7:0] select_ln131_12_fu_1556_p3;
wire   [6:0] trunc_ln134_12_fu_1564_p1;
wire   [0:0] tmp_25_fu_1568_p3;
wire   [0:0] tmp_26_fu_1584_p3;
wire   [7:0] xor_ln132_13_fu_1592_p2;
wire   [7:0] select_ln131_13_fu_1598_p3;
wire   [6:0] trunc_ln134_13_fu_1606_p1;
wire   [0:0] tmp_27_fu_1610_p3;
wire   [7:0] x_assign_8_fu_1618_p3;
wire   [0:0] tmp_28_fu_1626_p3;
wire   [7:0] xor_ln132_14_fu_1634_p2;
wire   [7:0] select_ln131_14_fu_1640_p3;
wire   [7:0] xor_ln124_36_fu_1672_p2;
wire   [7:0] or_ln134_1_fu_1660_p3;
wire   [7:0] xor_ln124_38_fu_1684_p2;
wire   [7:0] or_ln134_3_fu_1666_p3;
wire   [7:0] xor_ln124_39_fu_1689_p2;
wire   [7:0] xor_ln124_37_fu_1678_p2;
wire   [7:0] xor_ln124_44_fu_1706_p2;
wire   [7:0] xor_ln124_45_fu_1711_p2;
wire   [7:0] xor_ln124_43_fu_1701_p2;
wire   [7:0] xor_ln124_32_fu_1736_p2;
wire   [7:0] or_ln134_9_fu_1724_p3;
wire   [7:0] xor_ln124_34_fu_1747_p2;
wire   [7:0] or_ln134_s_fu_1730_p3;
wire   [7:0] xor_ln124_35_fu_1752_p2;
wire   [7:0] xor_ln124_33_fu_1741_p2;
wire   [7:0] xor_ln124_41_fu_1769_p2;
wire   [7:0] xor_ln124_42_fu_1774_p2;
wire   [7:0] xor_ln124_40_fu_1765_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_done_reg = 1'b0;
end

clefia_dec_clefia_dec_Pipeline_ClefiaGfn4Inv_label5_clefia_s0_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s0_address0),
    .ce0(clefia_s0_ce0),
    .q0(clefia_s0_q0)
);

clefia_dec_clefia_dec_Pipeline_ClefiaGfn4Inv_label5_clefia_s1_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
clefia_s1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(clefia_s1_address0),
    .ce0(clefia_s1_ce0),
    .q0(clefia_s1_q0)
);

clefia_dec_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage12),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        idx104_i_fu_128 <= 9'd0;
    end else if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        idx104_i_fu_128 <= add_ln216_reg_2277;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        r_assign_fu_132 <= 5'd25;
    end else if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        r_assign_fu_132 <= add_ln213_fu_1791_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln216_reg_2277 <= add_ln216_fu_1786_p2;
        xor_ln124_16_reg_2266 <= xor_ln124_16_fu_1758_p2;
        xor_ln124_18_reg_2271 <= xor_ln124_18_fu_1780_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        empty_reg_1836 <= empty_fu_573_p1;
        idx104_i_load_reg_1819 <= ap_sig_allocacmp_idx104_i_load;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fin_load_10_reg_2025 <= fin_q1;
        fin_load_11_reg_2032 <= fin_q0;
        icmp_ln217_reg_2039 <= icmp_ln217_fu_816_p2;
        r_assign_load_reg_1979 <= r_assign_fu_132;
        tmp_15_reg_2015 <= select_ln131_7_fu_786_p3[32'd7];
        trunc_ln134_7_reg_2010 <= trunc_ln134_7_fu_794_p1;
        x_assign_s_reg_2004 <= x_assign_s_fu_764_p3;
        xor_ln124_3_reg_1994 <= xor_ln124_3_fu_721_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        fin_load_14_reg_2204 <= fin_q1;
        fin_load_15_reg_2209 <= fin_q0;
        tmp_21_reg_2193 <= select_ln131_10_fu_1395_p3[32'd7];
        trunc_ln134_10_reg_2188 <= trunc_ln134_10_fu_1403_p1;
        xor_ln124_15_reg_2178 <= xor_ln124_15_fu_1288_p2;
        xor_ln180_reg_2198 <= xor_ln180_fu_1415_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        fin_load_1_reg_1878 <= fin_q0;
        fin_load_reg_1862 <= fin_q1;
        xor_ln124_reg_1868 <= xor_ln124_fu_588_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fin_load_2_reg_1905 <= fin_q1;
        fin_load_3_reg_1912 <= fin_q0;
        xor_ln124_1_reg_1895 <= xor_ln124_1_fu_604_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fin_load_8_reg_1965 <= fin_q1;
        fin_load_9_reg_1972 <= fin_q0;
        tmp_13_reg_1960 <= select_ln131_6_fu_698_p3[32'd7];
        trunc_ln134_6_reg_1955 <= trunc_ln134_6_fu_706_p1;
        x_assign_2_reg_1949 <= x_assign_2_fu_676_p3;
        xor_ln124_2_reg_1934 <= xor_ln124_2_fu_623_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_544 <= clefia_s0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_548 <= clefia_s1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_552 <= fin_q1;
        reg_556 <= fin_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_29_reg_2250 <= select_ln131_14_fu_1640_p3[32'd7];
        trunc_ln134_14_reg_2245 <= trunc_ln134_14_fu_1648_p1;
        x_assign_7_reg_2240 <= x_assign_7_fu_1576_p3;
        xor_ln124_17_reg_2255 <= xor_ln124_17_fu_1695_p2;
        xor_ln124_19_reg_2261 <= xor_ln124_19_fu_1717_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_35_reg_2173 <= select_ln131_17_fu_1268_p3[32'd7];
        trunc_ln134_17_reg_2168 <= trunc_ln134_17_fu_1276_p1;
        x_assign_9_reg_2163 <= x_assign_9_fu_1204_p3;
        xor_ln124_14_reg_2148 <= xor_ln124_14_fu_1151_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_39_reg_2235 <= select_ln131_19_fu_1522_p3[32'd7];
        trunc_ln134_19_reg_2230 <= trunc_ln134_19_fu_1530_p1;
        x_assign_5_reg_2224 <= x_assign_5_fu_1458_p3;
        z_6_reg_2214 <= clefia_s1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_5_reg_2074 <= select_ln131_2_fu_882_p3[32'd7];
        trunc_ln134_2_reg_2069 <= trunc_ln134_2_fu_890_p1;
        x_assign_6_reg_2063 <= x_assign_6_fu_860_p3;
        xor_ln124_12_reg_2079 <= xor_ln124_12_fu_902_p2;
        z_2_reg_2053 <= clefia_s0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        xor_ln124_10_reg_2111 <= xor_ln124_10_fu_1098_p2;
        xor_ln124_11_reg_2117 <= xor_ln124_11_fu_1126_p2;
        xor_ln124_13_reg_2123 <= xor_ln124_13_fu_1132_p2;
        xor_ln124_8_reg_2099 <= xor_ln124_8_fu_1042_p2;
        xor_ln124_9_reg_2105 <= xor_ln124_9_fu_1070_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_condition_exit_pp0_iter0_stage12 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage12 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_idx104_i_load = 9'd0;
    end else begin
        ap_sig_allocacmp_idx104_i_load = idx104_i_fu_128;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        clefia_s0_address0 = zext_ln176_fu_1420_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        clefia_s0_address0 = zext_ln174_fu_1166_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        clefia_s0_address0 = zext_ln152_fu_726_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        clefia_s0_address0 = zext_ln150_fu_619_p1;
    end else begin
        clefia_s0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        clefia_s0_ce0 = 1'b1;
    end else begin
        clefia_s0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        clefia_s1_address0 = zext_ln175_fu_1293_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        clefia_s1_address0 = zext_ln173_fu_1147_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        clefia_s1_address0 = zext_ln153_fu_822_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        clefia_s1_address0 = zext_ln151_fu_638_p1;
    end else begin
        clefia_s1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        clefia_s1_ce0 = 1'b1;
    end else begin
        clefia_s1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_address0 = 64'd0;
    end else if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        fin_address0 = fin_addr_12_reg_1852;
    end else if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fin_address0 = fin_addr_4_reg_1924;
    end else if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        fin_address0 = fin_addr_6_reg_1885;
    end else if (((1'b1 == ap_CS_fsm_state8) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        fin_address0 = 64'd15;
    end else if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        fin_address0 = 64'd13;
    end else if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        fin_address0 = 64'd7;
    end else if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln217_fu_816_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        fin_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        fin_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fin_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fin_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fin_address0 = 64'd1;
    end else begin
        fin_address0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_address1 = fin_addr_13_reg_1857;
    end else if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_address1 = 64'd1;
    end else if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fin_address1 = fin_addr_5_reg_1929;
    end else if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        fin_address1 = fin_addr_7_reg_1890;
    end else if (((1'b1 == ap_CS_fsm_state8) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        fin_address1 = 64'd14;
    end else if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        fin_address1 = 64'd12;
    end else if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        fin_address1 = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln217_fu_816_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        fin_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        fin_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fin_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fin_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fin_address1 = 64'd0;
    end else begin
        fin_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((icmp_ln217_fu_816_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        fin_ce0 = 1'b1;
    end else begin
        fin_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((icmp_ln217_fu_816_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        fin_ce1 = 1'b1;
    end else begin
        fin_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_d0 = xor_ln124_16_fu_1758_p2;
    end else if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        fin_d0 = xor_ln124_19_fu_1717_p2;
    end else if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fin_d0 = xor_ln124_11_reg_2117;
    end else if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        fin_d0 = xor_ln124_9_reg_2105;
    end else if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        fin_d0 = fin_load_11_reg_2032;
    end else if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        fin_d0 = fin_load_9_reg_1972;
    end else if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        fin_d0 = fin_load_3_reg_1912;
    end else if (((icmp_ln217_fu_816_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        fin_d0 = fin_load_1_reg_1878;
    end else begin
        fin_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_d1 = xor_ln124_18_reg_2271;
    end else if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        fin_d1 = xor_ln124_17_reg_2255;
    end else if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        fin_d1 = xor_ln124_10_reg_2111;
    end else if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        fin_d1 = xor_ln124_8_reg_2099;
    end else if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        fin_d1 = fin_load_10_reg_2025;
    end else if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        fin_d1 = fin_load_8_reg_1965;
    end else if (((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        fin_d1 = fin_load_2_reg_1905;
    end else if (((icmp_ln217_fu_816_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        fin_d1 = fin_load_reg_1862;
    end else begin
        fin_d1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_10_out_ap_vld = 1'b1;
    end else begin
        fin_load_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_11_out_ap_vld = 1'b1;
    end else begin
        fin_load_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_1_out_ap_vld = 1'b1;
    end else begin
        fin_load_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_2_out_ap_vld = 1'b1;
    end else begin
        fin_load_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_3_out_ap_vld = 1'b1;
    end else begin
        fin_load_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_8_out_ap_vld = 1'b1;
    end else begin
        fin_load_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_9_out_ap_vld = 1'b1;
    end else begin
        fin_load_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        fin_load_out_ap_vld = 1'b1;
    end else begin
        fin_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln217_fu_816_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        fin_we0 = 1'b1;
    end else begin
        fin_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln217_fu_816_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln217_reg_2039 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        fin_we1 = 1'b1;
    end else begin
        fin_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        rk_address0 = zext_ln121_7_fu_1161_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        rk_address0 = zext_ln121_6_fu_1142_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rk_address0 = zext_ln121_5_fu_912_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        rk_address0 = zext_ln121_4_fu_811_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rk_address0 = zext_ln121_3_fu_633_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rk_address0 = zext_ln121_2_fu_614_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rk_address0 = zext_ln121_1_fu_599_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        rk_address0 = zext_ln121_fu_583_p1;
    end else begin
        rk_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        rk_ce0 = 1'b1;
    end else begin
        rk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_10_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_11_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_16_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_16_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_17_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_17_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_18_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_18_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_19_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_19_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_8_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln217_reg_2039 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        xor_ln124_9_out_ap_vld = 1'b1;
    end else begin
        xor_ln124_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln121_1_fu_594_p2 = ($signed(empty_reg_1836) + $signed(8'd209));

assign add_ln121_2_fu_609_p2 = ($signed(empty_reg_1836) + $signed(8'd210));

assign add_ln121_3_fu_628_p2 = ($signed(empty_reg_1836) + $signed(8'd211));

assign add_ln121_4_fu_806_p2 = ($signed(empty_reg_1836) + $signed(8'd212));

assign add_ln121_5_fu_907_p2 = ($signed(empty_reg_1836) + $signed(8'd213));

assign add_ln121_6_fu_1137_p2 = ($signed(empty_reg_1836) + $signed(8'd214));

assign add_ln121_7_fu_1156_p2 = ($signed(empty_reg_1836) + $signed(8'd215));

assign add_ln121_fu_577_p2 = ($signed(empty_fu_573_p1) + $signed(8'd208));

assign add_ln213_fu_1791_p2 = ($signed(r_assign_load_reg_1979) + $signed(5'd31));

assign add_ln216_fu_1786_p2 = ($signed(idx104_i_load_reg_1819) + $signed(9'd504));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage12;

assign empty_fu_573_p1 = ap_sig_allocacmp_idx104_i_load[7:0];

assign fin_addr_12_reg_1852 = 64'd3;

assign fin_addr_13_reg_1857 = 64'd2;

assign fin_addr_4_reg_1924 = 64'd11;

assign fin_addr_5_reg_1929 = 64'd10;

assign fin_addr_6_reg_1885 = 64'd9;

assign fin_addr_7_reg_1890 = 64'd8;

assign fin_load_10_out = fin_load_10_reg_2025;

assign fin_load_11_out = fin_load_11_reg_2032;

assign fin_load_1_out = fin_load_1_reg_1878;

assign fin_load_2_out = fin_load_2_reg_1905;

assign fin_load_3_out = fin_load_3_reg_1912;

assign fin_load_8_out = fin_load_8_reg_1965;

assign fin_load_9_out = fin_load_9_reg_1972;

assign fin_load_out = fin_load_reg_1862;

assign icmp_ln217_fu_816_p2 = ((r_assign_fu_132 == 5'd0) ? 1'b1 : 1'b0);

assign or_ln134_1_fu_1660_p3 = {{trunc_ln134_17_reg_2168}, {tmp_35_reg_2173}};

assign or_ln134_2_fu_917_p3 = {{trunc_ln134_2_reg_2069}, {tmp_5_reg_2074}};

assign or_ln134_3_fu_1666_p3 = {{trunc_ln134_19_reg_2230}, {tmp_39_reg_2235}};

assign or_ln134_4_fu_999_p3 = {{trunc_ln134_4_fu_987_p1}, {tmp_9_fu_991_p3}};

assign or_ln134_6_fu_1007_p3 = {{trunc_ln134_6_reg_1955}, {tmp_13_reg_1960}};

assign or_ln134_9_fu_1724_p3 = {{trunc_ln134_10_reg_2188}, {tmp_21_reg_2193}};

assign or_ln134_s_fu_1730_p3 = {{trunc_ln134_14_reg_2245}, {tmp_29_reg_2250}};

assign or_ln1_fu_1013_p3 = {{trunc_ln134_7_reg_2010}, {tmp_15_reg_2015}};

assign select_ln131_10_fu_1395_p3 = ((tmp_20_fu_1381_p3[0:0] == 1'b1) ? xor_ln132_10_fu_1389_p2 : x_assign_4_fu_1373_p3);

assign select_ln131_11_fu_1438_p3 = ((tmp_22_fu_1424_p3[0:0] == 1'b1) ? xor_ln132_11_fu_1432_p2 : clefia_s1_q0);

assign select_ln131_12_fu_1556_p3 = ((tmp_24_fu_1542_p3[0:0] == 1'b1) ? xor_ln132_12_fu_1550_p2 : clefia_s0_q0);

assign select_ln131_13_fu_1598_p3 = ((tmp_26_fu_1584_p3[0:0] == 1'b1) ? xor_ln132_13_fu_1592_p2 : x_assign_7_fu_1576_p3);

assign select_ln131_14_fu_1640_p3 = ((tmp_28_fu_1626_p3[0:0] == 1'b1) ? xor_ln132_14_fu_1634_p2 : x_assign_8_fu_1618_p3);

assign select_ln131_15_fu_1184_p3 = ((tmp_30_fu_1170_p3[0:0] == 1'b1) ? xor_ln132_15_fu_1178_p2 : clefia_s1_q0);

assign select_ln131_16_fu_1226_p3 = ((tmp_32_fu_1212_p3[0:0] == 1'b1) ? xor_ln132_16_fu_1220_p2 : x_assign_9_fu_1204_p3);

assign select_ln131_17_fu_1268_p3 = ((tmp_34_fu_1254_p3[0:0] == 1'b1) ? xor_ln132_17_fu_1262_p2 : x_assign_10_fu_1246_p3);

assign select_ln131_18_fu_1480_p3 = ((tmp_36_fu_1466_p3[0:0] == 1'b1) ? xor_ln132_18_fu_1474_p2 : x_assign_5_fu_1458_p3);

assign select_ln131_19_fu_1522_p3 = ((tmp_38_fu_1508_p3[0:0] == 1'b1) ? xor_ln132_19_fu_1516_p2 : x_assign_11_fu_1500_p3);

assign select_ln131_1_fu_840_p3 = ((tmp_2_fu_826_p3[0:0] == 1'b1) ? xor_ln132_1_fu_834_p2 : clefia_s0_q0);

assign select_ln131_2_fu_882_p3 = ((tmp_4_fu_868_p3[0:0] == 1'b1) ? xor_ln132_2_fu_876_p2 : x_assign_6_fu_860_p3);

assign select_ln131_3_fu_937_p3 = ((tmp_6_fu_923_p3[0:0] == 1'b1) ? xor_ln132_3_fu_931_p2 : clefia_s1_q0);

assign select_ln131_4_fu_979_p3 = ((tmp_8_fu_965_p3[0:0] == 1'b1) ? xor_ln132_4_fu_973_p2 : x_assign_1_fu_957_p3);

assign select_ln131_5_fu_656_p3 = ((tmp_10_fu_642_p3[0:0] == 1'b1) ? xor_ln132_5_fu_650_p2 : clefia_s0_q0);

assign select_ln131_6_fu_698_p3 = ((tmp_12_fu_684_p3[0:0] == 1'b1) ? xor_ln132_6_fu_692_p2 : x_assign_2_fu_676_p3);

assign select_ln131_7_fu_786_p3 = ((tmp_14_fu_772_p3[0:0] == 1'b1) ? xor_ln132_7_fu_780_p2 : x_assign_s_fu_764_p3);

assign select_ln131_8_fu_1311_p3 = ((tmp_16_fu_1297_p3[0:0] == 1'b1) ? xor_ln132_8_fu_1305_p2 : clefia_s0_q0);

assign select_ln131_9_fu_1353_p3 = ((tmp_18_fu_1339_p3[0:0] == 1'b1) ? xor_ln132_9_fu_1347_p2 : x_assign_3_fu_1331_p3);

assign select_ln131_fu_744_p3 = ((tmp_fu_730_p3[0:0] == 1'b1) ? xor_ln132_fu_738_p2 : clefia_s1_q0);

assign tmp_10_fu_642_p3 = clefia_s0_q0[32'd7];

assign tmp_11_fu_668_p3 = select_ln131_5_fu_656_p3[32'd7];

assign tmp_12_fu_684_p3 = select_ln131_5_fu_656_p3[32'd6];

assign tmp_14_fu_772_p3 = select_ln131_fu_744_p3[32'd6];

assign tmp_16_fu_1297_p3 = clefia_s0_q0[32'd7];

assign tmp_17_fu_1323_p3 = select_ln131_8_fu_1311_p3[32'd7];

assign tmp_18_fu_1339_p3 = select_ln131_8_fu_1311_p3[32'd6];

assign tmp_19_fu_1365_p3 = select_ln131_9_fu_1353_p3[32'd7];

assign tmp_1_fu_756_p3 = select_ln131_fu_744_p3[32'd7];

assign tmp_20_fu_1381_p3 = select_ln131_9_fu_1353_p3[32'd6];

assign tmp_22_fu_1424_p3 = clefia_s1_q0[32'd7];

assign tmp_23_fu_1450_p3 = select_ln131_11_fu_1438_p3[32'd7];

assign tmp_24_fu_1542_p3 = clefia_s0_q0[32'd7];

assign tmp_25_fu_1568_p3 = select_ln131_12_fu_1556_p3[32'd7];

assign tmp_26_fu_1584_p3 = select_ln131_12_fu_1556_p3[32'd6];

assign tmp_27_fu_1610_p3 = select_ln131_13_fu_1598_p3[32'd7];

assign tmp_28_fu_1626_p3 = select_ln131_13_fu_1598_p3[32'd6];

assign tmp_2_fu_826_p3 = clefia_s0_q0[32'd7];

assign tmp_30_fu_1170_p3 = clefia_s1_q0[32'd7];

assign tmp_31_fu_1196_p3 = select_ln131_15_fu_1184_p3[32'd7];

assign tmp_32_fu_1212_p3 = select_ln131_15_fu_1184_p3[32'd6];

assign tmp_33_fu_1238_p3 = select_ln131_16_fu_1226_p3[32'd7];

assign tmp_34_fu_1254_p3 = select_ln131_16_fu_1226_p3[32'd6];

assign tmp_36_fu_1466_p3 = select_ln131_11_fu_1438_p3[32'd6];

assign tmp_37_fu_1492_p3 = select_ln131_18_fu_1480_p3[32'd7];

assign tmp_38_fu_1508_p3 = select_ln131_18_fu_1480_p3[32'd6];

assign tmp_3_fu_852_p3 = select_ln131_1_fu_840_p3[32'd7];

assign tmp_4_fu_868_p3 = select_ln131_1_fu_840_p3[32'd6];

assign tmp_6_fu_923_p3 = clefia_s1_q0[32'd7];

assign tmp_7_fu_949_p3 = select_ln131_3_fu_937_p3[32'd7];

assign tmp_8_fu_965_p3 = select_ln131_3_fu_937_p3[32'd6];

assign tmp_9_fu_991_p3 = select_ln131_4_fu_979_p3[32'd7];

assign tmp_fu_730_p3 = clefia_s1_q0[32'd7];

assign trunc_ln134_10_fu_1403_p1 = select_ln131_10_fu_1395_p3[6:0];

assign trunc_ln134_11_fu_1446_p1 = select_ln131_11_fu_1438_p3[6:0];

assign trunc_ln134_12_fu_1564_p1 = select_ln131_12_fu_1556_p3[6:0];

assign trunc_ln134_13_fu_1606_p1 = select_ln131_13_fu_1598_p3[6:0];

assign trunc_ln134_14_fu_1648_p1 = select_ln131_14_fu_1640_p3[6:0];

assign trunc_ln134_15_fu_1192_p1 = select_ln131_15_fu_1184_p3[6:0];

assign trunc_ln134_16_fu_1234_p1 = select_ln131_16_fu_1226_p3[6:0];

assign trunc_ln134_17_fu_1276_p1 = select_ln131_17_fu_1268_p3[6:0];

assign trunc_ln134_18_fu_1488_p1 = select_ln131_18_fu_1480_p3[6:0];

assign trunc_ln134_19_fu_1530_p1 = select_ln131_19_fu_1522_p3[6:0];

assign trunc_ln134_1_fu_848_p1 = select_ln131_1_fu_840_p3[6:0];

assign trunc_ln134_2_fu_890_p1 = select_ln131_2_fu_882_p3[6:0];

assign trunc_ln134_3_fu_945_p1 = select_ln131_3_fu_937_p3[6:0];

assign trunc_ln134_4_fu_987_p1 = select_ln131_4_fu_979_p3[6:0];

assign trunc_ln134_5_fu_664_p1 = select_ln131_5_fu_656_p3[6:0];

assign trunc_ln134_6_fu_706_p1 = select_ln131_6_fu_698_p3[6:0];

assign trunc_ln134_7_fu_794_p1 = select_ln131_7_fu_786_p3[6:0];

assign trunc_ln134_8_fu_1319_p1 = select_ln131_8_fu_1311_p3[6:0];

assign trunc_ln134_9_fu_1361_p1 = select_ln131_9_fu_1353_p3[6:0];

assign trunc_ln134_fu_752_p1 = select_ln131_fu_744_p3[6:0];

assign x_assign_10_fu_1246_p3 = {{trunc_ln134_16_fu_1234_p1}, {tmp_33_fu_1238_p3}};

assign x_assign_11_fu_1500_p3 = {{trunc_ln134_18_fu_1488_p1}, {tmp_37_fu_1492_p3}};

assign x_assign_1_fu_957_p3 = {{trunc_ln134_3_fu_945_p1}, {tmp_7_fu_949_p3}};

assign x_assign_2_fu_676_p3 = {{trunc_ln134_5_fu_664_p1}, {tmp_11_fu_668_p3}};

assign x_assign_3_fu_1331_p3 = {{trunc_ln134_8_fu_1319_p1}, {tmp_17_fu_1323_p3}};

assign x_assign_4_fu_1373_p3 = {{trunc_ln134_9_fu_1361_p1}, {tmp_19_fu_1365_p3}};

assign x_assign_5_fu_1458_p3 = {{trunc_ln134_11_fu_1446_p1}, {tmp_23_fu_1450_p3}};

assign x_assign_6_fu_860_p3 = {{trunc_ln134_1_fu_848_p1}, {tmp_3_fu_852_p3}};

assign x_assign_7_fu_1576_p3 = {{trunc_ln134_12_fu_1564_p1}, {tmp_25_fu_1568_p3}};

assign x_assign_8_fu_1618_p3 = {{trunc_ln134_13_fu_1606_p1}, {tmp_27_fu_1610_p3}};

assign x_assign_9_fu_1204_p3 = {{trunc_ln134_15_fu_1192_p1}, {tmp_31_fu_1196_p3}};

assign x_assign_s_fu_764_p3 = {{trunc_ln134_fu_752_p1}, {tmp_1_fu_756_p3}};

assign xor_ln124_10_fu_1098_p2 = (xor_ln124_27_fu_1092_p2 ^ xor_ln124_25_fu_1082_p2);

assign xor_ln124_10_out = xor_ln124_10_reg_2111;

assign xor_ln124_11_fu_1126_p2 = (xor_ln124_31_fu_1121_p2 ^ xor_ln124_29_fu_1110_p2);

assign xor_ln124_11_out = xor_ln124_11_reg_2117;

assign xor_ln124_12_fu_902_p2 = (rk_q0 ^ fin_load_8_reg_1965);

assign xor_ln124_13_fu_1132_p2 = (rk_q0 ^ fin_load_9_reg_1972);

assign xor_ln124_14_fu_1151_p2 = (rk_q0 ^ fin_load_10_reg_2025);

assign xor_ln124_15_fu_1288_p2 = (rk_q0 ^ fin_load_11_reg_2032);

assign xor_ln124_16_fu_1758_p2 = (xor_ln124_35_fu_1752_p2 ^ xor_ln124_33_fu_1741_p2);

assign xor_ln124_16_out = xor_ln124_16_reg_2266;

assign xor_ln124_17_fu_1695_p2 = (xor_ln124_39_fu_1689_p2 ^ xor_ln124_37_fu_1678_p2);

assign xor_ln124_17_out = xor_ln124_17_reg_2255;

assign xor_ln124_18_fu_1780_p2 = (xor_ln124_42_fu_1774_p2 ^ xor_ln124_40_fu_1765_p2);

assign xor_ln124_18_out = xor_ln124_18_reg_2271;

assign xor_ln124_19_fu_1717_p2 = (xor_ln124_45_fu_1711_p2 ^ xor_ln124_43_fu_1701_p2);

assign xor_ln124_19_out = xor_ln124_19_reg_2261;

assign xor_ln124_1_fu_604_p2 = (rk_q0 ^ fin_load_1_reg_1878);

assign xor_ln124_20_fu_1048_p2 = (reg_556 ^ or_ln134_2_fu_917_p3);

assign xor_ln124_21_fu_1054_p2 = (xor_ln124_20_fu_1048_p2 ^ reg_548);

assign xor_ln124_22_fu_1060_p2 = (x_assign_6_reg_2063 ^ x_assign_2_reg_1949);

assign xor_ln124_23_fu_1064_p2 = (xor_ln124_22_fu_1060_p2 ^ or_ln134_4_fu_999_p3);

assign xor_ln124_24_fu_1076_p2 = (or_ln1_fu_1013_p3 ^ fin_q1);

assign xor_ln124_25_fu_1082_p2 = (z_2_reg_2053 ^ xor_ln124_24_fu_1076_p2);

assign xor_ln124_26_fu_1087_p2 = (x_assign_s_reg_2004 ^ or_ln134_6_fu_1007_p3);

assign xor_ln124_27_fu_1092_p2 = (xor_ln124_26_fu_1087_p2 ^ x_assign_1_fu_957_p3);

assign xor_ln124_28_fu_1104_p2 = (or_ln1_fu_1013_p3 ^ fin_q0);

assign xor_ln124_29_fu_1110_p2 = (xor_ln124_28_fu_1104_p2 ^ clefia_s1_q0);

assign xor_ln124_2_fu_623_p2 = (rk_q0 ^ fin_load_2_reg_1905);

assign xor_ln124_30_fu_1116_p2 = (x_assign_2_reg_1949 ^ or_ln134_6_fu_1007_p3);

assign xor_ln124_31_fu_1121_p2 = (xor_ln124_30_fu_1116_p2 ^ x_assign_6_reg_2063);

assign xor_ln124_32_fu_1736_p2 = (x_assign_7_reg_2240 ^ reg_552);

assign xor_ln124_33_fu_1741_p2 = (xor_ln124_32_fu_1736_p2 ^ reg_548);

assign xor_ln124_34_fu_1747_p2 = (x_assign_5_reg_2224 ^ or_ln134_9_fu_1724_p3);

assign xor_ln124_35_fu_1752_p2 = (xor_ln124_34_fu_1747_p2 ^ or_ln134_s_fu_1730_p3);

assign xor_ln124_36_fu_1672_p2 = (x_assign_7_fu_1576_p3 ^ reg_556);

assign xor_ln124_37_fu_1678_p2 = (xor_ln124_36_fu_1672_p2 ^ reg_544);

assign xor_ln124_38_fu_1684_p2 = (x_assign_5_reg_2224 ^ or_ln134_1_fu_1660_p3);

assign xor_ln124_39_fu_1689_p2 = (xor_ln124_38_fu_1684_p2 ^ or_ln134_3_fu_1666_p3);

assign xor_ln124_3_fu_721_p2 = (rk_q0 ^ fin_load_3_reg_1912);

assign xor_ln124_40_fu_1765_p2 = (z_6_reg_2214 ^ fin_load_14_reg_2204);

assign xor_ln124_41_fu_1769_p2 = (xor_ln180_reg_2198 ^ or_ln134_s_fu_1730_p3);

assign xor_ln124_42_fu_1774_p2 = (xor_ln124_41_fu_1769_p2 ^ or_ln134_9_fu_1724_p3);

assign xor_ln124_43_fu_1701_p2 = (fin_load_15_reg_2209 ^ clefia_s0_q0);

assign xor_ln124_44_fu_1706_p2 = (xor_ln180_reg_2198 ^ or_ln134_3_fu_1666_p3);

assign xor_ln124_45_fu_1711_p2 = (xor_ln124_44_fu_1706_p2 ^ or_ln134_1_fu_1660_p3);

assign xor_ln124_4_fu_1019_p2 = (x_assign_1_fu_957_p3 ^ reg_552);

assign xor_ln124_5_fu_1025_p2 = (xor_ln124_4_fu_1019_p2 ^ reg_544);

assign xor_ln124_6_fu_1031_p2 = (x_assign_s_reg_2004 ^ or_ln134_2_fu_917_p3);

assign xor_ln124_7_fu_1036_p2 = (xor_ln124_6_fu_1031_p2 ^ or_ln134_4_fu_999_p3);

assign xor_ln124_8_fu_1042_p2 = (xor_ln124_7_fu_1036_p2 ^ xor_ln124_5_fu_1025_p2);

assign xor_ln124_8_out = xor_ln124_8_reg_2099;

assign xor_ln124_9_fu_1070_p2 = (xor_ln124_23_fu_1064_p2 ^ xor_ln124_21_fu_1054_p2);

assign xor_ln124_9_out = xor_ln124_9_reg_2105;

assign xor_ln124_fu_588_p2 = (rk_q0 ^ fin_q1);

assign xor_ln132_10_fu_1389_p2 = (x_assign_4_fu_1373_p3 ^ 8'd14);

assign xor_ln132_11_fu_1432_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_12_fu_1550_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_13_fu_1592_p2 = (x_assign_7_fu_1576_p3 ^ 8'd14);

assign xor_ln132_14_fu_1634_p2 = (x_assign_8_fu_1618_p3 ^ 8'd14);

assign xor_ln132_15_fu_1178_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_16_fu_1220_p2 = (x_assign_9_fu_1204_p3 ^ 8'd14);

assign xor_ln132_17_fu_1262_p2 = (x_assign_10_fu_1246_p3 ^ 8'd14);

assign xor_ln132_18_fu_1474_p2 = (x_assign_5_fu_1458_p3 ^ 8'd14);

assign xor_ln132_19_fu_1516_p2 = (x_assign_11_fu_1500_p3 ^ 8'd14);

assign xor_ln132_1_fu_834_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_2_fu_876_p2 = (x_assign_6_fu_860_p3 ^ 8'd14);

assign xor_ln132_3_fu_931_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln132_4_fu_973_p2 = (x_assign_1_fu_957_p3 ^ 8'd14);

assign xor_ln132_5_fu_650_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_6_fu_692_p2 = (x_assign_2_fu_676_p3 ^ 8'd14);

assign xor_ln132_7_fu_780_p2 = (x_assign_s_fu_764_p3 ^ 8'd14);

assign xor_ln132_8_fu_1305_p2 = (clefia_s0_q0 ^ 8'd14);

assign xor_ln132_9_fu_1347_p2 = (x_assign_3_fu_1331_p3 ^ 8'd14);

assign xor_ln132_fu_738_p2 = (clefia_s1_q0 ^ 8'd14);

assign xor_ln180_fu_1415_p2 = (x_assign_9_reg_2163 ^ x_assign_3_fu_1331_p3);

assign zext_ln121_1_fu_599_p1 = add_ln121_1_fu_594_p2;

assign zext_ln121_2_fu_614_p1 = add_ln121_2_fu_609_p2;

assign zext_ln121_3_fu_633_p1 = add_ln121_3_fu_628_p2;

assign zext_ln121_4_fu_811_p1 = add_ln121_4_fu_806_p2;

assign zext_ln121_5_fu_912_p1 = add_ln121_5_fu_907_p2;

assign zext_ln121_6_fu_1142_p1 = add_ln121_6_fu_1137_p2;

assign zext_ln121_7_fu_1161_p1 = add_ln121_7_fu_1156_p2;

assign zext_ln121_fu_583_p1 = add_ln121_fu_577_p2;

assign zext_ln150_fu_619_p1 = xor_ln124_reg_1868;

assign zext_ln151_fu_638_p1 = xor_ln124_1_reg_1895;

assign zext_ln152_fu_726_p1 = xor_ln124_2_reg_1934;

assign zext_ln153_fu_822_p1 = xor_ln124_3_reg_1994;

assign zext_ln173_fu_1147_p1 = xor_ln124_12_reg_2079;

assign zext_ln174_fu_1166_p1 = xor_ln124_13_reg_2123;

assign zext_ln175_fu_1293_p1 = xor_ln124_14_reg_2148;

assign zext_ln176_fu_1420_p1 = xor_ln124_15_reg_2178;

endmodule //clefia_dec_clefia_dec_Pipeline_ClefiaGfn4Inv_label5
