-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Tool Version Limit: 2022.04
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity clefia_dec_rk_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 8; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 224
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of clefia_dec_rk_ROM_AUTO_1R is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00001111", 1 => "00001110", 2 => "00001101", 3 => "00001100", 
    4 => "00001011", 5 => "00001010", 6 => "00001001", 7 => "00001000", 
    8 => "01011000", 9 => "11110000", 10 => "00100000", 11 => "00101001", 
    12 => "00010101", 13 => "01000001", 14 => "00111100", 15 => "11010000", 
    16 => "00011011", 17 => "00001100", 18 => "01000001", 19 => "10100100", 
    20 => "11100100", 21 => "10111010", 22 => "11001101", 23 => "00001111", 
    24 => "01101100", 25 => "01001001", 26 => "10000011", 27 => "10010011", 
    28 => "10001000", 29 => "01000110", 30 => "00100011", 31 => "00011011", 
    32 => "00011111", 33 => "11000111", 34 => "00010110", 35 => "11111100", 
    36 => "01111100", 37 => "10000001", 38 => "10100100", 39 => "01011011", 
    40 => "11111010", 41 => "00110111", 42 => "11000010", 43 => "01011001", 
    44 => "00001110", 45 => "00111101", 46 => "10100010", 47 => "11101110", 
    48 => "10101010", 49 => "11001111", 50 => "10011010", 51 => "10111011", 
    52 => "10001110", 53 => "11000000", 54 => "10101010", 55 => "11011001", 
    56 => "10110000", 57 => "01011011", 58 => "11010111", 59 => "00110111", 
    60 => "10001101", 61 => "11100001", 62 => "11110010", 63 => "11010000", 
    64 => "10001111", 65 => "11111110", 66 => "11100000", 67 => "11110110", 
    68 => "10110111", 69 => "00001011", 70 => "01000111", 71 => "11101010", 
    72 => "01011000", 73 => "00011011", 74 => "00111110", 75 => "00110100", 
    76 => "00000011", 77 => "00100110", 78 => "00111111", 79 => "10001001", 
    80 => "00101111", 81 => "01110001", 82 => "00000000", 83 => "11001101", 
    84 => "00000101", 85 => "11001110", 86 => "11100001", 87 => "01110001", 
    88 => "10110101", 89 => "00100011", 90 => "11010100", 91 => "11101001", 
    92 => "00010111", 93 => "01101101", 94 => "01111100", 95 => "01000100", 
    96 => "01101101", 97 => "01111011", 98 => "10100101", 99 => "11010111", 
    100 => "11110111", 101 => "10010111", 102 => "10110010", 103 => "11110011", 
    104 => "00100101", 105 => "11011000", 106 => "00001101", 107 => "11110010", 
    108 => "10100110", 109 => "01000110", 110 => "10111011", 111 => "10100010", 
    112 => "01101010", 113 => "00111010", 114 => "10010101", 115 => "11100001", 
    116 => "00111110", 117 => "00111010", 118 => "01000111", 119 => "11110000", 
    120 => "10110011", 121 => "00000100", 122 => "11101011", 123 => "00100000", 
    124 => "01000100", 125 => "11111000", 126 => "10000010", 127 => "01001110", 
    128 => "11000111", 129 => "01010101", 130 => "01111100", 131 => "10111100", 
    132 => "01000111", 133 => "01000000", 134 => "00011110", 135 => "00100001", 
    136 => "11010111", 137 => "00011111", 138 => "11110111", 139 => "11101001", 
    140 => "10101100", 141 => "10100001", 142 => "11111011", 143 => "00001100", 
    144 => "00101101", 145 => "11101111", 146 => "11110011", 147 => "01011101", 
    148 => "01101100", 149 => "10100011", 150 => "10101000", 151 => "00110000", 
    152 => "01001101", 153 => "11010111", 154 => "11001111", 155 => "10110111", 
    156 => "10101110", 157 => "01110001", 158 => "11001001", 159 => "11110110", 
    160 => "01001110", 161 => "10010001", 162 => "00011111", 163 => "11101111", 
    164 => "10010000", 165 => "10101010", 166 => "10010101", 167 => "11011110", 
    168 => "00101100", 169 => "01100110", 170 => "01001010", 171 => "01111010", 
    172 => "10001100", 173 => "10110101", 174 => "11001111", 175 => "01101011", 
    176 => "00010100", 177 => "11001000", 178 => "11011110", 179 => "00011110", 
    180 => "01000011", 181 => "10111001", 182 => "11001010", 183 => "11101111", 
    184 => "01010110", 185 => "10001100", 186 => "01011010", 187 => "00110011", 
    188 => "00000111", 189 => "11101111", 190 => "01111101", 191 => "11011101", 
    192 => "01100000", 193 => "10001101", 194 => "11001000", 195 => "01100000", 
    196 => "10101100", 197 => "10011110", 198 => "01010000", 199 => "11111000", 
    200 => "11000000", 201 => "11000001", 202 => "10000011", 203 => "01011000", 
    204 => "01001111", 205 => "01010011", 206 => "11001000", 207 => "00001110", 
    208 => "00110011", 209 => "11100000", 210 => "00011100", 211 => "10111001", 
    212 => "10000000", 213 => "00100101", 214 => "00011110", 215 => "00011100", 
    216 => "00000111", 217 => "00000110", 218 => "00000101", 219 => "00000100", 
    220 => "00000011", 221 => "00000010", 222 => "00000001", 223 => "00000000" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

